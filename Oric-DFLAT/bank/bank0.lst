AS65 Assembler for R6502 [1.42].                                     Page    1
-------------------------------- bank\bank0.s --------------------------------

-------------------------------- Symbol Table --------------------------------

              Symbol   Value        Decimal

                 ACR : $000b             11   *
              AM_ABS : $0001              1   *
           AM_ABSIND : $000a             10   *
          AM_ABSINDX : $000b             11   *
             AM_ABSX : $0002              2   *
             AM_ABSY : $0003              3   *
              AM_ACC : $000d             13   *
              AM_DIR : $0010             16   *
              AM_IMM : $000c             12   *
              AM_IMP : $000d             13   *
             AM_NONE : $0000              0   *
              AM_REL : $000f             15   *
               AM_ZP : $0004              4   *
            AM_ZPIND : $0007              7   *
           AM_ZPINDX : $0008              8   *
           AM_ZPINDY : $0009              9   *
              AM_ZPX : $0005              5   *
              AM_ZPY : $0006              6   *
            asm_init : $fff0          65520
               BANK0 : $0001              1
      bin_to_bcd_bit : $c368          50024
              buf_ef : $003c             60
              buf_hi : $003a             58
              buf_lo : $0039             57
              buf_sz : $003b             59
     CMD_ERR_NOERROR : $0000              0   *
    CMD_ERR_NOTFOUND : $0001              1   *
        CMD_ERR_PARM : $0002              2   *
         CMD_ERR_VAL : $0003              3   *
           CRSR_DOWN : $000a             10   *
           CRSR_LEFT : $0008              8   *
          CRSR_RIGHT : $0009              9   *
             CRSR_UP : $000b             11   *
           CTRL_CAPS : $0014             20   *
        call_irq_brk : $c0d6          49366
     call_irq_master : $c0d3          49363
   call_irq_usercia0 : $c0d9          49369
       cmd_check_cmd : $d4c6          54470
         cmd_check_d : $d4d9          54489
         cmd_check_s : $d4dd          54493
         cmd_dumpmem : $d50d          54541
    cmd_dumpmemASCII : $d531          54577
      cmd_dumpmemFin : $d566          54630
   cmd_dumpmem_ascii : $d543          54595
   cmd_dumpmem_block : $d513          54547
    cmd_dumpmem_byte : $d522          54562
  cmd_dump_skip_ctrl : $d54d          54605
   cmd_dump_skip_del : $d552          54610
           cmd_error : $d4ce          54478
       cmd_find_parm : $d5b1          54705
              cmd_hi : $0096            150   *
          cmd_incmem : $d56d          54637
              cmd_lo : $0095            149   *
   cmd_next_parm_err : $d5bb          54715
       cmd_not_found : $d4e1          54497
           cmd_parse : $d4d8          54488
      cmd_parse_byte : $d582          54658
  cmd_parse_byte_err : $d59c          54684
AS65 Assembler for R6502 [1.42].                                     Page    2
-------------------------------- bank\bank0.s --------------------------------

 cmd_parse_byte_errp : $d59b          54683
 cmd_parse_next_parm : $d5b0          54704
      cmd_parse_word : $d59e          54686
            cmd_peek : $d574          54644
            cmd_poke : $d579          54649
           cmd_ready : $d4b2          54450
          cmd_setmem : $d4e7          54503
     cmd_setmem_byte : $d4ec          54508
      cmd_setmem_err : $d50b          54539
        cmd_word_err : $d5ae          54702
        command_line : $d4b2          54450
       con_bin_digit : $c24d          49741
        con_bin_done : $c263          49763
         con_bin_err : $c26d          49773
         con_bin_jmp : $c1eb          49643
        con_bin_to_a : $c245          49733
    con_bin_to_a_int : $c249          49737
         con_dec_jmp : $c1df          49631
        con_dec_to_a : $c26f          49775
    con_dec_to_a_int : $c273          49779
       con_hex_digit : $c20e          49678
        con_hex_done : $c23b          49723
         con_hex_err : $c239          49721
         con_hex_jmp : $c1e5          49637
  con_hex_skip_x_f_1 : $c21b          49691
        con_hex_to_a : $c206          49670
    con_hex_to_a_int : $c20a          49674
           con_n_err : $c1ee          49646
       con_n_not_dec : $c1e2          49634
       con_n_not_hex : $c1e8          49640
          con_n_to_a : $c1ce          49614
   con_n_to_a_detect : $c1f0          49648
                DDRA : $0003              3   *
                DDRB : $0002              2   *
         DFERR_ABORT : $0012             18   *
         DFERR_BREAK : $000d             13   *
           DFERR_DIM : $0003              3   *
         DFERR_FNAME : $000b             11   *
     DFERR_IMMEDIATE : $0007              7   *
       DFERR_NEXTFOR : $000a             10   *
        DFERR_NODATA : $000e             14   *
          DFERR_NOIF : $0009              9   *
        DFERR_NOLINE : $0010             16   *
         DFERR_NOORG : $0014             20   *
        DFERR_NOPROC : $0005              5   *
            DFERR_OK : $0000              0   *
      DFERR_PROCPARM : $0006              6   *
      DFERR_QUANTITY : $0013             19   *
        DFERR_RETURN : $0011             17   *
       DFERR_STRLONG : $000c             12   *
        DFERR_SYNTAX : $0001              1   *
      DFERR_TYPEMISM : $0002              2   *
    DFERR_UNCLOSEDIF : $0008              8   *
         DFERR_UNTIL : $0004              4   *
          DFERR_WEND : $000f             15   *
          DFRT_ABORT : $0089            137   *
            DFRT_ASM : $0097            151   *
           DFRT_DATA : $0096            150   *
            DFRT_DEF : $0086            134   *
           DFRT_ELSE : $0093            147   *
         DFRT_ELSEIF : $0095            149   *
         DFRT_ENDDEF : $0087            135   *
AS65 Assembler for R6502 [1.42].                                     Page    3
-------------------------------- bank\bank0.s --------------------------------

          DFRT_ENDIF : $0094            148   *
            DFRT_FOR : $008e            142   *
             DFRT_IF : $0092            146   *
           DFRT_NEXT : $008f            143   *
         DFRT_REPEAT : $008c            140   *
         DFRT_RETURN : $0088            136   *
           DFRT_WEND : $0091            145   *
          DFRT_WHILE : $0090            144   *
            DFST_INT : $0003              3   *
            DFST_PTR : $00ff            255   *
            DFST_STR : $0004              4   *
            DFTK_BYT : $0020             32   *
         DFTK_BYTBIN : $0007              7   *
         DFTK_BYTDEC : $0005              5   *
         DFTK_BYTHEX : $0006              6   *
            DFTK_CHR : $0000              0   *
            DFTK_EOL : $0000              0   *
         DFTK_ESCVAL : $0020             32   *
            DFTK_FLT : $0080            128   *
             DFTK_FN : $0002              2   *
            DFTK_INT : $0010             16   *
         DFTK_INTBIN : $000b             11   *
         DFTK_INTDEC : $0009              9   *
         DFTK_INTHEX : $000a             10   *
             DFTK_KW : $0001              1   *
         DFTK_LINLEN : $0000              0   *
         DFTK_LINNUM : $0001              1   *
             DFTK_OP : $0008              8   *
          DFTK_OPMSK : $0007              7   *
           DFTK_PROC : $0012             18   *
          DFTK_RESVC : $000c             12   *
          DFTK_RESVD : $000d             13   *
          DFTK_RESVE : $000e             14   *
          DFTK_RESVF : $000f             15   *
          DFTK_RESV1 : $0001              1   *
          DFTK_RESV2 : $0002              2   *
          DFTK_RESV3 : $0003              3   *
          DFTK_RESV4 : $0004              4   *
          DFTK_RESV8 : $0008              8   *
          DFTK_RTMSK : $00f8            248   *
          DFTK_STEND : $001f             31   *
            DFTK_STR : $0040             64   *
         DFTK_STRLIT : $0010             16   *
          DFTK_STROP : $0004              4   *
          DFTK_TOKEN : $0080            128   *
            DFTK_VAR : $0011             17   *
        DFTK_VARPARM : $0026             38   *
           DFVVT_BYT : $0002              2   *
          DFVVT_DIM1 : $0003              3   *
          DFVVT_DIM2 : $0004              4   *
           DFVVT_FLT : $0008              8   *
            DFVVT_HI : $0002              2   *
           DFVVT_INT : $0001              1   *
            DFVVT_LO : $0001              1   *
          DFVVT_PROC : $0040             64   *
           DFVVT_PTR : $0080            128   *
           DFVVT_STR : $0004              4   *
            DFVVT_SZ : $0008              8   *
          DFVVT_TYPE : $0000              0   *
           DF_MEMTOP : $9800          38912   *
        DF_PROGSTART : $071f           1823   *
          dflat_zp_e : $00ac            172
AS65 Assembler for R6502 [1.42].                                     Page    4
-------------------------------- bank\bank0.s --------------------------------

          dflat_zp_s : $005c             92
     dflat_zp_save_e : $00a2            162
     dflat_zp_save_s : $005c             92
          df_asmadmd : $009d            157
           df_asmlen : $00a1            161
         df_asmopcde : $009e            158
         df_asmoprnd : $009f            159
           df_asmopt : $009c            156
            df_asmpc : $009a            154
  df_asm_altaddrmode : $fd9a          64922
       df_asm_length : $fd89          64905
    df_asm_tokensyms : $fdab          64939
            df_brkpc : $0063             99
           df_brkval : $0065            101
         df_checkkey : $005c             92
         df_checkmsk : $005d             93
            df_clear : $f7cb          63435
          df_currdat : $0095            149
          df_currlin : $0087            135
         df_curstidx : $0081            129
           df_datoff : $0097            151
           df_eolidx : $007f            127
           df_exeoff : $0089            137
           df_ifnest : $0094            148
            df_immed : $005f             95
             df_init : $f7be          63422
          df_initrun : $e1af          57775
       df_lexer_line : $db14          56084
  df_lexer_skip_lnum : $db35          56117
          df_linbuff : $0400           1024
          df_lineidx : $0093            147
          df_lineptr : $0091            145
           df_linoff : $007d            125
           df_memtop : $061d           1565
          df_msg_acc : $f98b          63883
           df_msg_pc : $f987          63879
         df_msg_xreg : $f98e          63886
         df_msg_yreg : $f991          63889
          df_nextlin : $008a            138
         df_nxtstidx : $0080            128
     df_ost_peekType : $f794          63380
       df_ost_popInt : $f79a          63386
     df_ost_popParmX : $f77d          63357
       df_ost_popPtr : $f7a2          63394
       df_ost_popStr : $f79e          63390
      df_ost_pushInt : $f76a          63338
     df_ost_pushIntA : $f76e          63342
    df_ost_pushParmX : $f754          63316
      df_ost_pushPtr : $f779          63353
      df_ost_pushStr : $f775          63349
          df_parmtop : $0078            120
               df_pc : $0061             97
    df_pg_check_line : $e063          57443
df_pg_check_next_line : $e04c          57420
df_pg_copyinputtolinbuff : $e0fe          57598
  df_pg_delete_block : $e0c6          57542
   df_pg_delete_byte : $e0cc          57548
df_pg_delete_next_byte : $e0ed          57581
         df_pg_dflat : $e108          57608
     df_pg_find_line : $e040          57408
    df_pg_getcommand : $e11e          57630
     df_pg_inputline : $e0f6          57590
AS65 Assembler for R6502 [1.42].                                     Page    5
-------------------------------- bank\bank0.s --------------------------------

  df_pg_inputline_ok : $e0fe          57598
 df_pg_insertlinbyte : $e19f          57759
    df_pg_insertline : $e180          57728
  df_pg_insert_block : $e091          57489
   df_pg_insert_byte : $e09d          57501
df_pg_insert_next_byte : $e0bb          57531
   df_pg_line_number : $e160          57696
       df_pg_nothing : $e15f          57695
        df_pg_prompt : $e113          57619
    df_pg_prompt_msg : $e1a8          57768
 df_pg_skip_del_line : $e176          57718
      df_pg_tokenise : $e147          57671
           df_prgend : $0068            104
          df_prgstrt : $0066            102
         df_procargs : $008d            141
          df_procloc : $008e            142
         df_procmode : $008c            140
          df_procptr : $008f            143
df_pr_line_gt_target : $e058          57432
    df_pr_line_match : $e086          57478
              df_raw : $0400           1024
              df_rnd : $0098            152
     df_rst_peekByte : $f733          63283
      df_rst_popByte : $f72a          63274
      df_rst_popWord : $f747          63303
     df_rst_pushByte : $f721          63265
     df_rst_pushWord : $f739          63289
          df_rtspace : $0500           1280
           df_rtstck : $0500           1280
           df_rtstop : $0077            119
         df_rt_abort : $f58d          62861
           df_rt_add : $e772          59250
          df_rt_addr : $f476          62582
         df_rt_aequb : $e84e          59470
      df_rt_aequbFin : $e858          59480
           df_rt_and : $e821          59425
  df_rt_array_exists : $e48a          58506
     df_rt_arry_parm : $e395          58261
    df_rt_arry_parm2 : $e39c          58268
df_rt_arry_parm2_arry2 : $e3b4          58292
df_rt_arry_parm2_skiparry2 : $e3bb          58299
df_rt_arry_parm2_term : $e3a4          58276
           df_rt_asc : $f566          62822
           df_rt_asl : $e7fb          59387
        df_rt_aslbit : $e801          59393
       df_rt_asldone : $e80b          59403
    df_rt_asm_ABSREL : $fcde          64734
    df_rt_asm_AM_ABS : $fcf5          64757
   df_rt_asm_AM_ABSX : $fd02          64770
   df_rt_asm_AM_ABSY : $fcf0          64752
    df_rt_asm_AM_IMM : $fd07          64775
    df_rt_asm_AM_IMP : $fcd9          64729
df_rt_asm_AM_INDIRECT : $fd11          64785
    df_rt_asm_AM_REL : $fcff          64767
  df_rt_asm_AM_ZPIND : $fd37          64823
df_rt_asm_AM_ZPINDORY : $fd27          64807
  df_rt_asm_addrmode : $fcbd          64701
  df_rt_asm_assemble : $fa8e          64142
df_rt_asm_assemble_done : $faa0          64160
 df_rt_asm_check_alt : $fb9a          64410
   df_rt_asm_command : $faa1          64161
      df_rt_asm_data : $faff          64255
AS65 Assembler for R6502 [1.42].                                     Page    6
-------------------------------- bank\bank0.s --------------------------------

 df_rt_asm_data_done : $fb3d          64317
 df_rt_asm_data_next : $fb33          64307
df_rt_asm_data_write : $fb3e          64318
df_rt_asm_data_write_err : $fb6c          64364
df_rt_asm_data_write_hi : $fb5a          64346
df_rt_asm_data_write_skip1 : $fb41          64321
df_rt_asm_data_write_skip2 : $fb5e          64350
        df_rt_asm_db : $faf2          64242
  df_rt_asm_db_start : $faf7          64247
df_rt_asm_decode_token : $f122          61730
df_rt_asm_decode_token_done : $f16f          61807
df_rt_asm_decode_token_keyword : $f134          61748
       df_rt_asm_dir : $fab3          64179
  df_rt_asm_do_label : $fa9d          64157
        df_rt_asm_ds : $fb6e          64366
        df_rt_asm_dw : $faf5          64245
    df_rt_asm_encode : $fbd2          64466
df_rt_asm_encode_print : $fc31          64561
df_rt_asm_encode_skiprel : $fc1a          64538
df_rt_asm_encode_writebyte : $fc20          64544
df_rt_asm_encode_writeword : $fc27          64551
df_rt_asm_err_quantity : $fc1e          64542
df_rt_asm_find_addr_mode : $fd45          64837
df_rt_asm_find_addr_mode_err : $fd5a          64858
df_rt_asm_find_addr_mode_loop : $fd4b          64843
df_rt_asm_get_operand : $fd3a          64826
     df_rt_asm_label : $fac5          64197
      df_rt_asm_mnem : $fb8b          64395
  df_rt_asm_mnem_chk : $fbae          64430
 df_rt_asm_mnem_done : $fbbc          64444
  df_rt_asm_mnem_err : $fbd0          64464
  df_rt_asm_mnem_try : $fb91          64401
       df_rt_asm_opt : $faea          64234
       df_rt_asm_org : $fad8          64216
   df_rt_asm_printCH : $fc98          64664
   df_rt_asm_printCR : $fc8f          64655
 df_rt_asm_printline : $fca5          64677
  df_rt_asm_printOPC : $fc61          64609
  df_rt_asm_printOPR : $fc75          64629
df_rt_asm_printOPR_1 : $fc8a          64650
   df_rt_asm_printPC : $fc51          64593
  df_rt_asm_printSPC : $fc6c          64620
df_rt_asm_print_mmen : $fc41          64577
 df_rt_asm_print_rts : $fc50          64592
df_rt_asm_rel_postive : $fc14          64532
df_rt_asm_skip_to_sym : $fd5d          64861
df_rt_asm_skip_to_sym_done : $fd5c          64860
df_rt_asm_skip_to_sym_end : $fd7a          64890
df_rt_asm_skip_to_sym_next : $fd6b          64875
    df_rt_asm_string : $fb16          64278
 df_rt_asm_string_ch : $fb1d          64285
  df_rt_asm_tokenjmp : $ffe6          65510
        df_rt_assign : $ee5f          61023
    df_rt_assign_str : $ee6c          61036
         df_rt_asubb : $e859          59481
      df_rt_asubbFin : $e866          59494
   df_rt_binlen_skip : $f351          62289
         df_rt_bload : $f2c7          62151
    df_rt_bload_addr : $f2ea          62186
         df_rt_bsave : $f2fa          62202
   df_rt_bsave_parms : $f32f          62255
         df_rt_bsuba : $e867          59495
AS65 Assembler for R6502 [1.42].                                     Page    7
-------------------------------- bank\bank0.s --------------------------------

      df_rt_bsubaFin : $e874          59508
          df_rt_call : $f447          62535
       df_rt_calljsr : $f456          62550
     df_rt_check_pos : $eafa          60154
   df_rt_check_while : $e9a0          59808
           df_rt_chr : $f4be          62654
        df_rt_circle : $ed95          60821
           df_rt_cls : $ecf4          60660
         df_rt_comeq : $e8cf          59599
         df_rt_comgt : $e8c6          59590
        df_rt_comgte : $e8e1          59617
         df_rt_comlt : $e8bd          59581
        df_rt_comlte : $e8d8          59608
       df_rt_comment : $ee70          61040
         df_rt_comne : $e8ea          59626
       df_rt_copyStr : $e357          58199
    df_rt_copyStr_ch : $e359          58201
  df_rt_copyStr_done : $e362          58210
       df_rt_copy_fn : $f227          61991
        df_rt_cursor : $ed69          60777
          df_rt_data : $ee70          61040
 df_rt_datastatement : $eb61          60257
   df_rt_datlinstart : $eb59          60249
    df_rt_datnextlin : $eb67          60263
      df_rt_datumerr : $eb8f          60303
           df_rt_dec : $f503          62723
    df_rt_dec_binlen : $f34b          62283
          df_rt_deek : $f36d          62317
           df_rt_def : $f66b          63083
        df_rt_deferr : $f5c9          62921
  df_rt_def_find_var : $f678          63096
   df_rt_def_got_var : $f68a          63114
df_rt_def_got_varparm : $f687          63111
df_rt_def_initialise_parm : $f6c6          63174
  df_rt_def_load_var : $f6a6          63142
df_rt_def_load_var_done : $f6d9          63193
 df_rt_def_parm_done : $f69e          63134
        df_rt_delete : $f234          62004
           df_rt_dim : $ec69          60521
     df_rt_dim2_mul2 : $ecd6          60630
       df_rt_dim2_nz : $ecc1          60609
     df_rt_dim_alloc : $ecb0          60592
      df_rt_dim_done : $ecf0          60656
       df_rt_dim_err : $ecf2          60658
   df_rt_dim_findesc : $ec6e          60526
      df_rt_dim_loop : $ec6b          60523
      df_rt_dim_main : $ec6a          60522
  df_rt_dim_set_type : $ece5          60645
           df_rt_dir : $f241          62017
           df_rt_div : $e7b9          59321
      df_rt_doassign : $ee62          61026
          df_rt_doke : $f170          61808
        df_rt_doline : $edae          60846
       df_rt_dosound : $f1ba          61882
       df_rt_do_else : $ea6c          60012
      df_rt_do_fname : $f223          61987
       df_rt_elapsed : $f42c          62508
          df_rt_else : $ea1c          59932
        df_rt_elseif : $ea1c          59932
        df_rt_enddef : $f6e3          63203
         df_rt_endif : $ea17          59927
           df_rt_eor : $e83f          59455
AS65 Assembler for R6502 [1.42].                                     Page    8
-------------------------------- bank\bank0.s --------------------------------

           df_rt_eos : $ee72          61042
      df_rt_eos_true : $ee80          61056
            df_rt_eq : $e8a9          59561
        df_rt_escjmp : $e745          59205
      df_rt_eval_byt : $e4a5          58533
   df_rt_eval_bytbin : $e36d          58221
   df_rt_eval_bytdec : $e36d          58221
   df_rt_eval_bythex : $e36d          58221
      df_rt_eval_chr : $e36d          58221
      df_rt_eval_esc : $e2a1          58017
  df_rt_eval_esc_tab : $e2b0          58032
   df_rt_eval_intbin : $e36d          58221
   df_rt_eval_intdec : $e36d          58221
   df_rt_eval_inthex : $e36d          58221
     df_rt_eval_lvar : $e3f6          58358
   df_rt_eval_lvskip : $e3d3          58323
     df_rt_eval_proc : $e4b6          58550
 df_rt_eval_proc_err : $e4c3          58563
      df_rt_eval_ptr : $e4af          58543
 df_rt_eval_reserved : $e379          58233
   df_rt_eval_strlit : $e37b          58235
df_rt_eval_strlit_ch : $e38b          58251
df_rt_eval_strlit_done : $e392          58258
      df_rt_eval_var : $e3c0          58304
df_rt_eval_var_dim2adj : $e43e          58430
df_rt_eval_var_dim2adjx : $e44a          58442
df_rt_eval_var_dim2adjy : $e445          58437
df_rt_eval_var_do_arry : $e413          58387
df_rt_eval_var_nomult : $e461          58465
df_rt_eval_var_notarry : $e3e6          58342
 df_rt_eval_var_push : $e479          58489
df_rt_eval_var_simple : $e403          58371
  df_rt_eval_var_str : $e4ae          58542
df_rt_exec_check_key : $e57f          58751
   df_rt_exec_ctrl_c : $e587          58759
   df_rt_exec_ctrl_z : $e589          58761
      df_rt_exec_end : $e57d          58749
 df_rt_exec_find_tok : $e541          58689
df_rt_exec_found_tok : $e546          58694
 df_rt_exec_init_ptr : $e53a          58682
     df_rt_exec_jump : $e58b          58763
   df_rt_exec_no_key : $e55a          58714
     df_rt_exec_proc : $f621          63009
     df_rt_exec_stat : $e534          58676
         df_rt_false : $e87b          59515
  df_rt_file_cleanup : $f274          62068
     df_rt_file_errc : $f25e          62046
 df_rt_findelseendif : $e9df          59871
    df_rt_findescval : $e640          58944
df_rt_findescval_loop : $e643          58947
      df_rt_findproc : $e5f8          58872
  df_rt_findproc_cmd : $e60a          58890
  df_rt_findproc_err : $e63e          58942
df_rt_findproc_nextstat : $e62a          58922
      df_rt_findwend : $e96d          59757
    df_rt_fname_case : $f229          61993
           df_rt_for : $ea6f          60015
 df_rt_generate_lvar : $ee3c          60988
           df_rt_get : $f3fe          62462
     df_rt_getdatatk : $eb75          60277
       df_rt_getlvar : $e65a          58970
       df_rt_getnval : $e216          57878
AS65 Assembler for R6502 [1.42].                                     Page    9
-------------------------------- bank\bank0.s --------------------------------

      df_rt_get2Ints : $e4c5          58565
      df_rt_get2Strs : $e4d4          58580
      df_rt_get_push : $f40f          62479
     df_rt_get_pushp : $f40e          62478
      df_rt_get_sync : $f403          62467
            df_rt_gt : $e895          59541
           df_rt_gte : $e89f          59551
      df_rt_gte_calc : $e8a2          59554
           df_rt_hex : $f4d2          62674
         df_rt_hires : $ed72          60786
            df_rt_if : $ea2e          59950
         df_rt_ifcmd : $e9e2          59874
        df_rt_ifelse : $ea00          59904
        df_rt_ifeval : $ea30          59952
  df_rt_ifskipelseif : $e9f7          59895
       df_rt_if_done : $ea1b          59931
      df_rt_if_found : $ea0d          59917
      df_rt_if_match : $e9d7          59863
       df_rt_if_stat : $e9c1          59841
   df_rt_if_stat_err : $e9d5          59861
     df_rt_init_done : $e215          57877
 df_rt_init_filename : $f201          61953
 df_rt_init_stat_ptr : $e521          58657
      df_rt_init_vvt : $e1da          57818
 df_rt_init_vvt_skip : $e207          57863
df_rt_init_vvt_skip_proc : $e1ff          57855
 df_rt_init_vvt_slot : $e1e4          57828
df_rt_init_vvt_slot_undim : $e1f0          57840
df_rt_init_vvt_z_loop : $e201          57857
           df_rt_ink : $ed7b          60795
         df_rt_input : $ebfe          60414
     df_rt_input_err : $ec38          60472
     df_rt_input_num : $ec21          60449
     df_rt_input_str : $ec19          60441
    df_rt_ldtokenise : $f2af          62127
          df_rt_left : $f510          62736
           df_rt_len : $f55a          62810
          df_rt_line : $edb5          60853
        df_rt_lineto : $eda7          60839
          df_rt_list : $ef23          61219
  df_rt_listcheckvnt : $ee8e          61070
   df_rt_listgotnext : $eebc          61116
   df_rt_listnextvnt : $eeb5          61109
   df_rt_listpn_done : $eecc          61132
       df_rt_listprg : $ef4a          61258
    df_rt_listprgend : $ef52          61266
      df_rt_listproc : $eecd          61133
    df_rt_listprocch : $ee9a          61082
    df_rt_listproccr : $eea5          61093
 df_rt_listprocnames : $ee82          61058
 df_rt_listprocpause : $eeab          61099
    df_rt_listp_copy : $eed4          61140
    df_rt_listp_done : $ef17          61207
 df_rt_listp_findcmd : $eefd          61181
 df_rt_listp_findend : $eef6          61174
df_rt_listp_notfound : $ef21          61217
      df_rt_listwait : $eeb2          61106
      df_rt_list_all : $ef36          61238
 df_rt_list_all_line : $ef99          61337
   df_rt_list_decode : $efa5          61349
df_rt_list_decode_esc : $efd7          61399
df_rt_list_decode_token : $f0e4          61668
AS65 Assembler for R6502 [1.42].                                     Page   10
-------------------------------- bank\bank0.s --------------------------------

df_rt_list_decode_token_normal : $f0eb          61675
   df_rt_list_donvvt : $f0d2          61650
df_rt_list_do_decode_tkn : $f0f2          61682
   df_rt_list_escval : $efb5          61365
  df_rt_list_findvvt : $f07c          61564
df_rt_list_find_asm_sym : $f13f          61759
 df_rt_list_find_sym : $f0fb          61691
   df_rt_list_gotvvt : $f0a9          61609
df_rt_list_gotvvtend : $f095          61589
df_rt_list_got_asm_sym : $f15d          61789
df_rt_list_got_last_sym : $f10c          61708
  df_rt_list_got_sym : $f110          61712
     df_rt_list_line : $ef58          61272
df_rt_list_line_cont : $ef72          61298
 df_rt_list_line_fin : $ef96          61334
df_rt_list_line_only : $ef9c          61340
df_rt_list_line_only_fin : $ef98          61336
    df_rt_list_linno : $ef3d          61245
   df_rt_list_linnum : $f0d3          61651
  df_rt_list_nexttok : $efbe          61374
df_rt_list_next_asm_ch : $f144          61764
  df_rt_list_next_ch : $f100          61696
df_rt_list_next_line : $ef79          61305
    df_rt_list_pause : $ef67          61287
  df_rt_list_synckey : $ef63          61283
    df_rt_list_token : $efbb          61371
   df_rt_list_vvtend : $f088          61576
       df_rt_loadbin : $f31b          62235
  df_rt_loadbin_byte : $f31d          62237
   df_rt_loadbin_inc : $f327          62247
      df_rt_loadline : $f282          62082
         df_rt_local : $ec3a          60474
    df_rt_local_done : $ec62          60514
 df_rt_local_findesc : $ec41          60481
           df_rt_lsr : $e80e          59406
        df_rt_lsrbit : $e814          59412
       df_rt_lsrdone : $e81e          59422
       df_rt_lst_bin : $f042          61506
       df_rt_lst_bit : $f04c          61516
 df_rt_lst_bit_skip0 : $f054          61524
    df_rt_lst_bytbin : $f038          61496
    df_rt_lst_bythex : $f013          61459
       df_rt_lst_chr : $eff6          61430
df_rt_lst_const_done : $f022          61474
   df_rt_lst_hex_pre : $f009          61449
    df_rt_lst_intbin : $f040          61504
    df_rt_lst_intdec : $f05c          61532
    df_rt_lst_inthex : $f026          61478
    df_rt_lst_lo_hex : $f016          61462
      df_rt_lst_proc : $f067          61543
  df_rt_lst_reserved : $eff5          61429
    df_rt_lst_strlit : $f0b9          61625
  df_rt_lst_strlitch : $f0c0          61632
 df_rt_lst_strlitdon : $f0cb          61643
       df_rt_lst_var : $f067          61543
            df_rt_lt : $e881          59521
           df_rt_lte : $e88b          59531
      df_rt_lte_calc : $e88e          59534
           df_rt_mem : $f3aa          62378
      df_rt_mem_calc : $f3eb          62443
      df_rt_mem_free : $f3b5          62389
       df_rt_mem_prg : $f3c8          62408
AS65 Assembler for R6502 [1.42].                                     Page   11
-------------------------------- bank\bank0.s --------------------------------

       df_rt_mem_var : $f3db          62427
           df_rt_mid : $f53c          62780
           df_rt_mod : $e7da          59354
       df_rt_monitor : $e942          59714
          df_rt_mult : $e798          59288
         df_rt_music : $f1bd          61885
       df_rt_nassign : $ee1f          60959
            df_rt_ne : $e8b3          59571
         df_rt_neval : $e21c          57884
    df_rt_neval_done : $e268          57960
   df_rt_neval_donow : $e28b          57995
     df_rt_neval_esc : $e246          57926
df_rt_neval_nextbyte : $e270          57968
    df_rt_neval_optk : $e21f          57887
 df_rt_neval_process : $e25f          57951
  df_rt_neval_pushOp : $e29c          58012
      df_rt_neval_tk : $e24d          57933
   df_rt_neval_tk_fn : $e269          57961
   df_rt_neval_tk_op : $e275          57973
  df_rt_neval_tk_opp : $e274          57972
           df_rt_new : $e945          59717
          df_rt_next : $eaad          60077
     df_rt_nextdatum : $eb49          60233
      df_rt_nextstat : $e5a3          58787
  df_rt_nextstat_err : $e5cf          58831
   df_rt_nextstat_ln : $e5ba          58810
    df_rt_next_check : $eafd          60157
      df_rt_next_err : $eb06          60166
      df_rt_noif_err : $ea2c          59948
     df_rt_not_dimed : $e488          58504
     df_rt_not_noise : $f19d          61853
df_rt_openforbinload : $f2be          62142
df_rt_openforbinsave : $f2b5          62133
            df_rt_or : $e830          59440
         df_rt_paper : $ed81          60801
     df_rt_parm_pop3 : $e4fb          58619
    df_rt_parm_2ints : $e4e3          58595
    df_rt_parm_3ints : $e4ee          58606
    df_rt_parm_4ints : $e505          58629
    df_rt_parse_file : $f244          62020
df_rt_parse_file_print : $f251          62033
          df_rt_peek : $f36f          62319
         df_rt_pixel : $f41f          62495
       df_rt_pixmode : $ed75          60789
          df_rt_play : $f1d2          61906
          df_rt_plot : $ecf7          60663
       df_rt_plotstr : $ed2a          60714
     df_rt_plotstrch : $ed3b          60731
   df_rt_plotstrdone : $ed68          60776
    df_rt_plot_h_int : $ed21          60705
    df_rt_plot_h_str : $ed56          60758
         df_rt_point : $ed8b          60811
          df_rt_poke : $f17f          61823
      df_rt_pop_stat : $e5df          58847
   df_rt_pop_stat_go : $e676          58998
         df_rt_print : $ede6          60902
       df_rt_printat : $eddc          60892
       df_rt_println : $ee17          60951
    df_rt_print_done : $ee14          60948
  df_rt_print_gotstr : $ee0e          60942
     df_rt_print_num : $eb2e          60206
     df_rt_print_str : $eb35          60213
AS65 Assembler for R6502 [1.42].                                     Page   12
-------------------------------- bank\bank0.s --------------------------------

  df_rt_print_str_ch : $eb3e          60222
df_rt_print_str_done : $eb48          60232
      df_rt_print_ws : $ede9          60905
          df_rt_proc : $f5cb          62923
     df_rt_proc_addr : $f5f5          62965
    df_rt_proc_local : $f70d          63245
df_rt_proc_local_load : $f714          63252
  df_rt_proc_parmerr : $f5c9          62921
df_rt_proc_parm_done : $f614          62996
df_rt_proc_parm_none : $f615          62997
df_rt_proc_push_parm : $f600          62976
df_rt_proc_unloadvar : $f6e9          63209
df_rt_proc_unload_done : $f709          63241
     df_rt_push_int1 : $f453          62547
     df_rt_push_stat : $e5d3          58835
     df_rt_putintres : $e76b          59243
          df_rt_read : $ebe6          60390
      df_rt_readbyte : $f370          62320
 df_rt_readbyte_skip : $f385          62341
     df_rt_readdatum : $eb91          60305
     df_rt_read_done : $ebfb          60411
 df_rt_read_find_var : $ebe8          60392
         df_rt_redim : $ec66          60518
        df_rt_repeat : $eb08          60168
         df_rt_reset : $f358          62296
        df_rt_return : $f6e0          63200
         df_rt_right : $f521          62753
           df_rt_rnd : $f388          62344
     df_rt_rnd_noeor : $f39c          62364
       df_rt_rnd_set : $f3a3          62371
           df_rt_run : $ee71          61041
     df_rt_run_token : $e594          58772
          df_rt_sadd : $eb2d          60205
       df_rt_sassign : $ee36          60982
       df_rt_savebin : $f32d          62253
  df_rt_savebin_byte : $f33b          62267
   df_rt_savebin_inc : $f345          62277
          df_rt_scrn : $f412          62482
           df_rt_seq : $e91e          59678
         df_rt_seval : $e2d6          58070
    df_rt_seval_copy : $e330          58160
    df_rt_seval_done : $e353          58195
     df_rt_seval_esc : $e2fc          58108
df_rt_seval_esc_proc : $e351          58193
df_rt_seval_esc_strlit : $e34b          58187
 df_rt_seval_esc_var : $e32c          58156
df_rt_seval_nextbyte : $e346          58182
    df_rt_seval_optk : $e2e4          58084
      df_rt_seval_tk : $e30a          58122
   df_rt_seval_tk_fn : $e323          58147
   df_rt_seval_tk_op : $e31f          58143
           df_rt_sgn : $f459          62553
         df_rt_sgn_n : $f46c          62572
         df_rt_sgn_z : $f471          62577
           df_rt_sgt : $e915          59669
          df_rt_sgte : $e900          59648
df_rt_skipinitdataptr : $eb7f          60287
 df_rt_skipnestendif : $ea0a          59914
    df_rt_skipnestif : $e9fd          59901
  df_rt_skip_dim_chk : $ec90          60560
       df_rt_skip_ws : $e64d          58957
  df_rt_skip_ws_loop : $e650          58960
AS65 Assembler for R6502 [1.42].                                     Page   13
-------------------------------- bank\bank0.s --------------------------------

           df_rt_slt : $e90e          59662
          df_rt_slte : $e8f3          59635
    df_rt_snd_common : $f189          61833
           df_rt_sne : $e907          59655
         df_rt_sound : $f1b7          61879
df_rt_sound_env_skip : $f1b4          61876
       df_rt_sprchar : $f58f          62863
        df_rt_sprhit : $f5b7          62903
df_rt_sprhit_inactive : $f5c3          62915
       df_rt_sprinit : $f5ae          62894
      df_rt_sprmulti : $f5b1          62897
        df_rt_sprpos : $f599          62873
        df_rt_sprupd : $f5a5          62885
         df_rt_stick : $f3f8          62456
 df_rt_strlen_common : $f47e          62590
  df_rt_strlen_count : $f484          62596
      df_rt_str_comp : $e925          59685
 df_rt_str_comp_byte : $e92a          59690
   df_rt_str_comp_eq : $e93f          59711
df_rt_str_comp_false : $e8fa          59642
   df_rt_str_comp_gt : $e93c          59708
   df_rt_str_comp_lt : $e939          59705
 df_rt_str_comp_true : $e8fd          59645
    df_rt_str_cpy_ch : $f49e          62622
   df_rt_str_extract : $f48b          62603
           df_rt_sub : $e785          59269
          df_rt_sval : $e2da          58074
          df_rt_text : $ed6f          60783
         df_rt_tload : $f27a          62074
df_rt_tload_autostart : $f29c          62108
      df_rt_tokenjmp : $e67f          59007
          df_rt_true : $e875          59509
         df_rt_tsave : $f260          62048
         df_rt_until : $eb10          60176
df_rt_untilnext_done : $eb23          60195
     df_rt_until_err : $eb2b          60203
           df_rt_val : $f577          62839
       df_rt_val_err : $f58b          62859
          df_rt_wait : $edc6          60870
  df_rt_wait_counter : $edca          60874
     df_rt_wait_done : $eddb          60891
   df_rt_wait_skiphi : $edd4          60884
     df_rt_wait_tick : $edcc          60876
          df_rt_wend : $e9ab          59819
      df_rt_wend_end : $e9a9          59817
      df_rt_wend_err : $e9bf          59839
         df_rt_while : $e948          59720
     df_rt_while_cmd : $e97e          59774
    df_rt_while_done : $e958          59736
         df_sevalptr : $007b            123
    df_show_err_done : $f939          63801
     df_show_err_fin : $f918          63768
    df_show_err_find : $f8cc          63692
  df_show_err_linnum : $f8ff          63743
    df_show_err_skip : $f8d0          63696
               df_sp : $0060             96
          df_starend : $0075            117
         df_starstrt : $0073            115
         df_strbuffz : $0079            121
          df_stridxz : $007a            122
      df_str_src_end : $f4b3          62643
        df_st_malloc : $f7a6          63398
AS65 Assembler for R6502 [1.42].                                     Page   14
-------------------------------- bank\bank0.s --------------------------------

df_st_typemismatcherr : $f792          63378
          df_syminiz : $0085            133
           df_symoff : $0084            132
           df_symtab : $0082            130
         df_tk_abort : $e018          57368
           df_tk_add : $e018          57368
          df_tk_addr : $dff5          57333
           df_tk_and : $e018          57368
        df_tk_arrvar : $d9d1          55761
           df_tk_asc : $dfeb          57323
           df_tk_asl : $e018          57368
 df_tk_asm_addr_mode : $fa2f          64047
df_tk_asm_addr_mode_ok : $fa1e          64030
df_tk_asm_addr_mode_1 : $fa44          64068
df_tk_asm_addr_mode_2 : $fa4e          64078
df_tk_asm_checknexttok : $f9d7          63959
df_tk_asm_checktokch : $f9d9          63961
        df_tk_asm_db : $df7f          57215
        df_tk_asm_ds : $e01d          57373
        df_tk_asm_dw : $df7f          57215
df_tk_asm_exec_parser : $fa20          64032
df_tk_asm_foundsymend : $f9ff          63999
df_tk_asm_found_command : $f999          63897
     df_tk_asm_label : $f9b6          63926
  df_tk_asm_matchtok : $f9c9          63945
  df_tk_asm_mnemonic : $f9b3          63923
       df_tk_asm_opt : $e01d          57373
       df_tk_asm_org : $e01d          57373
df_tk_asm_parse_command : $f994          63892
df_tk_asm_parse_command_err : $f9b2          63922
  df_tk_asm_symfound : $fa12          64018
df_tk_asm_symnextentry : $f9f0          63984
df_tk_asm_symnomatch : $f9ee          63982
  df_tk_asm_tokenjmp : $ffdc          65500
        df_tk_assign : $df28          57128
         df_tk_bload : $e023          57379
          df_tk_body : $db3d          56125
         df_tk_bsave : $e02d          57389
          df_tk_call : $e00a          57354
      df_tk_callproc : $dfdf          57311
          df_tk_char : $d929          55593
      df_tk_char_err : $d8d1          55505
         df_tk_chdir : $e01d          57373
  df_tk_checknexttok : $dbd0          56272
    df_tk_checktokch : $dbed          56301
           df_tk_chr : $dfeb          57323
        df_tk_circle : $e02d          57389
     df_tk_closebrkt : $dff0          57328
           df_tk_cls : $e018          57368
        df_tk_colour : $e02d          57389
       df_tk_comment : $df31          57137
  df_tk_comment_done : $df3c          57148
         df_tk_const : $d967          55655
     df_tk_const_err : $d987          55687
df_tk_const_try_char : $d980          55680
 df_tk_const_try_num : $d976          55670
 df_tk_const_try_str : $d979          55673
        df_tk_cursor : $e01d          57373
          df_tk_data : $df7f          57215
     df_tk_data_done : $df7d          57213
           df_tk_dec : $dfeb          57323
          df_tk_deek : $dfeb          57323
AS65 Assembler for R6502 [1.42].                                     Page   15
-------------------------------- bank\bank0.s --------------------------------

           df_tk_def : $dfc3          57283
           df_tk_del : $e01d          57373
        df_tk_delete : $e01d          57373
           df_tk_dim : $dfa5          57253
           df_tk_dir : $e018          57368
           df_tk_div : $e018          57368
          df_tk_doke : $e023          57379
          df_tk_done : $db73          56179
       df_tk_elapsed : $dff5          57333
          df_tk_else : $e018          57368
        df_tk_elseif : $e01d          57373
        df_tk_enddef : $e018          57368
         df_tk_endif : $e018          57368
           df_tk_eor : $e018          57368
            df_tk_eq : $e018          57368
         df_tk_error : $df26          57126
      df_tk_errortab : $f801          63489
        df_tk_error2 : $dfe9          57321
   df_tk_error_atpos : $f8a5          63653
   df_tk_error_error : $f8ab          63659
  df_tk_error_inline : $f89b          63643
   df_tk_exec_parser : $db95          56213
        df_tk_expect : $d8c5          55493
      df_tk_expectok : $d8c3          55491
    df_tk_expect_tok : $d8d3          55507
df_tk_expect_tok_err : $d8de          55518
df_tk_expect_tok_fatal : $d8e3          55523
    df_tk_expression : $dad0          56016
     df_tk_expre_err : $dadb          56027
     df_tk_expr_more : $df84          57220
           df_tk_for : $dfc8          57288
   df_tk_foundsymend : $dc1c          56348
           df_tk_get : $dfeb          57323
       df_tk_get_buf : $d853          55379
  df_tk_get_buf_null : $d85d          55389
            df_tk_gt : $e018          57368
           df_tk_gte : $e018          57368
         df_tk_hchar : $e02d          57389
           df_tk_hex : $dfeb          57323
         df_tk_hires : $e018          57368
            df_tk_if : $e01d          57373
           df_tk_imm : $fa64          64100
      df_tk_indirect : $fa67          64103
 df_tk_indirect_done : $fa8c          64140
    df_tk_indirect_y : $fa7b          64123
           df_tk_ink : $e01d          57373
         df_tk_input : $df8d          57229
       df_tk_isalpha : $d896          55446
    df_tk_isalphanum : $d8a3          55459
 df_tk_isalpha_false : $d893          55443
         df_tk_isbin : $d877          55415
    df_tk_isbin_true : $d880          55424
       df_tk_isdigit : $d86c          55404
 df_tk_isdigit_false : $d875          55413
         df_tk_isEOS : $dae2          56034
         df_tk_ishex : $d881          55425
   df_tk_ishex_false : $d893          55443
   df_tk_ishex_truep : $d891          55441
        df_tk_isproc : $d8a9          55465
   df_tk_isproc_true : $d8ae          55470
          df_tk_isws : $d8be          55486
    df_tk_isws_false : $d8c3          55491
AS65 Assembler for R6502 [1.42].                                     Page   16
-------------------------------- bank\bank0.s --------------------------------

          df_tk_left : $dffe          57342
           df_tk_len : $dfeb          57323
          df_tk_line : $e035          57397
       df_tk_linenum : $dba4          56228
        df_tk_lineto : $e023          57379
    df_tk_line_empty : $db91          56209
          df_tk_list : $df61          57185
df_tk_listp_procname : $df3e          57150
df_tk_listp_procname_ch : $df4d          57165
df_tk_listp_procname_err : $df5f          57183
df_tk_listp_procname_ok : $df5e          57182
     df_tk_list_done : $df71          57201
     df_tk_list_line : $df6d          57197
    df_tk_list_procs : $df66          57190
         df_tk_local : $dfb4          57268
      df_tk_localvar : $d9bb          55739
 df_tk_localvar_cont : $d9c1          55745
           df_tk_lsr : $e018          57368
            df_tk_lt : $e018          57368
           df_tk_lte : $e018          57368
      df_tk_matchtok : $dbc3          56259
df_tk_matchtok_skip_op : $dbe9          56297
           df_tk_mem : $dfeb          57323
           df_tk_mid : $e004          57348
           df_tk_mod : $e018          57368
       df_tk_monitor : $e018          57368
          df_tk_mult : $e018          57368
         df_tk_music : $e035          57397
         df_tk_narry : $da50          55888
     df_tk_narry_end : $da5d          55901
         df_tk_nbrkt : $da62          55906
            df_tk_ne : $e018          57368
           df_tk_new : $e018          57368
          df_tk_next : $e018          57368
     df_tk_next_expr : $df7f          57215
           df_tk_nop : $dabb          55995
     df_tk_nop_false : $da7a          55930
       df_tk_not_eos : $dada          56026
         df_tk_nterm : $da6f          55919
    df_tk_nterm_cont : $da7c          55932
    df_tk_nterm_done : $da7a          55930
     df_tk_nterm_err : $dab9          55993
    df_tk_nterm_proc : $da6a          55914
   df_tk_nterm_tryfn : $da89          55945
df_tk_nterm_try_const : $dab3          55987
df_tk_nterm_try_proc : $da9f          55967
 df_tk_nterm_try_var : $daab          55979
           df_tk_num : $d8e5          55525
       df_tk_num_bin : $d914          55572
       df_tk_num_err : $d8d1          55505
    df_tk_num_hexbin : $d906          55558
       df_tk_num_put : $d91c          55580
            df_tk_or : $e018          57368
         df_tk_paper : $e01d          57373
          df_tk_parm : $d9a9          55721
 df_tk_parm_skip_var : $d9b6          55734
    df_tk_parseerror : $db93          56211
 df_tk_parse_command : $dafc          56060
df_tk_parse_command_done : $db12          56082
df_tk_parse_command_err : $db13          56083
df_tk_parse_user_proc : $daf2          56050
          df_tk_peek : $dfeb          57323
AS65 Assembler for R6502 [1.42].                                     Page   17
-------------------------------- bank\bank0.s --------------------------------

      df_tk_peek_buf : $d84d          55373
         df_tk_pixel : $dffe          57342
       df_tk_pixmode : $e01d          57373
          df_tk_play : $e035          57397
          df_tk_plot : $e02d          57389
         df_tk_point : $e023          57379
          df_tk_poke : $e023          57379
     df_tk_preassign : $df16          57110
         df_tk_print : $df78          57208
       df_tk_printat : $df72          57202
       df_tk_println : $df78          57208
    df_tk_print_done : $df7d          57213
          df_tk_proc : $d9dc          55772
     df_tk_proc_call : $da18          55832
    df_tk_proc_comma : $da32          55858
      df_tk_proc_err : $da4e          55886
     df_tk_proc_errp : $da4d          55885
   df_tk_proc_noparm : $da3b          55867
    df_tk_proc_parms : $da0b          55819
df_tk_proc_skip_args : $da4b          55883
df_tk_proc_skip_call : $da21          55841
  df_tk_put_overflow : $d86a          55402
       df_tk_put_tok : $d85e          55390
          df_tk_read : $df96          57238
         df_tk_redim : $dfa5          57253
        df_tk_repeat : $e018          57368
         df_tk_reset : $dfe1          57313
        df_tk_return : $e01a          57370
         df_tk_right : $dffe          57342
           df_tk_rnd : $dfeb          57323
          df_tk_rts1 : $d8a8          55464
           df_tk_run : $e018          57368
          df_tk_scrn : $dffe          57342
           df_tk_sgn : $dfeb          57323
       df_tk_skip_ws : $d8af          55471
    df_tk_skip_1_spc : $db50          56144
         df_tk_sound : $e02d          57389
       df_tk_sprchar : $e023          57379
        df_tk_sprhit : $dfeb          57323
       df_tk_sprinit : $e018          57368
     df_tk_spritepos : $e02d          57389
      df_tk_sprmulti : $e023          57379
        df_tk_sprpos : $e02d          57389
        df_tk_sprupd : $e018          57368
         df_tk_stick : $dff0          57328
           df_tk_str : $d945          55621
        df_tk_str_ch : $d94d          55629
       df_tk_str_don : $d95e          55646
       df_tk_str_err : $d965          55653
           df_tk_sub : $e018          57368
      df_tk_symfound : $dc2d          56365
df_tk_symfound_final : $dc3d          56381
  df_tk_symnextentry : $dc0d          56333
    df_tk_symnomatch : $dc0b          56331
   df_tk_symnomatchp : $dc0a          56330
          df_tk_text : $e018          57368
         df_tk_tload : $e01d          57373
      df_tk_tokenjmp : $dddf          56799
     df_tk_tokentype : $dea5          56997
df_tk_tok_expression : $dadc          56028
       df_tk_try_asm : $db69          56169
    df_tk_try_assign : $db6e          56174
AS65 Assembler for R6502 [1.42].                                     Page   18
-------------------------------- bank\bank0.s --------------------------------

   df_tk_try_command : $db62          56162
         df_tk_tsave : $e01d          57373
         df_tk_until : $e01d          57373
           df_tk_val : $dfeb          57323
           df_tk_var : $d989          55689
      df_tk_variable : $df08          57096
        df_tk_var_ck : $d99f          55711
      df_tk_var_cont : $d98f          55695
    df_tk_var_noarry : $d963          55651
         df_tk_vpeek : $dfeb          57323
          df_tk_wait : $e01d          57373
          df_tk_wend : $e018          57368
         df_tk_while : $e01d          57373
      df_tk_ws_loop1 : $d8af          55471
        df_tk_2parms : $e023          57379
        df_tk_3parms : $e02d          57389
        df_tk_4parms : $e035          57397
          df_tmpptra : $00a2            162
          df_tmpptrb : $00a4            164
          df_tmpptrc : $00a6            166
          df_tmpptrd : $00a8            168
          df_tmpptre : $00aa            170
              df_tok : $0480           1152
          df_tokbuff : $0480           1152
        df_tokensyms : $dc45          56389
           df_tokoff : $007e            126
       df_trap_error : $f8b2          63666
  df_trap_go_monitor : $f8c7          63687
     df_trap_monitor : $f940          63808
      df_trap_normal : $f8ca          63690
           df_varcnt : $0072            114
      df_var_analyse : $d79f          55199
df_var_analyse_chk_arry : $d7d2          55250
df_var_analyse_chk_dollar : $d7c9          55241
df_var_analyse_chk_post : $d7c9          55241
df_var_analyse_fatal_err : $d7bd          55229
   df_var_analyse_ok : $d814          55316
   df_var_check_type : $d6ff          55039
     df_var_countlen : $d78a          55178
df_var_countlen_alphanum : $d799          55193
df_var_countlen_loop : $d79c          55196
 df_var_finalise_len : $d7df          55263
         df_var_find : $d6c5          54981
   df_var_findcreate : $d7e8          55272
df_var_findcreate_copy : $d836          55350
df_var_findcreate_create : $d801          55297
df_var_findcreate_err : $d812          55314
df_var_findcreate_errp : $d811          55313
df_var_findcreate_found : $d7fa          55290
  df_var_find_no_vnt : $d723          55075
    df_var_find_true : $d728          55080
df_var_initialise_var : $d821          55329
 df_var_insert_space : $d730          55088
    df_var_match_vnt : $d6d5          54997
 df_var_match_vnt_do : $d6e1          55009
df_var_match_vnt_sym : $d6e5          55013
    df_var_move_byte : $d752          55122
 df_var_move_byte_do : $d75e          55134
df_var_move_byte_fin : $d76f          55151
     df_var_not_proc : $d7bf          55231
df_var_vnt_entry_end : $d710          55056
df_var_vnt_sym_nomatch : $d703          55043
AS65 Assembler for R6502 [1.42].                                     Page   19
-------------------------------- bank\bank0.s --------------------------------

     df_var_zero_vnt : $d82d          55341
           df_vntend : $006c            108
          df_vntstrt : $006a            106
           df_vvtend : $0070            112
          df_vvtstrt : $006e            110
               errno : $005e             94
 fd_cload_getname_pc : $c5bb          50619
 fd_csave_getname_pc : $c619          50713
     fd_getname_addr : $0400           1024
             f_back4 : $c587          50567
         f_block_gap : $c570          50544
     f_block_gap_vec : $0008              8
             f_close : $c5f4          50676
    f_close_no_flush : $c5fd          50685
         f_get_block : $c6e8          50920
   f_get_block_bytes : $c6f9          50937
          f_get_byte : $c6cb          50891
      f_get_byte_buf : $c6d8          50904
         f_get_fname : $c5da          50650
   f_get_fname_start : $c5cb          50635
        f_get_header : $c5d4          50644
              f_init : $c564          50532
          f_init_vec : $0000              0
      f_init_vectors : $c5a2          50594
          f_no_print : $c59a          50586
        f_open_bread : $c5bb          50619
       f_open_bwrite : $c60f          50703
       f_open_common : $c59b          50587
          f_open_msg : $c576          50550
         f_open_read : $c5bb          50619
        f_open_write : $c615          50709
  f_open_write_start : $c619          50713
       f_print_block : $c6ac          50860
        f_print_byte : $c593          50579
         f_print_msg : $c58c          50572
         f_put_block : $c689          50825
   f_put_block_bytes : $c69f          50847
          f_put_byte : $c65f          50783
     f_put_byte_done : $c682          50818
         f_put_delay : $c56d          50541
     f_put_delay_vec : $0006              6
         f_read_byte : $c567          50535
     f_read_byte_vec : $0002              2
           f_release : $c573          50547
       f_release_vec : $000a             10
          f_save_msg : $c57f          50559
           f_skip_sd : $c5a0          50592
     f_storage_table : $000c             12
       f_storage_vec : $0611           1553
        f_write_byte : $c56a          50538
    f_write_byte_vec : $0004              4
       f_write_fname : $c651          50769
      f_write_header : $c648          50760
               grc_d : $0043             67   *
               grc_r : $003f             63   *
               grc_x : $0040             64   *
              grc_x0 : $003d             61   *
               grc_y : $0042             66   *
              grc_y0 : $003e             62   *
              grl_dx : $0041             65   *
              grl_dy : $0042             66   *
               grl_p : $004b             75   *
AS65 Assembler for R6502 [1.42].                                     Page   20
-------------------------------- bank\bank0.s --------------------------------

            grl_sinx : $004a             74   *
            grl_siny : $004d             77   *
            grl_xyyx : $0043             67   *
              grl_x0 : $003d             61   *
              grl_x1 : $003f             63   *
              grl_y0 : $003e             62   *
              grl_y1 : $0040             64   *
             grl_2dx : $0044             68   *
            grl_2dxy : $0048             72   *
             grl_2dy : $0046             70   *
             gr_char : $0003              3
  gr_check_font_copy : $ce50          52816
gr_check_font_copy_done : $ce67          52839
           gr_circle : $d245          53829
      gr_circle_done : $d282          53890
    gr_circle_d_lte0 : $d275          53877
      gr_circle_plot : $d252          53842
    gr_circle_points : $d283          53891
              gr_cls : $cf3b          53051
          gr_cls_col : $cf5b          53083
          gr_cls_row : $cf47          53063
    gr_cls_skip_marg : $cf57          53079
        gr_copy_byte : $ce27          52775
         gr_copy_mem : $ce1d          52765
         gr_cur_down : $d086          53382
         gr_cur_left : $d068          53352
          gr_cur_ptr : $000c             12
        gr_cur_right : $d056          53334
  gr_cur_skip_at_bot : $d092          53394
 gr_cur_skip_at_left : $d077          53367
   gr_cur_skip_at_tl : $d07b          53371
           gr_cur_up : $d07c          53372
            gr_cur_x : $000a             10
            gr_cur_y : $000b             11
              gr_del : $d093          53395
       gr_geom_fill1 : $0007              7
         gr_geom_tmp : $0015             21
        gr_geom_tmp2 : $0017             23
              gr_get : $cfa2          53154
       gr_getXY_base : $cf7f          53119
          gr_get_key : $d09b          53403
        gr_get_key_2 : $d09f          53407
            gr_hchar : $d154          53588
   gr_hchar_copyline : $d1ac          53676
gr_hchar_copyline_eor : $d1c2          53698
gr_hchar_copyline_erase : $d1d2          53714
gr_hchar_copyline_nx : $d1e7          53735
    gr_hchar_getfont : $d187          53639
       gr_hchar_mask : $d17f          53631
    gr_hchar_rot1bit : $d191          53649
gr_hchar_rot1bit_bcc : $d19c          53660
 gr_hchar_rot1bit_nx : $d1a1          53665
            gr_hcode : $d13a          53562
       gr_hcode_loop : $d140          53568
          gr_hires_x : $0010             16
          gr_hires_y : $0011             17
         gr_hi_start : $0001              1
             gr_init : $ce37          52791
        gr_init_font : $ce07          52743
        gr_init_geom : $ce68          52840
   gr_init_geom_done : $ce67          52839
       gr_init_hires : $cebe          52926
AS65 Assembler for R6502 [1.42].                                     Page   21
-------------------------------- bank\bank0.s --------------------------------

gr_init_hires_tables : $cef7          52983
  gr_init_screen_txt : $cea5          52901
     gr_init_tab_col : $cf23          53027
gr_init_tab_col_skip : $cf35          53045
     gr_init_tab_row : $cf01          52993
              gr_ink : $0012             18
    gr_key_check_key : $d0ab          53419
      gr_key_got_key : $d0c2          53442
       gr_key_no_key : $d0cd          53453
    gr_key_skip_copy : $d0b3          53427
      gr_key_tidy_up : $d0c4          53444
             gr_line : $d2fb          54011
        gr_line_done : $d3d5          54229
       gr_line_neg_p : $d3c5          54213
       gr_line_pixel : $d38e          54158
 gr_line_skip_dx_neg : $d319          54041
 gr_line_skip_dy_neg : $d326          54054
   gr_line_skip_left : $d356          54102
gr_line_skip_xy_swap : $d346          54086
   gr_line_skip_y_up : $d35e          54110
     gr_line_yx_skip : $d39a          54170
           gr_margin : $0014             20
             gr_mode : $0000              0
           gr_new_ln : $d03e          53310
       gr_nl_skip_nl : $d053          53331
       gr_no_special : $d0e2          53474
      gr_offset_40hi : $d3f2          54258
      gr_offset_40lo : $d3d6          54230
            gr_paper : $0013             19
            gr_pitch : $000f             15
            gr_pixel : $d20e          53774
          gr_pixmode : $000e             14
             gr_plot : $cf8f          53135
            gr_point : $d214          53780
       gr_point_done : $d244          53828
        gr_point_eor : $d240          53824
      gr_point_setup : $d1f6          53750
  gr_point_skip_attr : $d236          53814
      gr_point_write : $d242          53826
        gr_printable : $d106          53510
        gr_print_msg : $d125          53541
   gr_print_msg_done : $d135          53557
   gr_print_msg_loop : $d12b          53547
  gr_process_special : $d0eb          53483
              gr_put : $cf97          53143
         gr_put_byte : $d0d1          53457
     gr_put_byte_low : $d0e3          53475
           gr_screen : $0018             24
         gr_scrngeom : $0011             17
    gr_scrngeom_base : $ce77          52855
   gr_scrngeom_hires : $ce8c          52876
    gr_scrngeom_text : $ce7d          52861
      gr_scroll_char : $d000          53248
    gr_scroll_cpy_ln : $cffd          53245
  gr_scroll_erase_ln : $d034          53300
      gr_scroll_marg : $d030          53296
   gr_scroll_routine : $d047          53319
        gr_scroll_up : $cfe1          53217
          gr_set_cur : $cfa8          53160
     gr_set_cur_init : $cfa9          53161
     gr_set_cur_skip : $cfc1          53185
    gr_set_hires_cur : $d209          53769
AS65 Assembler for R6502 [1.42].                                     Page   22
-------------------------------- bank\bank0.s --------------------------------

       gr_special_ch : $d10c          53516
    gr_special_fn_hi : $d11d          53533
    gr_special_fn_lo : $d115          53525
     gr_special_loop : $d0ef          53487
         gr_spr_char : $d481          54401
         gr_spr_draw : $d460          54368
    gr_spr_draw_loop : $d462          54370
    gr_spr_draw_next : $d46e          54382
        gr_spr_erase : $d41c          54300
     gr_spr_erase_do : $d424          54308
   gr_spr_erase_loop : $d41e          54302
   gr_spr_erase_next : $d42a          54314
          gr_spr_hit : $d487          54407
         gr_spr_init : $d40e          54286
    gr_spr_init_loop : $d410          54288
   gr_spr_multi_loop : $d4a2          54434
    gr_spr_multi_pos : $d49e          54430
          gr_spr_new : $d42e          54318
     gr_spr_new_loop : $d430          54320
     gr_spr_new_next : $d45c          54364
          gr_spr_pos : $d491          54417
          gr_spr_put : $d472          54386
           gr_text_h : $0009              9
       gr_text_start : $0005              5
           gr_text_w : $0008              8
              HICHAR : $9800          38912   *
              HISCRN : $a000          40960   *
              HITEXT : $bf68          49000   *
          hex_to_bcd : $c351          50001
           hires_col : $9d90          40336   *
          hires_mask : $9e80          40576   *
        hires_row_hi : $9cc8          40136   *
       hires_row_low : $9c00          39936   *
                 IER : $000e             14   *
                 IFR : $000d             13   *
             IFR_CA1 : $0002              2   *
             IFR_CA2 : $0001              1   *
             IFR_CB1 : $0010             16   *
                IO_0 : $0300            768   *
       inc_kb_timers : $c153          49491
            infinity : $c07e          49278
                init : $c4af          50351
            init_irq : $c0ba          49338
       init_keyboard : $c897          51351
            init_ram : $c4d8          50392
       init_ram_fill : $c4e5          50405
       init_ram_skip : $c4ea          50410
          init_ram_1 : $c4e1          50401
            init_snd : $d5d8          54744
       init_snd_regs : $d5da          54746
       init_tape_tab : $c521          50465
           init_via0 : $c4f7          50423
      init_via0_done : $c509          50441
      init_via0_loop : $c4f9          50425
       init_via0_tab : $c50a          50442
      init_via0_tape : $c4f4          50420
              init_2 : $c4b4          50356
             int_div : $d662          54882
       int_div_cycle : $d694          54932
      int_div_noflip : $d6c4          54980
        int_div_skip : $d6ae          54958
   int_div_skip_negA : $d679          54905
AS65 Assembler for R6502 [1.42].                                     Page   23
-------------------------------- bank\bank0.s --------------------------------

   int_div_skip_negB : $d68c          54924
       int_fast_mult : $d60e          54798
 int_fast_mult_cycle : $d61e          54814
  int_fast_mult_next : $d62f          54831
            int_mult : $d637          54839
      int_mult_cycle : $d647          54855
       int_mult_next : $d65a          54874
             int_str : $c3ba          50106
          int_to_str : $c39b          50075
       int_to_str_ch : $c386          50054
   int_to_str_ch_fin : $c39a          50074
      int_to_str_fin : $c3d9          50137
       int_to_str_nz : $c393          50067
 int_to_str_skip_neg : $c3b5          50101
         int_vdp_fin : $c148          49480
     int_vdp_handler : $c12d          49453
    io_active_device : $c401          50177
          io_address : $0300            768
            io_block : $0601           1537
           io_buf_sz : $c48d          50317
            io_close : $c433          50227
          io_close_f : $0008              8
        io_copy_data : $c40e          50190
          io_default : $0600           1536
           io_delete : $c436          50230
            io_del_f : $000a             10
          io_devices : $c48f          50319
          io_device0 : $c48f          50319
          io_device1 : $c49f          50335
          io_do_echo : $c456          50262
             io_ext1 : $000c             12
             io_ext2 : $000e             14
         io_get_byte : $0000              0
           io_get_ch : $c427          50215
    io_get_line_byte : $c443          50243
    io_get_line_done : $c470          50288
             io_init : $c3f6          50166
          io_null_op : $c48b          50315
        io_open_ext1 : $c439          50233
        io_open_ext2 : $c43c          50236
           io_open_r : $0004              4
        io_open_read : $c42d          50221
           io_open_w : $0006              6
       io_open_write : $c430          50224
       io_print_done : $c489          50313
       io_print_line : $c478          50296
  io_print_line_byte : $c47f          50303
         io_put_byte : $0002              2
           io_put_ch : $c42a          50218
        io_read_line : $c43f          50239
      io_set_default : $c3fe          50174
        io_skip_echo : $c459          50265
     io_skip_special : $c464          50276
           io_struct : $0010             16
                 irq : $c0de          49374
             irq_brk : $c100          49408
             irq_fin : $c0fa          49402
           KB_CAPSLK : $0001              1   *
         KB_DEBOUNCE : $0001              1   *
              KB_IJK : $0020             32   *
              KB_PRB : $00b0            176   *
          KB_REP_DEL : $0014             20   *
AS65 Assembler for R6502 [1.42].                                     Page   24
-------------------------------- bank\bank0.s --------------------------------

          KB_REP_TIM : $0003              3   *
            KB_SENSE : $0008              8   *
          kb_any_key : $c929          51497
     kb_any_key_none : $c949          51529
  kb_any_key_pressed : $c94b          51531
      kb_any_key_row : $c930          51504
              kb_brk : $ca3a          51770
 kb_check_matrix_col : $c965          51557
 kb_check_matrix_row : $c965          51557
      kb_check_skip4 : $c986          51590
             kb_code : $002b             43
         kb_col_mask : $cada          51930
              kb_deb : $002d             45
          kb_deb_tim : $002e             46
        kb_do_repeat : $ca2a          51754
          kb_get_key : $ca3c          51772
          kb_get_try : $ca40          51776
          kb_ijk_map : $cae7          51943
        kb_in_repeat : $ca36          51766
             kb_last : $002a             42
          kb_no_scan : $c9bb          51643
      kb_process_new : $c9c9          51657
              kb_raw : $0029             41
         kb_rdel_tim : $0031             49
         kb_read_got : $c94b          51531
     kb_read_noshift : $c9f6          51702
     kb_read_nothing : $c991          51601
         kb_read_raw : $c94d          51533
     kb_read_raw_got : $c995          51605
              kb_rep : $002f             47
          kb_rep_tim : $0030             48
      kb_scan_decode : $c9bf          51647
     kb_scan_got_key : $ca51          51793
         kb_scan_key : $c9a4          51620
        kb_skip_ctrl : $ca12          51730
             kb_stat : $002c             44
            kb_stick : $c8cd          51405
        kb_stick_ijk : $c8fb          51451
       kb_stick_mask : $cae2          51938
        kb_stick_pos : $c8e2          51426
       kb_store_last : $ca32          51762
      kb_table_shift : $ca9a          51866
        kb_table_std : $ca5a          51802
         kernel_init : $c4bd          50365
         kernel_test : $c4d7          50391
                main : $c077          49271
           mem_start : $071f           1823
        mod_sz_asm_e : $fff9          65529
        mod_sz_asm_s : $f994          63892
       mod_sz_bios_e : $d60e          54798
       mod_sz_bios_s : $c000          49152
        mod_sz_cia_e : $c54c          50508
        mod_sz_cia_s : $c4f4          50420
      mod_sz_dflat_e : $f801          63489
      mod_sz_dflat_s : $d6c5          54981
       mod_sz_file_e : $c707          50951
       mod_sz_file_s : $c54c          50508
      mod_sz_graph_e : $d4b2          54450
      mod_sz_graph_s : $cb07          51975
         mod_sz_io_e : $c4af          50351
         mod_sz_io_s : $c3f6          50166
     mod_sz_kernel_e : $c4f4          50420
AS65 Assembler for R6502 [1.42].                                     Page   25
-------------------------------- bank\bank0.s --------------------------------

     mod_sz_kernel_s : $c000          49152
   mod_sz_language_e : $fff9          65529
   mod_sz_language_s : $d60e          54798
       mod_sz_proc_e : $f721          63265
       mod_sz_proc_s : $f5c9          62921
   mod_sz_progedit_e : $e1af          57775
   mod_sz_progedit_s : $e040          57408
      mod_sz_rtasm_e : $fd89          64905
      mod_sz_rtasm_s : $fa8e          64142
     mod_sz_rtsubs_e : $f5c9          62921
     mod_sz_rtsubs_s : $e76b          59243
    mod_sz_runtime_e : $f721          63265
    mod_sz_runtime_s : $e1af          57775
         mod_sz_sd_e : $c897          51351
         mod_sz_sd_s : $c7a5          51109
      mod_sz_sound_e : $d60e          54798
      mod_sz_sound_s : $d5c1          54721
     mod_sz_sprite_e : $d4b2          54450
     mod_sz_sprite_s : $d40e          54286
       mod_sz_tape_e : $c7a5          51109
       mod_sz_tape_s : $c707          50951
      mod_sz_tkasm_e : $fa8e          64142
      mod_sz_tkasm_s : $f994          63892
   mod_sz_tokenise_e : $e040          57408
   mod_sz_tokenise_s : $d84d          55373
    mod_sz_toksubs_e : $e040          57408
    mod_sz_toksubs_s : $df08          57096
        mod_sz_var_e : $d84d          55373
        mod_sz_var_s : $d6c5          54981
          msg_errmsg : $d5be          54718
     msg_hello_world : $c081          49281
           msg_ready : $d5bc          54716
             NUM_ANY : $0000              0   *
             NUM_BIN : $0003              3   *
             NUM_DEC : $0001              1   *
             NUM_HEX : $0002              2   *
                 nmi : $c4f3          50419
        null_handler : $c0dd          49373
            null_irq : $c0dc          49372
               num_a : $003d             61
               num_b : $0041             65
             num_buf : $004d             77
             num_tmp : $0049             73
               num_x : $0045             69
                 PCR : $000c             12   *
                 PRA : $0001              1   *
                PRAH : $000f             15   *
                 PRB : $0000              0   *
        print_a_to_d : $c3e5          50149
     print_a_to_d_ch : $c3ea          50154
    print_a_to_d_fin : $c3f5          50165
        SD_BIT_DELAY : $0002              2   *
           SND_ADBUS : $030f            783   *
        SND_DESELECT : $00dd            221   *
            SND_MODE : $030c            780   *
       SND_REG_CHAPH : $0001              1   *
       SND_REG_CHAPL : $0000              0   *
      SND_REG_CHAVOL : $0008              8   *
       SND_REG_CHBPH : $0003              3   *
       SND_REG_CHBPL : $0002              2   *
      SND_REG_CHBVOL : $000a             10   *
       SND_REG_CHCPH : $0005              5   *
AS65 Assembler for R6502 [1.42].                                     Page   26
-------------------------------- bank\bank0.s --------------------------------

       SND_REG_CHCPL : $0004              4   *
        SND_REG_CHNP : $0006              6   *
         SND_REG_CTL : $0007              7   *
      SND_REG_ENVCYC : $000d             13   *
       SND_REG_ENVPH : $000c             12   *
       SND_REG_ENVPL : $000b             11   *
         SND_REG_IOA : $000e             14   *
         SND_REG_IOB : $000f             15   *
         SND_SELREAD : $00df            223   *
      SND_SELSETADDR : $00ff            255   *
        SND_SELWRITE : $00fd            253   *
                  SR : $000a             10   *
               SWBRK : <macro>
             scratch : $061f           1567
        sd_block_gap : $c871          51313
     sd_commandfname : $c861          51297
  sd_commandfname_ch : $c866          51302
            sd_delay : $c7d2          51154
       sd_delay_loop : $c7d6          51158
           sd_delete : $c872          51314
              sd_dir : $c87d          51325
         sd_dir_char : $c888          51336
             sd_init : $c85a          51290
           sd_init_a : $c85e          51294
         sd_notready : $c7c5          51141
        sd_put_delay : $c871          51313
            sd_ready : $c7c1          51137
      sd_ready_skipx : $c7cb          51147
        sd_read_byte : $c82d          51245
      sd_read_nibble : $c818          51224
          sd_release : $c7a5          51109
           sd_select : $c7b1          51121
          sd_timeout : $c7dc          51164
       sd_write_byte : $c7f1          51185
     sd_write_nibble : $c7de          51166
          skip_a_f_1 : $c191          49553
          skip_a_f_2 : $c1a0          49568
         skip_kb_deb : $c159          49497
         skip_kb_rep : $c15f          49503
          skip_x_f_1 : $c1ac          49580
          skip_x_f_2 : $c1c1          49601
        snd_get_note : $d5c1          54721
    snd_get_note_oct : $d5cc          54732
        snd_init_tab : $d5e4          54756
       snd_music_tab : $d5f4          54772
       snd_note_done : $d5d5          54741
         snd_sel_reg : $c04e          49230
             snd_set : $c06e          49262
         snd_set_reg : $c05e          49246
        spr_baseadrh : $b4e0          46304   *
        spr_baseadrl : $b4c0          46272   *
            spr_bgnd : $b4a0          46240   *
             spr_chr : $b480          46208   *
            spr_curX : $b400          46080   *
            spr_curY : $b440          46144   *
            spr_newX : $b420          46112   *
            spr_newY : $b460          46176   *
          str_a_to_x : $c185          49541
   str_d_digits_done : $c2c1          49857
         str_d_error : $c26d          49773
      str_d_find_end : $c27c          49788
     str_d_found_end : $c289          49801
AS65 Assembler for R6502 [1.42].                                     Page   27
-------------------------------- bank\bank0.s --------------------------------

        str_d_powers : $c2de          49886
 str_d_process_digit : $c297          49815
      str_d_skip_neg : $c2d8          49880
          str_x_to_a : $c1a1          49569
      str_x_to_a_err : $c1cc          49612
     str_x_to_a_errl : $c1cb          49611
           TAPE_RATE : $00d0            208   *
            TEXTCHAR : $b400          46080   *
            TEXTSCRN : $bb80          48000   *
         TIMER1_RATE : $4e20          20000   *
                T1CH : $0005              5   *
                T1CL : $0004              4   *
                T1LH : $0007              7   *
                T1LL : $0006              6   *
                T2CH : $0009              9   *
                T2CL : $0008              8   *
             tmp_ahi : $0033             51
             tmp_alo : $0032             50
           tmp_bank1 : $0000              0
           tmp_bank2 : $0001              1
             tmp_bhi : $0035             53
             tmp_blo : $0034             52
             tmp_chi : $0037             55
             tmp_clo : $0036             54
               tmp_d : $0038             56
        tpsd_vectors : $c54c          50508
            tp_block : $0055             85
        tp_block_gap : $c713          50963
      tp_block_gap_1 : $c717          50967
              tp_buf : $0200            512
            tp_delay : $0059             89
             tp_flag : $0058             88
              tp_idx : $0057             87
             tp_init : $c707          50951
         tp_io_error : $c7a3          51107
            tp_print : $005b             91
        tp_put_delay : $c70b          50955
         tp_read_bit : $c78a          51082
     tp_read_bit_cb1 : $c78e          51086
        tp_read_byte : $c776          51062
   tp_read_byte_bits : $c782          51074
     tp_read_byte_st : $c776          51062
          tp_release : $c70a          50954
        tp_write_bit : $c741          51009
   tp_write_bit_chk1 : $c752          51026
   tp_write_bit_chk2 : $c76a          51050
     tp_write_bit_t1 : $c761          51041
       tp_write_byte : $c71e          50974
   tp_write_byte_bit : $c72a          50986
tp_write_byte_nodelay : $c73f          51007
     tt_csave_end_pc : $c60d          50701
   tt_getsync_end_pc : $c5f3          50675
  tt_getsync_loop_pc : $c78e          51086
       tt_getsync_pc : $c5f3          50675
   tt_putbyte_end_pc : $c740          51008
       tt_putbyte_pc : $c71e          50974
  tt_readbyte_end_pc : $c789          51081
      tt_readbyte_pc : $c776          51062
tt_writeleader_end_pc : $c639          50745
   tt_writeleader_pc : $c639          50745
     twos_complement : $c342          49986
twos_complement_skip_X : $c350          50000
AS65 Assembler for R6502 [1.42].                                     Page   28
-------------------------------- bank\bank0.s --------------------------------

             UTF_ACK : $0001              1   *
             UTF_BEL : $0007              7   *
             UTF_BRK : $001a             26   *
              UTF_CR : $000d             13   *
             UTF_DEL : $007f            127   *
             UTF_ETX : $0003              3   *
              UTF_FF : $000c             12   *
         UTF_SPECIAL : $0020             32   *
       update_timers : $c149          49481
          utilPrintA : $c170          49520
       utilPrintCRLF : $c168          49512
        utilPrintSPC : $c160          49504
           VDP_FLASH : $0010             16   *
           vdp_blank : $0010             16
             vdp_cnt : $0008              8
          vdp_cnt_hi : $0009              9
         vdp_cnt_hi2 : $000a             10
          vdp_curcnt : $000c             12
          vdp_curoff : $000d             13
         vdp_curstat : $000e             14
          vdp_curtim : $000b             11
          vdp_curval : $000f             15
  vdp_fill_vram_loop : $cedf          52959
 vdp_fill_vram_noinc : $cee7          52967
            vdp_font : $cb07          51975
          vdp_font_a : $cc0f          52239
             vec_brk : $0004              4
             vec_irq : $0002              2
        vec_usercia0 : $0006              6
     via_strobe_init : $c530          50480
      via_strobe_off : $c53c          50492
             zp_tmp1 : $00ac            172
             zp_tmp2 : $00ad            173
             zp_tmp3 : $00ae            174
             zp_tmp4 : $00af            175
             ztmp_24 : $003d             61
          _adcZPByte : <macro>
          _addZPWord : <macro>
                _bcc : <macro>
                _bcs : <macro>
           _code_end : $fff9          65529
         _code_start : $c000          49152
          _cpu_stack : $0100            256
          _cpyZPWord : <macro>
              _debug : <macro>
          _decZPWord : <macro>
         _decZPWordA : <macro>
      _end_zero_page : $00b0            176
          _incZPWord : <macro>
       _mod_sz_cmd_e : $d5c1          54721
       _mod_sz_cmd_s : $d4b2          54450
       _PushFalseJmp : <macro>
        _PushTrueJmp : <macro>
             _printA : <macro>
             _printC : <macro>
            _printCA : <macro>
          _printCRLF : <macro>
            _println : <macro>
        _println_low : <macro>
          _printmsgA : <macro>
            _pullAXY : <macro>
            _pushAXY : <macro>
AS65 Assembler for R6502 [1.42].                                     Page   29
-------------------------------- bank\bank0.s --------------------------------

         _rom_vec_0a : $c01e          49182
         _rom_vec_0b : $c021          49185
         _rom_vec_0c : $c024          49188
         _rom_vec_0d : $c027          49191
         _rom_vec_0e : $c02a          49194
         _rom_vec_0f : $c02d          49197
         _rom_vec_00 : $c000          49152
         _rom_vec_01 : $c003          49155
         _rom_vec_02 : $c006          49158
         _rom_vec_03 : $c009          49161
         _rom_vec_04 : $c00c          49164
         _rom_vec_05 : $c00f          49167
         _rom_vec_06 : $c012          49170
         _rom_vec_07 : $c015          49173
         _rom_vec_08 : $c018          49176
         _rom_vec_09 : $c01b          49179
         _rom_vec_10 : $c030          49200
         _rom_vec_11 : $c033          49203
         _rom_vec_12 : $c036          49206
         _rom_vec_13 : $c039          49209
         _rom_vec_14 : $c03c          49212
         _rom_vec_15 : $c03f          49215
         _rom_vec_16 : $c042          49218
         _rom_vec_17 : $c045          49221
         _rom_vec_18 : $c048          49224
         _rom_vec_19 : $c04b          49227
          _sbcZPByte : <macro>
            _sendcmd : <macro>
          _subZPWord : <macro>
            __6502__ : $0001              1

1738 labels used

16367 lines read, no errors in pass 1.
AS65 Assembler for R6502 [1.42].                                     Page   30
-------------------------------- bank\bank0.s --------------------------------

c000 =                       	org 0xc000
c000 :                       mod_sz_bios_s
                             	include "kernel/kernel.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	Lol, I thought this would become more sophisti
                             ;*	hence the name 'kernel'. But no, it just initi
                             ;*	memory, VIA, sound and screen, before passing 
                             ;*	to main.
                             ;*	References to banks etc. are from ported code 
                             ;*	did do more stuff, namely helping with ROM ban
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc/includes.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  and ACIA registers.
                             ;*	Of course the Oric doesn't have a VDP or an AC
                             ;*	so this file could be optimised.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x0300
0300 =                       IO_0		= 0x0300
                             
0010 =                       VDP_FLASH	= 16				;* 32/50 second flash
                             
4e20 =                       TIMER1_RATE	= 1000000 / 50		;* 50 times per secon
00d0 =                       TAPE_RATE	= 0xd0				;* Assumed required FM freque
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
AS65 Assembler for R6502 [1.42].                                     Page   31
-------------------------------- bank\bank0.s --------------------------------

000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
0010 =                       IFR_CB1		= 0x10
                             
                             ;* AY-3-8912 definitions
                             ;* The sound chip is accessed through VIA Port A
030f =                       SND_ADBUS	= IO_0+PRAH
030c =                       SND_MODE	= IO_0+PCR
                             
                             ; Values for the PCR register - always enable CB1
00df =                       SND_SELREAD			= 0b11011111		; CB2=low, CA2=high
00fd =                       SND_SELWRITE		= 0b11111101		; CB2=high, CA2=low
00ff =                       SND_SELSETADDR		= 0b11111111		; CB2=high, CA2=hig
00dd =                       SND_DESELECT		= 0b11011101		; CB2=low,CA2=low
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             
                             ;* Port B
00b0 =                       KB_PRB		= 0xb0			; Upper nibble of PRB default st
0008 =                       KB_SENSE	= 0x08			; Input - Bit 3 port A
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock
0020 =                       KB_IJK		= 0b00100000	; IJK joystick detect bit
                             
0003 =                       KB_REP_TIM	= 3 			; Number of VB periods for the 
0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0001 =                       KB_DEBOUNCE	= 1				; Number of VB periods before 
                             
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0014 =                       CTRL_CAPS	= 0x14			; CTRL-T to toggle caps
0001 =                       UTF_ACK		= 0x01			; Used for the CTRL-A copy in t
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
AS65 Assembler for R6502 [1.42].                                     Page   32
-------------------------------- bank\bank0.s --------------------------------

007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	sta tmp_d
                             	txa
                             	pha
                             	tya
                             	pha
                             	lda tmp_d
                             	endm
                             
                             _pullAXY macro
                             	pla
                             	tay
                             	pla
                             	tax
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
                             _printmsgA macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
AS65 Assembler for R6502 [1.42].                                     Page   33
-------------------------------- bank\bank0.s --------------------------------

                             	jsr io_print_line
                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	_pullAXY
                             	endm
                             
                             _printA macro
                             	_pushAXY
                             	jsr str_a_to_x
                             	jsr io_put_ch
                             	txa
                             	jsr io_put_ch
                             	_pullAXY
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr io_put_ch
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWordA macro wordp
                             	lda wordp
                             	db	0xd0, 0x02
                             	dec wordp+1
                             	dec wordp
                             	endm
                             	
AS65 Assembler for R6502 [1.42].                                     Page   34
-------------------------------- bank\bank0.s --------------------------------

                             _decZPWord macro wordp
                             	pha
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPByte macro worda, byte
                             	clc
                             	lda worda
                             	adc byte
                             	sta worda
                             	db 0x90, 0x02		; bcc 2
                             	inc worda+1
                             	endm
                             
                             _sbcZPByte macro worda, byte
                             	sec
                             	lda worda
                             	sbc byte
                             	sta worda
                             	db 0xb0, 0x02		; bcs 2
                             	inc worda+1
                             	endm
                             
                             _bcc macro skip
                             	db 0x90, skip
                             	endm
                             
                             _bcs macro skip
AS65 Assembler for R6502 [1.42].                                     Page   35
-------------------------------- bank\bank0.s --------------------------------

                             	db 0xb0, skip
                             	endm
                             
                             _debug macro ch
                             	pha
                             	lda #ch
                             	sta 48000
                             	pla
                             	endm
                             	
                             
                             
                             	include "inc/graph.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*	This was needed in the previous code due to 32
                             ;*	byte width screens, but Oric only  has 40, so 
                             ;*	could be optimised a little.
                             ;*
                             ;************************************************
                             
                             ; Important screen addresses for the Oric ULA
bb80 =                       TEXTSCRN	=	0xbb80
b400 =                       TEXTCHAR	=	0xb400
a000 =                       HISCRN		=	0xa000
9800 =                       HICHAR		=	0x9800
bf68 =                       HITEXT		=	0xbf68
                             
0000 =                       	struct gr_screen
0000 =                       	db gr_mode					; Text or Hires mode
0001 =                       	dw gr_hi_start				; Address fo hires screen
0003 =                       	dw gr_char					; Start address of charset
0005 =                       	dw gr_text_start			; Start of text memory
0007 =                       	db gr_geom_fill1			; (Not used, maintained for a
0008 =                       	db gr_text_w				; Number of columns
0009 =                       	db gr_text_h				; Number of rows
000a =                       	db gr_cur_x					; Current X position of cursor
000b =                       	db gr_cur_y					; Current Y position of cursor
000c =                       	dw gr_cur_ptr				; VDP address of cursor
000e =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
000f =                       	db gr_pitch					; Pixel pitch for char plotting
0010 =                       	db gr_hires_x				; X pos of hires cursor
0011 =                       	db gr_hires_y				; Y pos of hires cursor
0012 =                       	db gr_ink					; Ink colour
0013 =                       	db gr_paper					; Paper colour
0014 =                       	db gr_margin				; Left margin
0015 =                       	dw gr_geom_tmp				; One word of temp storage for
0017 =                       	db gr_geom_tmp2				; One byte of temp storage fo
                             	end struct
                             	
                             ; Sprite data stored in free 256 in font space
AS65 Assembler for R6502 [1.42].                                     Page   36
-------------------------------- bank\bank0.s --------------------------------

b400 =                       spr_curX	= TEXTCHAR			; Sprite current X pos
b420 =                       spr_newX	= TEXTCHAR+32		; Sprite new X pos
b440 =                       spr_curY	= TEXTCHAR+64		; Sprite current Y pos
b460 =                       spr_newY	= TEXTCHAR+96		; Sprite new Y pos
b480 =                       spr_chr		= TEXTCHAR+128		; Sprite character
b4a0 =                       spr_bgnd	= TEXTCHAR+160		; Background character u
b4c0 =                       spr_baseadrl= TEXTCHAR+192		; Y low address of sp
b4e0 =                       spr_baseadrh= TEXTCHAR+224		; Y high address of s
                             
                             ; Tables stored in alternate character set area
                             ; only used for high-resolution screen handling
9c00 =                       hires_row_low	=	HICHAR+0x400		; Low byte of row p
9cc8 =                       hires_row_hi	=	hires_row_low+200	; High byte of r
9d90 =                       hires_col		=	hires_row_hi+200	; Pixel to byte col
9e80 =                       hires_mask		=	hires_col+240		; Pixel column to pi
                             
                             
                             	include "io/io.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*	Some over-engineering here for future possibil
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             
                             ;* Structure storage device specific vectors
0000 =                       	struct f_storage_table
0000 =                       	ds	f_init_vec,			2
0002 =                       	ds	f_read_byte_vec,	2
0004 =                       	ds	f_write_byte_vec,	2
0006 =                       	ds	f_put_delay_vec,	2
0008 =                       	ds	f_block_gap_vec,	2
000a =                       	ds	f_release_vec,		2
                             	end struct
                             
                             	include "dflat/dflat.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
AS65 Assembler for R6502 [1.42].                                     Page   37
-------------------------------- bank\bank0.s --------------------------------

                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
071f =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
9800 =                       DF_MEMTOP	=	0x9800
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
AS65 Assembler for R6502 [1.42].                                     Page   38
-------------------------------- bank\bank0.s --------------------------------

                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
AS65 Assembler for R6502 [1.42].                                     Page   39
-------------------------------- bank\bank0.s --------------------------------

0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             	include "kernel/zeropage.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple uses across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
                             ; Interrupt routine addresses
0002 =                       vec_irq		 ds	2		; Master IRQ handler
0004 =                       vec_brk		 ds	2		; Master BRK handler
0006 =                       vec_usercia0 ds	2		; Where to jump for CIA0 inter
                             
                             ; VDP parameters
0008 =                       vdp_cnt		ds	1		; VDP interrupt counter
0009 =                       vdp_cnt_hi 	ds	1		; VDP counter high
000a =                       vdp_cnt_hi2	ds	1		; VDP counter high 2
000b =                       vdp_curtim	ds	1		; Cursor blink speed
000c =                       vdp_curcnt	ds	1		; Cursor blink countdown
000d =                       vdp_curoff	ds	1		; Cursor off (0 = On)
000e =                       vdp_curstat	ds	1		; Cursor status
000f =                       vdp_curval	ds	1		; Cursor value on screen
0010 =                       vdp_blank	ds	1		; Screen blank value normally 32
AS65 Assembler for R6502 [1.42].                                     Page   40
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; Screen geometry
0011 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0029 =                       kb_raw  	ds	1		; Raw keyboard code
002a =                       kb_last		ds	1		; Code of last key
002b =                       kb_code 	ds	1		; Converted keyboard code
002c =                       kb_stat		ds	1		; Keyboard status for caps and shi
002d =                       kb_deb		ds	1		; Debounce timer
002e =                       kb_deb_tim  ds	1		; Default debounce delay
002f =                       kb_rep		ds	1		; Keyboard repeat speed timer
0030 =                       kb_rep_tim 	ds	1		; Default repeat speed
0031 =                       kb_rdel_tim	ds	1		; Default repeat delay (until s
                             
0032 =                       tmp_alo 	ds	1		; VDP addresses lo
0033 =                       tmp_ahi 	ds	1		; VDP addresses hi
0034 =                       tmp_blo 	ds	1		; Temp address lo
0035 =                       tmp_bhi		ds	1		; Temp address hi
0036 =                       tmp_clo		ds	1		; Temp address lo
0037 =                       tmp_chi		ds	1		; Temp address hi
0038 =                       tmp_d		ds	1		; Temp storage d
                             
                             ; Raw input/output parameters
0039 =                       buf_lo		ds	1		; Line buffer address low
003a =                       buf_hi		ds	1		; Line buffer address high
003b =                       buf_sz		ds	1		; Buffer size
003c =                       buf_ef		ds	1		; End file / line marker
                             
                             
                             ; ** Integer function storage **
003d =                       ztmp_24					; Start of 24 byte scratch area (all 
003d =                       num_a		ds	4		; 4 byte primary accumulator
0041 =                       num_b		ds	4		; 4 byte secondary accumulator
0045 =                       num_x		ds	4		; 4 byte x register
0049 =                       num_tmp		ds	4		; 4 byte temp space
004d =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ; ** Tape function storage **
0055 =                       tp_block	ds	2		; Block number (int)
0057 =                       tp_idx		ds	1		; Current buffer index
0058 =                       tp_flag		ds	1		; zero = closed, 1=read, 2=write
0059 =                       tp_delay	ds	2		; Interblock delay
005b =                       tp_print	ds  1		; Interactive mode i.e. print? (M
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
005c =                       dflat_zp_s
005c =                       dflat_zp_save_s			; ZP save dflat from here
005c =                       df_checkkey	ds	1		; Key check interval counter
005d =                       df_checkmsk	ds	1		; Mask for check key
005e =                       errno		ds	1		; General error condition status
005f =                       df_immed	ds	1		; Immediate mode (0 = not immediat
0060 =                       df_sp		ds	1		; Stack pointer after error to resto
0061 =                       df_pc		ds	2		; PC after error to return to
0063 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
0065 =                       df_brkval	ds	1		; Byte after BRK instruction
0066 =                       df_prgstrt	ds	2		; Start of program code
0068 =                       df_prgend	ds	2		; End of program code
006a =                       df_vntstrt	ds	2		; Variable name table start
006c =                       df_vntend	ds	2		; Variable name table end
AS65 Assembler for R6502 [1.42].                                     Page   41
-------------------------------- bank\bank0.s --------------------------------

006e =                       df_vvtstrt	ds	2		; Variable value table start
0070 =                       df_vvtend	ds	2		; Variable value table end
0072 =                       df_varcnt	ds	1		; Variable counter
0073 =                       df_starstrt	ds	2		; String and array table start
0075 =                       df_starend	ds	2		; String and array table end
0077 =                       df_rtstop	ds	1		; Runtime stack pointer
0078 =                       df_parmtop	ds	1		; Top of parameter stack (grows 
0079 =                       df_strbuffz	ds	1		; String expression buffer (*un
007a =                       df_stridxz	ds	1		; Top of string buffer (grows do
007b =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
007d =                       df_linoff	ds	1		; Offset in to line buffer
007e =                       df_tokoff	ds	1		; Offset in to tokenised buffer
007f =                       df_eolidx	ds	1		; End of line index (i.e length)
0080 =                       df_nxtstidx	ds	1		; Offset to the next statement 
0081 =                       df_curstidx	ds	1		; Offset to the start of curren
0082 =                       df_symtab	ds	2		; Pointer to next free symtab ent
0084 =                       df_symoff	ds	1		; Offset in to token table
0085 =                       df_syminiz	ds	2		; Start of symtab (*unused*)
0087 =                       df_currlin	ds	2		; Execution current line pointer
0089 =                       df_exeoff	ds	1		; Execution line buffer offset
008a =                       df_nextlin	ds	2		; Next line to execute
008c =                       df_procmode	ds	1		; Only used during tokenisation
008d =                       df_procargs	ds	1		; Only used during tokenisation
008e =                       df_procloc	ds	1		; Counts the number of local par
008f =                       df_procptr	ds	2		; Pointer to proc vvt slot
0091 =                       df_lineptr	ds	2		; Pointer to line during searche
0093 =                       df_lineidx	ds	1		; Pointer to line index during s
0094 =                       df_ifnest	ds	1		; Global nested if counter
0095 =                       df_currdat	ds	2		; Data current line pointer
0097 =                       df_datoff	ds	1		; Data line buffer offset
0098 =                       df_rnd		ds	2		; Random number seed
                             
009a =                       df_asmpc	ds	2		; Assembler program counter
009c =                       df_asmopt	ds	1		; Assembler current option
009d =                       df_asmadmd	ds	1		; Addressing mode
009e =                       df_asmopcde	ds	1		; Current opcode
009f =                       df_asmoprnd	ds	2		; Current operand
00a1 =                       df_asmlen	ds	1		; Instruction length
                             
00a2 =                       dflat_zp_save_e			; Save up to this place
                             
                             ; Temp space for dflat
00a2 =                       df_tmpptra	ds	2		; Temp pointer a
00a4 =                       df_tmpptrb	ds	2		; Temp pointer b
00a6 =                       df_tmpptrc	ds	2		; Temp pointer c
00a8 =                       df_tmpptrd	ds	2		; Temp pointer d
00aa =                       df_tmpptre	ds	2		; Temp pointer e
                             
00ac =                       dflat_zp_e
                             
00ac =                       zp_tmp1		ds	1		; General zero page temporary
00ad =                       zp_tmp2		ds	1		; General zero page temporary
00ae =                       zp_tmp3		ds	1		; General zero page temporary
00af =                       zp_tmp4		ds	1		; General zero page temporary
                             
                             ;***** END OF ZERO PAGE *****
00b0 =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
AS65 Assembler for R6502 [1.42].                                     Page   42
-------------------------------- bank\bank0.s --------------------------------

0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 is tape buffer *****
0200 =                       	org 0x0200
0200 =                       tp_buf		ds	256		; Serial input / output line buff
                             
                             ;***** 3 is IO *****
0300 =                       	org 0x0300			; IO mapped to Page 3 on Oric
0300 =                       io_address	ds	256
                             
0400 =                       	org 0x0400			; Page 4 = dflat space
0400 =                       fd_getname_addr			; ** FOR ORICUTRON EMULATOR **
0400 =                       df_linbuff
0400 =                       df_raw		ds	128		; untokenised input line
0480 =                       df_tokbuff
0480 =                       df_tok		ds 	128		; tokenised output line
                             
0500 =                       	org 0x0500			; Page 5 = fixed space for interpre
0500 =                       df_rtstck				; operator stack grow up, runtime gr
0500 =                       df_rtspace	ds	256
                             
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
                             ; Active IO device settings
0600 =                       io_default	ds	1		; The default device number
0601 =                       io_block	ds	io_struct
                             
                             ; Jump tables for file devices
0611 =                       f_storage_vec		ds	f_storage_table
                             
                             ; Dflat top of memory+1 - initialised at boot tim
061d =                       df_memtop	ds	2
                             
                             ; Scratch area e.g. string and numeric expression
061f =                       scratch		ds	256
                             
                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
071f =                       mem_start
                             
                             
                             	include "dflat/dflat.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
071f =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
9800 =                       DF_MEMTOP	=	0x9800
                             
AS65 Assembler for R6502 [1.42].                                     Page   43
-------------------------------- bank\bank0.s --------------------------------

                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
AS65 Assembler for R6502 [1.42].                                     Page   44
-------------------------------- bank\bank0.s --------------------------------

                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             	include "dflat/error.i"
AS65 Assembler for R6502 [1.42].                                     Page   45
-------------------------------- bank\bank0.s --------------------------------

                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors are at these addresses
fffa : f3c4                  	fcw nmi				; 0xfffa : NMI Vector
fffc : afc4                  	fcw init			; 0xfffc : Reset Vector
fffe : d3c0                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             
                             	; ROM code
                             	code				;
c000 =                       	org 0xc000			; Start of ROM
                             
c000 :                       _code_start
AS65 Assembler for R6502 [1.42].                                     Page   46
-------------------------------- bank\bank0.s --------------------------------

                             	; Restore current bank always at address c001 * 
c000 :                       mod_sz_kernel_s
                             	; include OS ROM calls - must be from 0xc000
                             	include "kernel/osromvec.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2021
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  OSROMVEC.I
                             ;*	This include file sets up the OS ROM vectors w
                             ;*	be invoked by user programs to access ROM func
                             ;*	will be maintained across versions of dflat to
                             ;*	backward and forward compatibility.
                             ;*	Make sure these vectors are set up from 0xc000
                             ;*	what user programs will rely on!
                             ;*
                             ;************************************************
                             	
                             	; Common OS ROM calls - user programs should JMP
                             	; through these routines where possible to maint
                             	; compatibility with ROM changes as these calls 
                             	; always be in the same position
c000 : 4ca5ce           [ 3] _rom_vec_00	jmp	gr_init_screen_txt			; Go in to t
c003 : 4c3bcf           [ 3] _rom_vec_01	jmp gr_cls						; Clear text screen
c006 : 4ca8cf           [ 3] _rom_vec_02	jmp	gr_set_cur					; Set text cursor 
c009 : 4cbece           [ 3] _rom_vec_03	jmp	gr_init_hires				; Go in to hires
c00c : 6c0106           [ 6] _rom_vec_04	jmp (io_block+io_get_byte)		; Get byt
c00f : 6c0306           [ 6] _rom_vec_05	jmp (io_block+io_put_byte)		; Put byt
c012 : 4c3fc4           [ 3] _rom_vec_06 jmp io_read_line				; Read a line
c015 : 4c78c4           [ 3] _rom_vec_07	jmp io_print_line				; Print a line
c018 : 4c6ec0           [ 3] _rom_vec_08	jmp snd_set						; Set sound register
c01b : 4ccdc8           [ 3] _rom_vec_09	jmp kb_stick					; Get joystick statu
c01e : 4c8fcf           [ 3] _rom_vec_0a	jmp gr_plot						; Plot a lores chara
c021 : 4c54d1           [ 3] _rom_vec_0b	jmp	gr_hchar					; Plot a hires chara
c024 : 4cf6d1           [ 3] _rom_vec_0c	jmp gr_point_setup				; Get address, 
c027 : 4c14d2           [ 3] _rom_vec_0d	jmp gr_point					; Plot a hires pixel
c02a : 4ca5f5           [ 3] _rom_vec_0e	jmp df_rt_sprupd				; Refresh sprites
c02d : 4c7fcf           [ 3] _rom_vec_0f	jmp	gr_getXY_base				; Get row addres
c030 : 4c0ed2           [ 3] _rom_vec_10	jmp gr_pixel					; Get a pixel value 
c033 : 4ca2cf           [ 3] _rom_vec_11 jmp gr_get						; Get screen at coord
c036 : 4c01c4           [ 3] _rom_vec_12 jmp io_active_device			; Set the acti
c039 : 6c0506           [ 6] _rom_vec_13	jmp (io_block+io_open_r)		; Open file
c03c : 6c0706           [ 6] _rom_vec_14	jmp (io_block+io_open_w)		; Open file
c03f : 6c0906           [ 6] _rom_vec_15	jmp (io_block+io_close_f)		; Close fi
c042 : 6c0b06           [ 6] _rom_vec_16	jmp (io_block+io_del_f)			; Delete fi
c045 : 6c0d06           [ 6] _rom_vec_17	jmp (io_block+io_ext1)			; Extended o
c048 : 6c0f06           [ 6] _rom_vec_18	jmp (io_block+io_ext2)			; Extended o
c04b : 4cc1d5           [ 3] _rom_vec_19 jmp snd_get_note				; Get for an octa
                             
                             
                             ;* Include all core code in the right order
                             	include "kernel/snd-low.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
AS65 Assembler for R6502 [1.42].                                     Page   47
-------------------------------- bank\bank0.s --------------------------------

                             ;*  credit of original my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*	Routines to access the AY-3-8912, which is don
                             ;*	lines of the VIA - CB2 and CA2 for chip select
                             ;*	Port A for data interface. This makes accessin
                             ;*	8912 a bit slow..
                             ;*
                             ;* 	CB2		CA2		Function		CB2=BDIR, CA2=BC1
                             ;*	0		0		Not selected
                             ;*	0		1		Read register in to Port A
                             ;*	1		0		Write register from Port A
                             ;*	1		1		Select register # from Port A
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_sel_reg
                             ;* Select AY register from A
                             ;* Input : A = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c04e :                       snd_sel_reg
c04e : 48               [ 3] 	pha
c04f : 8d0f03           [ 4] 	sta SND_ADBUS			; Put reg # on Port A (sound bus
                             
c052 : a9ff             [ 2] 	lda #SND_SELSETADDR		; Get ready to select the r
c054 : 8d0c03           [ 4] 	sta SND_MODE			; Latch the reg # on Port A
                             
c057 : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c059 : 8d0c03           [ 4] 	sta SND_MODE
                             
c05c : 68               [ 4] 	pla
c05d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_set_reg
                             ;* Set previosuly selected AY register
                             ;* Input : A = Value to set
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c05e :                       snd_set_reg
c05e : 48               [ 3] 	pha
                             
c05f : 8d0f03           [ 4] 	sta SND_ADBUS			; Put reg value on Port A (sound
c062 : a9fd             [ 2] 	lda #SND_SELWRITE		; Select mode for writing dat
c064 : 8d0c03           [ 4] 	sta SND_MODE			; Latch reg value on Port A	
c067 : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c069 : 8d0c03           [ 4] 	sta SND_MODE
                             
c06c : 68               [ 4] 	pla
c06d : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* snd_set
                             ;* Set reg X to value A
                             ;* Input : X=Reg, A = Value to set
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c06e :                       snd_set
AS65 Assembler for R6502 [1.42].                                     Page   48
-------------------------------- bank\bank0.s --------------------------------

c06e : 48               [ 3] 	pha
c06f : 8a               [ 2] 	txa
c070 : 204ec0           [ 6] 	jsr snd_sel_reg
c073 : 68               [ 4] 	pla
c074 : 4c5ec0           [ 3] 	jmp snd_set_reg
                             
                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X value
                             ;* Input : X = Reg no
                             ;* Output : A = Value
                             ;* Regs affected : None
                             ;****************************************
                             ;snd_get
                             ;
                             ;	lda #0xff				; Set Port A to output
                             ;	sta IO_0+DDRA
                             ;
                             ;	stx SND_ADBUS			; Put X on the sound bus (X = r
                             ;
                             ;	lda #SND_SELSETADDR		; Get ready to select the 
                             ;	sta SND_MODE			; Latch the reg # on Port A
                             ;
                             ;	lda #SND_DESELECT		; Deselect AY
                             ;	sta SND_MODE
                             ;
                             ;	lda #0x00				; Set Port A to input
                             ;	sta IO_0+DDRA
                             ;
                             ;	lda #SND_SELREAD		; Select mode for reading dat
                             ;	sta SND_MODE			; Set read mode on AY
                             ;
                             ;	lda SND_ADBUS			; Get value in to Y from Port A
                             ;	pha						; Save it to stack
                             ;	
                             ;	lda #SND_DESELECT		; Deselect AY
                             ;	sta SND_MODE
                             ;
                             ;	lda #0xff				; Set Port A back to output
                             ;	sta IO_0+DDRA
                             ;
                             ;	pla						; Get the value off stack
                             ;	
                             ;	rts
                             
                             
                             	include "kernel/main.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page   49
-------------------------------- bank\bank0.s --------------------------------

                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c077 :                       main
c077 : a281             [ 2] 	ldx #lo(msg_hello_world)
c079 : a9c0             [ 2] 	lda #hi(msg_hello_world)
c07b : 2078c4           [ 6] 	jsr io_print_line
                             
c07e :                       infinity
                             
c07e : 4c08e1           [ 3] 	jmp df_pg_dflat
                             
c081 :                       msg_hello_world
                             	;* build.s is generate by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel/build.s"
c081 : 4f726963206466..       db "Oric dflat\r" 
c08c : 42792040363530..       db "By @6502Nerd\r" 
c099 : 4275696c64203a..       db "Build : 0.32 [IJK-SD]\r" 
c0af : 28632920323032..       db "(c) 2024\r\r",0 
                             
                             
                             	include "kernel/irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler
                             ;*	There is only one regular interrupt source whi
                             ;*	T1 timeout on a 50Hz cycle, whose main job is 
                             ;*	flash the cursor and decrement some timers.
                             ;*	But there are handlers for BRK, user and VIA s
                             ;*	By default the user and VIA do nothing, but ca
                             ;*	redirected to user routines.
                             ;*
                             ;************************************************
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
c0ba :                       init_irq
                             	; Core IRQ handler
c0ba : a9de             [ 2] 	lda #lo(irq)
c0bc : 8502             [ 3] 	sta vec_irq
c0be : a9c0             [ 2] 	lda #hi(irq)
c0c0 : 8503             [ 3] 	sta vec_irq+1
                             	
                             	; Core BRK handler
c0c2 : a900             [ 2] 	lda #lo(irq_brk)
c0c4 : 8504             [ 3] 	sta vec_brk
c0c6 : a9c1             [ 2] 	lda #hi(irq_brk)
c0c8 : 8505             [ 3] 	sta vec_brk+1
                             
                             	; User handlers VIA0 interrupts
AS65 Assembler for R6502 [1.42].                                     Page   50
-------------------------------- bank\bank0.s --------------------------------

c0ca : a9dd             [ 2] 	lda #lo(null_handler)
c0cc : 8506             [ 3] 	sta vec_usercia0
c0ce : a9c0             [ 2] 	lda #hi(null_handler)
c0d0 : 8507             [ 3] 	sta vec_usercia0+1
                             
c0d2 : 60               [ 6] 	rts
                             
                             
                             ;* Calls the master IRQ handler - from the ROM
c0d3 :                       call_irq_master
c0d3 : 6c0200           [ 6] 	jmp (vec_irq)
                             	
                             ;* Calls the BRK handler
c0d6 :                       call_irq_brk
c0d6 : 6c0400           [ 6] 	jmp (vec_brk)
                             
                             ;* Call the user CIA0 handler
c0d9 :                       call_irq_usercia0
c0d9 : 6c0600           [ 6] 	jmp (vec_usercia0)
                             
                             ;* null interrupt
c0dc :                       null_irq
c0dc : 40               [ 6] 	rti
                             
                             ;* null handler
c0dd :                       null_handler
c0dd : 60               [ 6] 	rts
                             	
                             
                             ;* Master IRQ handler
c0de :                       irq
                             	; Don't use _pushAXY as it uses a temp location!
c0de : 48               [ 3] 	pha
c0df : 8a               [ 2] 	txa
c0e0 : 48               [ 3] 	pha
c0e1 : 98               [ 2] 	tya
c0e2 : 48               [ 3] 	pha
                             
c0e3 : d8               [ 2] 	cld						; Just in case!
c0e4 : 18               [ 2] 	clc						; Standard behaviour
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c0e5 : ba               [ 2] 	tsx
c0e6 : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c0e9 : 2910             [ 2] 	and #0x10
c0eb : d0e9             [ 3] 	bne call_irq_brk
                             	
                             	;* Primary interrupt is timer 1
c0ed : ad0d03           [ 4] 	lda IO_0 + IFR
c0f0 : 2940             [ 2] 	and #0x40				; Bit 6 = Timer 1 interrupt
c0f2 : f006             [ 3] 	beq irq_fin				; If nothing then end
                             
                             	; Service the timer 1 interrupt
c0f4 : 8d0d03           [ 4] 	sta IO_0 + IFR			; Clear the interrupt
c0f7 : 202dc1           [ 6] 	jsr int_vdp_handler
                             
c0fa :                       irq_fin
                             	_pullAXY
                             
c0ff : 40               [ 6] 	rti
AS65 Assembler for R6502 [1.42].                                     Page   51
-------------------------------- bank\bank0.s --------------------------------

                             	
                             ;* Handle BRK
c100 :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c100 : 38               [ 2] 	sec
c101 : bd0501           [ 4] 	lda 0x0105,x
c104 : e902             [ 2] 	sbc #2
c106 : 8563             [ 3] 	sta df_brkpc
c108 : bd0601           [ 4] 	lda 0x0106,x
c10b : e900             [ 2] 	sbc #0
c10d : 8564             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c10f : a001             [ 2] 	ldy #1
c111 : b163             [ 5] 	lda (df_brkpc),y
c113 : 8565             [ 3] 	sta df_brkval
c115 : 855e             [ 3] 	sta errno
                             	; now update the return address
c117 : a561             [ 3] 	lda df_pc
c119 : 9d0501           [ 5] 	sta 0x105,x
c11c : a562             [ 3] 	lda df_pc+1
c11e : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c126 : 853d             [ 3] 	sta num_a
c128 : 863e             [ 3] 	stx num_a+1
c12a : 843f             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c12c : 40               [ 6] 	rti
                             	
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c12d :                       int_vdp_handler
c12d : 2049c1           [ 6] 	jsr update_timers	; If it is then update system 
c130 : a50d             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c132 : d014             [ 3] 	bne int_vdp_fin		; Skip if disabled
                             
c134 : c60c             [ 5] 	dec vdp_curcnt		; Decrement countdown
c136 : d010             [ 3] 	bne int_vdp_fin		; If not expired, do nothing
c138 : a50b             [ 3] 	lda vdp_curtim		; Reset cursor countdown
c13a : 850c             [ 3] 	sta vdp_curcnt
c13c : a50e             [ 3] 	lda vdp_curstat		; Get the flash status
c13e : 4980             [ 2] 	eor #0x80			; Invert top bit
c140 : 850e             [ 3] 	sta vdp_curstat
c142 : 450f             [ 3] 	eor vdp_curval		; EOR with whats under cursor
                             	; Use cursor address, write to screen
                             	; ptr is base, offset with X coord in Y register
c144 : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
c146 : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
                             
c148 :                       int_vdp_fin	
c148 : 60               [ 6] 	rts
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page   52
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
                             ;****************************************
c149 :                       update_timers
c149 : e608             [ 5] 	inc vdp_cnt
c14b : d006             [ 3] 	bne inc_kb_timers
c14d : e609             [ 5] 	inc vdp_cnt_hi
c14f : d002             [ 3] 	bne inc_kb_timers
c151 : e60a             [ 5] 	inc vdp_cnt_hi2
c153 :                       inc_kb_timers
c153 : a62d             [ 3] 	ldx kb_deb			; Is debounce 0?
c155 : f002             [ 3] 	beq skip_kb_deb
c157 : c62d             [ 5] 	dec kb_deb
c159 :                       skip_kb_deb
c159 : a62f             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c15b : f002             [ 3] 	beq skip_kb_rep
c15d : c62f             [ 5] 	dec kb_rep
c15f :                       skip_kb_rep
c15f : 60               [ 6] 	rts
                             	
                             
                             	include "utils/utils.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c160 :                       utilPrintSPC
c160 : 48               [ 3] 	pha
c161 : a920             [ 2] 	lda #' '
c163 : 202ac4           [ 6] 	jsr io_put_ch
c166 : 68               [ 4] 	pla
c167 : 60               [ 6] 	rts
                             
c168 :                       utilPrintCRLF
c168 : 48               [ 3] 	pha
c169 : a90d             [ 2] 	lda #UTF_CR
c16b : 202ac4           [ 6] 	jsr io_put_ch
c16e : 68               [ 4] 	pla
c16f : 60               [ 6] 	rts
                             
c170 :                       utilPrintA
c170 : 8538             [ 3] 	sta tmp_d
c172 : 48               [ 3] 	pha
c173 : 8a               [ 2] 	txa
c174 : 48               [ 3] 	pha
c175 : a538             [ 3] 	lda tmp_d
AS65 Assembler for R6502 [1.42].                                     Page   53
-------------------------------- bank\bank0.s --------------------------------

c177 : 2085c1           [ 6] 	jsr str_a_to_x
c17a : 202ac4           [ 6] 	jsr io_put_ch
c17d : 8a               [ 2] 	txa
c17e : 202ac4           [ 6] 	jsr io_put_ch
c181 : 68               [ 4] 	pla
c182 : aa               [ 2] 	tax
c183 : 68               [ 4] 	pla
c184 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c185 :                       str_a_to_x
c185 : 48               [ 3] 	pha					; Save the byte using later on
c186 : 290f             [ 2] 	and #0x0f			; Mask low nibble
c188 : 18               [ 2] 	clc
c189 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c18b : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c18d : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c18f : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c191 :                       skip_a_f_1
c191 : aa               [ 2] 	tax					; Low char is in X
c192 : 68               [ 4] 	pla					; Get byte back
c193 : 4a               [ 2] 	lsr a				; Make high nibble low
c194 : 4a               [ 2] 	lsr a
c195 : 4a               [ 2] 	lsr a
c196 : 4a               [ 2] 	lsr a
c197 : 18               [ 2] 	clc
c198 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c19a : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c19c : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c19e : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c1a0 :                       skip_a_f_2
c1a0 : 60               [ 6] 	rts					; A high nibble, C=0
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
                             ;****************************************
c1a1 :                       str_x_to_a
c1a1 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c1a3 : 38               [ 2] 	sec					; Process high char in A
c1a4 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c1a6 : c90a             [ 2] 	cmp #10				; If A < 10 then
c1a8 : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c1aa : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c1ac :                       skip_x_f_1
c1ac : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c1ae : b01c             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c1b0 : 0a               [ 2] 	asl a				; This is the high nibble
c1b1 : 0a               [ 2] 	asl a
c1b2 : 0a               [ 2] 	asl a
c1b3 : 0a               [ 2] 	asl a
AS65 Assembler for R6502 [1.42].                                     Page   54
-------------------------------- bank\bank0.s --------------------------------

c1b4 : 48               [ 3] 	pha					; Save the high nibble
c1b5 : 8a               [ 2] 	txa					; Now process the low char in X
c1b6 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c1b8 : 38               [ 2] 	sec
c1b9 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c1bb : c90a             [ 2] 	cmp #10				; If A < 10 then
c1bd : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c1bf : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c1c1 :                       skip_x_f_2
c1c1 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c1c3 : b006             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c1c5 : 853d             [ 3] 	sta num_a			; Store low nibble in temp
c1c7 : 68               [ 4] 	pla					; Get high nibble
c1c8 : 053d             [ 3] 	ora num_a			; OR with low nibble
                             
c1ca : 60               [ 6] 	rts					; A contains value, C=0
                             
c1cb :                       str_x_to_a_errl
c1cb : 68               [ 4] 	pla
c1cc :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c1ce :                       con_n_to_a
c1ce : 8649             [ 3] 	stx num_tmp
c1d0 : 854a             [ 3] 	sta num_tmp+1
c1d2 : a900             [ 2] 	lda #0
c1d4 : 853d             [ 3] 	sta num_a
c1d6 : 853e             [ 3] 	sta num_a+1
c1d8 : c000             [ 2] 	cpy #NUM_ANY
c1da : f014             [ 3] 	beq con_n_to_a_detect
c1dc : 88               [ 2] 	dey
c1dd : d003             [ 3] 	bne con_n_not_dec
c1df :                       con_dec_jmp
c1df : 4c73c2           [ 3] 	jmp con_dec_to_a_int
c1e2 :                       con_n_not_dec
c1e2 : 88               [ 2] 	dey
c1e3 : d003             [ 3] 	bne con_n_not_hex
c1e5 :                       con_hex_jmp
c1e5 : 4c0ac2           [ 3] 	jmp con_hex_to_a_int
c1e8 :                       con_n_not_hex
c1e8 : 88               [ 2] 	dey
c1e9 : d003             [ 3] 	bne con_n_err
c1eb :                       con_bin_jmp
c1eb : 4c49c2           [ 3] 	jmp con_bin_to_a_int
c1ee :                       con_n_err
c1ee : 38               [ 2] 	sec
c1ef : 60               [ 6] 	rts
c1f0 :                       con_n_to_a_detect		; Y is zero on entry
c1f0 : b149             [ 5] 	lda (num_tmp),y
c1f2 : c930             [ 2] 	cmp #'0'
c1f4 : d0e9             [ 3] 	bne con_dec_jmp
c1f6 : a001             [ 2] 	ldy #1
AS65 Assembler for R6502 [1.42].                                     Page   55
-------------------------------- bank\bank0.s --------------------------------

c1f8 : b149             [ 5] 	lda (num_tmp),y
c1fa : 0920             [ 2] 	ora #0x20
c1fc : c978             [ 2] 	cmp #'x'
c1fe : f0e5             [ 3] 	beq con_hex_jmp
c200 : c962             [ 2] 	cmp #'b'
c202 : f0e7             [ 4] 	beq con_bin_jmp
c204 : d0d9             [ 4] 	bne con_dec_jmp		; Always branches
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c206 :                       con_hex_to_a
c206 : 8649             [ 3] 	stx num_tmp
c208 : 854a             [ 3] 	sta num_tmp+1
c20a :                       con_hex_to_a_int
c20a : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c20c : a002             [ 2] 	ldy #2			; start at first digit
c20e :                       con_hex_digit
c20e : b149             [ 5] 	lda (num_tmp),y
c210 : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c212 : 38               [ 2] 	sec							; Process high char in A
c213 : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c215 : c90a             [ 2] 	cmp #10						; If A < 10 then
c217 : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c219 : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c21b :                       con_hex_skip_x_f_1
c21b : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c21d : b01c             [ 3] 	bcs	con_hex_done			; Potentially done if not
c21f : 48               [ 3] 	pha
c220 : a53d             [ 3] 	lda num_a
                             	; make room for lo nibble
c222 : 0a               [ 2] 	asl a
c223 : 263e             [ 5] 	rol num_a+1
c225 : 0a               [ 2] 	asl a
c226 : 263e             [ 5] 	rol num_a+1
c228 : 0a               [ 2] 	asl a
c229 : 263e             [ 5] 	rol num_a+1
c22b : 0a               [ 2] 	asl a
c22c : 263e             [ 5] 	rol num_a+1
c22e : 853d             [ 3] 	sta num_a
                             	; save in low nibble
c230 : 68               [ 4] 	pla
c231 : 053d             [ 3] 	ora num_a
c233 : 853d             [ 3] 	sta num_a
c235 : c8               [ 2] 	iny
c236 : ca               [ 2] 	dex
c237 : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c239 :                       con_hex_err
c239 : 38               [ 2] 	sec
c23a : 60               [ 6] 	rts
                             	; found a non-hex digit
c23b :                       con_hex_done
                             	; if no digits processed then error
c23b : c002             [ 2] 	cpy #2
c23d : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c23f : 98               [ 2] 	tya
AS65 Assembler for R6502 [1.42].                                     Page   56
-------------------------------- bank\bank0.s --------------------------------

c240 : aa               [ 2] 	tax
c241 : a902             [ 2] 	lda #NUM_HEX
c243 : 18               [ 2] 	clc
c244 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert bin string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c245 :                       con_bin_to_a
c245 : 8649             [ 3] 	stx num_tmp
c247 : 854a             [ 3] 	sta num_tmp+1
c249 :                       con_bin_to_a_int
c249 : a002             [ 2] 	ldy #2
c24b : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c24d :                       con_bin_digit
c24d : b149             [ 5] 	lda (num_tmp),y
c24f : c930             [ 2] 	cmp #'0'
c251 : 9010             [ 3] 	bcc con_bin_done
c253 : c932             [ 2] 	cmp #'1'+1
c255 : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c257 : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c259 : 263d             [ 5] 	rol num_a
c25b : 263e             [ 5] 	rol num_a+1
c25d : c8               [ 2] 	iny
c25e : ca               [ 2] 	dex
c25f : d0ec             [ 3] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c261 : f00a             [ 3] 	beq con_bin_err
c263 :                       con_bin_done
                             	; didn't process any digit = error
c263 : c002             [ 2] 	cpy #2
c265 : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c267 : 98               [ 2] 	tya
c268 : aa               [ 2] 	tax
c269 : a903             [ 2] 	lda #NUM_BIN
c26b : 18               [ 2] 	clc
c26c : 60               [ 6] 	rts
c26d :                       con_bin_err
c26d :                       str_d_error
c26d : 38               [ 2] 	sec
c26e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c26f :                       con_dec_to_a
c26f : 8649             [ 3] 	stx num_tmp
c271 : 854a             [ 3] 	sta num_tmp+1
c273 :                       con_dec_to_a_int
c273 : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
AS65 Assembler for R6502 [1.42].                                     Page   57
-------------------------------- bank\bank0.s --------------------------------

c275 : b149             [ 5] 	lda (num_tmp),y
c277 : c92d             [ 2] 	cmp #'-'
c279 : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c27b : c8               [ 2] 	iny
c27c :                       str_d_find_end
c27c : b149             [ 5] 	lda (num_tmp),y
c27e : c930             [ 2] 	cmp #'0'
c280 : 9007             [ 3] 	bcc str_d_found_end
c282 : c93a             [ 2] 	cmp #'9'+1
c284 : b003             [ 3] 	bcs str_d_found_end
c286 : c8               [ 2] 	iny
c287 : d0f3             [ 3] 	bne str_d_find_end	; Possble wraparound but shou
c289 :                       str_d_found_end
c289 : c007             [ 2] 	cpy #7				; Biggest int is 6 chars
c28b : b0e0             [ 3] 	bcs str_d_error		; e.g. -32767
c28d : 844c             [ 3] 	sty num_tmp+3
c28f : a900             [ 2] 	lda #0
c291 : 854b             [ 3] 	sta num_tmp+2
c293 : 853d             [ 3] 	sta num_a
c295 : 853e             [ 3] 	sta num_a+1
c297 :                       str_d_process_digit
c297 : 88               [ 2] 	dey
c298 : 3027             [ 3] 	bmi str_d_digits_done
                             
c29a : b149             [ 5] 	lda (num_tmp),y
                             
c29c : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
c29e : f021             [ 3] 	beq str_d_digits_done ; also done
                             
c2a0 : 38               [ 2] 	sec
c2a1 : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
c2a3 : 18               [ 2] 	clc
c2a4 : 0a               [ 2] 	asl a
c2a5 : 654b             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
c2a7 : aa               [ 2] 	tax
c2a8 : a53d             [ 3] 	lda num_a
c2aa : 7ddec2           [ 4] 	adc str_d_powers,x
c2ad : 853d             [ 3] 	sta num_a
c2af : a53e             [ 3] 	lda num_a+1
c2b1 : 7ddfc2           [ 4] 	adc str_d_powers+1,x
c2b4 : 853e             [ 3] 	sta num_a+1
c2b6 : b0b5             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
c2b8 : a54b             [ 3] 	lda num_tmp+2
c2ba : 6914             [ 2] 	adc #20
c2bc : 854b             [ 3] 	sta num_tmp+2
c2be : 4c97c2           [ 3] 	jmp str_d_process_digit
c2c1 :                       str_d_digits_done
                             	; check if minus
c2c1 : b149             [ 5] 	lda (num_tmp),y
c2c3 : c92d             [ 2] 	cmp #'-'
c2c5 : d011             [ 3] 	bne str_d_skip_neg
c2c7 : a64c             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
c2c9 : e002             [ 2] 	cpx #2				; else it's an error
c2cb : 90a0             [ 3] 	bcc str_d_error
c2cd : a63d             [ 3] 	ldx num_a
c2cf : a53e             [ 3] 	lda num_a+1
AS65 Assembler for R6502 [1.42].                                     Page   58
-------------------------------- bank\bank0.s --------------------------------

c2d1 : 2042c3           [ 6] 	jsr twos_complement
c2d4 : 863d             [ 3] 	stx num_a
c2d6 : 853e             [ 3] 	sta num_a+1
c2d8 :                       str_d_skip_neg
c2d8 : a64c             [ 3] 	ldx num_tmp+3
c2da : a901             [ 2] 	lda #NUM_DEC
c2dc : 18               [ 2] 	clc
c2dd : 60               [ 6] 	rts
                             
c2de :                       str_d_powers
c2de : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
c2f2 : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
c306 : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
c31a : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
c32e : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
c342 :                       twos_complement
c342 : 49ff             [ 2] 	eor #0xff
c344 : 48               [ 3] 	pha
c345 : 8a               [ 2] 	txa
c346 : 49ff             [ 2] 	eor #0xff
c348 : aa               [ 2] 	tax
c349 : 68               [ 4] 	pla
c34a : e8               [ 2] 	inx
c34b : d003             [ 3] 	bne twos_complement_skip_X
c34d : 38               [ 2] 	sec			; Add 1 to A
c34e : 6900             [ 2] 	adc #0
c350 :                       twos_complement_skip_X
c350 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* hex_to_bcd
                             ;* Convert accumulator,X to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : P
                             ;****************************************
c351 :                       hex_to_bcd
c351 : 08               [ 3] 	php
c352 : 48               [ 3] 	pha
c353 : 8538             [ 3] 	sta tmp_d
c355 : 8a               [ 2] 	txa
c356 : 48               [ 3] 	pha
c357 : a538             [ 3] 	lda tmp_d
                             
c359 : 8649             [ 3] 	stx num_tmp
c35b : 854a             [ 3] 	sta num_tmp+1
                             	
                             ;	bmi hex_to_bcd_skip_neg	; A is negative?
                             ;	jsr twos_complement
                             ;hex_to_bcd_skip_neg
c35d : a200             [ 2] 	ldx #0
c35f : 863d             [ 3] 	stx num_a
AS65 Assembler for R6502 [1.42].                                     Page   59
-------------------------------- bank\bank0.s --------------------------------

c361 : 863e             [ 3] 	stx num_a+1
c363 : 863f             [ 3] 	stx num_a+2
                             ;	stx num_a+3
c365 : a210             [ 2] 	ldx #16
c367 : f8               [ 2] 	sed
c368 :                       bin_to_bcd_bit
c368 : 0649             [ 5] 	asl num_tmp
c36a : 264a             [ 5] 	rol num_tmp+1
c36c : a53d             [ 3] 	lda num_a
c36e : 653d             [ 3] 	adc num_a
c370 : 853d             [ 3] 	sta num_a
c372 : a53e             [ 3] 	lda num_a+1
c374 : 653e             [ 3] 	adc num_a+1
c376 : 853e             [ 3] 	sta num_a+1
c378 : a53f             [ 3] 	lda num_a+2
c37a : 653f             [ 3] 	adc num_a+2
c37c : 853f             [ 3] 	sta num_a+2
c37e : ca               [ 2] 	dex
c37f : d0e7             [ 3] 	bne bin_to_bcd_bit
                             	
c381 : 68               [ 4] 	pla
c382 : aa               [ 2] 	tax
c383 : 68               [ 4] 	pla
c384 : 28               [ 4] 	plp
c385 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_str_ch
                             ;* Helper routine to stuff decimal char in to num
                             ;* Input : A=BCD digit, Y=num_buf index, C=insert
                             ;* Output : num_buf in ASCII, A=ASCII digit
                             ;* Regs affected : C cleared if non-zero
                             ;****************************************
c386 :                       int_to_str_ch
c386 : 290f             [ 2] 	and #0xf
c388 : 0930             [ 2] 	ora #0x30					; Convert to ascii
c38a : 4930             [ 2] 	eor #0x30					; Check if zero digit
c38c : d005             [ 3] 	bne int_to_str_nz			; If not zero definitely sto
c38e : b003             [ 3] 	bcs int_to_str_nz			; Also if C=1
c390 : 4930             [ 2] 	eor #0x30					; Restore A
c392 : 60               [ 6] 	rts							; Return without storing anything
c393 :                       int_to_str_nz
c393 : 4930             [ 2] 	eor #0x30					; Restore A
c395 : 994d00           [ 5] 	sta num_buf,y
c398 : c8               [ 2] 	iny
c399 : 38               [ 2] 	sec							; Set C as a non-zero encountered
c39a :                       int_to_str_ch_fin
c39a : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_str
                             ;* Convert int to string
                             ;* Input : in X,A (low,high), C=leading zeros wan
                             ;* Output : num_buf in ASCII 6 digits + zero term
                             ;* Regs affected : P
                             ;****************************************
c39b :                       int_to_str
                             	_pushAXY
                             
c3a4 : a000             [ 2] 	ldy #0						; first pos of num_buf
AS65 Assembler for R6502 [1.42].                                     Page   60
-------------------------------- bank\bank0.s --------------------------------

c3a6 : 0900             [ 2] 	ora #0						; Test A for sign bit
c3a8 : 08               [ 3] 	php							; Remember C bit of P
c3a9 : 100a             [ 3] 	bpl int_to_str_skip_neg		; Skip if not (postive 
c3ab : 2042c3           [ 6] 	jsr twos_complement			; Flip X,A from 2s complem
c3ae : 48               [ 3] 	pha							; Remember A
c3af : a92d             [ 2] 	lda #'-'					; Put in negative sign
c3b1 : 854d             [ 3] 	sta num_buf
c3b3 : c8               [ 2] 	iny							; Start at second buffer pos
c3b4 : 68               [ 4] 	pla							; Restore A
c3b5 :                       int_to_str_skip_neg
c3b5 : 2051c3           [ 6]  	jsr hex_to_bcd				; Convert X,A to BCD
c3b8 : a202             [ 2] 	ldx #2						; Start at BCD high byte
c3ba :                       int_str
c3ba : 28               [ 4] 	plp							; Get C but immediately
c3bb : 08               [ 3] 	php							; Save C (due to loop check later)
c3bc : b53d             [ 4] 	lda num_a,x					; Get BCD digit
c3be : 8554             [ 3] 	sta num_buf+7				; Save A it for the units later
c3c0 : 4a               [ 2] 	lsr a						; Tens - shift to lower nibble
c3c1 : 4a               [ 2] 	lsr a
c3c2 : 4a               [ 2] 	lsr a
c3c3 : 4a               [ 2] 	lsr a
c3c4 : 28               [ 4] 	plp							; Get C
c3c5 : 2086c3           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
c3c8 : a554             [ 3] 	lda num_buf+7				; Get A for the units
c3ca : 2086c3           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
c3cd : 08               [ 3] 	php							; Save C
c3ce : ca               [ 2] 	dex
c3cf : 10e9             [ 3] 	bpl int_str
c3d1 : 28               [ 4] 	plp							; Check C
c3d2 : b005             [ 3] 	bcs	int_to_str_fin			; If set then something pri
c3d4 : a930             [ 2] 	lda #'0'					; Stuff a zero
c3d6 : 854d             [ 3] 	sta num_buf					; Must be in first position..
c3d8 : c8               [ 2] 	iny
c3d9 :                       int_to_str_fin
c3d9 : a900             [ 2] 	lda #0						; Terminator
c3db : 994d00           [ 5] 	sta num_buf,y
c3de : c8               [ 2] 	iny
                             	_pullAXY
                             
c3e4 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
                             ;bcd_to_str
                             ;	_pushAXY
                             ;
                             ;	ldx #5						; Index in to string
                             ;	ldy #0						; Current BCD digit
                             ;bcd_str
                             ;	lda num_a,y
                             ;	; Convert 1s digit of byte
                             ;	pha
                             ;	and #0xf
                             ;	clc
                             ;	adc #0x30
                             ;	sta num_buf,x
AS65 Assembler for R6502 [1.42].                                     Page   61
-------------------------------- bank\bank0.s --------------------------------

                             ;	; Convert 10s digit of byte
                             ;	pla
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	clc
                             ;	adc #0x30					; Convert to ASCII
                             ;	sta num_buf-1,x
                             ;	dex
                             ;	dex
                             ;	iny
                             ;	cpy #3						; 3 BCD digits max
                             ;	bne bcd_str
                             ;
                             ;	_pullAXY
                             ;	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
                             ;out_bcd
                             ;	pha
                             ;	txa
                             ;	pha
                             ;	php
                             ;	ldy #0						; How many digits printed
                             ;	ldx #0						; Index in to string
                             ;out_bcd_digit
                             ;	lda num_buf,x
                             ;	cpy #0						; If not in leading zero mode
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	cmp #'0'					; else check if zero
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	plp
                             ;	php
                             ;	bcc out_bcd_next			; If C=0 go to next digit, e
                             ;out_bcd_print
                             ;	iny
                             ;	jsr io_put_ch
                             ;out_bcd_next
                             ;	inx
                             ;	cpx #6
                             ;	bne out_bcd_digit
                             ;	tya							; If nothing printed
                             ;	bne out_bcd_fin
                             ;	lda #'0'					; Need to put out 1 zero
                             ;	jsr io_put_ch
                             ;	iny
                             ;out_bcd_fin
                             ;	plp
                             ;	pla
                             ;	tax
                             ;	pla
AS65 Assembler for R6502 [1.42].                                     Page   62
-------------------------------- bank\bank0.s --------------------------------

                             ;	clc
                             ;	rts
                             	
                             	
                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
c3e5 :                       print_a_to_d
c3e5 : 209bc3           [ 6] 	jsr int_to_str
c3e8 : a000             [ 2] 	ldy #0
c3ea :                       print_a_to_d_ch
c3ea : b94d00           [ 4] 	lda num_buf,y
c3ed : f006             [ 3] 	beq print_a_to_d_fin
c3ef : 202ac4           [ 6] 	jsr io_put_ch
c3f2 : c8               [ 2] 	iny
c3f3 : d0f5             [ 3] 	bne print_a_to_d_ch
c3f5 :                       print_a_to_d_fin
c3f5 : 60               [ 6] 	rts
                             
                             ;	php
                             ;	cmp #0x80					; Check if sign bit is set
                             ;	bcc print_a_to_d_skip_neg	; Skip if not (postiv
                             ;	jsr twos_complement			; Flip from 2s complement
                             ;	jsr hex_to_bcd				; Convert to BCD
                             ;	jsr bcd_to_str				; Convert BCD to string
                             ;	lda #'-'
                             ;	jsr io_put_ch
                             ;	plp							; Leading zeros preference
                             ;	jsr out_bcd
                             ;	iny							; Account for sign
                             ;	rts
                             ;print_a_to_d_skip_neg
                             ;	jsr hex_to_bcd				; Convert to BCD
                             ;	jsr bcd_to_str				; Convert BCD to string
                             ;	plp							; Leading zeros preference
                             ;	jmp out_bcd					; Print +ve string
                             	
                             	include "io/io.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.
                             ;*	On startup, the kernel defaults to keyboard an
                             ;*  examines the BBC DIP switch to decide whether
                             ;*	but when saving and loading points to tape rou
AS65 Assembler for R6502 [1.42].                                     Page   63
-------------------------------- bank\bank0.s --------------------------------

                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c3f6 :                       mod_sz_io_s
                             
                             ;****************************************
                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c3f6 :                       io_init
c3f6 : a901             [ 2] 	lda #1				; Default = KB/VDP
c3f8 : 8d0006           [ 4] 	sta io_default
c3fb : 4c01c4           [ 3] 	jmp io_active_device; Activate the device
                             
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c3fe :                       io_set_default			; Entry point for default
c3fe : ad0006           [ 4] 	lda io_default
c401 :                       io_active_device		; Entry point for A set
c401 : aa               [ 2] 	tax					; X=buf size index
c402 : 0a               [ 2] 	asl	a				; x16 the Block number
c403 : 0a               [ 2] 	asl a
c404 : 0a               [ 2] 	asl a
c405 : 0a               [ 2] 	asl a
c406 : a8               [ 2] 	tay					; Y=index in to device table
c407 : bd8dc4           [ 4] 	lda io_buf_sz,x
c40a : 853b             [ 3] 	sta buf_sz
c40c : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c40e :                       io_copy_data
c40e : b98fc4           [ 4] 	lda io_devices,y
c411 : 9d0106           [ 5] 	sta io_block,x
c414 : c8               [ 2] 	iny
c415 : e8               [ 2] 	inx
c416 : e010             [ 2] 	cpx #16
c418 : d0f4             [ 3] 	bne io_copy_data
                             	
c41a : a91f             [ 2] 	lda #lo(scratch)	; Initialise IO buffer and size
c41c : 8539             [ 3] 	sta buf_lo
c41e : a906             [ 2] 	lda #hi(scratch)
c420 : 853a             [ 3] 	sta buf_hi
c422 : a90d             [ 2] 	lda #UTF_CR			; Line terminator is CR
c424 : 853c             [ 3] 	sta buf_ef
c426 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
AS65 Assembler for R6502 [1.42].                                     Page   64
-------------------------------- bank\bank0.s --------------------------------

                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 1 means A is inval
                             ;* Regs affected : P, A
                             ;****************************************
c427 :                       io_get_ch
c427 : 6c0106           [ 6] 	jmp (io_block+io_get_byte)
                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c42a :                       io_put_ch
c42a : 6c0306           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c42d :                       io_open_read
c42d : 6c0506           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c430 :                       io_open_write
c430 : 6c0706           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c433 :                       io_close
c433 : 6c0906           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c436 :                       io_delete
c436 : 6c0b06           [ 6] 	jmp (io_block+io_del_f)
                             
                             ;****************************************
                             ;* io_open_ext1
                             ;* Extended function 1
                             ;* Input : 
AS65 Assembler for R6502 [1.42].                                     Page   65
-------------------------------- bank\bank0.s --------------------------------

                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c439 :                       io_open_ext1
c439 : 6c0d06           [ 6] 	jmp (io_block+io_ext1)
                             	
                             ;****************************************
                             ;* io_open_ext2
                             ;* Extended function 2
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c43c :                       io_open_ext2
c43c : 6c0f06           [ 6] 	jmp (io_block+io_ext2)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(lo/hi/sz/ef) : Address, Max size,
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
                             ;****************************************
c43f :                       io_read_line
c43f : 48               [ 3] 	pha
                             
c440 : 08               [ 3] 	php					; Save echo state
                             	
c441 : a000             [ 2] 	ldy #0x00			; Starting at first byte
c443 :                       io_get_line_byte
c443 : 38               [ 2] 	sec					; Getting bytes synchronously
c444 : 2027c4           [ 6] 	jsr io_get_ch		; Get a byte
c447 : b027             [ 3] 	bcs io_get_line_done; Got nothing then finish
c449 : 28               [ 4] 	plp					; Get echo state
c44a : 08               [ 3] 	php					; Instantly save it back
c44b : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c44d : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c44f : d005             [ 3] 	bne io_do_echo
c451 : c000             [ 2] 	cpy #0				; Already at beginning?
c453 : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
c455 : 88               [ 2] 	dey					; Else decrement length
c456 :                       io_do_echo
c456 : 202ac4           [ 6] 	jsr io_put_ch		; Echo it
c459 :                       io_skip_echo
c459 : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c45b : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c45d : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c45f : f003             [ 3] 	beq io_skip_special
c461 : 9139             [ 5] 	sta (buf_lo),y		; Save it
c463 : c8               [ 2] 	iny					; Increase length
c464 :                       io_skip_special
c464 : c53c             [ 3] 	cmp buf_ef			; Is it the terminating char?
c466 : f008             [ 3] 	beq io_get_line_done	; If yes then done
c468 : c43b             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c46a : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c46c : 28               [ 4] 	plp					; Remember to pull echo state off stack
c46d : 38               [ 2] 	sec					; Yes, set carry flag
c46e : 68               [ 4] 	pla
c46f : 60               [ 6] 	rts					; And done
c470 :                       io_get_line_done
c470 : a900             [ 2] 	lda #0
c472 : 9139             [ 5] 	sta (buf_lo),y		; Terminate with 0
AS65 Assembler for R6502 [1.42].                                     Page   66
-------------------------------- bank\bank0.s --------------------------------

c474 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c475 : 18               [ 2] 	clc					; Clear carry flag
c476 : 68               [ 4] 	pla
c477 : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c478 :                       io_print_line
c478 : 48               [ 3] 	pha
                             
c479 : 8636             [ 3] 	stx tmp_clo					; Store the string pointer
c47b : 8537             [ 3] 	sta tmp_chi					; lo and hi
c47d : a000             [ 2] 	ldy #0						; Start at the beginning!
c47f :                       io_print_line_byte
c47f : b136             [ 5] 	lda (tmp_clo),y				; Copy byte to
c481 : f006             [ 3] 	beq io_print_done			; If zero then done - print
c483 : 202ac4           [ 6] 	jsr io_put_ch				; Transmit
c486 : c8               [ 2] 	iny
c487 : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
c489 :                       io_print_done
c489 : 68               [ 4] 	pla
c48a : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c48b :                       io_null_op
c48b : 18               [ 2] 	clc
c48c : 60               [ 6] 	rts
                             	
                             ;* IO buffer sizes
c48d :                       io_buf_sz
c48d : ff                    	db 255					; Device 0 = Tapeoe SDCard
c48e : 7f                    	db 127					; Device 1 = keyboard/screen
                             
                             ;* IO devices defined here
c48f :                       io_devices
                             ;* Device zero is the tape/sdcard system
                             ;* t: is for tape, s: is for sdcard in the filena
                             ;* the file routines parse the filename to fine t
                             ;* at the file protocol level both t: and s: appe
                             ;* hence device0 can handle both
                             ;* This is a block based device
c48f :                       io_device0					; Tape device, input = Tape, outpu
c48f : cbc6                  	dw	f_get_byte			; io_get_ch
c491 : 5fc6                  	dw	f_put_byte			; io_put_ch
c493 : bbc5                  	dw	f_open_read			; io_open_r
c495 : 15c6                  	dw	f_open_write		; io_open_w
c497 : f4c5                  	dw	f_close				; io_close_f
c499 : 8bc4                  	dw	io_null_op			; io_del_f
c49b : bbc5                  	dw	f_open_bread		; io_ext1 - open for binary rea
c49d : 0fc6                  	dw	f_open_bwrite		; io_ext2 - open for binary wr
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
                             ;* This is a char based device
c49f :                       io_device1					; Default device, input = screen e
c49f : 9bd0                  	dw	gr_get_key			; io_get_ch
c4a1 : d1d0                  	dw	gr_put_byte			; io_put_ch
AS65 Assembler for R6502 [1.42].                                     Page   67
-------------------------------- bank\bank0.s --------------------------------

c4a3 : 8bc4                  	dw	io_null_op			; io_open_r
c4a5 : 8bc4                  	dw	io_null_op			; io_open_w
c4a7 : 8bc4                  	dw	io_null_op			; io_close_f
c4a9 : 8bc4                  	dw	io_null_op			; io_del_f
c4ab : 8bc4                  	dw	io_null_op			; io_ext1
c4ad : 8bc4                  	dw	io_null_op			; io_ext2
c4af :                       mod_sz_io_e
                             
                             
                             
                             ;* Reset vector points here - 6502 starts here
c4af :                       init
                             ;	jmp init_test
                             	; First clear ram
c4af : 78               [ 2] 	sei					; Need this for MOS 6502
c4b0 : d8               [ 2] 	cld					; Need this for MOS 6502
c4b1 : 4cd8c4           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
c4b4 :                       init_2					; init_ram will jump back to here
c4b4 : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
c4b6 : 9a               [ 2] 	txs
                             
c4b7 : 20bdc4           [ 6] 	jsr kernel_init
                             
c4ba : 4c77c0           [ 3] 	jmp main
                             
c4bd :                       kernel_init
c4bd : 20bac0           [ 6] 	jsr init_irq		; Initialise IRQ handling
                             
c4c0 : 20f7c4           [ 6] 	jsr init_via0		; initialise cia 0 - tape inactiv
                             ;	jsr tp_init			; Initialise tape handling
                             
c4c3 : 20d8d5           [ 6] 	jsr init_snd		; initialise the sound chip
                             
c4c6 : 2037ce           [ 6] 	jsr gr_init			; Initialise graphics, default is 
                             
c4c9 : 2097c8           [ 6] 	jsr init_keyboard	; initialise keyboard timer se
c4cc : 20f6c3           [ 6] 	jsr io_init			; Set default input/output device
                             
c4cf : a900             [ 2] 	lda #0
c4d1 : 8508             [ 3] 	sta vdp_cnt
                             
c4d3 : 20bef7           [ 6] 	jsr df_init			; Initialise interpreter
                             
c4d6 : 58               [ 2] 	cli					; irq interrupts enable
                             
c4d7 :                       kernel_test
                             ;	jsr kb_read_raw
                             ;	jsr utilPrintA
                             ;	jsr utilPrintCRLF
                             ;	jmp kernel_test
                             	
c4d7 : 60               [ 6] 	rts
                             
                             
                             ;* Initialises RAM, skipping page 3 which is for 
                             ;* Zeroes all addressable RAM in the default bank
c4d8 :                       init_ram
c4d8 : a900             [ 2] 	lda #0				; Normal RAM filled with zero
c4da : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
c4dc : aa               [ 2] 	tax 				; Page counter starts at zero
c4dd : 8600             [ 3] 	stx 0x00			; Start at page 0
c4df : 8601             [ 3] 	stx 0x01
AS65 Assembler for R6502 [1.42].                                     Page   68
-------------------------------- bank\bank0.s --------------------------------

c4e1 :                       init_ram_1
c4e1 : e003             [ 2] 	cpx	#3				; Ignore page 3 (IO page)
c4e3 : f005             [ 3] 	beq init_ram_skip
c4e5 :                       init_ram_fill
c4e5 : 9100             [ 5] 	sta (0x00),y		; Write byte to RAM (zero or copy 
c4e7 : c8               [ 2] 	iny
c4e8 : d0f7             [ 3] 	bne init_ram_1		; Do a whole page
c4ea :                       init_ram_skip
c4ea : e601             [ 5] 	inc 0x01			; Increase page pointer
c4ec : e8               [ 2] 	inx					; Reduce page count
c4ed : e0c0             [ 2] 	cpx #0xc0			; Do all pages until page until we g
c4ef : d0f0             [ 3] 	bne init_ram_1
                             
c4f1 : f0c1             [ 3] 	beq init_2			; Carry on initialisation
                             
                             ; 6502 Non-maskable interrupt come here
c4f3 :                       nmi
c4f3 : 40               [ 6] 	rti
                             
c4f4 :                       mod_sz_kernel_e
                             
                             
                             
                             ; Bank specific code goes here
                             	include "cia/cia.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  CIA.S
                             ;*  Code to initialise and utilise the 6522, whic
                             ;*	for various functions on the Oric including;
                             ;*		Port A:
                             ;*			[7..0] 	Printer data bits
                             ;*			[7..0] 	Interface to AY-3-8912
                             ;*		Port B:
                             ;*			[2..0] 	Keyboard matrix row selector
                             ;*			[7]	   	Tape output
                             ;*			[6]    	Tape player motor signal
                             ;*			[4]		Printer strobe
                             ;*		CA1:		Printer ACK
                             ;*		CB1: 		Tape input
                             ;*		CA2,CB2: 	Selecting the AY-3-8912
                             ;*
                             ;*  This file is called cia.s because code was or
                             ;*  for a MOS 6526 from a CMB64, but didn't get a
                             ;*	renaming this file ;-)
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
c4f4 :                       mod_sz_cia_s
                             
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   69
-------------------------------- bank\bank0.s --------------------------------

                             ;* init_via0
                             ;* Initialise cia 0
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : A
                             ;****************************************
c4f4 :                       init_via0_tape					; initialisation bytes for tap
c4f4 : a017             [ 2] 	ldy #init_tape_tab-init_via0_tab
c4f6 : 2c                    	db 0x2c						; Ignore next two bytes
c4f7 :                       init_via0
c4f7 : a000             [ 2] 	ldy #0						; Standard initialisation of VIA
c4f9 :                       init_via0_loop
c4f9 : b90ac5           [ 4] 	lda init_via0_tab,y
c4fc : 300b             [ 4] 	bmi init_via0_done
c4fe : aa               [ 2] 	tax
c4ff : c8               [ 2] 	iny
c500 : b90ac5           [ 4] 	lda init_via0_tab,y
c503 : 9d0003           [ 5] 	sta IO_0,x
c506 : c8               [ 2] 	iny
c507 : d0f0             [ 4] 	bne init_via0_loop
                             
c509 :                       init_via0_done
c509 : 60               [ 6] 	rts							; return from sub
                             
c50a :                       init_via0_tab
c50a : 0e7f                  	db IER, 	0x7f
c50c : 03ff                  	db DDRA,	0xff			; Port A output by default
c50e : 02f7                  	db DDRB,	0xf7			; Tape motor + KB select
c510 : 00b7                  	db PRB,		KB_PRB+7		; Port B default (cassette mo
c512 : 0cdd                  	db PCR,		SND_DESELECT	; Ensure AY is not selecte
c514 : 0420                  	db T1CL,	lo(TIMER1_RATE)	; 50Hz
c516 : 0620                  	db T1LL,	lo(TIMER1_RATE)	; 50Hz
c518 : 054e                  	db T1CH,	hi(TIMER1_RATE)	; 50Hz
c51a : 074e                  	db T1LH,	hi(TIMER1_RATE)	; 50Hz
c51c : 0b40                  	db ACR,		0x40			; Timer 1 continuous
c51e : 0ec0                  	db IER,		0xc0			; Timer 1 interrupt enabled
c520 : ff                    	db -1
c521 :                       init_tape_tab
c521 : 0e7f                  	db IER,		0x7f			; Disable all interrupts
c523 : 08f4                  	db T2CL,	0xf4			; Timer 2 used for measuring CB1
c525 : 0c10                  	db PCR,		0x10			; Interrupt on CB1 positive edge
c527 : 0bc0                  	db ACR,		0xc0			; T1 continuous and toggle PB7
c529 : 04a0                  	db T1CL,	lo(TAPE_RATE*2)	; Tape rate /2 = 0
c52b : 0501                  	db T1CH,	hi(TAPE_RATE*2)	; Tape rate /2 = 0
c52d : 00f0                  	db PRB,		KB_PRB+0x40		; Tape motor ON
c52f : ff                    	db -1
                             
                             ;****************************************
                             ;* via_strobe_init
                             ;* set strobe low & port A pin directions
                             ;****************************************
c530 :                       via_strobe_init
c530 : 8d0303           [ 4] 	sta   IO_0+DDRA
                             
                             	;set strobe low
c533 : ad0003           [ 4] 	lda   IO_0+PRB
c536 : 29ef             [ 2] 	and   #0b11101111
c538 : 8d0003           [ 4] 	sta   IO_0+PRB
                             
c53b : 60               [ 6] 	rts
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   70
-------------------------------- bank\bank0.s --------------------------------

                             ;* via_strobe_off
                             ;* deselect printer port devices
                             ;****************************************
c53c :                       via_strobe_off
c53c : 48               [ 3] 	pha
                             
                             	;set strobe high
c53d : ad0003           [ 4] 	lda   IO_0+PRB
c540 : 0910             [ 2] 	ora   #0b00010000
c542 : 8d0003           [ 4] 	sta   IO_0+PRB
                             
                             	;set all bits of porta except kb sense to output
c545 : a9f7             [ 2] 	lda   #0xf7
c547 : 8d0303           [ 4] 	sta   IO_0+DDRA
                             
c54a : 68               [ 4] 	pla
c54b : 60               [ 6] 	rts
                             
                             
c54c :                       mod_sz_cia_e
                             
                             	include "file/file.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  FILE.S
                             ;*	These routines allow for input/output and are 
                             ;*	by both the tape and parallel devices.
                             ;*	The format is based on a tape format.
                             ;*	The tape format is not compatible with a regul
                             ;*	but is a block format as follows;
                             ;*	Some zero bits (64) start a block.
                             ;*	Then two bytes of data representing the block 
                             ;*	Then 256 bytes of block data.
                             ;*	Each byte above consists of two '1' start bits
                             ;*	one '0' stop bit.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c54c :                       mod_sz_file_s
                             
                             ;* Vector table for tape or sd card device
c54c :                       tpsd_vectors
                             ;* Tape vectors
c54c : 07c7                  	dw	tp_init
c54e : 76c7                  	dw	tp_read_byte
c550 : 1ec7                  	dw	tp_write_byte
c552 : 0bc7                  	dw	tp_put_delay
c554 : 13c7                  	dw	tp_block_gap
c556 : 0ac7                  	dw	tp_release
                             ;* SD Card vectors
c558 : 5ac8                  	dw	sd_init
c55a : 2dc8                  	dw	sd_read_byte
c55c : f1c7                  	dw	sd_write_byte
AS65 Assembler for R6502 [1.42].                                     Page   71
-------------------------------- bank\bank0.s --------------------------------

c55e : 71c8                  	dw	sd_put_delay
c560 : 71c8                  	dw	sd_block_gap
c562 : a5c7                  	dw	sd_release
                             
                             ;* Jump through vectors for device specific calls
c564 :                       f_init
c564 : 6c1106           [ 6] 	jmp (f_storage_vec+f_init_vec)
c567 :                       f_read_byte
c567 : 6c1306           [ 6] 	jmp (f_storage_vec+f_read_byte_vec)
c56a :                       f_write_byte
c56a : 6c1506           [ 6] 	jmp (f_storage_vec+f_write_byte_vec)
c56d :                       f_put_delay
c56d : 6c1706           [ 6] 	jmp (f_storage_vec+f_put_delay_vec)
c570 :                       f_block_gap
c570 : 6c1906           [ 6] 	jmp (f_storage_vec+f_block_gap_vec)
c573 :                       f_release
c573 : 6c1b06           [ 6] 	jmp (f_storage_vec+f_release_vec)
                             	
c576 :                       f_open_msg
c576 : 4c6f6164696e67..      	db	"Loading:",0
c57f :                       f_save_msg
c57f : 536176696e673a00      	db	"Saving:",0
c587 :                       f_back4
c587 : 0808080800            	db	8,8,8,8,0
                             
c58c :                       f_print_msg
c58c : 245b             [ 3] 	bit tp_print
c58e : 300a             [ 3] 	bmi f_no_print
c590 : 4c25d1           [ 3] 	jmp gr_print_msg
                             
c593 :                       f_print_byte
c593 : 245b             [ 3] 	bit tp_print
c595 : 3003             [ 3] 	bmi f_no_print
c597 : 4cd1d0           [ 3] 	jmp gr_put_byte
                             
c59a :                       f_no_print
c59a : 60               [ 6] 	rts
                             
                             ;* Common function to open tape
                             ;* df_linbuff contains the filename without devic
                             ;* A contains device (0=tape, 1=sdcard)
c59b :                       f_open_common				; Used by open write also
c59b : a8               [ 2] 	tay						; Move A to Y
c59c : f002             [ 3] 	beq f_skip_sd			; Skip SD card if 0
c59e : a00c             [ 2] 	ldy #f_storage_table	; Else Y index into sd card
c5a0 :                       f_skip_sd	
c5a0 : a200             [ 2] 	ldx #0					; Start at beginning of table
c5a2 :                       f_init_vectors
c5a2 : b94cc5           [ 4] 	lda tpsd_vectors,y		; Get vector byte
c5a5 : 9d1106           [ 5] 	sta f_storage_vec,x		; Save to ram table
c5a8 : c8               [ 2] 	iny
c5a9 : e8               [ 2] 	inx
c5aa : e00c             [ 2] 	cpx #f_storage_table	; Keep going until whole ta
c5ac : d0f4             [ 3] 	bne f_init_vectors
                             
c5ae : 78               [ 2] 	sei						; Interrupts disabled from here..
c5af : a200             [ 2] 	ldx #0
c5b1 : 8657             [ 3] 	stx tp_idx				; Initialise block
c5b3 : 8655             [ 3] 	stx tp_block
c5b5 : 8656             [ 3] 	stx tp_block+1
                             	
c5b7 : 2064c5           [ 6] 	jsr f_init				; Initialise VIA etc.
AS65 Assembler for R6502 [1.42].                                     Page   72
-------------------------------- bank\bank0.s --------------------------------

c5ba : 60               [ 6] 	rts
                             
                             ;* tp_open_read
                             
c5bb :                       fd_cload_getname_pc			; ** FOR ORICUTRON EMULATOR
                             
c5bb :                       f_open_bread
c5bb :                       f_open_read
c5bb : 48               [ 3] 	pha						; Don't lose device number
c5bc : a901             [ 2] 	lda #1					; Read mode
c5be : 8558             [ 3] 	sta tp_flag
c5c0 : a076             [ 2] 	ldy #lo(f_open_msg)
c5c2 : a9c5             [ 2] 	lda #hi(f_open_msg)
c5c4 : 208cc5           [ 6] 	jsr f_print_msg
c5c7 : 68               [ 4] 	pla
c5c8 : 209bc5           [ 6] 	jsr f_open_common
                             
c5cb :                       f_get_fname_start
c5cb : 2067c5           [ 6] 	jsr f_read_byte
c5ce : c924             [ 2] 	cmp #'$'				; Find the $ symbol
c5d0 : d0f9             [ 3] 	bne f_get_fname_start
                             	
c5d2 : a209             [ 2] 	ldx #9					; 9 byte header - skip
c5d4 :                       f_get_header
c5d4 : 2067c5           [ 6] 	jsr f_read_byte
c5d7 : ca               [ 2] 	dex
c5d8 : d0fa             [ 3] 	bne f_get_header
                             	
                             	; X= zero here, now get null terminated filename
c5da :                       f_get_fname
c5da : 2067c5           [ 6] 	jsr f_read_byte
c5dd : 9d0004           [ 5] 	sta df_linbuff,x
c5e0 : e8               [ 2] 	inx
c5e1 : c900             [ 2] 	cmp #0
c5e3 : d0f5             [ 3] 	bne f_get_fname
                             
c5e5 : a000             [ 2] 	ldy #lo(df_linbuff)
c5e7 : a904             [ 2] 	lda #hi(df_linbuff)
c5e9 : 208cc5           [ 6] 	jsr f_print_msg
c5ec : a920             [ 2] 	lda #' '
c5ee : 2093c5           [ 6] 	jsr f_print_byte
                             
c5f1 : 18               [ 2] 	clc
c5f2 : 60               [ 6] 	rts
                             
c5f3 :                       tt_getsync_pc				; ** FOR ORICUTRON EMULATOR **
c5f3 :                       tt_getsync_end_pc			; ** FOR ORICUTRON EMULATOR *
                             
c5f3 : ea               [ 2] 	nop
                             	
                             
                             ;* tp_close
                             ;* Close tape settings
c5f4 :                       f_close
c5f4 : a558             [ 3] 	lda tp_flag
c5f6 : c902             [ 2] 	cmp #2					; Write mode?
c5f8 : d003             [ 3] 	bne f_close_no_flush	; If not no need to flush
c5fa : 2089c6           [ 6] 	jsr f_put_block			; Flush the current block
c5fd :                       f_close_no_flush
c5fd : a90d             [ 2] 	lda #0x0d				; Line feed
c5ff : 2093c5           [ 6] 	jsr f_print_byte
c602 : 2073c5           [ 6] 	jsr f_release			; Device specific resource relea
AS65 Assembler for R6502 [1.42].                                     Page   73
-------------------------------- bank\bank0.s --------------------------------

c605 : 20f7c4           [ 6] 	jsr init_via0			; Back to normal
c608 : 58               [ 2] 	cli
c609 : a900             [ 2] 	lda #0					; Zero tape flag
c60b : 8558             [ 3] 	sta tp_flag
                             
c60d :                       tt_csave_end_pc				; ** FOR ORICUTRON EMULATOR **
                             
c60d : 18               [ 2] 	clc
c60e : 60               [ 6] 	rts
                             
                             ;* tp_open_write
                             ;* Open tape settings
c60f :                       f_open_bwrite
c60f : a001             [ 2] 	ldy #hi(0x101)
c611 : a201             [ 2] 	ldx #lo(0x101)
c613 : d004             [ 3] 	bne f_open_write_start
c615 :                       f_open_write
c615 : a018             [ 2] 	ldy #hi(6000+0x101)
c617 : a271             [ 2] 	ldx #lo(6000+0x101)
                             
c619 :                       fd_csave_getname_pc			; ** FOR ORICUTRON EMULATOR
                             
c619 :                       f_open_write_start
c619 : 48               [ 3] 	pha						; Don't lose device number
c61a : a902             [ 2] 	lda #2					; Write mode
c61c : 8558             [ 3] 	sta tp_flag
c61e : 845a             [ 3] 	sty tp_delay+1
c620 : 8659             [ 3] 	stx tp_delay
c622 : a07f             [ 2] 	ldy #lo(f_save_msg)
c624 : a9c5             [ 2] 	lda #hi(f_save_msg)
c626 : 208cc5           [ 6] 	jsr f_print_msg
c629 : a000             [ 2] 	ldy #lo(df_linbuff)
c62b : a904             [ 2] 	lda #hi(df_linbuff)
c62d : 208cc5           [ 6] 	jsr f_print_msg
c630 : a920             [ 2] 	lda #' '
c632 : 2093c5           [ 6] 	jsr f_print_byte
c635 : 68               [ 4] 	pla	
c636 : 209bc5           [ 6] 	jsr f_open_common		; Same as reading but tp_mode
                             
c639 :                       tt_writeleader_pc			; ** FOR ORICUTRON EMULATOR *
c639 :                       tt_writeleader_end_pc		; ** FOR ORICUTRON EMULATO
c639 : a280             [ 2] 	ldx #128				; 128 low bits
c63b : 206dc5           [ 6] 	jsr f_put_delay
                             
c63e : a924             [ 2] 	lda #'$'				; Start of header symbol
c640 : 38               [ 2] 	sec
c641 : 206ac5           [ 6] 	jsr f_write_byte
                             	
c644 : a209             [ 2] 	ldx #9					; Header, for future expansion
c646 : a9ff             [ 2] 	lda #0xff
c648 :                       f_write_header	
c648 : 38               [ 2] 	sec
c649 : 206ac5           [ 6] 	jsr f_write_byte
c64c : ca               [ 2] 	dex
c64d : d0f9             [ 3] 	bne f_write_header
                             	
c64f : a200             [ 2] 	ldx #0
c651 :                       f_write_fname
c651 : bd0004           [ 4] 	lda df_linbuff,x		; Put the filename
c654 : 38               [ 2] 	sec
c655 : 206ac5           [ 6] 	jsr f_write_byte
c658 : e8               [ 2] 	inx
AS65 Assembler for R6502 [1.42].                                     Page   74
-------------------------------- bank\bank0.s --------------------------------

c659 : c900             [ 2] 	cmp #0
c65b : d0f4             [ 3] 	bne f_write_fname
                             	
c65d : 18               [ 2] 	clc
c65e : 60               [ 6] 	rts
                             
                             
                             ;* f_put_byte
                             ;* Put to byte to tape - if got a block then save
                             
c65f :                       f_put_byte
c65f : 48               [ 3] 	pha
c660 : 8538             [ 3] 	sta tmp_d
c662 : 8a               [ 2] 	txa
c663 : 48               [ 3] 	pha
c664 : 98               [ 2] 	tya
c665 : 48               [ 3] 	pha
c666 : a538             [ 3] 	lda tmp_d
                             	
c668 : a457             [ 3] 	ldy tp_idx				; Save byte to buffer
c66a : 990002           [ 5] 	sta tp_buf,y
c66d : c8               [ 2] 	iny
c66e : 8457             [ 3] 	sty tp_idx
c670 : d010             [ 3] 	bne f_put_byte_done
c672 : 2089c6           [ 6] 	jsr f_put_block			; Flush block to tape
c675 : 18               [ 2] 	clc						; Increment block #
c676 : a555             [ 3] 	lda tp_block
c678 : 6901             [ 2] 	adc #1
c67a : 8555             [ 3] 	sta tp_block
c67c : a556             [ 3] 	lda tp_block+1
c67e : 6900             [ 2] 	adc #0
c680 : 8556             [ 3] 	sta tp_block+1
c682 :                       f_put_byte_done
c682 : 68               [ 4] 	pla
c683 : a8               [ 2] 	tay
c684 : 68               [ 4] 	pla
c685 : aa               [ 2] 	tax
c686 : 68               [ 4] 	pla
c687 : 18               [ 2] 	clc
c688 : 60               [ 6] 	rts
                             
                             ;* tp_put_block
                             ;* flush a block to tape
c689 :                       f_put_block
c689 : 20acc6           [ 6] 	jsr f_print_block
                             		
c68c : a280             [ 2] 	ldx #128				; 128 low bits
c68e : 206dc5           [ 6] 	jsr f_put_delay
                             
c691 : a555             [ 3] 	lda tp_block			; Save block number low then high
c693 : 18               [ 2] 	clc
c694 : 206ac5           [ 6] 	jsr f_write_byte
c697 : a556             [ 3] 	lda tp_block+1
c699 : 38               [ 2] 	sec
c69a : 206ac5           [ 6] 	jsr f_write_byte
                             
c69d : a200             [ 2] 	ldx #0
c69f :                       f_put_block_bytes
c69f : bd0002           [ 4] 	lda tp_buf,x			; Then write out all bytes in blo
c6a2 : 18               [ 2] 	clc
c6a3 : 206ac5           [ 6] 	jsr f_write_byte
c6a6 : e8               [ 2] 	inx
AS65 Assembler for R6502 [1.42].                                     Page   75
-------------------------------- bank\bank0.s --------------------------------

c6a7 : d0f6             [ 3] 	bne f_put_block_bytes	; Always 256 bytes
                             	
c6a9 : 4c70c5           [ 3] 	jmp f_block_gap		; Wait a while, still outputtin
                             
                             ;	rts
                             
                             ; tp_print_block
c6ac :                       f_print_block
c6ac : a556             [ 3] 	lda tp_block+1			; Print block number hi byte
c6ae : 2085c1           [ 6] 	jsr str_a_to_x
c6b1 : 2093c5           [ 6] 	jsr f_print_byte
c6b4 : 8a               [ 2] 	txa
c6b5 : 2093c5           [ 6] 	jsr f_print_byte
c6b8 : a555             [ 3] 	lda tp_block			; Print block number lo byte
c6ba : 2085c1           [ 6] 	jsr str_a_to_x
c6bd : 2093c5           [ 6] 	jsr f_print_byte
c6c0 : 8a               [ 2] 	txa
c6c1 : 2093c5           [ 6] 	jsr f_print_byte
c6c4 : a9c5             [ 2] 	lda #hi(f_back4)		; Go back 4 characters to prin
c6c6 : a087             [ 2] 	ldy #lo(f_back4)
c6c8 : 4c8cc5           [ 3] 	jmp f_print_msg
                             ;	rts
                             
                             
                             ;* t_get_byte
                             ;* Get a byte from buffer - load blocks as needed
c6cb :                       f_get_byte
c6cb : 8a               [ 2] 	txa
c6cc : 48               [ 3] 	pha
c6cd : 98               [ 2] 	tya
c6ce : 48               [ 3] 	pha
                             	
c6cf : a457             [ 3] 	ldy tp_idx				; Index in to buffer
c6d1 : d005             [ 3] 	bne f_get_byte_buf		; No need to load from tape
c6d3 : 20e8c6           [ 6] 	jsr f_get_block			; Else load a block from tape
c6d6 : a000             [ 2] 	ldy #0					; 0 index is now valid
c6d8 :                       f_get_byte_buf
c6d8 : b90002           [ 4] 	lda tp_buf,y			; Get from memory buffer
c6db : c8               [ 2] 	iny
c6dc : 8457             [ 3] 	sty tp_idx				; Never zero on leaving
c6de : 8538             [ 3] 	sta tmp_d
c6e0 : 68               [ 4] 	pla
c6e1 : a8               [ 2] 	tay
c6e2 : 68               [ 4] 	pla
c6e3 : aa               [ 2] 	tax
c6e4 : a538             [ 3] 	lda tmp_d
c6e6 : 18               [ 2] 	clc
c6e7 : 60               [ 6] 	rts						; Except when buffer done
                             
                             ;* f_get_block
                             ;* Load a block in to memory
c6e8 :                       f_get_block
                             
c6e8 : 2067c5           [ 6] 	jsr f_read_byte		; Get block number
c6eb : 8555             [ 3] 	sta tp_block
c6ed : 2067c5           [ 6] 	jsr f_read_byte
c6f0 : 8556             [ 3] 	sta tp_block+1
                             	
c6f2 : 20acc6           [ 6] 	jsr f_print_block
                             	
c6f5 : a000             [ 2] 	ldy #0
c6f7 : 8457             [ 3] 	sty tp_idx
AS65 Assembler for R6502 [1.42].                                     Page   76
-------------------------------- bank\bank0.s --------------------------------

c6f9 :                       f_get_block_bytes
c6f9 : 2067c5           [ 6] 	jsr f_read_byte		; Fill buffer
c6fc : a457             [ 3] 	ldy tp_idx
c6fe : 990002           [ 5] 	sta tp_buf,y
c701 : c8               [ 2] 	iny
c702 : 8457             [ 3] 	sty tp_idx
c704 : d0f3             [ 4] 	bne f_get_block_bytes	; Always 256 bytes
                             
c706 : 60               [ 6] 	rts
                             	
                             
c707 :                       mod_sz_file_e
                             
                             
                             	include "file/tape.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TAPE.S
                             ;*	These routines allow for tape input/output
                             ;*	The tape format is not compatible with a regul
                             ;*	but is a block format as follows;
                             ;*	Some zero bits (64) start a block.
                             ;*	Then two bytes of data representing the block 
                             ;*	Then 256 bytes of block data.
                             ;*	Each byte above consists of two '1' start bits
                             ;*	one '0' stop bit.
                             ;*	After each block, 1 second of 4800Hz (seen as 
                             ;*	is transmitted to allow the CPU to deal with t
                             ;*	when subsequently loading.
                             ;*	A bit is 4800Hz half cycle then 4800Hz half cy
                             ;*	'1' or 2400Hz half cycle for a '0', except for
                             ;*	block which is one second of 2400Hz.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c707 :                       mod_sz_tape_s
                             
c707 :                       tp_init
c707 : 4cf4c4           [ 3] 	jmp init_via0_tape
                             
c70a :                       tp_release
c70a : 60               [ 6] 	rts
                             	
                             ; tp_put_delay
                             ;* X = number of zero bits to insert
c70b :                       tp_put_delay
c70b : 18               [ 2] 	clc
c70c : 2041c7           [ 6] 	jsr tp_write_bit
c70f : ca               [ 2] 	dex
c710 : d0f9             [ 3] 	bne tp_put_delay
c712 : 60               [ 6] 	rts
                             
                             ; tp_block_gap
AS65 Assembler for R6502 [1.42].                                     Page   77
-------------------------------- bank\bank0.s --------------------------------

                             ; Send 2400 bits of zero ~ 1.5 seconds
                             ; add 0x101 due to how counters decrement
                             ; For binary mode it is just 1 bit gap
c713 :                       tp_block_gap
c713 : a45a             [ 3] 	ldy tp_delay+1
c715 : a659             [ 3] 	ldx tp_delay
c717 :                       tp_block_gap_1
c717 : 200bc7           [ 6] 	jsr tp_put_delay
c71a : 88               [ 2] 	dey
c71b : d0fa             [ 3] 	bne tp_block_gap_1
c71d : 60               [ 6] 	rts	
                             
                             ;* tp_write_byte
                             ;* Write a byte to tape which looks like this
                             ;* 11xxxxxxxx0
c71e :                       tt_putbyte_pc				; ** FOR ORICUTRON EMULATOR **
c71e :                       tp_write_byte
c71e : 48               [ 3] 	pha
c71f : 08               [ 3] 	php
c720 : 38               [ 2] 	sec					; 1 for start bit
c721 : 2041c7           [ 6] 	jsr tp_write_bit
c724 : 38               [ 2] 	sec					; 1 for start bit
c725 : 2041c7           [ 6] 	jsr tp_write_bit
c728 : a008             [ 2] 	ldy #8				; 8 bits of data
c72a :                       tp_write_byte_bit
c72a : 6a               [ 2] 	ror a
c72b : 2041c7           [ 6] 	jsr tp_write_bit
c72e : 88               [ 2] 	dey
c72f : d0f9             [ 3] 	bne tp_write_byte_bit
c731 : 18               [ 2] 	clc					; 0 for stop bit
c732 : 2041c7           [ 6] 	jsr tp_write_bit
c735 : 28               [ 4] 	plp
c736 : 9007             [ 3] 	bcc tp_write_byte_nodelay
c738 : 8a               [ 2] 	txa
c739 : a220             [ 2] 	ldx #32					; Delays needed
c73b : 200bc7           [ 6] 	jsr tp_put_delay
c73e : aa               [ 2] 	tax
c73f :                       tp_write_byte_nodelay
c73f : 68               [ 4] 	pla
c740 :                       tt_putbyte_end_pc			; ** FOR ORICUTRON EMULATOR *
c740 : 60               [ 6] 	rts
                             	
                             
                             ;* tp_write_bit
                             ;* Write a bit in C to tape which looks like this
                             ;* Half cycle of 4800Hz, then
                             ;*		half cycle of 4800Hz for a 1
                             ;*		half cycle of 2400Hz for a 0
c741 :                       tp_write_bit
c741 : 48               [ 3] 	pha
c742 : 8a               [ 2] 	txa
c743 : 48               [ 3] 	pha
c744 : 08               [ 3] 	php						; Save the bit to be stored
                             
c745 : a9d0             [ 2] 	lda #TAPE_RATE			; Half cycle first of 4800Hz
c747 : a200             [ 2] 	ldx #0
c749 : 8d0603           [ 4] 	sta IO_0+T1LL
c74c : 8e0703           [ 4] 	stx IO_0+T1LH			; This starts the timer
c74f : ad0403           [ 4] 	lda IO_0+T1CL			; Clear any interrupt flag
c752 :                       tp_write_bit_chk1
c752 : 2c0d03           [ 4] 	bit IO_0+IFR			; Check IRF for bit 6
c755 : 50fb             [ 3] 	bvc tp_write_bit_chk1	; V=0? Keep checking
AS65 Assembler for R6502 [1.42].                                     Page   78
-------------------------------- bank\bank0.s --------------------------------

c757 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear interrupt flag
                             	
c75a : 28               [ 4] 	plp						; Get the bit to be stored
c75b : a9d0             [ 2] 	lda #TAPE_RATE			; Assume putting out a 1 in 2nd
c75d : b002             [ 3] 	bcs tp_write_bit_t1		; A zero is half the rate (
c75f : 0a               [ 2] 	asl	a					; TAPE_RATE * 2 need to inc X
c760 : e8               [ 2] 	inx
c761 :                       tp_write_bit_t1
c761 : 8d0603           [ 4] 	sta IO_0+T1LL
c764 : 8e0703           [ 4] 	stx IO_0+T1LH			; This starts the timer
c767 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear any interrupt flag
c76a :                       tp_write_bit_chk2
c76a : 2c0d03           [ 4] 	bit IO_0+IFR			; Check IRF for bit 6
c76d : 50fb             [ 3] 	bvc tp_write_bit_chk2	; V=0? Keep checking
c76f : ad0403           [ 4] 	lda IO_0+T1CL			; Clear interrupt flag
c772 : 68               [ 4] 	pla
c773 : aa               [ 2] 	tax
c774 : 68               [ 4] 	pla
c775 : 60               [ 6] 	rts
                             
                             
                             
                             ;* tp_read_byte
                             ;* Read a byte from tape, always expects one '1' 
c776 :                       tt_readbyte_pc				; ** FOR ORICUTRON EMULATOR **
c776 :                       tp_read_byte
c776 :                       tp_read_byte_st
c776 : 208ac7           [ 6] 	jsr tp_read_bit			; Expecting a 1
c779 : 90fb             [ 3] 	bcc tp_read_byte_st
c77b : 208ac7           [ 6] 	jsr tp_read_bit			; Should be another 1
c77e : 90f6             [ 3] 	bcc tp_read_byte_st
                             	; Ok got 2 start
                             	
c780 : a008             [ 2] 	ldy #8				; Get 8 bits
c782 :                       tp_read_byte_bits
c782 : 208ac7           [ 6] 	jsr tp_read_bit
c785 : 6a               [ 2] 	ror a
c786 : 88               [ 2] 	dey
c787 : d0f9             [ 3] 	bne tp_read_byte_bits
                             	; Byte is in A, stop bit is not waited for..
c789 :                       tt_readbyte_end_pc			; ** FOR ORICUTRON EMULATOR 
c789 : 60               [ 6] 	rts
                             
                             ;* tp_read_bit
                             ;* Get a CB1 transition and measure the time
                             ;* The measurement indicates a 1 or 0 received
c78a :                       tp_read_bit
c78a : 48               [ 3] 	pha
c78b : ad0003           [ 4] 	lda IO_0+PRB			; Clear CB1 interrupt flag by rea
c78e :                       tp_read_bit_cb1
c78e :                       tt_getsync_loop_pc			; ** FOR ORICUTRON EMULATOR 
c78e : ad0d03           [ 4] 	lda IO_0+IFR
c791 : 2910             [ 2] 	and #IFR_CB1
c793 : f0f9             [ 3] 	beq tp_read_bit_cb1		; Keep checking until CB1 a
                             
c795 : ad0903           [ 4] 	lda IO_0+T2CH			; Get the high byte of T2 counte
c798 : 48               [ 3] 	pha
c799 : a9ff             [ 2] 	lda #0xff				; Reset T2 counter high byte
c79b : 8d0903           [ 4] 	sta IO_0+T2CH			; Reset high byte of T2 counter
c79e : 68               [ 4] 	pla						; What was previous counter?
                             ;	beq tp_io_error			; If down to zero, then some 
c79f : c9fe             [ 2] 	cmp #0xfe				; C=1 if T2 >= 0xfe else C=0
AS65 Assembler for R6502 [1.42].                                     Page   79
-------------------------------- bank\bank0.s --------------------------------

c7a1 : 68               [ 4] 	pla
c7a2 : 60               [ 6] 	rts						; Carry contains the bit received
c7a3 :                       tp_io_error
                             	SWBRK DFERR_BREAK		; DEFINE A NEW ERROR!
                             
                             
c7a5 :                       mod_sz_tape_e
                             
                             
                             	include "file/sdcard.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  SDCARD.S
                             ;*	These routines allow for SD card input/output
                             ;*	The file format is similar to the dflat tape
                             ;*	format but is *NOT* a block format
                             ;*
                             ;*  Controlled through port A (printer port) as f
                             ;*		PA0		Clock			Out		Controlled by Oric
                             ;*		PA1		D0				In/Out	To/from Oric protocol depen
                             ;*		PA2		D1				In/Out	To/from Oric protocol depen
                             ;*		PA3		D2				In/Out	To/from Oric protocol depen
                             ;*		PA4		D3				In/Out	To/from Oric protocol depen
                             ;*		PA5		Ready (ACK)		In		Set by Arduino (1=ACK)
                             ;*		PA6		SD Select		Out		Set low by Oric
                             ;*		PA7		SD Select		Out		Set low by Oric
                             ;*		PB4		Select (STB)	Out		Set low by Oric
                             ;*
                             ;* Protocol is that PB4,6,7 must be low for SD ca
                             ;* to respond. If PB6,7 are non zero, then it sel
                             ;* one of the joysticks.
                             ;* Protocol;
                             ;* Write:
                             ;* 0) Oric: Set PB4,6,7 low - D0-D3 as output
                             ;* 1) Oric: Set D0-D3 as output (to send)
                             ;* 2) Oric: Send write command byte
                             ;* 3) Oric: Send additional bytes (e.g. filename)
                             ;* 4) Oric: Set D0-D3 as output
                             ;* 5) Oric: Send data bytes
                             ;* 6) Oric: Set PB4,6,7 = high, D0-D3 as input
                             ;* Read:
                             ;* 0) Oric: Set PB4,6,7 low - D0-D3 as output
                             ;* 1) Oric: Set D0-D3 as output (to send)
                             ;* 2) Oric: Send write command byte
                             ;* 3) Oric: Send additional bytes (e.g. filename)
                             ;* 4) Oric: Set D0-D3 as input
                             ;* 5) Oric: Receive data bytes
                             ;* 6) Oric: Set PB4,6,7 = high, D0-D3 as input
                             ;*
                             ;* Commands
                             ;* 0x00 : Load <filename><NUL>
                             ;* 0x01 : Save <filename><NUL>
                             ;************************************************
                             
                             	; ROM code
                             	code
AS65 Assembler for R6502 [1.42].                                     Page   80
-------------------------------- bank\bank0.s --------------------------------

                             
c7a5 :                       mod_sz_sd_s
                             
0002 =                       SD_BIT_DELAY	=	2
                             
                             ; Release the Arduino
                             ; Toggles the clock line a few times with STB hig
                             ; This causes the Arduino to reset
c7a5 :                       sd_release
c7a5 : 203cc5           [ 6] 	jsr via_strobe_off
                             ;	ldy #10
                             ;	lda IO_0+PRA;
                             ;sd_reset_toggle
                             ;	eor #1
                             ;	sta IO_0+PRA;
                             ;	jsr sd_delay
                             ;	dey
                             ;	bne sd_reset_toggle
c7a8 : 20f1c7           [ 6] 	jsr sd_write_byte
c7ab : 20f1c7           [ 6] 	jsr sd_write_byte
c7ae : 4cf7c4           [ 3] 	jmp init_via0
                             
                             
                             ;* Select the Arduino
c7b1 :                       sd_select
c7b1 : 48               [ 3] 	pha
                             
                             	;set ddra to output mode initially
c7b2 : a9df             [ 2] 	lda #0b11011111
c7b4 : 2030c5           [ 6] 	jsr via_strobe_init
                             
                             	;deselect joystick (and zero all other bits)
c7b7 : a900             [ 2] 	lda #0b00000000
c7b9 : 8d0103           [ 4] 	sta IO_0+PRA
                             
c7bc : 20d2c7           [ 6] 	jsr sd_delay
c7bf : 68               [ 4] 	pla
c7c0 : 60               [ 6] 	rts
                             
                             
                             ;* Wait for Arduino to be ready then short delay
                             ;* Timeout results in an exception (BRK)
c7c1 :                       sd_ready
c7c1 : a250             [ 2] 	ldx #80
c7c3 : a000             [ 2] 	ldy #0
c7c5 :                       sd_notready
c7c5 : c8               [ 2] 	iny							; Decrement X,Y timeout
c7c6 : d003             [ 3] 	bne sd_ready_skipx
c7c8 : ca               [ 2] 	dex
c7c9 : f011             [ 3] 	beq sd_timeout				; If X is zero then timeout er
c7cb :                       sd_ready_skipx
c7cb : ad0103           [ 4] 	lda IO_0+PRA				; Get port A value
c7ce : 2920             [ 2] 	and #0b00100000				; Check bit 5
c7d0 : f0f3             [ 3] 	beq sd_notready
                             ;* Delay based on X register - called direct in o
c7d2 :                       sd_delay
c7d2 : 48               [ 3] 	pha
c7d3 : 8a               [ 2] 	txa
c7d4 : a202             [ 2] 	ldx #SD_BIT_DELAY
c7d6 :                       sd_delay_loop
c7d6 : ca               [ 2] 	dex
c7d7 : d0fd             [ 3] 	bne sd_delay_loop
AS65 Assembler for R6502 [1.42].                                     Page   81
-------------------------------- bank\bank0.s --------------------------------

c7d9 : aa               [ 2] 	tax
c7da : 68               [ 4] 	pla
c7db : 60               [ 6] 	rts
c7dc :                       sd_timeout
                             	SWBRK DFERR_FNAME
                             
                             
                             
                             ; Write nibble in bit 1..4 plus clock high
c7de :                       sd_write_nibble
c7de : a000             [ 2] 	ldy #0b00000000
c7e0 : 8c0103           [ 4] 	sty IO_0+PRA				; Clock low, data low
c7e3 : 20d2c7           [ 6] 	jsr sd_delay
c7e6 : 0d0103           [ 4] 	ora IO_0+PRA				; Set bits to transfer for nibbl
c7e9 : 0901             [ 2] 	ora #1						; Clock high
c7eb : 8d0103           [ 4] 	sta IO_0+PRA				; Send it to Port A
c7ee : 4cd2c7           [ 3] 	jmp sd_delay
                             
                             
                             ;* Write a byte in A to the Arduino
c7f1 :                       sd_write_byte
c7f1 : 8538             [ 3] 	sta tmp_d
c7f3 : 48               [ 3] 	pha
c7f4 : 8a               [ 2] 	txa
c7f5 : 48               [ 3] 	pha
c7f6 : 98               [ 2] 	tya
c7f7 : 48               [ 3] 	pha
                             
                             	; Make sure arduino is ready
c7f8 : 20c1c7           [ 6] 	jsr sd_ready	
                             
                             	; Set DDRA to output from Oric
c7fb : a9df             [ 2] 	lda #0b11011111
c7fd : 8d0303           [ 4] 	sta IO_0+DDRA
                             
                             	; Write low nibble
c800 : a538             [ 3] 	lda tmp_d					; Get the byte to transmit
c802 : 290f             [ 2] 	and #0x0f					; Mask off lower nibble
c804 : 0a               [ 2] 	asl a 						; Shift from bit 0-3 to bit 1-4
c805 : 20dec7           [ 6] 	jsr sd_write_nibble
                             
                             	; Write high nibble
c808 : a538             [ 3] 	lda tmp_d					; Get the byte to transmit
c80a : 29f0             [ 2] 	and #0xf0					; Mask off upper nibble
c80c : 4a               [ 2] 	lsr a						; Shift down to bit 1-4
c80d : 4a               [ 2] 	lsr a
c80e : 4a               [ 2] 	lsr a
c80f : 20dec7           [ 6] 	jsr sd_write_nibble
                             
c812 : 68               [ 4] 	pla
c813 : a8               [ 2] 	tay
c814 : 68               [ 4] 	pla
c815 : aa               [ 2] 	tax
                             
c816 : 68               [ 4] 	pla
c817 : 60               [ 6] 	rts
                             
                             
                             ;* Read nibble from Arduino plus clock high
c818 :                       sd_read_nibble
c818 : a000             [ 2] 	ldy #0b00000000
c81a : 8c0103           [ 4] 	sty IO_0+PRA				; Set clock low, data low
AS65 Assembler for R6502 [1.42].                                     Page   82
-------------------------------- bank\bank0.s --------------------------------

c81d : 20d2c7           [ 6] 	jsr sd_delay				
                             
c820 : 0901             [ 2] 	ora #1						; Clock bit high
c822 : 8d0103           [ 4] 	sta IO_0+PRA				; Store it
                             
c825 : ad0103           [ 4] 	lda IO_0+PRA				; Get bits 1..4
c828 : 291e             [ 2] 	and #0b00011110				; Mask these bits
                             
c82a : 4cd2c7           [ 3] 	jmp sd_delay
                             
                             
c82d :                       sd_read_byte
c82d : 8a               [ 2] 	txa
c82e : 48               [ 3] 	pha
c82f : 98               [ 2] 	tya
c830 : 48               [ 3] 	pha
                             
                             	; Make sure arduino is ready
c831 : 20c1c7           [ 6] 	jsr sd_ready	
                             
                             	; Set DDRA to input to Oric
c834 : a9c1             [ 2] 	lda #0b11000001
c836 : 8d0303           [ 4] 	sta IO_0+DDRA
                             
c839 : ad0103           [ 4] 	lda IO_0+PRA				; Get port A value
c83c : 29e0             [ 2] 	and #0b11100000				; Ensure clock and data is lo
c83e : a8               [ 2] 	tay							; Y is clock zero and data zero
                             
                             	; Read low nibble
c83f : 2018c8           [ 6] 	jsr sd_read_nibble
c842 : 4a               [ 2] 	lsr a						; Shift from bit 1 to bit 0
c843 : 290f             [ 2] 	and #0x0f					; Mask off lower nibble
c845 : 8538             [ 3] 	sta tmp_d					; Save in temp
                             
                             	; Read high nibble
c847 : 2018c8           [ 6] 	jsr sd_read_nibble
c84a : 0a               [ 2] 	asl a						; Shift from bit 1 to bit 4
c84b : 0a               [ 2] 	asl a
c84c : 0a               [ 2] 	asl a
c84d : 29f0             [ 2] 	and #0xf0					; Mask off upper nibble
c84f : 0538             [ 3] 	ora tmp_d					; Merge with lower nibble
c851 : 8538             [ 3] 	sta tmp_d
                             
c853 : 68               [ 4] 	pla
c854 : a8               [ 2] 	tay
c855 : 68               [ 4] 	pla
c856 : aa               [ 2] 	tax
                             
c857 : a538             [ 3] 	lda tmp_d
c859 : 60               [ 6] 	rts
                             	
                             ;* Initialise SD card
                             ;* Use TP flag to determine the command to send t
                             ;* Send this command (read or write) plus the fil
c85a :                       sd_init
c85a : a458             [ 3] 	ldy tp_flag				; 1=read, 2=write
c85c : 88               [ 2] 	dey
c85d : 98               [ 2] 	tya						; 0=read, 1=write for the Arduino
c85e :                       sd_init_a					; Init with A preset to command byt
c85e : 20b1c7           [ 6] 	jsr sd_select
                             ;* Send command and filename
c861 :                       sd_commandfname
AS65 Assembler for R6502 [1.42].                                     Page   83
-------------------------------- bank\bank0.s --------------------------------

c861 : 20f1c7           [ 6] 	jsr sd_write_byte		; Send command byte (0=read, 
c864 : a000             [ 2] 	ldy #0					; Start of df_linbuff
c866 :                       sd_commandfname_ch
c866 : b90004           [ 4] 	lda df_linbuff,y		; Get filename char
c869 : 20f1c7           [ 6] 	jsr sd_write_byte		; Send it as command frame
c86c : c8               [ 2] 	iny						; Next char
c86d : c900             [ 2] 	cmp #0					; Unless zero terminator
c86f : d0f5             [ 3] 	bne sd_commandfname_ch
                             ;* No delay for SD card
                             ;* No block gap for SD card
c871 :                       sd_put_delay
c871 :                       sd_block_gap
c871 : 60               [ 6] 	rts
                             
                             
                             ;* Delete file from SD card
c872 :                       sd_delete
c872 : a903             [ 2] 	lda #3					; Send Delete command
c874 : 205ec8           [ 6] 	jsr sd_init_a			; And send filename to delete
c877 : 20c1c7           [ 6] 	jsr sd_ready			; Check SD card is ready else err
c87a : 4ca5c7           [ 3] 	jmp sd_release			; Then done
                             
                             ;* Ouput directory listing
c87d :                       sd_dir
c87d : 20b1c7           [ 6] 	jsr sd_select
c880 : a904             [ 2] 	lda #4					; Send directory command
c882 : 20f1c7           [ 6] 	jsr sd_write_byte
c885 : 20d2c7           [ 6] 	jsr sd_delay
c888 :                       sd_dir_char					; Keep getting bytes from Arduino
c888 : 20d2c7           [ 6] 	jsr sd_delay
c88b : 202dc8           [ 6] 	jsr sd_read_byte
c88e : 20d1d0           [ 6] 	jsr gr_put_byte
c891 : aa               [ 2] 	tax
c892 : d0f4             [ 3] 	bne sd_dir_char			; Until zero terminator found
c894 : 4ca5c7           [ 3] 	jmp sd_release			; Then done
                             	
                             
                             
c897 :                       mod_sz_sd_e
                             
                             
                             	include "keyboard/keyboard.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  KEYBOARD.S
                             ;*	Keyboard driver code. It is very slow to scan 
                             ;*	routines here do a basic scan for any key befo
                             ;*	the specific key. Still, it has a noticeable i
                             ;*	CPU especially in dflat which checks the key a
                             ;*	keyword is executed.
                             ;*	Rather than working off interrupts these routi
                             ;*	need to be called as needed. The T1 interrupt 
                             ;*	track of keyboard timers for repeat delay and 
                             ;*
                             ;************************************************
                             
AS65 Assembler for R6502 [1.42].                                     Page   84
-------------------------------- bank\bank0.s --------------------------------

                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* init_keyboard
                             ;* Initialise the keyboard settings
                             ;****************************************
c897 :                       init_keyboard
c897 : a914             [ 2] 	lda #KB_REP_DEL
c899 : 8531             [ 3] 	sta kb_rdel_tim
c89b : a903             [ 2] 	lda #KB_REP_TIM
c89d : 8530             [ 3] 	sta kb_rep_tim
c89f : a901             [ 2] 	lda #KB_DEBOUNCE
c8a1 : 852e             [ 3] 	sta kb_deb_tim
                             
                             	; ** check if IJK stick connected **
c8a3 : 08               [ 3] 	php
c8a4 : 78               [ 2] 	sei
                             	; Save port A
c8a5 : ad0303           [ 4] 	lda IO_0+DDRA
c8a8 : 48               [ 3] 	pha
c8a9 : ad0103           [ 4] 	lda IO_0+PRA
c8ac : 48               [ 3] 	pha
                             
                             	; Check IJK present
                             	; set top two bits of porta to output and rest a
c8ad : a9c0             [ 2] 	lda   #0b11000000
c8af : 2030c5           [ 6] 	jsr via_strobe_init
                             	; Select left+right stick
c8b2 : a9c0             [ 2] 	lda #0b11000000
c8b4 : 8d0f03           [ 4] 	sta IO_0+PRAH
                             	; read stick sense line
c8b7 : ad0f03           [ 4] 	lda IO_0+PRAH
c8ba : 2920             [ 2] 	and #KB_IJK
c8bc : 4920             [ 2] 	eor #KB_IJK
c8be : 852c             [ 3] 	sta kb_stat
c8c0 : 203cc5           [ 6] 	jsr via_strobe_off
                             
                             	; Restore port A
c8c3 : 68               [ 4] 	pla
c8c4 : 8d0103           [ 4] 	sta IO_0+PRA
c8c7 : 68               [ 4] 	pla
c8c8 : 8d0303           [ 4] 	sta IO_0+DDRA
                             
c8cb : 28               [ 4] 	plp
c8cc : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* kb_stick
                             ;* Check for fire | down | up | right | left
                             ;*        bit  4     3      2     1       0
                             ;* A = Returns bit mask of keys pressed
                             ;* Y corrupted
                             ;****************************************
c8cd :                       kb_stick
                             	; if IJK connected then read joystick
c8cd : a52c             [ 3] 	lda kb_stat
c8cf : 2920             [ 2] 	and #KB_IJK
c8d1 : d028             [ 3] 	bne kb_stick_ijk
                             
                             	; Select Row 4 only, all keys on this row
AS65 Assembler for R6502 [1.42].                                     Page   85
-------------------------------- bank\bank0.s --------------------------------

c8d3 : a9b4             [ 2] 	lda #4+KB_PRB			; Maintain upper nibble of PRB
c8d5 : 8d0003           [ 4] 	sta IO_0+PRB
c8d8 : a90e             [ 2] 	lda #SND_REG_IOA		; Select AY Port A for columns
c8da : 204ec0           [ 6] 	jsr snd_sel_reg
c8dd : a900             [ 2] 	lda #0					; Result will be in A
c8df : 48               [ 3] 	pha
c8e0 : a004             [ 2] 	ldy #4					; Go through the 5 cols on row 4
c8e2 :                       kb_stick_pos
c8e2 : b9e2ca           [ 4] 	lda kb_stick_mask,y		; Get the column mask
c8e5 : 205ec0           [ 6] 	jsr snd_set_reg			; Activate column
c8e8 : ea               [ 2] 	nop
c8e9 : ea               [ 2] 	nop
c8ea : ea               [ 2] 	nop
c8eb : ea               [ 2] 	nop
c8ec : a908             [ 2] 	lda #KB_SENSE			; Something pressed?
c8ee : 2d0003           [ 4] 	and IO_0+PRB			; Read Port B
c8f1 : c908             [ 2] 	cmp #KB_SENSE			; C=1 if set else 0
c8f3 : 68               [ 4] 	pla
c8f4 : 2a               [ 2] 	rol a					; Get C in to A
c8f5 : 48               [ 3] 	pha
c8f6 : 88               [ 2] 	dey
c8f7 : 10e9             [ 3] 	bpl kb_stick_pos		; Do all 5 positions
c8f9 : 68               [ 4] 	pla						; Result in A
c8fa : 60               [ 6] 	rts
c8fb :                       kb_stick_ijk
c8fb : 08               [ 3] 	php
c8fc : 78               [ 2] 	sei
                             
                             	; Save port A
c8fd : ad0303           [ 4] 	lda IO_0+DDRA
c900 : 48               [ 3] 	pha
c901 : ad0103           [ 4] 	lda IO_0+PRA
c904 : 48               [ 3] 	pha
                             
                             	;set top two bits of porta to output and rest as
c905 : a9c0             [ 2] 	lda   #0b11000000
c907 : 2030c5           [ 6] 	jsr via_strobe_init
                             
                             	;Select Left Joystick
c90a : a97f             [ 2] 	lda #0b01111111
c90c : 8d0103           [ 4] 	sta IO_0+PRA
                             	;Read back Left Joystick state into A
c90f : ad0103           [ 4] 	lda IO_0+PRA
                             	; release joystick IO settings
c912 : 203cc5           [ 6] 	jsr via_strobe_off
                             	;Mask out unused bits and invert
c915 : 291f             [ 2] 	and #0b00011111
c917 : 491f             [ 2] 	eor #0b00011111
c919 : a8               [ 2] 	tay
                             	; use this as an index into the mapping
                             	; to get the same bit representation
                             	; as if using cursor and space keys
c91a : b9e7ca           [ 4] 	lda kb_ijk_map,y
c91d : a8               [ 2] 	tay
                             
                             	; Restore port A
c91e : 68               [ 4] 	pla
c91f : 8d0103           [ 4] 	sta IO_0+PRA
c922 : 68               [ 4] 	pla
c923 : 8d0303           [ 4] 	sta IO_0+DDRA
                             
c926 : 28               [ 4] 	plp
AS65 Assembler for R6502 [1.42].                                     Page   86
-------------------------------- bank\bank0.s --------------------------------

                             	; result in A
c927 : 98               [ 2] 	tya
c928 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* kb_any_key
                             ;* Quick check for any key except shifts & ctrl
                             ;* Carry = 1 means key pressed
                             ;****************************************
c929 :                       kb_any_key
c929 : a90e             [ 2] 	lda #SND_REG_IOA		; Select Port A of AY
c92b : 204ec0           [ 6] 	jsr snd_sel_reg
                             
c92e : a0b7             [ 2] 	ldy #7+KB_PRB			; Start from row 7
c930 :                       kb_any_key_row
c930 : 8c0003           [ 4] 	sty IO_0+PRB			; Select row on port B
                             	; Select all columns except 4
c933 : a910             [ 2] 	lda #0b00010000			; Deselect only col 4
c935 : 205ec0           [ 6] 	jsr snd_set_reg
                             
c938 : ea               [ 2] 	nop
c939 : ea               [ 2] 	nop
c93a : ea               [ 2] 	nop						; New NOP
c93b : ea               [ 2] 	nop
c93c : ea               [ 2] 	nop
                             ;	nop						; New NOP
                             
c93d : a908             [ 2] 	lda #KB_SENSE			; Something pressed?
c93f : 2d0003           [ 4] 	and IO_0+PRB			; Read Port B
c942 : d007             [ 3] 	bne kb_any_key_pressed
c944 : 88               [ 2] 	dey						; If not then next row
c945 : c0af             [ 2] 	cpy #KB_PRB-1			; Done rows 0..8?
c947 : d0e7             [ 3] 	bne kb_any_key_row		; Until all rows done
c949 :                       kb_any_key_none
c949 : 18               [ 2] 	clc						; C=0 means not pressed
c94a : 60               [ 6] 	rts
c94b :                       kb_any_key_pressed
c94b :                       kb_read_got
c94b : 38               [ 2] 	sec						; C=1 means pressed, Y=Row number
c94c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_read_raw
                             ;* Read keyboard
                             ;* Y = Keyboard code
                             ;* Carry = 1 means key found, 0 = no keys found
                             ;****************************************
c94d :                       kb_read_raw
c94d : 2029c9           [ 6] 	jsr kb_any_key			; Quick check is anything down?
c950 : 903f             [ 3] 	bcc kb_read_nothing		; Don't bother if not
                             ;kb_read_raw_force
c952 : a20e             [ 2] 	ldx #SND_REG_IOA		; Select Port A of AY
c954 : 8e0f03           [ 4] 	stx SND_ADBUS			; Put reg # on Port A (sound bus
c957 : a2ff             [ 2] 	ldx #SND_SELSETADDR		; Get ready to select the r
c959 : 8e0c03           [ 4] 	stx SND_MODE			; Latch the reg # on Port A
c95c : a2dd             [ 2] 	ldx #SND_DESELECT		; Deselect AY
c95e : 8e0c03           [ 4] 	stx SND_MODE
c961 : a200             [ 2] 	ldx #0					; Start at column 0
c963 : 86ac             [ 3] 	stx zp_tmp1
c965 :                       kb_check_matrix_col
                             ;	ldy #0+KB_PRB			; Start at row 0 (maintain PRB 
AS65 Assembler for R6502 [1.42].                                     Page   87
-------------------------------- bank\bank0.s --------------------------------

c965 :                       kb_check_matrix_row
c965 : 8c0003           [ 4] 	sty IO_0+PRB			; Select row from Y
                             	; Get the col value for AY port A
c968 : a6ac             [ 3] 	ldx zp_tmp1
c96a : bddaca           [ 4] 	lda kb_col_mask,x
                             	; Write it to AY port A
c96d : 8d0f03           [ 4] 	sta SND_ADBUS			; Put col value on AY bus
c970 : a2fd             [ 2] 	ldx #SND_SELWRITE		; Select mode for writing dat
c972 : 8e0c03           [ 4] 	stx SND_MODE			; Latch reg value on Port A
c975 : a2dd             [ 2] 	ldx #SND_DESELECT		; Deselect AY
c977 : 8e0c03           [ 4] 	stx SND_MODE
                             
c97a : ea               [ 2] 	nop						; Wait 10 cycles before reading sense p
c97b : ea               [ 2] 	nop
c97c : ea               [ 2] 	nop
                             
c97d : a908             [ 2] 	lda #KB_SENSE			; Bit 3 is the sense
c97f : 2d0003           [ 4] 	and IO_0+PRB			; And with Port B
                             
c982 : d011             [ 3] 	bne kb_read_raw_got
                             	; No key for this row/col, next
                             ;	iny
                             ;	cpy #8+KB_PRB			; Done 8 rows?
                             ;	bne kb_check_matrix_row
                             	; ok check next row
c984 : a6ac             [ 3] 	ldx zp_tmp1
c986 :                       kb_check_skip4
c986 : e8               [ 2] 	inx
c987 : e004             [ 2] 	cpx #4					; Skip 4?
c989 : f0fb             [ 3] 	beq kb_check_skip4
c98b : 86ac             [ 3] 	stx zp_tmp1
c98d : e008             [ 2] 	cpx #8					; Done 8 cols?
c98f : d0d4             [ 3] 	bne kb_check_matrix_col
                             	; No key was sensed
c991 :                       kb_read_nothing
c991 : a000             [ 2] 	ldy #0					; Raw key codes
c993 : 18               [ 2] 	clc						; No key sensed flag
c994 : 60               [ 6] 	rts
c995 :                       kb_read_raw_got
                             	;Y=row, zp_temp1=col
c995 : a5ac             [ 3] 	lda zp_tmp1				; Get the column num
c997 : 0a               [ 2] 	asl a					; Shift in to bits 5,4,3
c998 : 0a               [ 2] 	asl a
c999 : 0a               [ 2] 	asl a
c99a : 85ac             [ 3] 	sta zp_tmp1
c99c : 98               [ 2] 	tya						; Now or with row number
c99d : 2907             [ 2] 	and #7					; Only bottom 3 bits!
c99f : 05ac             [ 3] 	ora zp_tmp1
c9a1 : a8               [ 2] 	tay						; Put in to Y
c9a2 : 38               [ 2] 	sec
c9a3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_scan_key
                             ;* Scans for a key, returns zero for no key found
                             ;* Processes caps and shift lock but these don't 
                             ;* A = Key code
                             ;****************************************
c9a4 :                       kb_scan_key
c9a4 : a52d             [ 3] 	lda kb_deb				; Do not scan keyboard too often
c9a6 : d013             [ 3] 	bne kb_no_scan
c9a8 : a52e             [ 3] 	lda kb_deb_tim			; Else reset debounce timer
AS65 Assembler for R6502 [1.42].                                     Page   88
-------------------------------- bank\bank0.s --------------------------------

c9aa : 852d             [ 3] 	sta kb_deb
c9ac : 204dc9           [ 6] 	jsr kb_read_raw			; Check if a key is sensed
c9af : b00e             [ 3] 	bcs kb_scan_decode		; go ahead and decode
                             	; If pressed nothing then reset timers
c9b1 : a9ff             [ 2] 	lda #255
c9b3 : 8529             [ 3] 	sta kb_raw				; Reset raw key settings
c9b5 : 852a             [ 3] 	sta kb_last				; And last key
c9b7 : a531             [ 3] 	lda kb_rdel_tim			; Reset repeat timer to initia
c9b9 : 852f             [ 3] 	sta kb_rep
c9bb :                       kb_no_scan
c9bb : a900             [ 2] 	lda #0
c9bd : 38               [ 2] 	sec						; Code not valid
c9be : 60               [ 6] 	rts						; And done (A=0)
c9bf :                       kb_scan_decode
                             	; If got here then raw key is good
c9bf : a52a             [ 3] 	lda kb_last				; Preload A with last decoded key
c9c1 : c429             [ 3] 	cpy kb_raw				; Same as last raw key?
c9c3 : 8429             [ 3] 	sty kb_raw				; Already save new raw key
c9c5 : d002             [ 3] 	bne kb_process_new		; If is new raw key, look at
c9c7 : f061             [ 4] 	beq kb_do_repeat		; Else go handle repeating wit
c9c9 :                       kb_process_new
c9c9 : a531             [ 3] 	lda kb_rdel_tim			; Reset repeat timer to initia
c9cb : 852f             [ 3] 	sta kb_rep
                             	; Now to get a proper key code translated from r
                             	; Check for shift and ctrl (not debounced!)
c9cd : a9ef             [ 2] 	lda #0b11101111			; Select column 4
c9cf : a20e             [ 2] 	ldx #SND_REG_IOA		; On AY port A
c9d1 : 206ec0           [ 6] 	jsr snd_set
                             
                             	; check shifted keys
c9d4 : a2b4             [ 2] 	ldx #4+KB_PRB			; Row 4 (left shift)
c9d6 : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c9d9 : ea               [ 2] 	nop
c9da : ea               [ 2] 	nop
c9db : ea               [ 2] 	nop
c9dc : ea               [ 2] 	nop
                             
c9dd : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
                             
c9e0 : a2b7             [ 2] 	ldx #7+KB_PRB			; Row 7 (right shift)
c9e2 : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c9e5 : ea               [ 2] 	nop
c9e6 : ea               [ 2] 	nop
c9e7 : ea               [ 2] 	nop
c9e8 : ea               [ 2] 	nop
                             
c9e9 : 0d0003           [ 4] 	ora IO_0+PRB			; Combine Port B
c9ec : be5aca           [ 4] 	ldx kb_table_std,y		; Pre-load standard key code
c9ef : 2908             [ 2] 	and #KB_SENSE			; Bit 3 is the sense
c9f1 : f003             [ 3] 	beq kb_read_noshift		; Skip over if no shift
c9f3 : be9aca           [ 4] 	ldx kb_table_shift,y	; Load up standard key code
c9f6 :                       kb_read_noshift
c9f6 : 862b             [ 3] 	stx kb_code				; Save the mapped keycode
                             	; check ctrl key
c9f8 : a2b2             [ 2] 	ldx #2+KB_PRB			; Row 2 (ctrl key)
c9fa : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c9fd : ea               [ 2] 	nop
c9fe : ea               [ 2] 	nop
c9ff : ea               [ 2] 	nop
ca00 : ea               [ 2] 	nop
                             
ca01 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
AS65 Assembler for R6502 [1.42].                                     Page   89
-------------------------------- bank\bank0.s --------------------------------

ca04 : 2908             [ 2] 	and #KB_SENSE
ca06 : f00a             [ 3] 	beq kb_skip_ctrl
ca08 : a52b             [ 3] 	lda kb_code
ca0a : 291f             [ 2] 	and #0x1f				; Ctrl will result in codes 0 to 31
ca0c : 852b             [ 3] 	sta kb_code				; Override the keycode
ca0e : f02a             [ 3] 	beq kb_brk
ca10 : 1020             [ 3] 	bpl	kb_store_last		; Check repeat (bpl is always
ca12 :                       kb_skip_ctrl
ca12 : a52c             [ 3] 	lda kb_stat				; Check caps lock
ca14 : 2901             [ 2] 	and #KB_CAPSLK
ca16 : f01a             [ 3] 	beq kb_store_last
ca18 : a52b             [ 3] 	lda kb_code
ca1a : c961             [ 2] 	cmp #'a'				; If < 'a' then skip
ca1c : 9014             [ 3] 	bcc kb_store_last
ca1e : c97b             [ 2] 	cmp #'z'+1				; If > 'z' then skip
ca20 : b010             [ 3] 	bcs kb_store_last
ca22 : a52b             [ 3] 	lda kb_code				; Get the actual code
ca24 : 4920             [ 2] 	eor #0x20				; Switch off bit 0x20
ca26 : 852b             [ 3] 	sta kb_code				; Save the capitalised code
ca28 : d008             [ 3] 	bne kb_store_last		; always
ca2a :                       kb_do_repeat
ca2a : a62f             [ 3] 	ldx kb_rep				; Has repeat expired?
ca2c : d008             [ 3] 	bne	kb_in_repeat		; If not then still in repeat
ca2e : a630             [ 3] 	ldx kb_rep_tim			; Set repeat speed
ca30 : 862f             [ 3] 	stx kb_rep
ca32 :                       kb_store_last
ca32 : 852a             [ 3] 	sta kb_last				; Make last code same as this
ca34 : 18               [ 2] 	clc						; Code valid
ca35 : 60               [ 6] 	rts
ca36 :                       kb_in_repeat
ca36 : a900             [ 2] 	lda #0					; Don't emit a keycode
ca38 : 38               [ 2] 	sec
ca39 : 60               [ 6] 	rts
ca3a :                       kb_brk
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* kb_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code, C=1 means valid
                             ;****************************************
ca3c :                       kb_get_key
ca3c : 8a               [ 2] 	txa
ca3d : 48               [ 3] 	pha
ca3e : 98               [ 2] 	tya
ca3f : 48               [ 3] 	pha
                             
ca40 :                       kb_get_try
ca40 : 08               [ 3] 	php
ca41 : 20a4c9           [ 6] 	jsr kb_scan_key
ca44 : 900b             [ 3] 	bcc kb_scan_got_key
ca46 : 28               [ 4] 	plp						; No key, so check C
ca47 : b0f7             [ 3] 	bcs kb_get_try			; Keep looking if C
ca49 : 38               [ 2] 	sec						; Indicate key not valid
                             
ca4a : 68               [ 4] 	pla
ca4b : a8               [ 2] 	tay
ca4c : 68               [ 4] 	pla
ca4d : aa               [ 2] 	tax
ca4e : a900             [ 2] 	lda #0
                             
AS65 Assembler for R6502 [1.42].                                     Page   90
-------------------------------- bank\bank0.s --------------------------------

ca50 : 60               [ 6] 	rts
ca51 :                       kb_scan_got_key
ca51 : 28               [ 4] 	plp						; Pull stack
ca52 : 18               [ 2] 	clc						; Indicate key valid
                             
ca53 : 68               [ 4] 	pla
ca54 : a8               [ 2] 	tay
ca55 : 68               [ 4] 	pla
ca56 : aa               [ 2] 	tax
                             
ca57 : a52b             [ 3] 	lda kb_code
                             
ca59 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_table_std (no shift)
                             ;* Each line is one column
                             ;****************************************
ca5a :                       kb_table_std
ca5a : 376a6d6b20757938      	db '7' ,'j' ,'m' ,'k' ,' ' ,'u' ,'y' ,'8'
ca62 : 6e7436392c69686c      	db 'n' ,'t' ,'6' ,'9' ,',' ,'i' ,'h' ,'l'
ca6a : 3572623b2e6f6730      	db '5' ,'r' ,'b' ,';' ,'.' ,'o' ,'g' ,'0'
ca72 : 7666342d0b70652f      	db 'v' ,'f' ,'4' ,'-' ,0x0b,'p' ,'e' ,'/'
ca7a : 0000000000000000      	db 0,0,0,0,0,0,0,0 ; Column 4 is shift and ctrl 
ca82 : 311b7a00087f610d      	db '1' ,0x1b,'z' ,0   ,0x08,0x7f,'a' ,0x0d
ca8a : 7871325c0a5d7300      	db 'x' ,'q' ,'2' ,0x5c,0x0a,']' ,'s' ,0
ca92 : 33646327095b773d      	db '3' ,'d' ,'c' ,0x27,0x09,'[' ,'w' ,'='
                             
                             ;* kb_table_shift (with shift)
ca9a :                       kb_table_shift
ca9a : 264a4d4b2055592a      	db '&' ,'J' ,'M' ,'K' ,' ' ,'U' ,'Y' ,'*'
caa2 : 4e545e283c49484c      	db 'N' ,'T' ,'^' ,'(' ,'<' ,'I' ,'H' ,'L'
caaa : 2552423a3e4f4729      	db '%' ,'R' ,'B' ,':' ,'>' ,'O' ,'G' ,')'
cab2 : 5646245f0b50453f      	db 'V' ,'F' ,'$' ,'_' ,0x0b,'P' ,'E' ,'?'
caba : 0000000000000000      	db 0,0,0,0,0,0,0,0 ; Column 4 is shift and ctrl 
cac2 : 211b5a00087f410d      	db '!' ,0x1b,'Z' ,0   ,0x08,0x7f,'A' ,0x0d
caca : 5851407c0a7d5300      	db 'X' ,'Q' ,'@' ,'|' ,0x0a,'}' ,'S' ,0
cad2 : 23444322097b572b      	db '#' ,'D' ,'C' ,0x22,0x09,'{' ,'W' ,'+'
                             
cada :                       kb_col_mask
cada : fe                    	db 0b11111110
cadb : fd                    	db 0b11111101
cadc : fb                    	db 0b11111011
cadd : f7                    	db 0b11110111
cade : ef                    	db 0b11101111
cadf : df                    	db 0b11011111
cae0 : bf                    	db 0b10111111
cae1 : 7f                    	db 0b01111111
                             
cae2 :                       kb_stick_mask
cae2 : df                    	db 0b11011111		; Left 	= Bit 0
cae3 : 7f                    	db 0b01111111		; Right = Bit 1
cae4 : f7                    	db 0b11110111		; Up	= Bit 2
cae5 : bf                    	db 0b10111111		; Down	= Bit 3
cae6 : fe                    	db 0b11111110		; Space	= Bit 4
                             
cae7 :                       kb_ijk_map
cae7 : 00                    	db 0b00000000		; 00000 = nothing
cae8 : 02                    	db 0b00000010		; 00001 = right
cae9 : 01                    	db 0b00000001		; 00010 = left
caea : 03                    	db 0b00000011		; 00011 = left+right
caeb : 10                    	db 0b00010000		; 00100 = fire
AS65 Assembler for R6502 [1.42].                                     Page   91
-------------------------------- bank\bank0.s --------------------------------

caec : 12                    	db 0b00010010		; 00101 = fire+right
caed : 11                    	db 0b00010001		; 00110 = fire+left
caee : 13                    	db 0b00010011		; 00111 = fire+left+right
caef : 08                    	db 0b00001000		; 01000 = down
caf0 : 0a                    	db 0b00001010		; 01001 = down+right
caf1 : 09                    	db 0b00001001		; 01010 = down+left
caf2 : 0b                    	db 0b00001011		; 01011 = down+left+right
caf3 : 18                    	db 0b00011000		; 01100 = down+fire
caf4 : 1a                    	db 0b00011010		; 01101 = down+fire+right
caf5 : 19                    	db 0b00011001		; 01110 = down+fire+left
caf6 : 1b                    	db 0b00011011		; 01111 = down+fire+left+right
caf7 : 04                    	db 0b00000100		; 10000 = up
caf8 : 06                    	db 0b00000110		; 10001 = up+right
caf9 : 05                    	db 0b00000101		; 10010 = up+left
cafa : 07                    	db 0b00000111		; 10011 = up+left+right
cafb : 14                    	db 0b00010100		; 10100 = up+fire
cafc : 16                    	db 0b00010110		; 10101 = up+fire+right
cafd : 15                    	db 0b00010101		; 10110 = up+fire+left
cafe : 17                    	db 0b00010111		; 10111 = up+fire+left+right
caff : 0c                    	db 0b00001100		; 11000 = up+down
cb00 : 0e                    	db 0b00001110		; 11001 = up+down+right
cb01 : 0d                    	db 0b00001101		; 11010 = up+down+left
cb02 : 0f                    	db 0b00001111		; 11011 = up+down+left+right
cb03 : 1c                    	db 0b00011100		; 11100 = up+down+fire
cb04 : 1e                    	db 0b00011110		; 11101 = up+down+fire+right
cb05 : 1d                    	db 0b00011101		; 11110 = up+down+fire+left
cb06 : 1f                    	db 0b00011111		; 11111 = up+down+fire+left+right
                             	
                             	include "vdp/graph.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  GRAPH.S
                             ;*  This is the graphics module, to handle text a
                             ;*  graphics.
                             ;*  For text modes, this module keeps track of wh
                             ;*  next put a character, and also takes care of 
                             ;*  to the next line as well as scrolling the con
                             ;*  when the cursor has reached the bottom right.
                             ;*  module also enables text input which is echoe
                             ;*  screen, to allow interactive input and editin
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
cb07 :                       mod_sz_graph_s
                             
                             
                             	include "vdp/font.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
AS65 Assembler for R6502 [1.42].                                     Page   92
-------------------------------- bank\bank0.s --------------------------------

                             ;*  credit of original my authorship please!
                             ;*
                             ;*  FONT.S
                             ;*  This is the font definition, used to initiali
                             ;*  character set.  This is the standard Oric-1 f
                             ;*	Still called vdp as this code was ported from 
                             ;*	machine using the TMS9918a.
                             ;*
                             ;************************************************
                             
cb07 :                       vdp_font
                             ; char 32
cb07 : 00                    	db %000000
cb08 : 00                    	db %000000
cb09 : 00                    	db %000000
cb0a : 00                    	db %000000
cb0b : 00                    	db %000000
cb0c : 00                    	db %000000
cb0d : 00                    	db %000000
cb0e : 00                    	db %000000
                             ; char 33
cb0f : 0c                    	db %001100
cb10 : 0c                    	db %001100
cb11 : 0c                    	db %001100
cb12 : 08                    	db %001000
cb13 : 08                    	db %001000
cb14 : 00                    	db %000000
cb15 : 08                    	db %001000
cb16 : 00                    	db %000000
                             ; char 34
cb17 : 36                    	db %110110
cb18 : 36                    	db %110110
cb19 : 12                    	db %010010
cb1a : 00                    	db %000000
cb1b : 00                    	db %000000
cb1c : 00                    	db %000000
cb1d : 00                    	db %000000
cb1e : 00                    	db %000000
                             ; char 35
cb1f : 14                    	db %010100
cb20 : 14                    	db %010100
cb21 : 3e                    	db %111110
cb22 : 14                    	db %010100
cb23 : 3e                    	db %111110
cb24 : 14                    	db %010100
cb25 : 14                    	db %010100
cb26 : 00                    	db %000000
                             ; char 36
cb27 : 08                    	db %001000
cb28 : 1e                    	db %011110
cb29 : 28                    	db %101000
cb2a : 1c                    	db %011100
cb2b : 0a                    	db %001010
cb2c : 3c                    	db %111100
cb2d : 08                    	db %001000
cb2e : 00                    	db %000000
                             ; char 37
cb2f : 30                    	db %110000
cb30 : 32                    	db %110010
cb31 : 04                    	db %000100
cb32 : 08                    	db %001000
cb33 : 10                    	db %010000
AS65 Assembler for R6502 [1.42].                                     Page   93
-------------------------------- bank\bank0.s --------------------------------

cb34 : 26                    	db %100110
cb35 : 06                    	db %000110
cb36 : 00                    	db %000000
                             ; char 38
cb37 : 10                    	db %010000
cb38 : 28                    	db %101000
cb39 : 28                    	db %101000
cb3a : 10                    	db %010000
cb3b : 2a                    	db %101010
cb3c : 24                    	db %100100
cb3d : 1a                    	db %011010
cb3e : 00                    	db %000000
                             ; char 39
cb3f : 0c                    	db %001100
cb40 : 0c                    	db %001100
cb41 : 04                    	db %000100
cb42 : 00                    	db %000000
cb43 : 00                    	db %000000
cb44 : 00                    	db %000000
cb45 : 00                    	db %000000
cb46 : 00                    	db %000000
                             ; char 40
cb47 : 04                    	db %000100
cb48 : 08                    	db %001000
cb49 : 10                    	db %010000
cb4a : 10                    	db %010000
cb4b : 10                    	db %010000
cb4c : 08                    	db %001000
cb4d : 04                    	db %000100
cb4e : 00                    	db %000000
                             ; char 41
cb4f : 10                    	db %010000
cb50 : 08                    	db %001000
cb51 : 04                    	db %000100
cb52 : 04                    	db %000100
cb53 : 04                    	db %000100
cb54 : 08                    	db %001000
cb55 : 10                    	db %010000
cb56 : 00                    	db %000000
                             ; char 42
cb57 : 08                    	db %001000
cb58 : 2a                    	db %101010
cb59 : 1c                    	db %011100
cb5a : 08                    	db %001000
cb5b : 1c                    	db %011100
cb5c : 2a                    	db %101010
cb5d : 08                    	db %001000
cb5e : 00                    	db %000000
                             ; char 43
cb5f : 00                    	db %000000
cb60 : 08                    	db %001000
cb61 : 08                    	db %001000
cb62 : 3e                    	db %111110
cb63 : 08                    	db %001000
cb64 : 08                    	db %001000
cb65 : 00                    	db %000000
cb66 : 00                    	db %000000
                             ; char 44
cb67 : 00                    	db %000000
cb68 : 00                    	db %000000
cb69 : 00                    	db %000000
cb6a : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   94
-------------------------------- bank\bank0.s --------------------------------

cb6b : 00                    	db %000000
cb6c : 08                    	db %001000
cb6d : 08                    	db %001000
cb6e : 10                    	db %010000
                             ; char 45
cb6f : 00                    	db %000000
cb70 : 00                    	db %000000
cb71 : 00                    	db %000000
cb72 : 3e                    	db %111110
cb73 : 00                    	db %000000
cb74 : 00                    	db %000000
cb75 : 00                    	db %000000
cb76 : 00                    	db %000000
                             ; char 46
cb77 : 00                    	db %000000
cb78 : 00                    	db %000000
cb79 : 00                    	db %000000
cb7a : 00                    	db %000000
cb7b : 00                    	db %000000
cb7c : 04                    	db %000100
cb7d : 00                    	db %000000
cb7e : 00                    	db %000000
                             ; char 47
cb7f : 00                    	db %000000
cb80 : 02                    	db %000010
cb81 : 04                    	db %000100
cb82 : 08                    	db %001000
cb83 : 10                    	db %010000
cb84 : 20                    	db %100000
cb85 : 00                    	db %000000
cb86 : 00                    	db %000000
                             ; char 48
cb87 : 1c                    	db %011100
cb88 : 22                    	db %100010
cb89 : 26                    	db %100110
cb8a : 2a                    	db %101010
cb8b : 32                    	db %110010
cb8c : 22                    	db %100010
cb8d : 1c                    	db %011100
cb8e : 00                    	db %000000
                             ; char 49
cb8f : 08                    	db %001000
cb90 : 18                    	db %011000
cb91 : 08                    	db %001000
cb92 : 08                    	db %001000
cb93 : 08                    	db %001000
cb94 : 08                    	db %001000
cb95 : 1c                    	db %011100
cb96 : 00                    	db %000000
                             ; char 50
cb97 : 1c                    	db %011100
cb98 : 22                    	db %100010
cb99 : 02                    	db %000010
cb9a : 04                    	db %000100
cb9b : 08                    	db %001000
cb9c : 10                    	db %010000
cb9d : 3e                    	db %111110
cb9e : 00                    	db %000000
                             ; char 51
cb9f : 3e                    	db %111110
cba0 : 02                    	db %000010
cba1 : 04                    	db %000100
AS65 Assembler for R6502 [1.42].                                     Page   95
-------------------------------- bank\bank0.s --------------------------------

cba2 : 0c                    	db %001100
cba3 : 02                    	db %000010
cba4 : 22                    	db %100010
cba5 : 1c                    	db %011100
cba6 : 00                    	db %000000
                             ; char 52
cba7 : 04                    	db %000100
cba8 : 0c                    	db %001100
cba9 : 14                    	db %010100
cbaa : 24                    	db %100100
cbab : 3e                    	db %111110
cbac : 04                    	db %000100
cbad : 04                    	db %000100
cbae : 00                    	db %000000
                             ; char 53
cbaf : 3e                    	db %111110
cbb0 : 20                    	db %100000
cbb1 : 3c                    	db %111100
cbb2 : 02                    	db %000010
cbb3 : 02                    	db %000010
cbb4 : 22                    	db %100010
cbb5 : 1c                    	db %011100
cbb6 : 00                    	db %000000
                             ; char 54
cbb7 : 0c                    	db %001100
cbb8 : 10                    	db %010000
cbb9 : 20                    	db %100000
cbba : 3c                    	db %111100
cbbb : 22                    	db %100010
cbbc : 22                    	db %100010
cbbd : 1c                    	db %011100
cbbe : 00                    	db %000000
                             ; char 55
cbbf : 3e                    	db %111110
cbc0 : 02                    	db %000010
cbc1 : 04                    	db %000100
cbc2 : 08                    	db %001000
cbc3 : 10                    	db %010000
cbc4 : 10                    	db %010000
cbc5 : 10                    	db %010000
cbc6 : 00                    	db %000000
                             ; char 56
cbc7 : 1c                    	db %011100
cbc8 : 22                    	db %100010
cbc9 : 22                    	db %100010
cbca : 1c                    	db %011100
cbcb : 22                    	db %100010
cbcc : 22                    	db %100010
cbcd : 1c                    	db %011100
cbce : 00                    	db %000000
                             ; char 57
cbcf : 1c                    	db %011100
cbd0 : 22                    	db %100010
cbd1 : 22                    	db %100010
cbd2 : 1e                    	db %011110
cbd3 : 02                    	db %000010
cbd4 : 04                    	db %000100
cbd5 : 18                    	db %011000
cbd6 : 00                    	db %000000
                             ; char 58
cbd7 : 00                    	db %000000
cbd8 : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   96
-------------------------------- bank\bank0.s --------------------------------

cbd9 : 08                    	db %001000
cbda : 00                    	db %000000
cbdb : 00                    	db %000000
cbdc : 08                    	db %001000
cbdd : 00                    	db %000000
cbde : 00                    	db %000000
                             ; char 59
cbdf : 00                    	db %000000
cbe0 : 00                    	db %000000
cbe1 : 08                    	db %001000
cbe2 : 00                    	db %000000
cbe3 : 00                    	db %000000
cbe4 : 08                    	db %001000
cbe5 : 08                    	db %001000
cbe6 : 10                    	db %010000
                             ; char 60
cbe7 : 04                    	db %000100
cbe8 : 08                    	db %001000
cbe9 : 10                    	db %010000
cbea : 20                    	db %100000
cbeb : 10                    	db %010000
cbec : 08                    	db %001000
cbed : 04                    	db %000100
cbee : 00                    	db %000000
                             ; char 61
cbef : 00                    	db %000000
cbf0 : 00                    	db %000000
cbf1 : 3e                    	db %111110
cbf2 : 00                    	db %000000
cbf3 : 3e                    	db %111110
cbf4 : 00                    	db %000000
cbf5 : 00                    	db %000000
cbf6 : 00                    	db %000000
                             ; char 62
cbf7 : 10                    	db %010000
cbf8 : 08                    	db %001000
cbf9 : 04                    	db %000100
cbfa : 02                    	db %000010
cbfb : 04                    	db %000100
cbfc : 08                    	db %001000
cbfd : 10                    	db %010000
cbfe : 00                    	db %000000
                             ; char 63
cbff : 1c                    	db %011100
cc00 : 22                    	db %100010
cc01 : 04                    	db %000100
cc02 : 08                    	db %001000
cc03 : 08                    	db %001000
cc04 : 00                    	db %000000
cc05 : 08                    	db %001000
cc06 : 00                    	db %000000
                             ; char 64
cc07 : 1c                    	db %011100
cc08 : 22                    	db %100010
cc09 : 2a                    	db %101010
cc0a : 2e                    	db %101110
cc0b : 2c                    	db %101100
cc0c : 20                    	db %100000
cc0d : 1e                    	db %011110
cc0e : 00                    	db %000000
cc0f :                       vdp_font_a
                             ; char 65
AS65 Assembler for R6502 [1.42].                                     Page   97
-------------------------------- bank\bank0.s --------------------------------

cc0f : 1c                    	db %011100
cc10 : 22                    	db %100010
cc11 : 22                    	db %100010
cc12 : 3e                    	db %111110
cc13 : 22                    	db %100010
cc14 : 22                    	db %100010
cc15 : 22                    	db %100010
cc16 : 00                    	db %000000
                             ; char 66
cc17 : 3c                    	db %111100
cc18 : 22                    	db %100010
cc19 : 22                    	db %100010
cc1a : 3c                    	db %111100
cc1b : 22                    	db %100010
cc1c : 22                    	db %100010
cc1d : 3c                    	db %111100
cc1e : 00                    	db %000000
                             ; char 67
cc1f : 1c                    	db %011100
cc20 : 22                    	db %100010
cc21 : 20                    	db %100000
cc22 : 20                    	db %100000
cc23 : 20                    	db %100000
cc24 : 22                    	db %100010
cc25 : 1c                    	db %011100
cc26 : 00                    	db %000000
                             ; char 68
cc27 : 3c                    	db %111100
cc28 : 22                    	db %100010
cc29 : 22                    	db %100010
cc2a : 22                    	db %100010
cc2b : 22                    	db %100010
cc2c : 22                    	db %100010
cc2d : 3c                    	db %111100
cc2e : 00                    	db %000000
                             ; char 69
cc2f : 3e                    	db %111110
cc30 : 20                    	db %100000
cc31 : 20                    	db %100000
cc32 : 3c                    	db %111100
cc33 : 20                    	db %100000
cc34 : 20                    	db %100000
cc35 : 3e                    	db %111110
cc36 : 00                    	db %000000
                             ; char 70
cc37 : 3e                    	db %111110
cc38 : 20                    	db %100000
cc39 : 20                    	db %100000
cc3a : 3c                    	db %111100
cc3b : 20                    	db %100000
cc3c : 20                    	db %100000
cc3d : 20                    	db %100000
cc3e : 00                    	db %000000
                             ; char 71
cc3f : 1e                    	db %011110
cc40 : 20                    	db %100000
cc41 : 20                    	db %100000
cc42 : 20                    	db %100000
cc43 : 26                    	db %100110
cc44 : 22                    	db %100010
cc45 : 1e                    	db %011110
cc46 : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   98
-------------------------------- bank\bank0.s --------------------------------

                             ; char 72
cc47 : 22                    	db %100010
cc48 : 22                    	db %100010
cc49 : 22                    	db %100010
cc4a : 3e                    	db %111110
cc4b : 22                    	db %100010
cc4c : 22                    	db %100010
cc4d : 22                    	db %100010
cc4e : 00                    	db %000000
                             ; char 73
cc4f : 1c                    	db %011100
cc50 : 08                    	db %001000
cc51 : 08                    	db %001000
cc52 : 08                    	db %001000
cc53 : 08                    	db %001000
cc54 : 08                    	db %001000
cc55 : 1c                    	db %011100
cc56 : 00                    	db %000000
                             ; char 74
cc57 : 02                    	db %000010
cc58 : 02                    	db %000010
cc59 : 02                    	db %000010
cc5a : 02                    	db %000010
cc5b : 02                    	db %000010
cc5c : 22                    	db %100010
cc5d : 1c                    	db %011100
cc5e : 00                    	db %000000
                             ; char 75
cc5f : 22                    	db %100010
cc60 : 24                    	db %100100
cc61 : 28                    	db %101000
cc62 : 30                    	db %110000
cc63 : 28                    	db %101000
cc64 : 24                    	db %100100
cc65 : 22                    	db %100010
cc66 : 00                    	db %000000
                             ; char 76
cc67 : 20                    	db %100000
cc68 : 20                    	db %100000
cc69 : 20                    	db %100000
cc6a : 20                    	db %100000
cc6b : 20                    	db %100000
cc6c : 20                    	db %100000
cc6d : 3e                    	db %111110
cc6e : 00                    	db %000000
                             ; char 77
cc6f : 22                    	db %100010
cc70 : 36                    	db %110110
cc71 : 2a                    	db %101010
cc72 : 2a                    	db %101010
cc73 : 22                    	db %100010
cc74 : 22                    	db %100010
cc75 : 22                    	db %100010
cc76 : 00                    	db %000000
                             ; char 78
cc77 : 22                    	db %100010
cc78 : 22                    	db %100010
cc79 : 32                    	db %110010
cc7a : 2a                    	db %101010
cc7b : 26                    	db %100110
cc7c : 22                    	db %100010
cc7d : 22                    	db %100010
AS65 Assembler for R6502 [1.42].                                     Page   99
-------------------------------- bank\bank0.s --------------------------------

cc7e : 00                    	db %000000
                             ; char 79
cc7f : 1c                    	db %011100
cc80 : 22                    	db %100010
cc81 : 22                    	db %100010
cc82 : 22                    	db %100010
cc83 : 22                    	db %100010
cc84 : 22                    	db %100010
cc85 : 1c                    	db %011100
cc86 : 00                    	db %000000
                             ; char 80
cc87 : 3c                    	db %111100
cc88 : 22                    	db %100010
cc89 : 22                    	db %100010
cc8a : 3c                    	db %111100
cc8b : 20                    	db %100000
cc8c : 20                    	db %100000
cc8d : 20                    	db %100000
cc8e : 00                    	db %000000
                             ; char 81
cc8f : 1c                    	db %011100
cc90 : 22                    	db %100010
cc91 : 22                    	db %100010
cc92 : 22                    	db %100010
cc93 : 2a                    	db %101010
cc94 : 24                    	db %100100
cc95 : 1a                    	db %011010
cc96 : 00                    	db %000000
                             ; char 82
cc97 : 3c                    	db %111100
cc98 : 22                    	db %100010
cc99 : 22                    	db %100010
cc9a : 3c                    	db %111100
cc9b : 28                    	db %101000
cc9c : 24                    	db %100100
cc9d : 22                    	db %100010
cc9e : 00                    	db %000000
                             ; char 83
cc9f : 1c                    	db %011100
cca0 : 22                    	db %100010
cca1 : 20                    	db %100000
cca2 : 1c                    	db %011100
cca3 : 02                    	db %000010
cca4 : 22                    	db %100010
cca5 : 1c                    	db %011100
cca6 : 00                    	db %000000
                             ; char 84
cca7 : 3e                    	db %111110
cca8 : 08                    	db %001000
cca9 : 08                    	db %001000
ccaa : 08                    	db %001000
ccab : 08                    	db %001000
ccac : 08                    	db %001000
ccad : 08                    	db %001000
ccae : 00                    	db %000000
                             ; char 85
ccaf : 22                    	db %100010
ccb0 : 22                    	db %100010
ccb1 : 22                    	db %100010
ccb2 : 22                    	db %100010
ccb3 : 22                    	db %100010
ccb4 : 22                    	db %100010
AS65 Assembler for R6502 [1.42].                                     Page  100
-------------------------------- bank\bank0.s --------------------------------

ccb5 : 1c                    	db %011100
ccb6 : 00                    	db %000000
                             ; char 86
ccb7 : 22                    	db %100010
ccb8 : 22                    	db %100010
ccb9 : 22                    	db %100010
ccba : 22                    	db %100010
ccbb : 22                    	db %100010
ccbc : 14                    	db %010100
ccbd : 08                    	db %001000
ccbe : 00                    	db %000000
                             ; char 87
ccbf : 22                    	db %100010
ccc0 : 22                    	db %100010
ccc1 : 22                    	db %100010
ccc2 : 2a                    	db %101010
ccc3 : 2a                    	db %101010
ccc4 : 36                    	db %110110
ccc5 : 22                    	db %100010
ccc6 : 00                    	db %000000
                             ; char 88
ccc7 : 22                    	db %100010
ccc8 : 22                    	db %100010
ccc9 : 14                    	db %010100
ccca : 08                    	db %001000
cccb : 14                    	db %010100
cccc : 22                    	db %100010
cccd : 22                    	db %100010
ccce : 00                    	db %000000
                             ; char 89
cccf : 22                    	db %100010
ccd0 : 22                    	db %100010
ccd1 : 14                    	db %010100
ccd2 : 08                    	db %001000
ccd3 : 08                    	db %001000
ccd4 : 08                    	db %001000
ccd5 : 08                    	db %001000
ccd6 : 00                    	db %000000
                             ; char 90
ccd7 : 3e                    	db %111110
ccd8 : 02                    	db %000010
ccd9 : 04                    	db %000100
ccda : 08                    	db %001000
ccdb : 10                    	db %010000
ccdc : 20                    	db %100000
ccdd : 3e                    	db %111110
ccde : 00                    	db %000000
                             ; char 91
ccdf : 1c                    	db %011100
cce0 : 10                    	db %010000
cce1 : 10                    	db %010000
cce2 : 10                    	db %010000
cce3 : 10                    	db %010000
cce4 : 10                    	db %010000
cce5 : 1c                    	db %011100
cce6 : 00                    	db %000000
                             ; char 92
cce7 : 00                    	db %000000
cce8 : 20                    	db %100000
cce9 : 10                    	db %010000
ccea : 08                    	db %001000
cceb : 04                    	db %000100
AS65 Assembler for R6502 [1.42].                                     Page  101
-------------------------------- bank\bank0.s --------------------------------

ccec : 02                    	db %000010
cced : 00                    	db %000000
ccee : 00                    	db %000000
                             ; char 93
ccef : 1c                    	db %011100
ccf0 : 04                    	db %000100
ccf1 : 04                    	db %000100
ccf2 : 04                    	db %000100
ccf3 : 04                    	db %000100
ccf4 : 04                    	db %000100
ccf5 : 1c                    	db %011100
ccf6 : 00                    	db %000000
                             ; char 94
ccf7 : 08                    	db %001000
ccf8 : 1c                    	db %011100
ccf9 : 3e                    	db %111110
ccfa : 08                    	db %001000
ccfb : 08                    	db %001000
ccfc : 08                    	db %001000
ccfd : 08                    	db %001000
ccfe : 00                    	db %000000
                             ; char 95
ccff : 00                    	db %000000
cd00 : 00                    	db %000000
cd01 : 00                    	db %000000
cd02 : 00                    	db %000000
cd03 : 00                    	db %000000
cd04 : 00                    	db %000000
cd05 : 3e                    	db %111110
cd06 : 00                    	db %000000
                             ; char 96
cd07 : 0e                    	db %001110
cd08 : 10                    	db %010000
cd09 : 10                    	db %010000
cd0a : 3c                    	db %111100
cd0b : 10                    	db %010000
cd0c : 10                    	db %010000
cd0d : 3e                    	db %111110
cd0e : 00                    	db %000000
                             ; char 97
cd0f : 00                    	db %000000
cd10 : 00                    	db %000000
cd11 : 1c                    	db %011100
cd12 : 02                    	db %000010
cd13 : 1e                    	db %011110
cd14 : 22                    	db %100010
cd15 : 1e                    	db %011110
cd16 : 00                    	db %000000
                             ; char 98
cd17 : 20                    	db %100000
cd18 : 20                    	db %100000
cd19 : 3c                    	db %111100
cd1a : 22                    	db %100010
cd1b : 22                    	db %100010
cd1c : 22                    	db %100010
cd1d : 3c                    	db %111100
cd1e : 00                    	db %000000
                             ; char 99
cd1f : 00                    	db %000000
cd20 : 00                    	db %000000
cd21 : 1e                    	db %011110
cd22 : 20                    	db %100000
AS65 Assembler for R6502 [1.42].                                     Page  102
-------------------------------- bank\bank0.s --------------------------------

cd23 : 20                    	db %100000
cd24 : 20                    	db %100000
cd25 : 1e                    	db %011110
cd26 : 00                    	db %000000
                             ; char 100
cd27 : 02                    	db %000010
cd28 : 02                    	db %000010
cd29 : 1e                    	db %011110
cd2a : 22                    	db %100010
cd2b : 22                    	db %100010
cd2c : 22                    	db %100010
cd2d : 1e                    	db %011110
cd2e : 00                    	db %000000
                             ; char 101
cd2f : 00                    	db %000000
cd30 : 00                    	db %000000
cd31 : 1c                    	db %011100
cd32 : 22                    	db %100010
cd33 : 3e                    	db %111110
cd34 : 20                    	db %100000
cd35 : 1e                    	db %011110
cd36 : 00                    	db %000000
                             ; char 102
cd37 : 0c                    	db %001100
cd38 : 12                    	db %010010
cd39 : 10                    	db %010000
cd3a : 3c                    	db %111100
cd3b : 10                    	db %010000
cd3c : 10                    	db %010000
cd3d : 10                    	db %010000
cd3e : 00                    	db %000000
                             ; char 103
cd3f : 00                    	db %000000
cd40 : 00                    	db %000000
cd41 : 1c                    	db %011100
cd42 : 22                    	db %100010
cd43 : 22                    	db %100010
cd44 : 1e                    	db %011110
cd45 : 02                    	db %000010
cd46 : 1c                    	db %011100
                             ; char 104
cd47 : 20                    	db %100000
cd48 : 20                    	db %100000
cd49 : 3c                    	db %111100
cd4a : 22                    	db %100010
cd4b : 22                    	db %100010
cd4c : 22                    	db %100010
cd4d : 22                    	db %100010
cd4e : 00                    	db %000000
                             ; char 105
cd4f : 08                    	db %001000
cd50 : 00                    	db %000000
cd51 : 18                    	db %011000
cd52 : 08                    	db %001000
cd53 : 08                    	db %001000
cd54 : 08                    	db %001000
cd55 : 1c                    	db %011100
cd56 : 00                    	db %000000
                             ; char 106
cd57 : 04                    	db %000100
cd58 : 00                    	db %000000
cd59 : 0c                    	db %001100
AS65 Assembler for R6502 [1.42].                                     Page  103
-------------------------------- bank\bank0.s --------------------------------

cd5a : 04                    	db %000100
cd5b : 04                    	db %000100
cd5c : 04                    	db %000100
cd5d : 24                    	db %100100
cd5e : 18                    	db %011000
                             ; char 107
cd5f : 20                    	db %100000
cd60 : 20                    	db %100000
cd61 : 22                    	db %100010
cd62 : 24                    	db %100100
cd63 : 38                    	db %111000
cd64 : 24                    	db %100100
cd65 : 22                    	db %100010
cd66 : 00                    	db %000000
                             ; char 108
cd67 : 18                    	db %011000
cd68 : 08                    	db %001000
cd69 : 08                    	db %001000
cd6a : 08                    	db %001000
cd6b : 08                    	db %001000
cd6c : 08                    	db %001000
cd6d : 1c                    	db %011100
cd6e : 00                    	db %000000
                             ; char 109
cd6f : 00                    	db %000000
cd70 : 00                    	db %000000
cd71 : 36                    	db %110110
cd72 : 2a                    	db %101010
cd73 : 2a                    	db %101010
cd74 : 2a                    	db %101010
cd75 : 22                    	db %100010
cd76 : 00                    	db %000000
                             ; char 110
cd77 : 00                    	db %000000
cd78 : 00                    	db %000000
cd79 : 3c                    	db %111100
cd7a : 22                    	db %100010
cd7b : 22                    	db %100010
cd7c : 22                    	db %100010
cd7d : 22                    	db %100010
cd7e : 00                    	db %000000
                             ; char 111
cd7f : 00                    	db %000000
cd80 : 00                    	db %000000
cd81 : 1c                    	db %011100
cd82 : 22                    	db %100010
cd83 : 22                    	db %100010
cd84 : 22                    	db %100010
cd85 : 1c                    	db %011100
cd86 : 00                    	db %000000
                             ; char 112
cd87 : 00                    	db %000000
cd88 : 00                    	db %000000
cd89 : 3c                    	db %111100
cd8a : 22                    	db %100010
cd8b : 22                    	db %100010
cd8c : 3c                    	db %111100
cd8d : 20                    	db %100000
cd8e : 20                    	db %100000
                             ; char 113
cd8f : 00                    	db %000000
cd90 : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page  104
-------------------------------- bank\bank0.s --------------------------------

cd91 : 1e                    	db %011110
cd92 : 22                    	db %100010
cd93 : 22                    	db %100010
cd94 : 1e                    	db %011110
cd95 : 02                    	db %000010
cd96 : 02                    	db %000010
                             ; char 114
cd97 : 00                    	db %000000
cd98 : 00                    	db %000000
cd99 : 2e                    	db %101110
cd9a : 30                    	db %110000
cd9b : 20                    	db %100000
cd9c : 20                    	db %100000
cd9d : 20                    	db %100000
cd9e : 00                    	db %000000
                             ; char 115
cd9f : 00                    	db %000000
cda0 : 00                    	db %000000
cda1 : 1e                    	db %011110
cda2 : 20                    	db %100000
cda3 : 1c                    	db %011100
cda4 : 02                    	db %000010
cda5 : 3c                    	db %111100
cda6 : 00                    	db %000000
                             ; char 116
cda7 : 10                    	db %010000
cda8 : 10                    	db %010000
cda9 : 3c                    	db %111100
cdaa : 10                    	db %010000
cdab : 10                    	db %010000
cdac : 12                    	db %010010
cdad : 0c                    	db %001100
cdae : 00                    	db %000000
                             ; char 117
cdaf : 00                    	db %000000
cdb0 : 00                    	db %000000
cdb1 : 22                    	db %100010
cdb2 : 22                    	db %100010
cdb3 : 22                    	db %100010
cdb4 : 26                    	db %100110
cdb5 : 1a                    	db %011010
cdb6 : 00                    	db %000000
                             ; char 118
cdb7 : 00                    	db %000000
cdb8 : 00                    	db %000000
cdb9 : 22                    	db %100010
cdba : 22                    	db %100010
cdbb : 22                    	db %100010
cdbc : 14                    	db %010100
cdbd : 08                    	db %001000
cdbe : 00                    	db %000000
                             ; char 119
cdbf : 00                    	db %000000
cdc0 : 00                    	db %000000
cdc1 : 22                    	db %100010
cdc2 : 22                    	db %100010
cdc3 : 2a                    	db %101010
cdc4 : 2a                    	db %101010
cdc5 : 36                    	db %110110
cdc6 : 00                    	db %000000
                             ; char 120
cdc7 : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page  105
-------------------------------- bank\bank0.s --------------------------------

cdc8 : 00                    	db %000000
cdc9 : 22                    	db %100010
cdca : 14                    	db %010100
cdcb : 08                    	db %001000
cdcc : 14                    	db %010100
cdcd : 22                    	db %100010
cdce : 00                    	db %000000
                             ; char 121
cdcf : 00                    	db %000000
cdd0 : 00                    	db %000000
cdd1 : 22                    	db %100010
cdd2 : 22                    	db %100010
cdd3 : 22                    	db %100010
cdd4 : 1e                    	db %011110
cdd5 : 02                    	db %000010
cdd6 : 1c                    	db %011100
                             ; char 122
cdd7 : 00                    	db %000000
cdd8 : 00                    	db %000000
cdd9 : 3e                    	db %111110
cdda : 04                    	db %000100
cddb : 08                    	db %001000
cddc : 10                    	db %010000
cddd : 3e                    	db %111110
cdde : 00                    	db %000000
                             ; char 123
cddf : 0e                    	db %001110
cde0 : 18                    	db %011000
cde1 : 18                    	db %011000
cde2 : 30                    	db %110000
cde3 : 18                    	db %011000
cde4 : 18                    	db %011000
cde5 : 0e                    	db %001110
cde6 : 00                    	db %000000
                             ; char 124
cde7 : 08                    	db %001000
cde8 : 08                    	db %001000
cde9 : 08                    	db %001000
cdea : 08                    	db %001000
cdeb : 08                    	db %001000
cdec : 08                    	db %001000
cded : 08                    	db %001000
cdee : 00                    	db %000000
                             ; char 125
cdef : 38                    	db %111000
cdf0 : 0c                    	db %001100
cdf1 : 0c                    	db %001100
cdf2 : 06                    	db %000110
cdf3 : 0c                    	db %001100
cdf4 : 0c                    	db %001100
cdf5 : 38                    	db %111000
cdf6 : 00                    	db %000000
                             ; char 126
cdf7 : 00                    	db %000000
cdf8 : 00                    	db %000000
cdf9 : 10                    	db %010000
cdfa : 2a                    	db %101010
cdfb : 04                    	db %000100
cdfc : 00                    	db %000000
cdfd : 00                    	db %000000
cdfe : 00                    	db %000000
                             ; char 127
AS65 Assembler for R6502 [1.42].                                     Page  106
-------------------------------- bank\bank0.s --------------------------------

cdff : 2a                    	db %101010
ce00 : 15                    	db %010101
ce01 : 2a                    	db %101010
ce02 : 15                    	db %010101
ce03 : 2a                    	db %101010
ce04 : 15                    	db %010101
ce05 : 2a                    	db %101010
ce06 : 15                    	db %010101
                             	
                             	
                             
                             ;****************************************
                             ;* vdp_init_font
                             ;* Initialise fonts from ROM
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
ce07 :                       gr_init_font
                             	; Get char base from vdp structure
ce07 : a614             [ 3] 	ldx gr_scrngeom+gr_char
ce09 : 8634             [ 3] 	stx tmp_blo
ce0b : a615             [ 3] 	ldx gr_scrngeom+gr_char+1
ce0d : e8               [ 2] 	inx						; ASCII patterns start 1 page later
ce0e : 8635             [ 3] 	stx tmp_bhi
                             
ce10 : a907             [ 2] 	lda #lo(vdp_font)		; Low byte of fonts source
ce12 : 8536             [ 3] 	sta tmp_clo
ce14 : a9cb             [ 2] 	lda #hi(vdp_font)		; High byte of fonts source
ce16 : 8537             [ 3] 	sta tmp_chi
ce18 : a203             [ 2] 	ldx #3					; Copy 3 pages
ce1a : 4c1dce           [ 3] 	jmp gr_copy_mem
                             
                             
                             ;****************************************
                             ;* vdp_copy_mem
                             ;* Copy memory pages at a time
                             ;* Input :	clo/hi	=	source
                             ;*			blo/hi	=	dest
                             ;*			X		=	pages to copy
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
ce1d :                       gr_copy_mem
ce1d : a000             [ 2] 	ldy #0					; byte within page
ce1f : a536             [ 3] 	lda tmp_clo				; Low byte of source
ce21 : 8532             [ 3] 	sta tmp_alo
ce23 : a537             [ 3] 	lda tmp_chi				; High byte of source
ce25 : 8533             [ 3] 	sta tmp_ahi
ce27 :                       gr_copy_byte
ce27 : 98               [ 2] 	tya
ce28 : b132             [ 5] 	lda (tmp_alo),y			; Get byte from font table
ce2a : 9134             [ 5] 	sta (tmp_blo),y			; Put it to the memory
ce2c : c8               [ 2] 	iny
ce2d : d0f8             [ 3] 	bne gr_copy_byte		; keep going for 1 page
ce2f : e633             [ 5] 	inc tmp_ahi				; only need to increment high byt
ce31 : e635             [ 5] 	inc tmp_bhi				; source and destination ptr
ce33 : ca               [ 2] 	dex						; page counter
ce34 : d0f1             [ 3] 	bne gr_copy_byte		; keep going for X pages
ce36 : 60               [ 6] 	rts
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  107
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* gr_init
                             ;* First initialisation of screen
                             ;****************************************
ce37 :                       gr_init
ce37 : a210             [ 2] 	ldx #VDP_FLASH			; Default cursor flash rate
ce39 : 860b             [ 3] 	stx vdp_curtim
ce3b : 860c             [ 3] 	stx vdp_curcnt
ce3d : a200             [ 2] 	ldx #0
ce3f : 860e             [ 3] 	stx vdp_curstat
                             
                             	; Hard reset initial geom values (X=0)
ce41 : 2068ce           [ 6] 	jsr gr_init_geom
                             
                             	; Copy font from ROM to char base
ce44 : 2007ce           [ 6] 	jsr gr_init_font
                             
                             	; Go in to hires mode to generate tables
ce47 : 20bece           [ 6] 	jsr gr_init_hires
ce4a : 20f7ce           [ 6] 	jsr gr_init_hires_tables
                             
                             	; But start in text mode
ce4d : 4ca5ce           [ 3] 	jmp gr_init_screen_txt
                             
                             
                             ;****************************************
                             ;* gr_check_font_copy
                             ;* check font needs to be copied from
                             ;* current location to another
                             ;* A=high byte of page aligned font addr
                             ;* that the font needs to be at
                             ;****************************************
ce50 :                       gr_check_font_copy
                             	; Compare with current high byte
ce50 : c515             [ 3] 	cmp gr_scrngeom+gr_char+1
ce52 : f013             [ 3] 	beq gr_check_font_copy_done
                             	; save A as high byte of destination
ce54 : 8535             [ 3] 	sta tmp_blo+1
                             	; destination low is 0
ce56 : a900             [ 2] 	lda #0
ce58 : 8534             [ 3] 	sta tmp_blo
                             
                             	; Get source from current vdp structure
ce5a : a515             [ 3] 	lda gr_scrngeom+gr_char+1
ce5c : 8537             [ 3] 	sta tmp_clo+1
ce5e : a514             [ 3] 	lda gr_scrngeom+gr_char
ce60 : 8536             [ 3] 	sta tmp_clo
                             
                             	; Copy all 8 pages of font (std + alt) data
ce62 : a208             [ 2] 	ldx #8
ce64 : 201dce           [ 6] 	jsr gr_copy_mem
ce67 :                       gr_check_font_copy_done
ce67 :                       gr_init_geom_done
ce67 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_init_geom
                             ;* initialise geometry entries from X
                             ;* position from base until -1
                             ;****************************************
ce68 :                       gr_init_geom
AS65 Assembler for R6502 [1.42].                                     Page  108
-------------------------------- bank\bank0.s --------------------------------

                             	; Which geom entry to init = Y
ce68 : bc77ce           [ 4] 	ldy gr_scrngeom_base,x
ce6b : 30fa             [ 3] 	bmi gr_init_geom_done		; Just somewhere with an 
                             	; skip to data and put in A
ce6d : e8               [ 2] 	inx
ce6e : bd77ce           [ 4] 	lda gr_scrngeom_base,x
                             	; save it in Y
ce71 : 991100           [ 5] 	sta gr_scrngeom,y
                             	; next entry
ce74 : e8               [ 2] 	inx
ce75 : d0f1             [ 3] 	bne gr_init_geom	; Always
                             	; Hope we don't get here - will crash!
                             
                             ; Geometry initialisation tables
ce77 :                       gr_scrngeom_base
ce77 : 1200                  	db gr_ink, 0
ce79 : 1316                  	db gr_paper, 16+6
ce7b : 1402                  	db gr_margin, 2
                             	; Not terminated by -1 : continues in to _txt va
                             ;* Geometry for text/lores
ce7d :                       gr_scrngeom_text
ce7d : 0000                  	db gr_mode, 0
                             
ce7f : 0300                  	db gr_char,   lo(TEXTCHAR)
ce81 : 04b4                  	db gr_char+1, hi(TEXTCHAR)
                             
ce83 : 0580                  	db gr_text_start,   lo(TEXTSCRN)
ce85 : 06bb                  	db gr_text_start+1, hi(TEXTSCRN)
                             
ce87 : 0828                  	db gr_text_w, 40
ce89 : 091c                  	db gr_text_h, 28
ce8b : ff                    	db -1
                             ;* Geometry for hires
ce8c :                       gr_scrngeom_hires
ce8c : 0001                  	db gr_mode, 1
                             
ce8e : 0100                  	db gr_hi_start,   lo(HISCRN)
ce90 : 02a0                  	db gr_hi_start+1, hi(HISCRN)
ce92 : 0300                  	db gr_char,   lo(HICHAR)
ce94 : 0498                  	db gr_char+1, hi(HICHAR)
                             
ce96 : 0568                  	db gr_text_start,   lo(HITEXT)
ce98 : 06bf                  	db gr_text_start+1, hi(HITEXT)
                             
ce9a : 1000                  	db gr_hires_x, 0
ce9c : 1100                  	db gr_hires_y, 0
                             
                             	; Only need to initialise text height, width is 
ce9e : 0903                  	db gr_text_h, 3
                             
cea0 : 0e01                  	db gr_pixmode, 1
cea2 : 0f06                  	db gr_pitch, 6
cea4 : ff                    	db -1
                             
                             
                             
                             ;****************************************
                             ;* gr_init_screen_txt
                             ;* initialise the screen in text mode
                             ;****************************************
cea5 :                       gr_init_screen_txt
cea5 : e60d             [ 5] 	inc vdp_curoff
AS65 Assembler for R6502 [1.42].                                     Page  109
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; Check if font copy needed to 0xb400
cea7 : a9b4             [ 2] 	lda #hi(TEXTCHAR)
cea9 : 2050ce           [ 6] 	jsr gr_check_font_copy
                             
                             	; Initialise geom for text
ceac : a206             [ 2] 	ldx #gr_scrngeom_text-gr_scrngeom_base
ceae : 2068ce           [ 6] 	jsr gr_init_geom
                             
ceb1 : 200ed4           [ 6] 	jsr gr_spr_init					; SW Sprites are reset
                             
ceb4 : a920             [ 2] 	lda #' '						; Blank is SPACE
ceb6 : 8510             [ 3] 	sta vdp_blank
ceb8 : 203bcf           [ 6] 	jsr gr_cls
                             
cebb : c60d             [ 5] 	dec vdp_curoff
                             
cebd : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_hires
                             ;* Input : X = Colour table fill value
                             ;* initialise the screen in hires mode
                             ;****************************************
cebe :                       gr_init_hires
cebe : e60d             [ 5] 	inc vdp_curoff
                             	; Check if font copy needed to 0x9800
cec0 : a998             [ 2] 	lda #hi(HICHAR)
cec2 : 2050ce           [ 6] 	jsr gr_check_font_copy
                             
                             	; Initialise geom for hires
cec5 : a215             [ 2] 	ldx #gr_scrngeom_hires-gr_scrngeom_base
cec7 : 2068ce           [ 6] 	jsr gr_init_geom
                             
ceca : a920             [ 2] 	lda #' '						; Blank is SPACE
cecc : 8510             [ 3] 	sta vdp_blank
cece : 203bcf           [ 6] 	jsr gr_cls
                             
                             	; Zero out hires area 0xa000 for 8000 (0x1f40) b
ced1 : a900             [ 2] 	lda #lo(HISCRN)
ced3 : 8532             [ 3] 	sta tmp_alo
ced5 : a9a0             [ 2] 	lda #hi(HISCRN)
ced7 : 8533             [ 3] 	sta tmp_ahi
ced9 : a940             [ 2] 	lda #0x40						; Set bit 6
cedb : a000             [ 2] 	ldy #0
cedd : a200             [ 2] 	ldx #0
cedf :                       vdp_fill_vram_loop
cedf : 9132             [ 5] 	sta (tmp_alo),y
cee1 : c8               [ 2] 	iny
cee2 : d003             [ 3] 	bne vdp_fill_vram_noinc
cee4 : e633             [ 5] 	inc tmp_ahi
cee6 : e8               [ 2] 	inx
cee7 :                       vdp_fill_vram_noinc
cee7 : e01f             [ 2] 	cpx #hi(0x1f40)			; Reached page count?
cee9 : d0f4             [ 3] 	bne vdp_fill_vram_loop
ceeb : c040             [ 2] 	cpy #lo(0x1f40)			; Reached byte in page?
ceed : d0f0             [ 3] 	bne vdp_fill_vram_loop
                             
                             	; Set hires attribute in the magic location
ceef : a91e             [ 2] 	lda #30			; Hires attribute
cef1 : 8ddfbf           [ 4] 	sta 0xbfdf		; Last pos of screen memory
                             
AS65 Assembler for R6502 [1.42].                                     Page  110
-------------------------------- bank\bank0.s --------------------------------

cef4 : c60d             [ 5] 	dec vdp_curoff
cef6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_hires_tables
                             ;* Generate the hires tables
                             ;* Do this whilst in hires mode
                             ;****************************************
cef7 :                       gr_init_hires_tables
                             	; Initialise address pointer to start of high re
cef7 : a900             [ 2] 	lda #lo(HISCRN)
cef9 : 8532             [ 3] 	sta tmp_alo
cefb : a9a0             [ 2] 	lda #hi(HISCRN)
cefd : 8533             [ 3] 	sta tmp_ahi
                             	; Starting from row zero, do 200 rows
ceff : a000             [ 2] 	ldy #0
cf01 :                       gr_init_tab_row
                             	; Save low and high bytes of screen address in t
cf01 : a532             [ 3] 	lda tmp_alo
cf03 : 99009c           [ 5] 	sta hires_row_low,y
cf06 : a533             [ 3] 	lda tmp_ahi
cf08 : 99c89c           [ 5] 	sta hires_row_hi,y
                             	; add 40 ready for next row
cf0b : 18               [ 2] 	clc
cf0c : a532             [ 3] 	lda tmp_alo
cf0e : 6928             [ 2] 	adc #40
cf10 : 8532             [ 3] 	sta tmp_alo
                             	_bcc 2
                             
cf14 : e633             [ 5] 	inc tmp_ahi
                             	; Max 200 rows
cf16 : c8               [ 2] 	iny
cf17 : c0c8             [ 2] 	cpy #200
cf19 : d0e6             [ 3] 	bne gr_init_tab_row
                             	; From column 0, do 240 columns
                             	; Mask starts at 0x20, when shifts to 0 then
                             	; the column increments
cf1b : a920             [ 2] 	lda #0x20
cf1d : 8534             [ 3] 	sta tmp_blo			; Pixel mask
cf1f : a200             [ 2] 	ldx #0				; Pixel column
cf21 : a000             [ 2] 	ldy #0				; Byte column
cf23 :                       gr_init_tab_col
                             	; Save current mask and column
cf23 : a534             [ 3] 	lda tmp_blo
cf25 : 9d809e           [ 5] 	sta hires_mask,x
cf28 : 98               [ 2] 	tya
cf29 : 9d909d           [ 5] 	sta hires_col,x
                             	; shift mask, if zero then increment col and res
cf2c : 4634             [ 5] 	lsr tmp_blo
cf2e : d005             [ 3] 	bne gr_init_tab_col_skip
cf30 : a920             [ 2] 	lda #0x20
cf32 : 8534             [ 3] 	sta tmp_blo
cf34 : c8               [ 2] 	iny
cf35 :                       gr_init_tab_col_skip
cf35 : e8               [ 2] 	inx
cf36 : e0f0             [ 2] 	cpx #240
cf38 : d0e9             [ 3] 	bne gr_init_tab_col
cf3a : 60               [ 6] 	rts
                             
                             
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  111
-------------------------------- bank\bank0.s --------------------------------

                             ;* gr_cls
                             ;* Clear the text screen
                             ;****************************************
cf3b :                       gr_cls
cf3b : e60d             [ 5] 	inc vdp_curoff
                             	; Set screen address for text mode
cf3d : a516             [ 3] 	lda gr_scrngeom+gr_text_start
cf3f : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
cf41 : a517             [ 3] 	lda gr_scrngeom+gr_text_start+1
cf43 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             
cf45 : a61a             [ 3] 	ldx gr_scrngeom+gr_text_h		; Count of rows to cl
                             
                             	; X and Y count bytes to fill
cf47 :                       gr_cls_row
cf47 : a000             [ 2] 	ldy #0							; Count of columns
cf49 : a525             [ 3] 	lda gr_scrngeom+gr_margin		; Is there a margin?
cf4b : f00a             [ 3] 	beq gr_cls_skip_marg
cf4d : a524             [ 3] 	lda gr_scrngeom+gr_paper		; Set Paper
cf4f : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cf51 : c8               [ 2] 	iny
cf52 : a523             [ 3] 	lda gr_scrngeom+gr_ink			; Set Ink
cf54 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cf56 : c8               [ 2] 	iny
cf57 :                       gr_cls_skip_marg
cf57 : a510             [ 3] 	lda vdp_blank
cf59 : 850f             [ 3] 	sta vdp_curval					; Under cursor is also blank
cf5b :                       gr_cls_col
cf5b : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cf5d : c8               [ 2] 	iny
cf5e : c419             [ 3] 	cpy gr_scrngeom+gr_text_w		; Done all columns?
cf60 : d0f9             [ 3] 	bne gr_cls_col
                             	; Update pointer
cf62 : 18               [ 2] 	clc
cf63 : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp
cf65 : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
cf67 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
cf6b : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
cf6d : ca               [ 2] 	dex								; 1 row done
cf6e : d0d7             [ 3] 	bne gr_cls_row					; Done all rows?
                             
                             	; set cursror position to top left
cf70 : a510             [ 3] 	lda vdp_blank
cf72 : 850f             [ 3] 	sta vdp_curval
cf74 : a625             [ 3] 	ldx gr_scrngeom+gr_margin
cf76 : a000             [ 2] 	ldy #0
cf78 : 38               [ 2] 	sec								; Init mode
cf79 : 20a9cf           [ 6] 	jsr gr_set_cur_init
                             
cf7c : c60d             [ 5] 	dec vdp_curoff
                             
cf7e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_getXY_base
                             ;* Get base screen address using Y coord only
                             ;* Input : X = y coord
                             ;* Output :	gr_geom_tmp updated with base
                             ;* Regs affected : A
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  112
-------------------------------- bank\bank0.s --------------------------------

cf7f :                       gr_getXY_base
                             	; Find y offset using **X register**
cf7f : 18               [ 2] 	clc
cf80 : bdd6d3           [ 4] 	lda gr_offset_40lo,x
cf83 : 6516             [ 3] 	adc gr_scrngeom+gr_text_start
cf85 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
cf87 : bdf2d3           [ 4] 	lda gr_offset_40hi,x
cf8a : 6517             [ 3] 	adc gr_scrngeom+gr_text_start+1
cf8c : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             
                             	; A = high byte of base address
cf8e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_plot
                             ;* Write a byte in the screen pos
                             ;* Input :	Y,X = coord, A = Byte to put
                             ;*			X = Y COORDINATE
                             ;*			Y = X COORDINATE!!
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cf8f :                       gr_plot
cf8f : 48               [ 3] 	pha					; Save byte to put
cf90 : 207fcf           [ 6] 	jsr gr_getXY_base	; base addre
cf93 : 68               [ 4] 	pla					; Get byte to put
cf94 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cf96 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_put
                             ;* Write a byte in the current cursor position
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cf97 :                       gr_put
cf97 : e60d             [ 5] 	inc vdp_curoff		; Disable cusror
cf99 : 850f             [ 3] 	sta vdp_curval		; Update cursor value
                             	; Base address plus X offset
cf9b : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
cf9d : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
cf9f : c60d             [ 5] 	dec vdp_curoff		; Allow cursor flashing
cfa1 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_get
                             ;* Get the byte in the screen pos
                             ;* Input : Y,X = coord (**Y = X coordinate!!)
                             ;* Output : X,Y = address, A = peeked byte
                             ;* Regs affected : All
                             ;****************************************
cfa2 :                       gr_get
cfa2 : 207fcf           [ 6] 	jsr gr_getXY_base	; Base address
cfa5 : b126             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y
cfa7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_set_cur
                             ;* Set the cursor position
                             ;* Input : X, Y = position
AS65 Assembler for R6502 [1.42].                                     Page  113
-------------------------------- bank\bank0.s --------------------------------

                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cfa8 :                       gr_set_cur
cfa8 : 18               [ 2] 	clc
cfa9 :                       gr_set_cur_init
cfa9 : a50d             [ 3] 	lda vdp_curoff
cfab : e60d             [ 5] 	inc vdp_curoff				; Disable cursor
cfad : b012             [ 3] 	bcs gr_set_cur_skip			; Skip restore if C=1
cfaf : c900             [ 2] 	cmp #0						; Was cursor anyway disabled?
cfb1 : d00e             [ 3] 	bne gr_set_cur_skip			; if so then skip restore
cfb3 : 8632             [ 3] 	stx tmp_alo
cfb5 : 8433             [ 3] 	sty tmp_ahi
                             	; First restore what is under the cursor
                             	; in case cursor is ON
cfb7 : 8426             [ 3] 	sty gr_scrngeom+gr_geom_tmp
cfb9 : a50f             [ 3] 	lda vdp_curval
cfbb : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
cfbd : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
cfbf : a426             [ 3] 	ldy gr_scrngeom+gr_geom_tmp
cfc1 :                       gr_set_cur_skip
                             	; Save new cursor position
cfc1 : 861b             [ 3] 	stx gr_scrngeom+gr_cur_x
cfc3 : 841c             [ 3] 	sty gr_scrngeom+gr_cur_y
                             
                             	; Now calculate the new cursor vram address
cfc5 : a61c             [ 3] 	ldx gr_scrngeom+gr_cur_y
cfc7 : 207fcf           [ 6] 	jsr gr_getXY_base
                             	; Update pointer in tmp, A already has high byte
cfca : 851e             [ 3] 	sta gr_scrngeom+gr_cur_ptr+1
cfcc : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp
cfce : 851d             [ 3] 	sta gr_scrngeom+gr_cur_ptr
                             	; Read screen at this position, offset with X co
cfd0 : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
cfd2 : b11d             [ 5] 	lda (gr_scrngeom+gr_cur_ptr),y
cfd4 : 850f             [ 3] 	sta vdp_curval
                             	; Reset cursor so it's visible
cfd6 : a900             [ 2] 	lda #0
cfd8 : 850e             [ 3] 	sta vdp_curstat
cfda : a901             [ 2] 	lda #1
cfdc : 850c             [ 3] 	sta vdp_curcnt
                             
cfde : c60d             [ 5] 	dec vdp_curoff
                             
cfe0 : 60               [ 6] 	rts
                             
                             
                             
                             ;****************************************
                             ;* gr_scroll_up
                             ;* Scroll screen one line up
                             ;****************************************
cfe1 :                       gr_scroll_up
cfe1 : e60d             [ 5] 	inc vdp_curoff
                             
                             	; Set source in a and dest in b
                             	; b is first line, source is second
cfe3 : 18               [ 2] 	clc
cfe4 : a516             [ 3] 	lda gr_scrngeom+gr_text_start
cfe6 : 8534             [ 3] 	sta tmp_blo
cfe8 : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
cfea : 8532             [ 3] 	sta tmp_alo
AS65 Assembler for R6502 [1.42].                                     Page  114
-------------------------------- bank\bank0.s --------------------------------

cfec : a517             [ 3] 	lda gr_scrngeom+gr_text_start+1
cfee : 8535             [ 3] 	sta tmp_bhi
cff0 : 6900             [ 2] 	adc #0
cff2 : 8533             [ 3] 	sta tmp_ahi
                             
                             	; Restore what was underneath cursor
cff4 : a50f             [ 3] 	lda vdp_curval
cff6 : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
cff8 : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
                             
                             	; x = lines to scroll (1 less than screen height
cffa : a61a             [ 3] 	ldx gr_scrngeom+gr_text_h
cffc : ca               [ 2] 	dex
                             
cffd :                       gr_scroll_cpy_ln
                             	; Start from right hand edge (easier)
cffd : a419             [ 3] 	ldy gr_scrngeom+gr_text_w
cfff : 88               [ 2] 	dey
d000 :                       gr_scroll_char
                             	; get char from source and copy to dest
d000 : b132             [ 5] 	lda (tmp_alo),y
d002 : 9134             [ 5] 	sta (tmp_blo),y
d004 : 88               [ 2] 	dey
d005 : 10f9             [ 3] 	bpl gr_scroll_char
                             
                             	; Update source address
d007 : 18               [ 2] 	clc
d008 : a532             [ 3] 	lda tmp_alo
d00a : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
d00c : 8532             [ 3] 	sta tmp_alo
                             	_bcc 2
                             
d010 : e633             [ 5] 	inc tmp_ahi
                             	; Update destination address
d012 : 18               [ 2] 	clc
d013 : a534             [ 3] 	lda tmp_blo
d015 : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
d017 : 8534             [ 3] 	sta tmp_blo
                             	_bcc 2
                             
d01b : e635             [ 5] 	inc tmp_bhi
                             
                             	; One line complete
d01d : ca               [ 2] 	dex
d01e : d0dd             [ 4] 	bne gr_scroll_cpy_ln
                             
                             	; Source is pointing at last line
                             	; Last line needs filling
d020 : a000             [ 2] 	ldy #0							; Start from left
d022 : a525             [ 3] 	lda gr_scrngeom+gr_margin		; Margin?
d024 : f00a             [ 3] 	beq gr_scroll_marg				; Skip if not
d026 : a524             [ 3] 	lda gr_scrngeom+gr_paper		; Set Paper
d028 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d02a : c8               [ 2] 	iny
d02b : a523             [ 3] 	lda gr_scrngeom+gr_ink			; Set Ink
d02d : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d02f : c8               [ 2] 	iny
d030 :                       gr_scroll_marg
                             	; Needs to be filled with blank
d030 : a510             [ 3] 	lda vdp_blank
d032 : 850f             [ 3] 	sta vdp_curval			; Also this is the cursor value
d034 :                       gr_scroll_erase_ln
AS65 Assembler for R6502 [1.42].                                     Page  115
-------------------------------- bank\bank0.s --------------------------------

d034 : 9134             [ 5] 	sta (tmp_blo),y
d036 : c8               [ 2] 	iny
d037 : c419             [ 3] 	cpy gr_scrngeom+gr_text_w
d039 : d0f9             [ 3] 	bne gr_scroll_erase_ln
                             
d03b : c60d             [ 5] 	dec vdp_curoff
                             
d03d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_new_ln
                             ;* Carry out a new line
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d03e :                       gr_new_ln
                             	; X pos is zero, Y needs to increment
d03e : a625             [ 3] 	ldx gr_scrngeom+gr_margin
d040 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
d042 : c8               [ 2] 	iny
d043 : c41a             [ 3] 	cpy gr_scrngeom+gr_text_h
d045 : d00c             [ 3] 	bne gr_nl_skip_nl
                             	; If got here then screen needs to scroll
                             	; Common routine also used by cursor right
d047 :                       gr_scroll_routine
d047 : 88               [ 2] 	dey
d048 : 8a               [ 2] 	txa
d049 : 48               [ 3] 	pha
d04a : 98               [ 2] 	tya
d04b : 48               [ 3] 	pha
d04c : 20e1cf           [ 6] 	jsr gr_scroll_up
d04f : 68               [ 4] 	pla
d050 : a8               [ 2] 	tay
d051 : 68               [ 4] 	pla
d052 : aa               [ 2] 	tax
d053 :                       gr_nl_skip_nl
d053 : 4ca8cf           [ 3] 	jmp gr_set_cur
                             
                             
                             ;****************************************
                             ;* gr_cur_right
                             ;* Advance cursor position
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d056 :                       gr_cur_right
                             	; Load cursor x,y position
d056 : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
d058 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             
                             	; Move cursor right
d05a : e8               [ 2] 	inx
                             	; Check if reached past edge of line
d05b : e419             [ 3] 	cpx gr_scrngeom+gr_text_w
d05d : d0f4             [ 3] 	bne gr_nl_skip_nl
                             	; If got here then wrap to next line
d05f : a625             [ 3] 	ldx gr_scrngeom+gr_margin
d061 : c8               [ 2] 	iny
d062 : c41a             [ 3] 	cpy gr_scrngeom+gr_text_h
d064 : f0e1             [ 3] 	beq gr_scroll_routine		; Common scroll routine
AS65 Assembler for R6502 [1.42].                                     Page  116
-------------------------------- bank\bank0.s --------------------------------

d066 : d0eb             [ 3] 	bne gr_nl_skip_nl			; Common set cursor
                             
                             ;****************************************
                             ;* gr_cur_left
                             ;* Advance cursor left
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d068 :                       gr_cur_left
                             	; Load cursor x,y position, load X last to check
d068 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
d06a : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
                             
                             	; Decrement screen pointer
                             	; Move cursor left
d06c : e425             [ 3] 	cpx gr_scrngeom+gr_margin	; Already at left marg
d06e : d007             [ 3] 	bne gr_cur_skip_at_left		; No, then just go left
d070 : c000             [ 2] 	cpy #0						; Else check if can wrap up
d072 : f007             [ 3] 	beq gr_cur_skip_at_tl
d074 : 88               [ 2] 	dey
d075 : a619             [ 3] 	ldx gr_scrngeom+gr_text_w
d077 :                       gr_cur_skip_at_left
d077 : ca               [ 2] 	dex
d078 : 4ca8cf           [ 3] 	jmp gr_set_cur
                             
d07b :                       gr_cur_skip_at_tl
d07b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_cur_up
                             ;* Advance cursor up
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d07c :                       gr_cur_up
                             	; Load cursor x,y position, load Y last to check
d07c : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
d07e : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             	; if y==0 then don't do anything
d080 : f0f9             [ 3] 	beq gr_cur_skip_at_tl	; Just somewhere with an r
d082 : 88               [ 2] 	dey
d083 : 4ca8cf           [ 3] 	jmp gr_set_cur
                             
                             ;****************************************
                             ;* gr_cur_down
                             ;* Advance cursor down
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d086 :                       gr_cur_down
                             	; Load cursor x,y position
d086 : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
d088 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
d08a : c8               [ 2] 	iny
                             	; If already at  bottom then don't do anything
d08b : c41a             [ 3] 	cpy gr_scrngeom+gr_text_h			
d08d : f0ec             [ 3] 	beq gr_cur_skip_at_tl				; Just somewhere with a
d08f : 20a8cf           [ 6] 	jsr gr_set_cur
                             
AS65 Assembler for R6502 [1.42].                                     Page  117
-------------------------------- bank\bank0.s --------------------------------

d092 :                       gr_cur_skip_at_bot
d092 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_del
                             ;* Action del
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d093 :                       gr_del
d093 : 2068d0           [ 6] 	jsr gr_cur_left
d096 : a920             [ 2] 	lda #' '							; Put a space
d098 : 4c97cf           [ 3] 	jmp gr_put
                             
                             ;****************************************
                             ;* gr_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code, C=0 means valid code
                             ;****************************************
d09b :                       gr_get_key
                             	; save X,Y but A is ok to trample
d09b : 8a               [ 2] 	txa
d09c : 48               [ 3] 	pha
d09d : 98               [ 2] 	tya
d09e : 48               [ 3] 	pha
d09f :                       gr_get_key_2
d09f : 08               [ 3] 	php
d0a0 : 203cca           [ 6] 	jsr kb_get_key
d0a3 : 9006             [ 3] 	bcc gr_key_check_key
d0a5 : 28               [ 4] 	plp									; Get async pref
d0a6 : b0f7             [ 3] 	bcs	gr_get_key_2					; Keep checking if sync
d0a8 : 38               [ 2] 	sec
d0a9 : b019             [ 3] 	bcs gr_key_tidy_up					; Finish if not
d0ab :                       gr_key_check_key						; Check the key pressed
d0ab : c901             [ 2] 	cmp #UTF_ACK						; Copy key pressed?
d0ad : d004             [ 3] 	bne gr_key_skip_copy
d0af : a50f             [ 3] 	lda vdp_curval						; If yes the get char under 
d0b1 : b00f             [ 3] 	bcs gr_key_got_key					; Always branches (n=1, c
d0b3 :                       gr_key_skip_copy
d0b3 : c914             [ 2] 	cmp #CTRL_CAPS
d0b5 : d00b             [ 3] 	bne gr_key_got_key
d0b7 : a52c             [ 3] 	lda kb_stat							; Toggle caps bit
d0b9 : 4901             [ 2] 	eor #KB_CAPSLK
d0bb : 852c             [ 3] 	sta kb_stat
d0bd : 28               [ 4] 	plp									; Get back synchronous pref
d0be : b0df             [ 3] 	bcs gr_get_key_2					; And check again for sync
d0c0 : 900b             [ 3] 	bcc gr_key_no_key					; Else no key
d0c2 :                       gr_key_got_key
d0c2 : 28               [ 4] 	plp
d0c3 : 18               [ 2] 	clc									; Ensure C=0 for valid key
d0c4 :                       gr_key_tidy_up
                             	; restore X,Y but don't lose A
d0c4 : 8538             [ 3] 	sta tmp_d
d0c6 : 68               [ 4] 	pla
d0c7 : a8               [ 2] 	tay
d0c8 : 68               [ 4] 	pla
d0c9 : aa               [ 2] 	tax
d0ca : a538             [ 3] 	lda tmp_d
d0cc : 60               [ 6] 	rts
d0cd :                       gr_key_no_key
AS65 Assembler for R6502 [1.42].                                     Page  118
-------------------------------- bank\bank0.s --------------------------------

d0cd : 28               [ 4] 	plp
d0ce : 38               [ 2] 	sec									; Ensure C=1 for invalid key
d0cf : b0f3             [ 3] 	bcs gr_key_tidy_up					; Always branches
                             
                             ;****************************************
                             ;* gr_put_byte
                             ;* Put a byte out
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d0d1 :                       gr_put_byte
                             	_pushAXY
                             
d0da : 20e3d0           [ 6] 	jsr gr_put_byte_low
                             	_pullAXY
                             
d0e2 :                       gr_no_special
d0e2 : 60               [ 6] 	rts
                             
d0e3 :                       gr_put_byte_low
d0e3 : c97f             [ 2] 	cmp #UTF_DEL			; Del key
d0e5 : f004             [ 3] 	beq gr_process_special
d0e7 : c920             [ 2] 	cmp #32					; Special char?
d0e9 : b01b             [ 4] 	bcs gr_printable		; >=32 == carry clear
d0eb :                       gr_process_special
                             	; Else find special behaviour to do
d0eb : a2ff             [ 2] 	ldx #-1
d0ed : 8532             [ 3] 	sta tmp_alo
d0ef :                       gr_special_loop
d0ef : e8               [ 2] 	inx
d0f0 : bd0cd1           [ 4] 	lda gr_special_ch,x
d0f3 : f0ed             [ 3] 	beq gr_no_special		; Somewhere with an rts!
d0f5 : c532             [ 3] 	cmp tmp_alo
d0f7 : d0f6             [ 3] 	bne gr_special_loop
d0f9 : bd15d1           [ 4] 	lda gr_special_fn_lo,x
d0fc : 8532             [ 3] 	sta tmp_alo
d0fe : bd1dd1           [ 4] 	lda gr_special_fn_hi,x
d101 : 8533             [ 3] 	sta tmp_ahi
d103 : 6c3200           [ 6] 	jmp (tmp_alo)
                             
                             	;	Normal caracter processing here.
d106 :                       gr_printable
                             	; Place in current position and move right
d106 : 2097cf           [ 6] 	jsr gr_put
d109 : 4c56d0           [ 3] 	jmp gr_cur_right
                             
d10c :                       gr_special_ch
d10c : 0d                    	db UTF_CR
d10d : 7f                    	db UTF_DEL
d10e : 08                    	db CRSR_LEFT
d10f : 09                    	db CRSR_RIGHT
d110 : 0b                    	db CRSR_UP
d111 : 0a                    	db CRSR_DOWN
d112 : 0c                    	db UTF_FF
d113 : 07                    	db UTF_BEL
d114 : 00                    	db 0
                             
d115 :                       gr_special_fn_lo
d115 : 3e                    	db lo(gr_new_ln)
d116 : 93                    	db lo(gr_del)
d117 : 68                    	db lo(gr_cur_left)
AS65 Assembler for R6502 [1.42].                                     Page  119
-------------------------------- bank\bank0.s --------------------------------

d118 : 56                    	db lo(gr_cur_right)
d119 : 7c                    	db lo(gr_cur_up)
d11a : 86                    	db lo(gr_cur_down)
d11b : 3b                    	db lo(gr_cls)
d11c : d8                    	db lo(init_snd)
                             
d11d :                       gr_special_fn_hi
d11d : d0                    	db hi(gr_new_ln)
d11e : d0                    	db hi(gr_del)
d11f : d0                    	db hi(gr_cur_left)
d120 : d0                    	db hi(gr_cur_right)
d121 : d0                    	db hi(gr_cur_up)
d122 : d0                    	db hi(gr_cur_down)
d123 : cf                    	db hi(gr_cls)
d124 : d5                    	db hi(init_snd)
                             
                             ; Special command to print to the screen
                             ; Y,A=Message, zero terminated
d125 :                       gr_print_msg
d125 : 8449             [ 3] 	sty num_tmp
d127 : 854a             [ 3] 	sta num_tmp+1
d129 : a000             [ 2] 	ldy #0
d12b :                       gr_print_msg_loop
d12b : b149             [ 5] 	lda (num_tmp),y
d12d : f006             [ 3] 	beq gr_print_msg_done
d12f : 20d1d0           [ 6] 	jsr gr_put_byte
d132 : c8               [ 2] 	iny
d133 : d0f6             [ 3] 	bne gr_print_msg_loop
d135 :                       gr_print_msg_done
d135 : a54a             [ 3] 	lda num_tmp+1
d137 : a449             [ 3] 	ldy num_tmp
d139 : 60               [ 6] 	rts
                             
                             ;******* HIRES STUFF *****
                             
                             
                             ;****************************************
                             ;* gr_hcode
                             ;* Plot bytecode at hires X,Y coordinates with co
                             ;* Input : X,Y = coord, A = Char code
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d13a :                       gr_hcode
d13a : 48               [ 3] 	pha
                             	; Set up destination position tmpalo,hi and Y
d13b : 20f6d1           [ 6] 	jsr gr_point_setup
d13e : a208             [ 2] 	ldx #8				; Always do 8 rows like a character
d140 :                       gr_hcode_loop
d140 : 68               [ 4] 	pla 				; Get the code to place
d141 : 48               [ 3] 	pha					; Need to save it back
d142 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y		; Store it in d
d144 : 18               [ 2] 	clc
d145 : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp			; Update base poin
d147 : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
d149 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
d14d : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
d14f : ca               [ 2] 	dex
d150 : d0ee             [ 3] 	bne gr_hcode_loop
d152 : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  120
-------------------------------- bank\bank0.s --------------------------------

d153 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_hchar
                             ;* Plot character to hires X,Y coordinates with c
                             ;* Input : X,Y = coord, A = Char code
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d154 :                       gr_hchar
                             	; If char code < 32 then plot attribute
d154 : c91f             [ 2] 	cmp #31
d156 : 90e2             [ 3] 	bcc gr_hcode
                             	; Multiply char code by 8
                             	; and add to char font base
                             	; tmp_clo contains base address
d158 : 0a               [ 2] 	asl a
d159 : 2637             [ 5] 	rol tmp_chi
d15b : 0a               [ 2] 	asl a
d15c : 2637             [ 5] 	rol tmp_chi
d15e : 0a               [ 2] 	asl a
d15f : 2637             [ 5] 	rol tmp_chi
d161 : 18               [ 2] 	clc
d162 : 6514             [ 3] 	adc gr_scrngeom+gr_char
d164 : 8536             [ 3] 	sta tmp_clo
d166 : a537             [ 3] 	lda tmp_chi
d168 : 2907             [ 2] 	and #7
d16a : 6515             [ 3] 	adc gr_scrngeom+gr_char+1
d16c : 8537             [ 3] 	sta tmp_chi
                             
                             	; Set up destination position
d16e : 20f6d1           [ 6] 	jsr gr_point_setup
                             	; tmp needs to contains address including column
d171 : 18               [ 2] 	clc
d172 : 98               [ 2] 	tya
d173 : 6526             [ 3] 	adc gr_scrngeom+gr_geom_tmp
d175 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
d179 : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
                             
d17b : a528             [ 3] 	lda gr_scrngeom+gr_geom_tmp2		; Get the mask
d17d : a207             [ 2] 	ldx #7
d17f :                       gr_hchar_mask							; Calculate how many shifts t
d17f : ca               [ 2] 	dex
d180 : 4a               [ 2] 	lsr a
d181 : d0fc             [ 3] 	bne gr_hchar_mask
d183 : 8628             [ 3] 	stx gr_scrngeom+gr_geom_tmp2		; number between 1
                             
                             	; copy font bytes and shift the required number 
                             	; go from bottom to top as data gets stored on t
d185 : a007             [ 2] 	ldy #7
d187 :                       gr_hchar_getfont
d187 : b136             [ 5] 	lda (tmp_clo),y
d189 : 853d             [ 3] 	sta ztmp_24
d18b : a900             [ 2] 	lda #0
d18d : 853e             [ 3] 	sta ztmp_24+1
                             
                             	; shift the right number of times
d18f : a628             [ 3] 	ldx gr_scrngeom+gr_geom_tmp2
d191 :                       gr_hchar_rot1bit
d191 : ca               [ 2] 	dex
AS65 Assembler for R6502 [1.42].                                     Page  121
-------------------------------- bank\bank0.s --------------------------------

d192 : f00d             [ 3] 	beq gr_hchar_rot1bit_nx
d194 : 463d             [ 5] 	lsr ztmp_24					; Rotate left hand side
d196 : a53e             [ 3] 	lda ztmp_24+1				; Rotate right hand side
d198 : 9002             [ 3] 	bcc gr_hchar_rot1bit_bcc
d19a : 0940             [ 2] 	ora #0x40					; account for 6 bits per byte
d19c :                       gr_hchar_rot1bit_bcc
d19c : 4a               [ 2] 	lsr a
d19d : 853e             [ 3] 	sta ztmp_24+1
d19f : 10f0             [ 3] 	bpl gr_hchar_rot1bit		; Always as lsr sets N=0
d1a1 :                       gr_hchar_rot1bit_nx
d1a1 : a53e             [ 3] 	lda ztmp_24+1				; Get RHS
d1a3 : 48               [ 3] 	pha							; Push RHS on to stack
d1a4 : a53d             [ 3] 	lda ztmp_24					; Get LHS
d1a6 : 48               [ 3] 	pha							; Push that too - LH gets pulled first
d1a7 : 88               [ 2] 	dey							; Bottom to to lines
d1a8 : 10dd             [ 3] 	bpl gr_hchar_getfont
                             
                             	; Now copy shift source to destination, accounti
d1aa : a208             [ 2] 	ldx #8
d1ac :                       gr_hchar_copyline
d1ac : a41f             [ 3] 	ldy gr_scrngeom+gr_pixmode	; Mode determines how
d1ae : f022             [ 3] 	beq gr_hchar_copyline_erase
d1b0 : 3010             [ 3] 	bmi gr_hchar_copyline_eor
                             
                             	; Mode = ~Z : OR
d1b2 : a000             [ 2] 	ldy #0						; Get lh side source
d1b4 : 68               [ 4] 	pla
d1b5 : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
d1b7 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d1b9 : c8               [ 2] 	iny							; Get rh side source
d1ba : 68               [ 4] 	pla
d1bb : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
d1bd : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d1bf : 4ce7d1           [ 3] 	jmp gr_hchar_copyline_nx
d1c2 :                       gr_hchar_copyline_eor
                             	; Mode = N : EOR
d1c2 : a000             [ 2] 	ldy #0						; Get lh side source
d1c4 : 68               [ 4] 	pla
d1c5 : 5126             [ 5] 	eor (gr_scrngeom+gr_geom_tmp),y
d1c7 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d1c9 : c8               [ 2] 	iny							; Get rh side source
d1ca : 68               [ 4] 	pla
d1cb : 5126             [ 5] 	eor (gr_scrngeom+gr_geom_tmp),y
d1cd : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d1cf : 4ce7d1           [ 3] 	jmp gr_hchar_copyline_nx
d1d2 :                       gr_hchar_copyline_erase
                             	; Mode = Z : erase
d1d2 : a000             [ 2] 	ldy #0						; Get lh side source
d1d4 : 68               [ 4] 	pla
d1d5 : 853d             [ 3] 	sta ztmp_24
d1d7 : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
d1d9 : 453d             [ 3] 	eor ztmp_24
d1db : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d1dd : c8               [ 2] 	iny							; Get rh side source
d1de : 68               [ 4] 	pla
d1df : 853d             [ 3] 	sta ztmp_24
d1e1 : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
d1e3 : 453d             [ 3] 	eor ztmp_24
d1e5 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d1e7 :                       gr_hchar_copyline_nx
d1e7 : 18               [ 2] 	clc							; Next address
d1e8 : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp
AS65 Assembler for R6502 [1.42].                                     Page  122
-------------------------------- bank\bank0.s --------------------------------

d1ea : 6928             [ 2] 	adc #40
d1ec : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
d1f0 : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
d1f2 : ca               [ 2] 	dex
d1f3 : d0b7             [ 3] 	bne gr_hchar_copyline
d1f5 : 60               [ 6] 	rts							; Done after 8 lines
                             
                             ;****************************************
                             ;* gr_point_setup
                             ;* Calculate information about a pixel location
                             ;* Input : X,Y = coord
                             ;* Output : None
                             ;* Regs affected :
                             ;* gr_geom_tmp contains the row base address
                             ;* gr_geom_tmp2 contains the mask
                             ;* A contains the mask
                             ;* X untouched
                             ;* Y contains column offet from base address
                             ;****************************************
d1f6 :                       gr_point_setup
                             	; Get row address
d1f6 : b9009c           [ 4] 	lda hires_row_low,y
d1f9 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d1fb : b9c89c           [ 4] 	lda hires_row_hi,y
d1fe : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             	; Get the pixel mask
d200 : bd809e           [ 4] 	lda hires_mask,x
d203 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp2
                             	; Get the column offset to Y
d205 : bc909d           [ 4] 	ldy hires_col,x
d208 : 60               [ 6] 	rts
                             
d209 :                       gr_set_hires_cur
d209 : 8621             [ 3] 	stx gr_scrngeom+gr_hires_x
d20b : 8422             [ 3] 	sty gr_scrngeom+gr_hires_y
d20d : 60               [ 6] 	rts
                             
                             ;* Get pixel value at X,Y in to A
d20e :                       gr_pixel
d20e : 20f6d1           [ 6] 	jsr gr_point_setup				; Set up mask and addresse
d211 : 3126             [ 5] 	and (gr_scrngeom+gr_geom_tmp),y	; And with scree
d213 : 60               [ 6] 	rts
                             
                             ;* Plot a point based on X,Y coordinates
d214 :                       gr_point
d214 : e0f0             [ 2] 	cpx #240						; Check bounds
d216 : b02c             [ 3] 	bcs gr_point_done
d218 : c0c8             [ 2] 	cpy #200
d21a : b028             [ 3] 	bcs gr_point_done
                             
                             	;** FOR SPEED COPYING THE POINT SETUP ROUTINE **
                             	;** OBVS MAKE SURE THIS REFLECTS ANY POINT SETUP
                             	; Get row address
d21c : b9009c           [ 4] 	lda hires_row_low,y
d21f : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d221 : b9c89c           [ 4] 	lda hires_row_hi,y
d224 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             	; Get the pixel mask
d226 : bd809e           [ 4] 	lda hires_mask,x
d229 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp2
AS65 Assembler for R6502 [1.42].                                     Page  123
-------------------------------- bank\bank0.s --------------------------------

                             	; Get the column offset to Y
d22b : bc909d           [ 4] 	ldy hires_col,x
                             
                             ;* Plot a point based on gr_geom_tmp base, Y offs
d22e : b126             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y	; Get screen byt
d230 : c920             [ 2] 	cmp #32							; If less than 32 (i.e. an attribu
d232 : b002             [ 3] 	bcs gr_point_skip_attr
d234 : a940             [ 2] 	lda #64							; then make it a normal cell (else
d236 :                       gr_point_skip_attr
d236 : a61f             [ 3] 	ldx gr_scrngeom+gr_pixmode		; Look at the mode
d238 : 3006             [ 3] 	bmi gr_point_eor				; If eor mode then go and wr
d23a : 0528             [ 3] 	ora gr_scrngeom+gr_geom_tmp2	; Or with MASK
d23c : e000             [ 2] 	cpx #0							; But if zero mode then eor
d23e : d002             [ 3] 	bne gr_point_write
d240 :                       gr_point_eor
d240 : 4528             [ 3] 	eor gr_scrngeom+gr_geom_tmp2	; EOR with MASK
d242 :                       gr_point_write
d242 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d244 :                       gr_point_done
d244 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_circle
                             ;* Draw a circle centre x0,y0, radius r
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = r
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d245 :                       gr_circle
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
003d =                       grc_x0 	= (num_a)
003e =                       grc_y0 	= (num_a+1)
003f =                       grc_r 	= (num_a+2)
0040 =                       grc_x 	= (num_a+3)
0042 =                       grc_y	= (num_b+1)
0043 =                       grc_d	= (num_b+2)
                             
                             	;x = radius
d245 : a53f             [ 3] 	lda grc_r
d247 : 8540             [ 3] 	sta grc_x
                             	;decision = 1 - x
d249 : a900             [ 2] 	lda #0
                             	;y = 0
d24b : 8542             [ 3] 	sta grc_y
d24d : 18               [ 2] 	clc			; A=0 so CLC subtracts 1 :-)
d24e : e540             [ 3] 	sbc grc_x
d250 : 8543             [ 3] 	sta grc_d
d252 :                       gr_circle_plot
                             	;while(x >= y)
d252 : a540             [ 3] 	lda grc_x
d254 : c542             [ 3] 	cmp grc_y
d256 : 902a             [ 3] 	bcc gr_circle_done
                             	;plot 8 points on current x,y
d258 : 2083d2           [ 6] 	jsr gr_circle_points
                             	;y++
d25b : e642             [ 5] 	inc grc_y
                             	;if d<=0
d25d : a543             [ 3] 	lda grc_d
d25f : f014             [ 3] 	beq gr_circle_d_lte0
AS65 Assembler for R6502 [1.42].                                     Page  124
-------------------------------- bank\bank0.s --------------------------------

d261 : 3012             [ 3] 	bmi gr_circle_d_lte0
                             	;else
                             	;x--
d263 : c640             [ 5] 	dec grc_x
                             	;decision += 2 * (y - x) + 1
d265 : a542             [ 3] 	lda grc_y
d267 : 38               [ 2] 	sec
d268 : e540             [ 3] 	sbc grc_x
d26a : 0a               [ 2] 	asl a
d26b : 18               [ 2] 	clc
d26c : 6901             [ 2] 	adc #1
d26e : 6543             [ 3] 	adc grc_d
d270 : 8543             [ 3] 	sta grc_d
d272 : 4c52d2           [ 3] 	jmp gr_circle_plot
d275 :                       gr_circle_d_lte0
                             	;decision += 2 * y + 1
d275 : a542             [ 3] 	lda grc_y
d277 : 0a               [ 2] 	asl a
d278 : 18               [ 2] 	clc
d279 : 6901             [ 2] 	adc #1
d27b : 6543             [ 3] 	adc grc_d
d27d : 8543             [ 3] 	sta grc_d
d27f : 4c52d2           [ 3] 	jmp gr_circle_plot
d282 :                       gr_circle_done
d282 : 60               [ 6] 	rts
d283 :                       gr_circle_points
                             ; Local names of temp storage
                             ; to make code easier to read
                             	;DrawPixel( x + x0,  yh + y0);
d283 : a540             [ 3] 	lda grc_x
d285 : 18               [ 2] 	clc
d286 : 653d             [ 3] 	adc grc_x0
d288 : aa               [ 2] 	tax
d289 : a542             [ 3] 	lda grc_y
d28b : 18               [ 2] 	clc
d28c : 653e             [ 3] 	adc grc_y0
d28e : a8               [ 2] 	tay
d28f : 2014d2           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0,  xh + y0);
d292 : a542             [ 3] 	lda grc_y
d294 : 18               [ 2] 	clc
d295 : 653d             [ 3] 	adc grc_x0
d297 : aa               [ 2] 	tax
d298 : a540             [ 3] 	lda grc_x
d29a : 18               [ 2] 	clc
d29b : 653e             [ 3] 	adc grc_y0
d29d : a8               [ 2] 	tay
d29e : 2014d2           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0,  yh + y0);
d2a1 : a53d             [ 3] 	lda grc_x0
d2a3 : 38               [ 2] 	sec
d2a4 : e540             [ 3] 	sbc grc_x
d2a6 : aa               [ 2] 	tax
d2a7 : a542             [ 3] 	lda grc_y
d2a9 : 18               [ 2] 	clc
d2aa : 653e             [ 3] 	adc grc_y0
d2ac : a8               [ 2] 	tay
d2ad : 2014d2           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0,  xh + y0);
d2b0 : a53d             [ 3] 	lda grc_x0
d2b2 : 38               [ 2] 	sec
d2b3 : e542             [ 3] 	sbc grc_y
AS65 Assembler for R6502 [1.42].                                     Page  125
-------------------------------- bank\bank0.s --------------------------------

d2b5 : aa               [ 2] 	tax
d2b6 : a540             [ 3] 	lda grc_x
d2b8 : 18               [ 2] 	clc
d2b9 : 653e             [ 3] 	adc grc_y0
d2bb : a8               [ 2] 	tay
d2bc : 2014d2           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0, -yh + y0);
d2bf : a53d             [ 3] 	lda grc_x0
d2c1 : 38               [ 2] 	sec
d2c2 : e540             [ 3] 	sbc grc_x
d2c4 : aa               [ 2] 	tax
d2c5 : a53e             [ 3] 	lda grc_y0
d2c7 : 38               [ 2] 	sec
d2c8 : e542             [ 3] 	sbc grc_y
d2ca : a8               [ 2] 	tay
d2cb : 2014d2           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0, -xh + y0);
d2ce : a53d             [ 3] 	lda grc_x0
d2d0 : 38               [ 2] 	sec
d2d1 : e542             [ 3] 	sbc grc_y
d2d3 : aa               [ 2] 	tax
d2d4 : a53e             [ 3] 	lda grc_y0
d2d6 : 38               [ 2] 	sec
d2d7 : e540             [ 3] 	sbc grc_x
d2d9 : a8               [ 2] 	tay
d2da : 2014d2           [ 6] 	jsr gr_point
                             	;DrawPixel( x + x0, -yh + y0);
d2dd : a540             [ 3] 	lda grc_x
d2df : 18               [ 2] 	clc
d2e0 : 653d             [ 3] 	adc grc_x0
d2e2 : aa               [ 2] 	tax
d2e3 : a53e             [ 3] 	lda grc_y0
d2e5 : 38               [ 2] 	sec
d2e6 : e542             [ 3] 	sbc grc_y
d2e8 : a8               [ 2] 	tay
d2e9 : 2014d2           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0, -xh + y0);
d2ec : a542             [ 3] 	lda grc_y
d2ee : 18               [ 2] 	clc
d2ef : 653d             [ 3] 	adc grc_x0
d2f1 : aa               [ 2] 	tax
d2f2 : a53e             [ 3] 	lda grc_y0
d2f4 : 38               [ 2] 	sec
d2f5 : e540             [ 3] 	sbc grc_x
d2f7 : a8               [ 2] 	tay
d2f8 : 4c14d2           [ 3] 	jmp gr_point
                             
                             
                             
                             ;****************************************
                             ;* gr_line
                             ;* Draw a line from x0,y0 -> x1,y1
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = x1
                             ;*			num_a+3 = y1
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d2fb :                       gr_line
                             
                             ; Local definitions of temp space to make
AS65 Assembler for R6502 [1.42].                                     Page  126
-------------------------------- bank\bank0.s --------------------------------

                             ; the rest of the code easier to read
003d =                       grl_x0 	= (num_a)
003e =                       grl_y0 	= (num_a+1)
003f =                       grl_x1 	= (num_a+2)
0040 =                       grl_y1 	= (num_a+3)
0041 =                       grl_dx	= (ztmp_24+4)
0042 =                       grl_dy	= (ztmp_24+5)
0043 =                       grl_xyyx= (ztmp_24+6)
0044 =                       grl_2dx	= (ztmp_24+7)			; Word
0046 =                       grl_2dy	= (ztmp_24+9)			; Word
0048 =                       grl_2dxy= (ztmp_24+11)			; Word
004a =                       grl_sinx= (ztmp_24+13)
004b =                       grl_p	= (ztmp_24+14)			; Word
004d =                       grl_siny= (ztmp_24+16)
                             
                             	; Start from hires cursor position
                             	; New cursor pos = end of line pos
d2fb : a521             [ 3] 	lda gr_scrngeom+gr_hires_x
d2fd : 853d             [ 3] 	sta grl_x0
d2ff : a522             [ 3] 	lda gr_scrngeom+gr_hires_y
d301 : 853e             [ 3] 	sta grl_y0
d303 : a63f             [ 3] 	ldx grl_x1
d305 : a440             [ 3] 	ldy grl_y1
d307 : 2009d2           [ 6] 	jsr gr_set_hires_cur
                             	
d30a : a900             [ 2] 	lda #0
d30c : 8543             [ 3] 	sta grl_xyyx				; Assume normal xy axis
                             
                             	; check if abs(dy)>abs(dx) if so need to swap xy
                             	; num_b = abs(x), num_b+1 = abs(dy)
d30e : 38               [ 2] 	sec
d30f : a53f             [ 3] 	lda grl_x1
d311 : e53d             [ 3] 	sbc grl_x0
d313 : b004             [ 3] 	bcs gr_line_skip_dx_neg
d315 : 49ff             [ 2] 	eor #0xff
d317 : 6901             [ 2] 	adc #1
d319 :                       gr_line_skip_dx_neg
d319 : 8541             [ 3] 	sta grl_dx
d31b : 38               [ 2] 	sec
d31c : a540             [ 3] 	lda grl_y1
d31e : e53e             [ 3] 	sbc grl_y0
d320 : b004             [ 3] 	bcs gr_line_skip_dy_neg
d322 : 49ff             [ 2] 	eor #0xff
d324 : 6901             [ 2] 	adc #1
d326 :                       gr_line_skip_dy_neg
d326 : 8542             [ 3] 	sta grl_dy
d328 : c541             [ 3] 	cmp grl_dx
d32a : 901a             [ 3] 	bcc gr_line_skip_xy_swap
                             	; swap xy axes and also dx and dy
d32c : a53d             [ 3] 	lda grl_x0					; swap x0 and y0
d32e : a63e             [ 3] 	ldx grl_y0
d330 : 853e             [ 3] 	sta grl_y0
d332 : 863d             [ 3] 	stx grl_x0
d334 : a53f             [ 3] 	lda grl_x1					; swap x1 and y1
d336 : a640             [ 3] 	ldx grl_y1
d338 : 8540             [ 3] 	sta grl_y1
d33a : 863f             [ 3] 	stx grl_x1
d33c : a541             [ 3] 	lda grl_dx					; swap dy and dx
d33e : a642             [ 3] 	ldx grl_dy
d340 : 8542             [ 3] 	sta grl_dy
d342 : 8641             [ 3] 	stx grl_dx
d344 : e643             [ 5] 	inc grl_xyyx				; set flag to Not Z to know abou
AS65 Assembler for R6502 [1.42].                                     Page  127
-------------------------------- bank\bank0.s --------------------------------

                             
d346 :                       gr_line_skip_xy_swap
                             	; assume going from left to right and top to bot
d346 : a901             [ 2] 	lda #1
d348 : a0ff             [ 2] 	ldy #255					; -1
d34a : 854a             [ 3] 	sta grl_sinx
d34c : 854d             [ 3] 	sta grl_siny
                             
                             	; check going right to left
d34e : a53d             [ 3] 	lda grl_x0
d350 : c53f             [ 3] 	cmp grl_x1
d352 : 9002             [ 3] 	bcc gr_line_skip_left
d354 : 844a             [ 3] 	sty grl_sinx				; make -1
d356 :                       gr_line_skip_left
                             	; check going bottom to top
d356 : a53e             [ 3] 	lda grl_y0
d358 : c540             [ 3] 	cmp grl_y1
d35a : 9002             [ 3] 	bcc gr_line_skip_y_up
d35c : 844d             [ 3] 	sty grl_siny				; make -1
                             
d35e :                       gr_line_skip_y_up
d35e : a541             [ 3] 	lda grl_dx
d360 : 0a               [ 2] 	asl a
d361 : 8544             [ 3] 	sta grl_2dx					; 2*dx (word)
d363 : a900             [ 2] 	lda #0
d365 : 8545             [ 3] 	sta grl_2dx+1
d367 : 2645             [ 5] 	rol grl_2dx+1
                             
d369 : a542             [ 3] 	lda grl_dy
d36b : 0a               [ 2] 	asl a
d36c : 8546             [ 3] 	sta grl_2dy					; 2*dy (word)
d36e : a900             [ 2] 	lda #0
d370 : 8547             [ 3] 	sta grl_2dy+1
d372 : 2647             [ 5] 	rol grl_2dy+1
                             
                             ;    p=2*dy-dx;					; p (word)
d374 : 38               [ 2] 	sec
d375 : a546             [ 3] 	lda grl_2dy
d377 : e541             [ 3] 	sbc grl_dx
d379 : 854b             [ 3] 	sta grl_p
d37b : a547             [ 3] 	lda grl_2dy+1
d37d : e900             [ 2] 	sbc #0
d37f : 854c             [ 3] 	sta grl_p+1
                             
                             ;   2*(dy-dx)					; num_tmp+2 = 2*(dy-dx)
d381 : 38               [ 2] 	sec
d382 : a546             [ 3] 	lda grl_2dy
d384 : e544             [ 3] 	sbc grl_2dx
d386 : 8548             [ 3] 	sta grl_2dxy
d388 : a547             [ 3] 	lda grl_2dy+1
d38a : e545             [ 3] 	sbc grl_2dx+1
d38c : 8549             [ 3] 	sta grl_2dxy+1
                             
d38e :                       gr_line_pixel
d38e : a63d             [ 3] 	ldx grl_x0
d390 : a43e             [ 3] 	ldy grl_y0
d392 : a543             [ 3] 	lda grl_xyyx				; Swapped?
d394 : f004             [ 3] 	beq gr_line_yx_skip
d396 : a63e             [ 3] 	ldx grl_y0
d398 : a43d             [ 3] 	ldy grl_x0
d39a :                       gr_line_yx_skip
d39a : 2014d2           [ 6] 	jsr gr_point				; Plot point x,y
AS65 Assembler for R6502 [1.42].                                     Page  128
-------------------------------- bank\bank0.s --------------------------------

                             
d39d : a53d             [ 3] 	lda grl_x0					; Check if done
d39f : c53f             [ 3] 	cmp grl_x1
d3a1 : f032             [ 3] 	beq gr_line_done
                             
                             	; Increment x always
d3a3 : 18               [ 2] 	clc
d3a4 : a53d             [ 3] 	lda grl_x0
d3a6 : 654a             [ 3] 	adc grl_sinx
d3a8 : 853d             [ 3] 	sta grl_x0
                             
                             	; check sign of p
d3aa : a54c             [ 3] 	lda grl_p+1
d3ac : 3017             [ 3] 	bmi gr_line_neg_p
                             
                             	; if p >=0
                             
                             	; y=y+increment
d3ae : 18               [ 2] 	clc
d3af : a53e             [ 3] 	lda grl_y0
d3b1 : 654d             [ 3] 	adc grl_siny
d3b3 : 853e             [ 3] 	sta grl_y0
                             
                             	; p=p+2*dy-2*dx
                             	_addZPWord grl_p,grl_2dxy
                             
d3c2 : 4c8ed3           [ 3] 	jmp gr_line_pixel
                             
d3c5 :                       gr_line_neg_p
                             	; if p < 0
                             	; p=p+2*dy
                             	_addZPWord grl_p,grl_2dy
                             
                             
d3d2 : 4c8ed3           [ 3] 	jmp gr_line_pixel
d3d5 :                       gr_line_done
d3d5 : 60               [ 6] 	rts
                             
                             
                             ; Line drawing pseudo code
                             ;    while(x<x1)
                             ;    {
                             ;        putpixel(x,y);
                             ;        if(p>=0)
                             ;        {
                             ;            y=y+1;
                             ;            p=p+2*dy-2*dx;
                             ;        }
                             ;        else
                             ;        {
                             ;            p=p+2*dy;
                             ;        }
                             ;        x=x+1;
                             ;    }
                             
                             
                             ;* These tables are to speed up calculating the
                             ;* offset for plot commands
d3d6 :                       gr_offset_40lo
d3d6 : 00285078a0            	db lo(000*40), lo(001*40), lo(002*40), lo(003*40
d3db : c8f0184068            	db lo(005*40), lo(006*40), lo(007*40), lo(008*40
d3e0 : 90b8e00830            	db lo(010*40), lo(011*40), lo(012*40), lo(013*40
AS65 Assembler for R6502 [1.42].                                     Page  129
-------------------------------- bank\bank0.s --------------------------------

d3e5 : 5880a8d0f8            	db lo(015*40), lo(016*40), lo(017*40), lo(018*40
d3ea : 20487098c0            	db lo(020*40), lo(021*40), lo(022*40), lo(023*40
d3ef : e81038                	db lo(025*40), lo(026*40), lo(027*40)
d3f2 :                       gr_offset_40hi
d3f2 : 0000000000            	db hi(000*40), hi(001*40), hi(002*40), hi(003*40
d3f7 : 0000010101            	db hi(005*40), hi(006*40), hi(007*40), hi(008*40
d3fc : 0101010202            	db hi(010*40), hi(011*40), hi(012*40), hi(013*40
d401 : 0202020202            	db hi(015*40), hi(016*40), hi(017*40), hi(018*40
d406 : 0303030303            	db hi(020*40), hi(021*40), hi(022*40), hi(023*40
d40b : 030404                	db hi(025*40), hi(026*40), hi(027*40)
                             
                             
                             ;* Character based sprites for text mode only
d40e :                       mod_sz_sprite_s
                             ;* Initialisation
d40e :                       gr_spr_init
d40e : a21f             [ 2] 	ldx #31							; Start at last sprite
d410 :                       gr_spr_init_loop
d410 : a9ff             [ 2] 	lda #-1							; Put -1 in the x coords
d412 : 9d00b4           [ 5] 	sta spr_curX,x
d415 : 9d20b4           [ 5] 	sta spr_newX,x
d418 : ca               [ 2] 	dex								; Next sprite
d419 : 10f5             [ 3] 	bpl gr_spr_init_loop			; Until all 32 sprites in
d41b : 60               [ 6] 	rts
                             
                             
                             ;* Erase all active sprites
d41c :                       gr_spr_erase
                             	; First restore background from sprites
                             	; that are active and new pos is different from 
d41c : a21f             [ 2] 	ldx #31							; Start at last sprite
d41e :                       gr_spr_erase_loop
d41e : bd00b4           [ 4] 	lda spr_curX,x					; Is sprite active?
d421 : 3007             [ 3] 	bmi gr_spr_erase_next
d423 : a8               [ 2] 	tay								; x pos in to Y
d424 :                       gr_spr_erase_do
d424 : bda0b4           [ 4] 	lda spr_bgnd,x					; Get the background
d427 : 2072d4           [ 6] 	jsr gr_spr_put					; And restore it
d42a :                       gr_spr_erase_next
d42a : ca               [ 2] 	dex
d42b : 10f1             [ 3] 	bpl gr_spr_erase_loop
d42d : 60               [ 6] 	rts
                             
                             ;* Get ready for new position
d42e :                       gr_spr_new
d42e : a21f             [ 2] 	ldx #31							; Start at last sprite
d430 :                       gr_spr_new_loop
d430 : bd60b4           [ 4] 	lda spr_newY,x					; Get new Y
d433 : 9d40b4           [ 5] 	sta spr_curY,x					; Update new->cur Y
d436 : a8               [ 2] 	tay								; Used for address calc.
d437 : bd20b4           [ 4] 	lda spr_newX,x					; Get new X
d43a : 9d00b4           [ 5] 	sta spr_curX,x					; Update new->cur X
d43d : 301d             [ 3] 	bmi gr_spr_new_next				; Is the new position act
d43f : 48               [ 3] 	pha 							; x pos saved for later
                             	; Calculate screen address
                             	; save as part of sprite data and in zp area
d440 : 18               [ 2] 	clc
d441 : b9d6d3           [ 4] 	lda gr_offset_40lo,y
d444 : 6980             [ 2] 	adc #lo(TEXTSCRN)
d446 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d448 : 9dc0b4           [ 5] 	sta spr_baseadrl,x
d44b : b9f2d3           [ 4] 	lda gr_offset_40hi,y
AS65 Assembler for R6502 [1.42].                                     Page  130
-------------------------------- bank\bank0.s --------------------------------

d44e : 69bb             [ 2] 	adc #hi(TEXTSCRN)
d450 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
d452 : 9de0b4           [ 5] 	sta spr_baseadrh,x
d455 : 68               [ 4] 	pla								; Get x pos back in to Y reg
d456 : a8               [ 2] 	tay
d457 : b126             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y	; Get background
d459 : 9da0b4           [ 5] 	sta spr_bgnd,x					; And save this
d45c :                       gr_spr_new_next
d45c : ca               [ 2] 	dex
d45d : 10d1             [ 3] 	bpl gr_spr_new_loop
d45f : 60               [ 6] 	rts
                             
                             
                             ; Draw all active sprites
                             ; Active sprites are always drawn - 0 = highest p
d460 :                       gr_spr_draw
d460 : a21f             [ 2] 	ldx #31							; Start at last sprite
d462 :                       gr_spr_draw_loop
d462 : bd20b4           [ 4] 	lda spr_newX,x					; Is sprite active?
d465 : 3007             [ 3] 	bmi gr_spr_draw_next
d467 : a8               [ 2] 	tay								; X pos in to Y
d468 : bd80b4           [ 4] 	lda spr_chr,x					; Get the sprite char
d46b : 2072d4           [ 6] 	jsr gr_spr_put
d46e :                       gr_spr_draw_next
d46e : ca               [ 2] 	dex
d46f : 10f1             [ 3] 	bpl gr_spr_draw_loop
d471 : 60               [ 6] 	rts
                             
                             
                             ;* Common routine to put A to screen address
                             ;* Used for erase and draw of sprites
                             ;* X=index in to sprite table
                             ;* Y=X offset from screen pointer
d472 :                       gr_spr_put
d472 : 48               [ 3] 	pha
d473 : bdc0b4           [ 4] 	lda spr_baseadrl,x		; Get the screen pointer
d476 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d478 : bde0b4           [ 4] 	lda spr_baseadrh,x
d47b : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
d47d : 68               [ 4] 	pla								; Get back the char to
d47e : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y	; put on to scre
d480 : 60               [ 6] 	rts
                             
                             
                             ;* Update spr A with char X
d481 :                       gr_spr_char
d481 : a8               [ 2] 	tay
d482 : 8a               [ 2] 	txa
d483 : 9980b4           [ 5] 	sta spr_chr,y
d486 : 60               [ 6] 	rts
                             
                             ;* Locate what is at the location of sprite A, re
                             ;* C=1 if sprite it not active
d487 :                       gr_spr_hit
d487 : aa               [ 2] 	tax
d488 : bd00b4           [ 4] 	lda spr_curX,x
d48b : c980             [ 2] 	cmp #0x80						; If A>=0x80 then C=1
d48d : bda0b4           [ 4] 	lda spr_bgnd,x
d490 : 60               [ 6] 	rts
                             
                             ;* Update spr A with coords X,Y
d491 :                       gr_spr_pos
AS65 Assembler for R6502 [1.42].                                     Page  131
-------------------------------- bank\bank0.s --------------------------------

d491 : 8432             [ 3] 	sty tmp_alo
d493 : a8               [ 2] 	tay
d494 : 8a               [ 2] 	txa								; X coord still in X reg
d495 : 9920b4           [ 5] 	sta spr_newX,y
d498 : a532             [ 3] 	lda tmp_alo						; Y coord from temp
d49a : 9960b4           [ 5] 	sta spr_newY,y
d49d : 60               [ 6] 	rts
                             
                             ;* Update all sprite positions from df_tmpptra, d
d49e :                       gr_spr_multi_pos
d49e : a03e             [ 2] 	ldy #62
d4a0 : a21f             [ 2] 	ldx #31
d4a2 :                       gr_spr_multi_loop
d4a2 : b1a2             [ 5] 	lda (df_tmpptra),y
d4a4 : 9d20b4           [ 5] 	sta spr_newX,x
d4a7 : b1a4             [ 5] 	lda (df_tmpptrb),y
d4a9 : 9d60b4           [ 5] 	sta spr_newY,x
d4ac : 88               [ 2] 	dey
d4ad : 88               [ 2] 	dey
d4ae : ca               [ 2] 	dex
d4af : 10f1             [ 3] 	bpl gr_spr_multi_loop
d4b1 : 60               [ 6] 	rts
                             
d4b2 :                       mod_sz_sprite_e
d4b2 :                       mod_sz_graph_e
                             
                             ; Old version of point calculator - in case I nee
                             ;	; Calculate destination address
                             ;	lda #0
                             ;	sta tmp_ahi
                             ;
                             ;	tya				; Row number in A
                             ;	; Multiply 8
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	sta tmp_alo
                             ;
                             ;	; Multiply 32
                             ;	; Use partial result from m8
                             ;	lda tmp_ahi
                             ;	sta tmp_bhi
                             ;	lda tmp_alo
                             ;	; Just two more rotates to get m32
                             ;	asl a
                             ;	rol tmp_bhi
                             ;	asl a
                             ;	rol tmp_bhi
                             ;	sta tmp_blo
                             ;	; Add m8 and m32 for m40
                             ;	clc
                             ;	lda tmp_alo
                             ;	adc tmp_blo
                             ;	sta tmp_alo
                             ;	lda tmp_ahi
                             ;	adc tmp_bhi
                             ;	; Add high byte of screen address
                             ;	adc gr_scrngeom+vdp_scrn+1
                             ;	sta tmp_ahi
AS65 Assembler for R6502 [1.42].                                     Page  132
-------------------------------- bank\bank0.s --------------------------------

                             ;	; Dest offset in tmp_alo
                             ;
                             ;	; pixel x coord in to A
                             ;	; We dvide by 48 doing trial subtracts
                             ;	; This leaves Y with a number 0..5
                             ;	; And A has the remainder 0..47
                             ;	; Use these to look up byte column and mask
                             ;	; We don't do more than 5 trial subtracts
                             ;	; plus the table size is much smaller
                             ;	; Comprimise of space vs speed
                             ;	txa
                             ;	ldy #0				; Start at segment 0
                             ;	sec
                             ;gr_point_d48
                             ;	sbc #48
                             ;	iny
                             ;	bcs gr_point_d48				; Keep going until underflo
                             ;
                             ;	dey								; Adjust segment count
                             ;	adc #48							; Get remainder in A
                             ;	tax								; Put remainder in to X (0..47)
                             ;	lda gr_col_seg,y				; Get the start column of s
                             ;	clc
                             ;	adc gr_col_offset,x				; Add segment offset usi
                             ;	tay								; We have the byte column in Y
                             ;	sty tmp_bhi						; Save in tmp, also still in Y
                             ;	stx tmp_blo						; Save remainder 0..47
                             ;	rts
                             
                             ;gr_point_mask
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;gr_col_offset
                             ;	db 0,0,0,0,0,0
                             ;	db 1,1,1,1,1,1
                             ;	db 2,2,2,2,2,2
                             ;	db 3,3,3,3,3,3
                             ;	db 4,4,4,4,4,4
                             ;	db 5,5,5,5,5,5
                             ;	db 6,6,6,6,6,6
                             ;	db 7,7,7,7,7,7
                             ;gr_col_seg
                             ;	db 0,8,16,24,32
                             
                             	include "monitor/cmd.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  CMD.S
                             ;*	A really simple monitor that needs to be impro
                             ;*	optimised.  Only has these commands;
AS65 Assembler for R6502 [1.42].                                     Page  133
-------------------------------- bank\bank0.s --------------------------------

                             ;*		dxxxx			Dump memory location xxxx
                             ;*						Press enter for more else stop
                             ;*		sxxxx [yy]		Set memory location xxxx with hex
                             ;*						bytes, respond with next location
                             ;*		q				Quit
                             ;*	Now you see why this needs optimising!
                             ;*
                             ;************************************************
                             
0095 =                       cmd_lo					= df_currdat
0096 =                       cmd_hi					= (df_currdat+1)
                             
                             	; ROM code
                             	code  
                             
d4b2 :                       _mod_sz_cmd_s
                             
d4b2 :                       command_line
                             
d4b2 :                       cmd_ready
                             	_println_low msg_ready
                             
                             
d4b9 : 38               [ 2] 	sec							; Set carry flag = echo characters
d4ba : 203fc4           [ 6] 	jsr io_read_line			; Get a command line
d4bd : a000             [ 2] 	ldy #0
d4bf : b139             [ 5] 	lda (buf_lo),y
d4c1 : c971             [ 2] 	cmp #'q'
d4c3 : d001             [ 3] 	bne cmd_check_cmd
d4c5 : 60               [ 6] 	rts
d4c6 :                       cmd_check_cmd
d4c6 : 20d8d4           [ 6] 	jsr cmd_parse				; Find command and execute
d4c9 : b003             [ 3] 	bcs cmd_error				; Carry set = error condition
d4cb : 4cb2d4           [ 3] 	jmp cmd_ready
                             
d4ce :                       cmd_error
                             	_println_low msg_errmsg
                             
d4d5 : 4cb2d4           [ 3] 	jmp cmd_ready
                             
                             
                             ;****************************************
                             ;* cmd_parse
                             ;* Parse the command line in the io buffer
                             ;* Regs affected : 
                             ;****************************************
d4d8 :                       cmd_parse
d4d8 : c8               [ 2] 	iny						; Ready for next char
                             	
d4d9 :                       cmd_check_d
d4d9 : c964             [ 2] 	cmp #'d'				; Check for d
d4db : f030             [ 4] 	beq cmd_dumpmem
d4dd :                       cmd_check_s
d4dd : c973             [ 2] 	cmp #'s'				; Check for s
d4df : f006             [ 3] 	beq cmd_setmem
                             
d4e1 :                       cmd_not_found
d4e1 : a901             [ 2] 	lda #CMD_ERR_NOTFOUND
d4e3 : 855e             [ 3] 	sta errno
d4e5 : 38               [ 2] 	sec
d4e6 : 60               [ 6] 	rts
                             	
AS65 Assembler for R6502 [1.42].                                     Page  134
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* cmd_setmem
                             ;* Set the memory at address AAAA to byte string
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;*          x = index to routine pointer
                             ;* Regs affected : A
                             ;****************************************
d4e7 :                       cmd_setmem
d4e7 : 209ed5           [ 6] 	jsr cmd_parse_word
d4ea : b01f             [ 4] 	bcs cmd_setmem_err
d4ec :                       cmd_setmem_byte
d4ec : 2082d5           [ 6] 	jsr cmd_parse_byte
d4ef : b01a             [ 4] 	bcs cmd_setmem_err
d4f1 : 2079d5           [ 6] 	jsr cmd_poke				; Poke A in to cmd_lo, hi
d4f4 : 206dd5           [ 6] 	jsr cmd_incmem
d4f7 : 20b0d5           [ 6] 	jsr cmd_parse_next_parm		; Try and find another 
d4fa : 90f0             [ 3] 	bcc cmd_setmem_byte			; Process if found, else f
d4fc : a596             [ 3] 	lda cmd_hi
d4fe : 2070c1           [ 6] 	jsr utilPrintA
d501 : a595             [ 3] 	lda cmd_lo
d503 : 2070c1           [ 6] 	jsr utilPrintA
d506 : 2068c1           [ 6] 	jsr utilPrintCRLF
d509 : 18               [ 2] 	clc
d50a : 60               [ 6] 	rts
d50b :                       cmd_setmem_err
d50b : 38               [ 2] 	sec
d50c : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* cmd_dumpmem
                             ;* Dump memory at address AAAA
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
d50d :                       cmd_dumpmem
d50d : 209ed5           [ 6] 	jsr cmd_parse_word			; Get address to dump
d510 : 9001             [ 3] 	bcc cmd_dumpmem_block
d512 : 60               [ 6] 	rts							; C is set
d513 :                       cmd_dumpmem_block
d513 : a596             [ 3] 	lda cmd_hi					; Show the address
d515 : 2070c1           [ 6] 	jsr utilPrintA
d518 : a595             [ 3] 	lda cmd_lo
d51a : 2070c1           [ 6] 	jsr utilPrintA
d51d : 2060c1           [ 6] 	jsr utilPrintSPC
                             	
d520 : a008             [ 2] 	ldy #8						; 8 Bytes per line
d522 :                       cmd_dumpmem_byte
d522 : 2074d5           [ 6] 	jsr cmd_peek
d525 : 2070c1           [ 6] 	jsr utilPrintA
d528 : 2060c1           [ 6] 	jsr utilPrintSPC
d52b : 206dd5           [ 6] 	jsr cmd_incmem
d52e : 88               [ 2] 	dey
d52f : d0f1             [ 3] 	bne cmd_dumpmem_byte
d531 :                       cmd_dumpmemASCII
d531 : 38               [ 2] 	sec							; Move pointer back to start
d532 : a595             [ 3] 	lda cmd_lo
d534 : e908             [ 2] 	sbc #8
d536 : 8595             [ 3] 	sta cmd_lo
d538 : a596             [ 3] 	lda cmd_hi
AS65 Assembler for R6502 [1.42].                                     Page  135
-------------------------------- bank\bank0.s --------------------------------

d53a : e900             [ 2] 	sbc #0
d53c : 8596             [ 3] 	sta cmd_hi
                             	
d53e : 2060c1           [ 6] 	jsr utilPrintSPC
d541 : a008             [ 2] 	ldy #8						; 8 Bytes per line
d543 :                       cmd_dumpmem_ascii
d543 : 2074d5           [ 6] 	jsr cmd_peek
d546 : a22e             [ 2] 	ldx #'.'					; Non-printable char
d548 : c920             [ 2] 	cmp #' '					; A<32 is unprintable
d54a : b001             [ 3] 	bcs cmd_dump_skip_ctrl
d54c : 8a               [ 2] 	txa							; Replace with dot
d54d :                       cmd_dump_skip_ctrl
d54d : c97f             [ 2] 	cmp #UTF_DEL				; >= DEL is unprintable
d54f : 9001             [ 3] 	bcc cmd_dump_skip_del
d551 : 8a               [ 2] 	txa							; Replace with dot
d552 :                       cmd_dump_skip_del	
d552 : 202ac4           [ 6] 	jsr io_put_ch
d555 : 206dd5           [ 6] 	jsr cmd_incmem
d558 : 88               [ 2] 	dey		
d559 : d0e8             [ 3] 	bne cmd_dumpmem_ascii		; Show 8 bytes
d55b : 38               [ 2] 	sec
d55c : 2027c4           [ 6] 	jsr io_get_ch				; Wait for key press
d55f : c90d             [ 2] 	cmp #UTF_CR		
d561 : d003             [ 3] 	bne cmd_dumpmemFin			; Any key but enter finishe
                             ;	jsr io_put_ch				; Do new line
d563 : 4c13d5           [ 3] 	jmp cmd_dumpmem_block
d566 :                       cmd_dumpmemFin
d566 : a90d             [ 2] 	lda #UTF_CR
d568 : 202ac4           [ 6] 	jsr io_put_ch
d56b : 18               [ 2] 	clc
d56c : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* cmd_incmem
                             ;* Increment pointer
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : cmd_lo, cmd_hi
                             ;* Regs affected : 
                             ;****************************************
d56d :                       cmd_incmem
                             	_incZPWord cmd_lo
                             
d573 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_peek
                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
d574 :                       cmd_peek
d574 : a200             [ 2] 	ldx #0
d576 : a195             [ 6] 	lda (cmd_lo,x)
d578 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_poke
                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi, A
                             ;* Output : A
AS65 Assembler for R6502 [1.42].                                     Page  136
-------------------------------- bank\bank0.s --------------------------------

                             ;* Regs affected : 
                             ;****************************************
d579 :                       cmd_poke
d579 : 8638             [ 3] 	stx tmp_d
d57b : a200             [ 2] 	ldx #0
d57d : 8195             [ 6] 	sta (cmd_lo,x)
d57f : a638             [ 3] 	ldx tmp_d
d581 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_byte
                             ;* Find 2 char hex byte
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = value
                             ;* Regs affected : A,Y
                             ;****************************************
d582 :                       cmd_parse_byte
d582 : 20b0d5           [ 6] 	jsr cmd_parse_next_parm	; Find the next paramete
d585 : b015             [ 3] 	bcs cmd_parse_byte_err
d587 : b139             [ 5] 	lda (buf_lo),y			; Get hi nibble of high byte
d589 : f011             [ 3] 	beq cmd_parse_byte_err	; If no char then error w
d58b : 48               [ 3] 	pha						; Save on stack
d58c : c8               [ 2] 	iny
d58d : b139             [ 5] 	lda (buf_lo),y			; Get lo nibble of high byte
d58f : f00a             [ 3] 	beq cmd_parse_byte_errp	; If no char then error 
d591 : aa               [ 2] 	tax						; Lo nibble goes to X
d592 : 68               [ 4] 	pla						; Restore hi nibble
d593 : 20a1c1           [ 6] 	jsr str_x_to_a			; Convert from hex to A
d596 : b004             [ 3] 	bcs cmd_parse_byte_err	; If error then stop
d598 : c8               [ 2] 	iny						; Point to next char
d599 : 18               [ 2] 	clc
d59a : 60               [ 6] 	rts						; A contains the byte
d59b :                       cmd_parse_byte_errp
d59b : 68               [ 4] 	pla
d59c :                       cmd_parse_byte_err
d59c : aa               [ 2] 	tax
d59d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_word
                             ;* Find 4 char hex word
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = hi, X = 
                             ;* Regs affected : A,X,Y
                             ;****************************************
d59e :                       cmd_parse_word
d59e : 2082d5           [ 6] 	jsr cmd_parse_byte			; Get hi byte of word
d5a1 : b00b             [ 3] 	bcs cmd_word_err
d5a3 : 8596             [ 3] 	sta cmd_hi					; Save hi byte of word
d5a5 : 2082d5           [ 6] 	jsr cmd_parse_byte			; Get lo byte of word
d5a8 : b004             [ 3] 	bcs cmd_word_err
d5aa : 8595             [ 3] 	sta cmd_lo
d5ac : 18               [ 2] 	clc
d5ad : 60               [ 6] 	rts
d5ae :                       cmd_word_err
d5ae : 38               [ 2] 	sec
d5af : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_next_parm
                             ;* Find next non-white space
                             ;* Input : buflo, bufhi, y offset
AS65 Assembler for R6502 [1.42].                                     Page  137
-------------------------------- bank\bank0.s --------------------------------

                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
d5b0 :                       cmd_parse_next_parm
d5b0 : 88               [ 2] 	dey
d5b1 :                       cmd_find_parm
d5b1 : c8               [ 2] 	iny
d5b2 : b139             [ 5] 	lda (buf_lo),y
d5b4 : f005             [ 3] 	beq cmd_next_parm_err	; If z then no parms, fin 
d5b6 : c921             [ 2] 	cmp #' '+1				; Ignore space or less
d5b8 : f0f7             [ 3] 	beq cmd_find_parm
d5ba : 18               [ 2] 	clc						; else ok, C is cleared
d5bb :                       cmd_next_parm_err
d5bb : 60               [ 6] 	rts
                             
                             	
d5bc : 3e00                  msg_ready				db ">\x0"
d5be : 3f0d00                msg_errmsg				db "?\xd\x0"
d5c1 :                       _mod_sz_cmd_e
                             
                             	include "sound/sound.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  SOUND.S
                             ;*  Sound driver module - routines to access the 
                             ;*  This sound chip was found in a number of popu
                             ;*  in the early to mid 80s, including my first c
                             ;*  the Oric-1, as well as the MSX range.
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
d5c1 :                       mod_sz_sound_s
                             
                             
                             ;****************************************
                             ;* snd_get_note
                             ;* Get a note from the music scale table
                             ;* Input : Octave in X, note in Y
                             ;*         Octave between 1 and 6
                             ;* Output : A,X = Value hi,lo
                             ;* Regs affected : X
                             ;****************************************
d5c1 :                       snd_get_note
d5c1 : 98               [ 2] 	tya
d5c2 : 0a               [ 2] 	asl a
d5c3 : a8               [ 2] 	tay
                             	; Get note for octave 1
d5c4 : b9f4d5           [ 4] 	lda snd_music_tab,y
d5c7 : 8532             [ 3] 	sta tmp_alo
d5c9 : b9f5d5           [ 4] 	lda snd_music_tab+1,y
                             	
d5cc :                       snd_get_note_oct
AS65 Assembler for R6502 [1.42].                                     Page  138
-------------------------------- bank\bank0.s --------------------------------

d5cc : ca               [ 2] 	dex
d5cd : f006             [ 3] 	beq snd_note_done
                             	; Divide freq by 2 each octave
d5cf : 4a               [ 2] 	lsr a
d5d0 : 6632             [ 5] 	ror tmp_alo
d5d2 : 4cccd5           [ 3] 	jmp snd_get_note_oct
d5d5 :                       snd_note_done
d5d5 : a632             [ 3] 	ldx tmp_alo
d5d7 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* init_snd
                             ;* Initialise sound - after cia 1 has been initia
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d5d8 :                       init_snd
d5d8 : a20f             [ 2] 	ldx #15
d5da :                       init_snd_regs
d5da : bde4d5           [ 4] 	lda snd_init_tab,x
d5dd : 206ec0           [ 6] 	jsr snd_set				; Set X to A
d5e0 : ca               [ 2] 	dex
d5e1 : 10f7             [ 3] 	bpl init_snd_regs		; 16 regs
                             	
d5e3 : 60               [ 6] 	rts						; return from sub
                             
                             	; Register array initialisation values
                             	; Assuming 1Mhz input clock
d5e4 :                       snd_init_tab
d5e4 : 40                    	db 0x40				; R0 = Channel A Tone Low
d5e5 : 00                    	db 0x00				; R1 = Channel A Tone High
d5e6 : 00                    	db 0x00				; R2 = Channel B Tone Low
d5e7 : 01                    	db 0x01				; R3 = Channel B Tone High
d5e8 : 00                    	db 0x00				; R4 = Channel C Tone Low
d5e9 : 02                    	db 0x02				; R5 = Channel C Tone High
d5ea : 00                    	db 0x00				; R6 = Noise period
d5eb : 7e                    	db 0b01111110		; R7 = Control : IOB input, IOA o
d5ec : 1f                    	db 0x1f				; R8 = Channel A Vol
d5ed : 1f                    	db 0x1f				; R9 = Channel B Vol
d5ee : 1f                    	db 0x1f				; R10 = Channel C Vol
d5ef : 00                    	db 0x00				; R11 = Envelope Period Low
d5f0 : 03                    	db 0x03				; R12 = Envelope Period High
d5f1 : 00                    	db 0b00000000		; R13 = Envelope Shape : 0000
d5f2 : ff                    	db 0xff				; R14 = IO Port A - KB lines disabled
d5f3 : 00                    	db 0x00				; R15 = IO Port B ; Initialise to 0 (
                             
d5f4 :                       snd_music_tab
d5f4 : f20b                  	dw 3058				; C		0 (Octave 1 3058Hz)
d5f6 : 460b                  	dw 2886				; C#	1
d5f8 : a40a                  	dw 2724				; D		2
d5fa : 0b0a                  	dw 2571				; D#	3
d5fc : 7b09                  	dw 2427				; E		4
d5fe : f308                  	dw 2291				; F		5
d600 : 7208                  	dw 2162				; F#	6
d602 : f907                  	dw 2041				; G		7
d604 : 8607                  	dw 1926				; G#	8
d606 : 1a07                  	dw 1818				; A		9
d608 : b406                  	dw 1716				; A#	10
d60a : 5406                  	dw 1620				; B		11
d60c : 0000                  	dw 0				; Null  12
AS65 Assembler for R6502 [1.42].                                     Page  139
-------------------------------- bank\bank0.s --------------------------------

                             
d60e :                       mod_sz_sound_e
                             
d60e :                       mod_sz_bios_e
d60e :                       mod_sz_language_s
                             	include "utils/intmath.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  INTMATH.S
                             ;*  Core module for integer maths supported by df
                             ;*  Now supports signed integers in 2s complement
                             ;*  Uses the intmath registers: num_a, num_b, num
                             ;*  Most inputs are through num_a and num_b, with
                             ;*  num_a
                             ;*  Operations: add, sub, swap, 8 bit mult, mult,
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* Add : A + B result in A
                             ;****************************************
                             ;int_add
                             ;	clc
                             ;	lda num_a
                             ;	adc num_b
                             ;	sta num_a
                             ;	lda num_a+1
                             ;	adc num_b+1
                             ;	sta num_a+1
                             ;	rts
                             	
                             ;****************************************
                             ;* Sub : A - B result in A
                             ;****************************************
                             ;int_sub
                             ;	sec
                             ;	lda num_a
                             ;	sbc num_b
                             ;	sta num_a
                             ;	lda num_a+1
                             ;	sbc num_b+1
                             ;	sta num_a+1
                             ;	rts
                             	
                             ;****************************************
                             ;* Swp : A <-> B 
                             ;****************************************
                             ;int_swp
                             ;	lda num_a
                             ;	ldx num_b
                             ;	sta num_b
                             ;	stx num_a
                             ;	lda num_a+1
AS65 Assembler for R6502 [1.42].                                     Page  140
-------------------------------- bank\bank0.s --------------------------------

                             ;	ldx num_b+1
                             ;	sta num_b+1
                             ;	stx num_a+1
                             ;	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;* B assumed to be an 8 bit quantity 
                             ;****************************************
d60e :                       int_fast_mult
                             	_cpyZPWord num_a,num_tmp
                             
d616 : a900             [ 2] 	lda #0
d618 : 853d             [ 3] 	sta num_a
d61a : 853e             [ 3] 	sta num_a+1
d61c : a008             [ 2] 	ldy #8
d61e :                       int_fast_mult_cycle
d61e : 4641             [ 5] 	lsr num_b
d620 : 900d             [ 3] 	bcc int_fast_mult_next
d622 : 18               [ 2] 	clc
d623 : a53d             [ 3] 	lda num_a
d625 : 6549             [ 3] 	adc num_tmp
d627 : 853d             [ 3] 	sta num_a
d629 : a53e             [ 3] 	lda num_a+1
d62b : 654a             [ 3] 	adc num_tmp+1
d62d : 853e             [ 3] 	sta num_a+1
d62f :                       int_fast_mult_next
d62f : 0649             [ 5] 	asl num_tmp
d631 : 264a             [ 5] 	rol num_tmp+1
d633 : 88               [ 2] 	dey
d634 : d0e8             [ 3] 	bne int_fast_mult_cycle
d636 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;****************************************
d637 :                       int_mult
                             	_cpyZPWord num_a,num_tmp
                             
d63f : a900             [ 2] 	lda #0
d641 : 853d             [ 3] 	sta num_a
d643 : 853e             [ 3] 	sta num_a+1
d645 : a010             [ 2] 	ldy #16
d647 :                       int_mult_cycle
d647 : 4642             [ 5] 	lsr num_b+1
d649 : 6641             [ 5] 	ror num_b
d64b : 900d             [ 3] 	bcc int_mult_next
d64d : 18               [ 2] 	clc
d64e : a53d             [ 3] 	lda num_a
d650 : 6549             [ 3] 	adc num_tmp
d652 : 853d             [ 3] 	sta num_a
d654 : a53e             [ 3] 	lda num_a+1
d656 : 654a             [ 3] 	adc num_tmp+1
d658 : 853e             [ 3] 	sta num_a+1
d65a :                       int_mult_next
d65a : 0649             [ 5] 	asl num_tmp
d65c : 264a             [ 5] 	rol num_tmp+1
d65e : 88               [ 2] 	dey
d65f : d0e6             [ 3] 	bne int_mult_cycle
d661 : 60               [ 6] 	rts
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  141
-------------------------------- bank\bank0.s --------------------------------

                             ;* Div : A / B result in A, remainder X
                             ;****************************************
d662 :                       int_div
                             	; adjust signs
d662 : a900             [ 2] 	lda #0
d664 : 8549             [ 3] 	sta num_tmp				; Assume all +ve
d666 : a53e             [ 3] 	lda num_a+1				; Check A hi
d668 : 100f             [ 3] 	bpl int_div_skip_negA
d66a : e649             [ 5] 	inc num_tmp				; Record sign flip
d66c : 38               [ 2] 	sec						; 2's complement A
d66d : a900             [ 2] 	lda #0					; by 0-A
d66f : e53d             [ 3] 	sbc num_a				; A is now +ve
d671 : 853d             [ 3] 	sta num_a
d673 : a900             [ 2] 	lda #0
d675 : e53e             [ 3] 	sbc num_a+1
d677 : 853e             [ 3] 	sta num_a+1	
d679 :                       int_div_skip_negA
d679 : a542             [ 3] 	lda num_b+1				; Check B hi
d67b : 100f             [ 3] 	bpl int_div_skip_negB
d67d : e649             [ 5] 	inc num_tmp				; Record sign flip
d67f : 38               [ 2] 	sec						; 2's complement B
d680 : a900             [ 2] 	lda #0					; by 0-B
d682 : e541             [ 3] 	sbc num_b				; B is now +ve
d684 : 8541             [ 3] 	sta num_b
d686 : a900             [ 2] 	lda #0
d688 : e542             [ 3] 	sbc num_b+1
d68a : 8542             [ 3] 	sta num_b+1
d68c :                       int_div_skip_negB			; num_tmp bit 0=1 for result 
                             	; x is the remainder
d68c : a900             [ 2] 	lda #0
d68e : 8545             [ 3] 	sta num_x
d690 : 8546             [ 3] 	sta num_x+1
                             	; 16 bit division
d692 : a010             [ 2] 	ldy #16
d694 :                       int_div_cycle
                             	; shift a left 1 bit
d694 : 063d             [ 5] 	asl num_a
d696 : 263e             [ 5] 	rol num_a+1
                             	; shift in to remainder
d698 : 2645             [ 5] 	rol num_x
d69a : 2646             [ 5] 	rol num_x+1
                             	; try and subtract b from remainder
d69c : 38               [ 2] 	sec
d69d : a545             [ 3] 	lda num_x
d69f : e541             [ 3] 	sbc num_b
d6a1 : aa               [ 2] 	tax
d6a2 : a546             [ 3] 	lda num_x+1
d6a4 : e542             [ 3] 	sbc num_b+1
d6a6 : 9006             [ 3] 	bcc int_div_skip
                             	; so b did fit in to remainder, save it
d6a8 : 8645             [ 3] 	stx num_x
d6aa : 8546             [ 3] 	sta num_x+1
d6ac : e63d             [ 5] 	inc num_a
d6ae :                       int_div_skip
                             	; carry on for 16 bits
d6ae : 88               [ 2] 	dey
d6af : d0e3             [ 3] 	bne int_div_cycle
                             	; result in a, remainder in x
                             	; check num_tmp bit 0
d6b1 : a549             [ 3] 	lda num_tmp
d6b3 : 2901             [ 2] 	and #1
d6b5 : f00d             [ 3] 	beq int_div_noflip
AS65 Assembler for R6502 [1.42].                                     Page  142
-------------------------------- bank\bank0.s --------------------------------

d6b7 : 38               [ 2] 	sec						; 2's complement A
d6b8 : a900             [ 2] 	lda #0					; by 0-A
d6ba : e53d             [ 3] 	sbc num_a				; A is now +ve
d6bc : 853d             [ 3] 	sta num_a
d6be : a900             [ 2] 	lda #0
d6c0 : e53e             [ 3] 	sbc num_a+1
d6c2 : 853e             [ 3] 	sta num_a+1	
d6c4 :                       int_div_noflip
d6c4 : 60               [ 6] 	rts
                             	
                             
                             	include "dflat/dflat.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.S
                             ;*  This is the main controller code file for dfl
                             ;*  This file includes all the required dflat sou
                             ;*  needed:
                             ;*  - error.s is the error handling module
                             ;*  - var.s is the variable handling module
                             ;*  - tokenise.s is the tokenisation module
                             ;*  - progedit.s is the program editing module
                             ;*  - runtime.s is the runtime module
                             ;*  - stack.s is the stack handling module
                             ;*  The above modules include further source file
                             ;*  needed.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d6c5 :                       mod_sz_dflat_s
                             
                             ;	include "dflat/error.s"  ** included in the mai
                             	include "dflat/var.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  VAR.S
                             ;*  This module handles all the variable manageme
                             ;*  When a new variable is detected during tokeni
                             ;*  is added to the variable tables.  Any subsequ
                             ;*  that variable is tokenised as an index in to 
                             ;*  table.  There are two variable tables:
                             ;*  Variable name table (VNT) keeps track of vari
                             ;*  Variable value table (VVT) maintains variable
                             ;*  including type, dimension (if array) and of c
                             ;*  actual values.  For an array, the value is a 
                             ;*  memory grabbed using the 'malloc' function (s
                             ;*  This approach to variable managemet is direct
AS65 Assembler for R6502 [1.42].                                     Page  143
-------------------------------- bank\bank0.s --------------------------------

                             ;*  Atari 8 bit.  The disadvantage is that during
                             ;*  session you may end up having a much larger v
                             ;*  table than you need.  Why?  Well because say 
                             ;*  a as a new variable, but then later change it
                             ;*  In this case a remains in the variable tables
                             ;*  only ever adds to the table!  However it is e
                             ;*  solved - when you save and then reload from n
                             ;*  program, the variable table is built up as th
                             ;*  is loaded.
                             ;*  The VNT grows DOWN from the top of free memor
                             ;*  the VVT growing UP from just below the VNT.
                             ;*	This means that the VVT for a variable will al
                             ;*	found in a fixed place in the VVT table and me
                             ;*	For the VNT (names) it grows from vvstart at l
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code  
                             
d6c5 :                       mod_sz_var_s
                             
                             
                             ;****************************************
                             ;* Find a variable
                             ;* CC if found, A has index
                             ;****************************************
d6c5 :                       df_var_find
                             	; start at the beginning of the vnt table
                             	; vars are stored in reverse order
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
                             	; start at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
d6d5 :                       df_var_match_vnt
                             	; If reached top of VVT then not found
d6d5 : a5a2             [ 3] 	lda df_tmpptra
d6d7 : c56e             [ 3] 	cmp df_vvtstrt
d6d9 : d006             [ 3] 	bne df_var_match_vnt_do
d6db : a5a3             [ 3] 	lda df_tmpptra+1
d6dd : c56f             [ 3] 	cmp df_vvtstrt+1
d6df : f042             [ 4] 	beq df_var_find_no_vnt
d6e1 :                       df_var_match_vnt_do
                             	; match each char in buffer with vnt
d6e1 : a47d             [ 3] 	ldy df_linoff
d6e3 : a200             [ 2] 	ldx #0
d6e5 :                       df_var_match_vnt_sym
d6e5 : b90004           [ 4] 	lda df_linbuff,y
d6e8 : c1a4             [ 6] 	cmp (df_tmpptrb,x)
d6ea : d017             [ 4] 	bne df_var_vnt_sym_nomatch
                             	; if single char match then increment
                             	; source and search
d6ec : c8               [ 2] 	iny
                             	_incZPWord df_tmpptrb
                             
                             	; if more chars in vnt entry then continue
d6f3 : a1a4             [ 6] 	lda (df_tmpptrb,x)
d6f5 : d0ee             [ 3] 	bne df_var_match_vnt_sym
                             	; if no more chars in vnt entry but
                             	; but chars in buffer then try next vnt
AS65 Assembler for R6502 [1.42].                                     Page  144
-------------------------------- bank\bank0.s --------------------------------

d6f7 : b90004           [ 4] 	lda df_linbuff,y
                             	; check for valid alpha-numeric
d6fa : 20a3d8           [ 6] 	jsr df_tk_isalphanum
                             	; if there is a valid alpha-num then no match
d6fd : b004             [ 4] 	bcs df_var_vnt_sym_nomatch
                             	; else check type
d6ff :                       df_var_check_type
                             	; if not alpha-num then check for type
                             	; string or int postfix didn't match with VNT
                             ;	cmp #'%'
                             ;	beq df_var_vnt_sym_nomatch
d6ff : c924             [ 2] 	cmp #'$'
                             	; ok, all good got a match
d701 : d025             [ 3] 	bne df_var_find_true
d703 :                       df_var_vnt_sym_nomatch
                             	; find the zero terminator
d703 : a1a4             [ 6] 	lda (df_tmpptrb,x)
d705 : f009             [ 3] 	beq	df_var_vnt_entry_end
                             	_incZPWord df_tmpptrb
                             
d70d : 4c03d7           [ 3] 	jmp df_var_vnt_sym_nomatch
d710 :                       df_var_vnt_entry_end
                             	; skip over zero terminator
                             	_incZPWord df_tmpptrb
                             
                             	; update vvt address pointer
d716 : 18               [ 2] 	clc
d717 : a5a2             [ 3] 	lda df_tmpptra
d719 : 6908             [ 2] 	adc #8
d71b : 85a2             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
d71f : e6a3             [ 5] 	inc df_tmpptra+1
d721 : d0b2             [ 4] 	bne df_var_match_vnt		; Always - high byte is no
                             
                             	; if at end of vnt then no matches found
d723 :                       df_var_find_no_vnt
d723 : a900             [ 2] 	lda #0
d725 : aa               [ 2] 	tax
d726 : 38               [ 2] 	sec
d727 : 60               [ 6] 	rts
                             
d728 :                       df_var_find_true
                             	; Get slot address into x,a
d728 : a6a2             [ 3] 	ldx df_tmpptra
d72a : a5a3             [ 3] 	lda df_tmpptra+1
                             	
                             	; Consume characters found in source
d72c : 847d             [ 3] 	sty df_linoff
d72e : 18               [ 2] 	clc
d72f : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Insert a variable name in to vnt
                             ;* X = number of bytes to make room
                             ;* Space allocated is;
                             ;*	8 bytes for the new VVT entry
                             ;*  X bytes for the new VNT entry
                             ;* df_vntstrt is new var name entry
                             ;* df_vvtend is new vvt entry
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  145
-------------------------------- bank\bank0.s --------------------------------

d730 :                       df_var_insert_space
                             	; *** REMEMBER TO DO A SPACE CHECK EVENTUALLY! *
                             
                             	; adjust down the VNT start by VVT size (for ext
                             	; put it in tmpptrb
d730 : 38               [ 2] 	sec
d731 : a56a             [ 3] 	lda df_vntstrt
d733 : e908             [ 2] 	sbc #DFVVT_SZ
d735 : 856a             [ 3] 	sta df_vntstrt
d737 : a56b             [ 3] 	lda df_vntstrt+1
d739 : e900             [ 2] 	sbc #0
d73b : 856b             [ 3] 	sta df_vntstrt+1
                             	
                             	; adjust VNT end by VVT size (for extra VVT entr
                             	; and put it in tmpptrc
d73d : 38               [ 2] 	sec
d73e : a56c             [ 3] 	lda df_vntend
d740 : e908             [ 2] 	sbc #DFVVT_SZ
d742 : 856c             [ 3] 	sta df_vntend
d744 : a56d             [ 3] 	lda df_vntend+1
d746 : e900             [ 2] 	sbc #0
d748 : 856d             [ 3] 	sta df_vntend+1
                             
                             	; Set copy point to new start of VNT
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             
                             	; Now move all bytes from old VNT (higher up) to
d752 :                       df_var_move_byte
                             	; When pointer = vntend then done
d752 : a5a2             [ 3] 	lda df_tmpptra
d754 : c56c             [ 3] 	cmp df_vntend
d756 : d006             [ 3] 	bne df_var_move_byte_do
d758 : a5a3             [ 3] 	lda df_tmpptra+1
d75a : c56d             [ 3] 	cmp df_vntend+1
d75c : f011             [ 3] 	beq df_var_move_byte_fin
d75e :                       df_var_move_byte_do
                             	; First the source byte VVT size higher in memor
d75e : a008             [ 2] 	ldy #DFVVT_SZ
d760 : b1a2             [ 5] 	lda (df_tmpptra),y
                             	; And copy to new position lower in memory
d762 : a000             [ 2] 	ldy #0
d764 : 91a2             [ 5] 	sta (df_tmpptra),y
                             	; Increment memory pointer
                             	_incZPWord df_tmpptra
                             
d76c : 4c52d7           [ 3] 	jmp df_var_move_byte		; Always as C is not touch
d76f :                       df_var_move_byte_fin
                             	
                             	; Now subtract X bytes from VNT start to accommo
d76f : 8638             [ 3] 	stx tmp_d
d771 : 38               [ 2] 	sec
d772 : a56a             [ 3] 	lda df_vntstrt
d774 : e538             [ 3] 	sbc tmp_d
d776 : 856a             [ 3] 	sta df_vntstrt
d778 : a56b             [ 3] 	lda df_vntstrt+1
d77a : e900             [ 2] 	sbc #0
d77c : 856b             [ 3] 	sta df_vntstrt+1
                             
                             	; VVT end is the same as VNT end
                             	_cpyZPWord df_vntend,df_vvtend
                             
AS65 Assembler for R6502 [1.42].                                     Page  146
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; Copy done increment variable count
d786 : e672             [ 5] 	inc df_varcnt
d788 : 18               [ 2] 	clc
d789 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* Iterate through a valid variable name
                             ;* starts with alpha, then any number of
                             ;* alphanums.
                             ;****************************************
d78a :                       df_var_countlen
                             	; count alpha nums
d78a : c8               [ 2] 	iny
d78b : e8               [ 2] 	inx
d78c : b90004           [ 4] 	lda df_linbuff,y
                             	; first char has to be alpha, rest can be alpha-
d78f : e000             [ 2] 	cpx #0
d791 : d006             [ 3] 	bne df_var_countlen_alphanum
d793 : 2096d8           [ 6] 	jsr df_tk_isalpha
d796 : 4c9cd7           [ 3] 	jmp df_var_countlen_loop
d799 :                       df_var_countlen_alphanum
d799 : 20a3d8           [ 6] 	jsr df_tk_isalphanum
d79c :                       df_var_countlen_loop
d79c : b0ec             [ 3] 	bcs df_var_countlen
d79e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Analyse variable name
                             ;* Return type in A
                             ;* NOT C = It is a variable
                             ;* C = It is not a variable
                             ;* X = Length including pre-fixes
                             ;* Y = Offset to next char after var name
                             ;****************************************
d79f :                       df_var_analyse
                             	; start at the current buffer position
d79f : a47d             [ 3] 	ldy df_linoff
                             	
                             	; actual number of alpha nums = -1 to start
d7a1 : a2ff             [ 2] 	ldx #-1
                             
                             	; Default type is INT
d7a3 : a901             [ 2] 	lda #DFVVT_INT
d7a5 : 85a2             [ 3] 	sta df_tmpptra
                             	
                             	; check for PROC prefix
d7a7 : b90004           [ 4] 	lda df_linbuff,y
d7aa : c95f             [ 2] 	cmp #'_'
                             	; if it is not proc then get the name
d7ac : d011             [ 3] 	bne df_var_not_proc
                             	; analyse for proc variable names
                             	; else set type to PROC
d7ae : a940             [ 2] 	lda #DFVVT_PROC
d7b0 : 85a2             [ 3] 	sta df_tmpptra
d7b2 : 208ad7           [ 6] 	jsr df_var_countlen
                             	; Length must be >=1
d7b5 : e001             [ 2] 	cpx #1
d7b7 : 9004             [ 3] 	bcc df_var_analyse_fatal_err
                             	; Next char has to be '('
d7b9 : c928             [ 2] 	cmp #'('
AS65 Assembler for R6502 [1.42].                                     Page  147
-------------------------------- bank\bank0.s --------------------------------

d7bb : f022             [ 3] 	beq df_var_finalise_len
d7bd :                       df_var_analyse_fatal_err
                             	SWBRK DFERR_SYNTAX
                             
                             	; Analyse for non-proc variable names
d7bf :                       df_var_not_proc
                             	; go back on pos on index as loop always does in
d7bf : 88               [ 2] 	dey
d7c0 : 208ad7           [ 6] 	jsr df_var_countlen
d7c3 : e000             [ 2] 	cpx #0
d7c5 : d002             [ 3] 	bne df_var_analyse_chk_post
                             	; if zero alphanums error but not fatal
d7c7 : 38               [ 2] 	sec
d7c8 : 60               [ 6] 	rts
                             	; check for post qualifiers e.g. $
d7c9 :                       df_var_analyse_chk_post
                             	; first see if the char is $
                             	; but cannot already have PROC prefix
                             ;	cmp #'%'
                             ;	bne df_var_analyse_chk_dollar
                             ; Set to INT type although it is the default alre
                             ;	lda #DFVVT_INT
                             ;	sta df_tmpptra
                             	; advance the buffer index
                             ;	iny
                             ;	bne df_var_analyse_chk_arry
d7c9 :                       df_var_analyse_chk_dollar
                             	; now see if the char is $
                             	; but cannot already have PROC prefix
d7c9 : c924             [ 2] 	cmp #'$'
d7cb : d005             [ 3] 	bne df_var_analyse_chk_arry
                             	; Set to STRING type
d7cd : a904             [ 2] 	lda #DFVVT_STR
d7cf : 85a2             [ 3] 	sta df_tmpptra
                             	; advance the buffer index
d7d1 : c8               [ 2] 	iny
d7d2 :                       df_var_analyse_chk_arry
                             	; Check for array type vs PROC
d7d2 : b90004           [ 4] 	lda df_linbuff,y
d7d5 : c95b             [ 2] 	cmp #'['
d7d7 : d006             [ 3] 	bne df_var_finalise_len
d7d9 : a5a2             [ 3] 	lda df_tmpptra
d7db : 0980             [ 2] 	ora #DFVVT_PTR
d7dd : 85a2             [ 3] 	sta df_tmpptra
d7df :                       df_var_finalise_len
                             	; Ok got everything
                             	; calculate length from y
                             	; y is next char after var name
d7df : 98               [ 2] 	tya
d7e0 : 38               [ 2] 	sec
d7e1 : e57d             [ 3] 	sbc df_linoff			; where we started
                             	; put len in X
d7e3 : aa               [ 2] 	tax
                             	; put type in A
d7e4 : a5a2             [ 3] 	lda df_tmpptra
d7e6 : 18               [ 2] 	clc
d7e7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find or create a variable
                             ;* If found then type needs to match mask
                             ;* Not a fatal error because could be part
AS65 Assembler for R6502 [1.42].                                     Page  148
-------------------------------- bank\bank0.s --------------------------------

                             ;* of a trial of different parsing options
                             ;****************************************
d7e8 :                       df_var_findcreate
                             	; save mask
d7e8 : 48               [ 3] 	pha
d7e9 : 20c5d6           [ 6] 	jsr df_var_find
d7ec : b013             [ 4] 	bcs df_var_findcreate_create
                             	; restore mask to check for 0 then push
d7ee : 68               [ 4] 	pla
d7ef : 48               [ 3] 	pha
                             	; don't check mask if zero
d7f0 : f008             [ 3] 	beq df_var_findcreate_found
                             	; restore mask
d7f2 : 68               [ 4] 	pla
d7f3 : a000             [ 2] 	ldy #DFVVT_TYPE
d7f5 : 31a2             [ 5] 	and (df_tmpptra),y
                             	; but if mask is non zero then this must be non 
d7f7 : f019             [ 4] 	beq df_var_findcreate_err
d7f9 : 48               [ 3] 	pha		; Dummy push to match the pla
d7fa :                       df_var_findcreate_found
                             	; discard mask
d7fa : 68               [ 4] 	pla	
                             	; put slot address in x,a
d7fb : a6a2             [ 3] 	ldx df_tmpptra
d7fd : a5a3             [ 3] 	lda df_tmpptra+1
d7ff : 18               [ 2] 	clc
d800 : 60               [ 6] 	rts
                             	
                             	;* If no existing variable found, add one to VNT
d801 :                       df_var_findcreate_create
                             	; find type (A) and length (X)
d801 : 209fd7           [ 6] 	jsr df_var_analyse
                             	; keep A temporarily
d804 : 85a2             [ 3] 	sta df_tmpptra
                             	; if not a variable then return with C=1
d806 : b009             [ 3] 	bcs df_var_findcreate_errp
                             	; check if mask needs to be applied
d808 : 68               [ 4] 	pla
d809 : f009             [ 3] 	beq df_var_analyse_ok
                             	; else mask and check
d80b : 25a2             [ 3] 	and df_tmpptra
                             	; mask match is ok
d80d : d005             [ 3] 	bne df_var_analyse_ok
                             	; else return not found
d80f : f001             [ 3] 	beq df_var_findcreate_err
d811 :                       df_var_findcreate_errp
d811 : 68               [ 4] 	pla
d812 :                       df_var_findcreate_err
d812 : 38               [ 2] 	sec
d813 : 60               [ 6] 	rts
                             
d814 :                       df_var_analyse_ok
                             	; extra space for zero terminator
d814 : e8               [ 2] 	inx
                             	; save data in reverse order to when needed
                             	; by the initialise section x,a (var name sz, ty
                             	; insert space of X bytes
d815 : a5a2             [ 3] 	lda df_tmpptra
d817 : 48               [ 3] 	pha
d818 : 8a               [ 2] 	txa
d819 : 48               [ 3] 	pha
                             	
AS65 Assembler for R6502 [1.42].                                     Page  149
-------------------------------- bank\bank0.s --------------------------------

d81a : 2030d7           [ 6] 	jsr df_var_insert_space
d81d : 9002             [ 3] 	bcc df_var_initialise_var
                             	; error inserting space
                             	SWBRK DFERR_OK
                             
                             	
d821 :                       df_var_initialise_var
d821 : 68               [ 4] 	pla
d822 : 85a6             [ 3] 	sta df_tmpptrc				; var name size + 1
                             
d824 : 68               [ 4] 	pla							; type
d825 : a000             [ 2] 	ldy #DFVVT_TYPE
d827 : 9170             [ 5] 	sta (df_vvtend),y			; put type in vvt slot
d829 : a900             [ 2] 	lda #0						; zero the rest
d82b : a007             [ 2] 	ldy #7
d82d :                       df_var_zero_vnt
d82d : 9170             [ 5] 	sta (df_vvtend),y
d82f : 88               [ 2] 	dey
d830 : d0fb             [ 3] 	bne df_var_zero_vnt			; Don't zero out the type
                             
d832 : c6a6             [ 5] 	dec df_tmpptrc				; 1 less to copy variable name
                             
d834 : a67d             [ 3] 	ldx df_linoff				; Start at var name beginning, 
                             	; copy variable name to vnt slot
d836 :                       df_var_findcreate_copy
d836 : bd0004           [ 4] 	lda df_linbuff,x
d839 : 916a             [ 5] 	sta (df_vntstrt),y
d83b : e8               [ 2] 	inx
d83c : c8               [ 2] 	iny
d83d : c6a6             [ 5] 	dec df_tmpptrc
d83f : d0f5             [ 3] 	bne df_var_findcreate_copy
                             	; put in zero terminator
d841 : a900             [ 2] 	lda #0
d843 : 916a             [ 5] 	sta (df_vntstrt),y
                             
d845 : 867d             [ 3] 	stx df_linoff				; Update line pointer
                             
                             	; Return address of slot in X,A
d847 : a670             [ 3] 	ldx df_vvtend
d849 : a571             [ 3] 	lda df_vvtend+1
                             	
d84b : 18               [ 2] 	clc
d84c : 60               [ 6] 	rts
                             	
d84d :                       mod_sz_var_e
                             
                             	include "dflat/tokenise.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKENISE.S
                             ;*  Controlling module for tokenisation.  Basical
                             ;*  module is given a raw input buffer, which it 
                             ;*  attempt to tokenise fully.  Any syntax errors
                             ;*  thrown at the first point of detection.  If a
                             ;*  well, the parsed input will be in a tokenised
                             ;*  which can be executed in immediate mode or sa
AS65 Assembler for R6502 [1.42].                                     Page  150
-------------------------------- bank\bank0.s --------------------------------

                             ;*  line number order to memory.
                             ;*  dflat syntax is very simple - every statement
                             ;*  with a keyword.  The only exception is assign
                             ;*  procedure invocation - but even these scenari
                             ;*  tokenised so during runtime we just execute t
                             ;*  The raw buffer is consumed one byte at a time
                             ;*  tokenised buffer is written one byte at a tim
                             ;*  syntax means there is no need to undo reads o
                             ;*  or tokenised buffer.  The only refinement is 
                             ;*  allowed to peek a character in the raw buffer
                             ;*  consuming it.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d84d :                       mod_sz_tokenise_s
                             
                             
                             ;****************************************
                             ;* df_tk_peek_buf
                             ;* Return next char in A but no change to pointer
                             ;****************************************
d84d :                       df_tk_peek_buf
d84d : a47d             [ 3] 	ldy df_linoff
d84f : b90004           [ 4] 	lda df_linbuff,y
d852 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_get_buf
                             ;* Return next char in A and inc pointer
                             ;* Don't advance if null char found and Z=1
                             ;****************************************
d853 :                       df_tk_get_buf
d853 : a47d             [ 3] 	ldy df_linoff
d855 : b90004           [ 4] 	lda df_linbuff,y
d858 : f003             [ 3] 	beq df_tk_get_buf_null
d85a : c8               [ 2] 	iny
d85b : 847d             [ 3] 	sty df_linoff
d85d :                       df_tk_get_buf_null
d85d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_put_tok
                             ;* Put A in token buffer and inc pointer
                             ;* C=Clear on exit
                             ;****************************************
d85e :                       df_tk_put_tok
d85e : a47e             [ 3] 	ldy df_tokoff
d860 : 998004           [ 5] 	sta df_tokbuff,y
d863 : c8               [ 2] 	iny
d864 : 3004             [ 3] 	bmi df_tk_put_overflow
d866 : 847e             [ 3] 	sty df_tokoff
d868 : 18               [ 2] 	clc
d869 : 60               [ 6] 	rts
d86a :                       df_tk_put_overflow
                             	SWBRK DFERR_STRLONG
                             
                             
                             ;****************************************
                             ;* df_tk_isdigit
AS65 Assembler for R6502 [1.42].                                     Page  151
-------------------------------- bank\bank0.s --------------------------------

                             ;* Check char in A for number 0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
d86c :                       df_tk_isdigit
d86c : c93a             [ 2] 	cmp #'9'+1
d86e : b005             [ 3] 	bcs df_tk_isdigit_false
d870 : c930             [ 2] 	cmp #'0'
d872 : 9001             [ 3] 	bcc df_tk_isdigit_false
d874 : 60               [ 6] 	rts						; C must be 1
d875 :                       df_tk_isdigit_false
d875 : 18               [ 2] 	clc
d876 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isbin
                             ;* Check char in A for binary digit
                             ;* Return: CC = False, CS = True
                             ;****************************************
d877 :                       df_tk_isbin
d877 : c930             [ 2] 	cmp #'0'
d879 : f005             [ 3] 	beq df_tk_isbin_true	; C=1
d87b : c931             [ 2] 	cmp #'1'
d87d : f001             [ 3] 	beq df_tk_isbin_true	; C=1
d87f : 18               [ 2] 	clc
d880 :                       df_tk_isbin_true
d880 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_ishex
                             ;* Check char in A for number 0-9, A-F, a-f
                             ;* Return: CC = False, CS = True
                             ;****************************************
d881 :                       df_tk_ishex
d881 : 48               [ 3] 	pha
d882 : 206cd8           [ 6] 	jsr df_tk_isdigit
d885 : b00a             [ 3] 	bcs df_tk_ishex_truep
d887 : 0920             [ 2] 	ora #0x20
d889 : c967             [ 2] 	cmp #'f'+1
d88b : b006             [ 3] 	bcs df_tk_ishex_false
d88d : c961             [ 2] 	cmp #'a'
d88f : 9002             [ 3] 	bcc df_tk_ishex_false
                             	; C must be 1 here
d891 :                       df_tk_ishex_truep
d891 : 68               [ 4] 	pla
d892 : 60               [ 6] 	rts
d893 :                       df_tk_ishex_false
d893 :                       df_tk_isalpha_false
d893 : 18               [ 2] 	clc
d894 : 68               [ 4] 	pla
d895 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalpha
                             ;* Check next char in A alpha a-z, A-Z
                             ;* Return: CC = False, CS = True
                             ;****************************************
d896 :                       df_tk_isalpha
d896 : 48               [ 3] 	pha
d897 : 0920             [ 2] 	ora #0x20					; Convert to lower case for checki
d899 : c97b             [ 2] 	cmp #'z'+1
d89b : b0f6             [ 3] 	bcs df_tk_isalpha_false
d89d : c961             [ 2] 	cmp #'a'
AS65 Assembler for R6502 [1.42].                                     Page  152
-------------------------------- bank\bank0.s --------------------------------

d89f : 90f2             [ 3] 	bcc df_tk_isalpha_false
                             	; C must be 1 here
d8a1 : 68               [ 4] 	pla
d8a2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalphanum
                             ;* Check next char A for a-z,A-Z,0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
d8a3 :                       df_tk_isalphanum
d8a3 : 2096d8           [ 6] 	jsr df_tk_isalpha
d8a6 : 90c4             [ 3] 	bcc df_tk_isdigit
d8a8 :                       df_tk_rts1				; branch to this RTS where possible
d8a8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isproc
                             ;* Check next char A for _
                             ;* Return: CC = False, CS = True
                             ;****************************************
d8a9 :                       df_tk_isproc
d8a9 : c95f             [ 2] 	cmp #'_'
d8ab : f001             [ 3] 	beq df_tk_isproc_true	; C=1
d8ad : 18               [ 2] 	clc
d8ae :                       df_tk_isproc_true
d8ae : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
d8af :                       df_tk_skip_ws
d8af :                       df_tk_ws_loop1
d8af : 204dd8           [ 6] 	jsr df_tk_peek_buf
d8b2 : 20bed8           [ 6] 	jsr df_tk_isws
d8b5 : 90f1             [ 3] 	bcc df_tk_rts1
d8b7 : e67d             [ 5] 	inc df_linoff
d8b9 : 205ed8           [ 6] 	jsr df_tk_put_tok
d8bc : 90f1             [ 3] 	bcc df_tk_ws_loop1		; Always as put_tok clears C
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
                             ;df_tk_strip_ws
                             ;df_tk_sws_loop1
                             ;	jsr df_tk_peek_buf
                             ;	jsr df_tk_isws
                             ;	bcc df_tk_rts1
                             ;	inc df_linoff
                             ;	bcs df_tk_sws_loop1		; Always as C is not touch
                             
                             ;****************************************
                             ;* df_tk_isws
                             ;* Check char is ws (only space is counted)
                             ;* Return: CC = False, CS = True
                             ;****************************************
d8be :                       df_tk_isws
d8be : c920             [ 2] 	cmp #' '
AS65 Assembler for R6502 [1.42].                                     Page  153
-------------------------------- bank\bank0.s --------------------------------

d8c0 : d001             [ 3] 	bne df_tk_isws_false
                             	; C must be 1 here
d8c2 : 60               [ 6] 	rts
d8c3 :                       df_tk_isws_false
d8c3 :                       df_tk_expectok
d8c3 : 18               [ 2] 	clc
d8c4 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* CC = found, CS = Error
                             ;****************************************
d8c5 :                       df_tk_expect
d8c5 : 48               [ 3] 	pha
                             	; skip ws
d8c6 : 20afd8           [ 6] 	jsr df_tk_skip_ws
                             	; peek the buffer
d8c9 : 68               [ 4] 	pla
d8ca : a47d             [ 3] 	ldy df_linoff
d8cc : d90004           [ 4] 	cmp df_linbuff,y
                             	; if expected char then ok
d8cf : f0f2             [ 3] 	beq df_tk_expectok
                             	; else error
d8d1 :                       df_tk_num_err
d8d1 :                       df_tk_char_err
d8d1 : 38               [ 2] 	sec
d8d2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* CC = found, CS = Error
                             ;****************************************
d8d3 :                       df_tk_expect_tok
d8d3 : 20c5d8           [ 6] 	jsr df_tk_expect
d8d6 : b0d0             [ 3] 	bcs df_tk_rts1
d8d8 : 2053d8           [ 6] 	jsr df_tk_get_buf
d8db : 4c5ed8           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* FATAL IF NOT FOUND
                             ;****************************************
d8de :                       df_tk_expect_tok_err
d8de : 20d3d8           [ 6] 	jsr df_tk_expect_tok
d8e1 : 90c5             [ 3] 	bcc df_tk_rts1
d8e3 :                       df_tk_expect_tok_fatal
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant number
                             ;****************************************
d8e5 :                       df_tk_num
                             	; X,A = address, linbuff must be on page boundar
d8e5 : 18               [ 2] 	clc
d8e6 : a900             [ 2] 	lda #lo(df_linbuff)
d8e8 : 657d             [ 3] 	adc df_linoff
AS65 Assembler for R6502 [1.42].                                     Page  154
-------------------------------- bank\bank0.s --------------------------------

d8ea : aa               [ 2] 	tax
d8eb : a904             [ 2] 	lda #hi(df_linbuff)
d8ed : 6900             [ 2] 	adc #0
d8ef : a000             [ 2] 	ldy #0				; any numeric format
d8f1 : 20cec1           [ 6] 	jsr con_n_to_a
d8f4 : b0db             [ 3] 	bcs df_tk_num_err
                             	; A = format
                             	; X = how many digits processed
                             	; Jump over that many chars
d8f6 : a8               [ 2] 	tay
d8f7 : 18               [ 2] 	clc
d8f8 : 8a               [ 2] 	txa
d8f9 : 657d             [ 3] 	adc df_linoff
d8fb : 857d             [ 3] 	sta df_linoff
                             	; Now tokenise an integer (always 2 bytes, but t
d8fd : 98               [ 2] 	tya
d8fe : c901             [ 2] 	cmp #NUM_DEC
d900 : d004             [ 3] 	bne df_tk_num_hexbin
d902 : a909             [ 2] 	lda #DFTK_INTDEC	; decimal always an int
d904 : d016             [ 3] 	bne df_tk_num_put
d906 :                       df_tk_num_hexbin
d906 : c902             [ 2] 	cmp #NUM_HEX
d908 : d00a             [ 3] 	bne df_tk_num_bin
d90a : a906             [ 2] 	lda #DFTK_BYTHEX	; Assume BYT
d90c : e005             [ 2] 	cpx #5				; If >4 chars then INT
d90e : 900c             [ 3] 	bcc df_tk_num_put
d910 : a90a             [ 2] 	lda #DFTK_INTHEX
d912 : d008             [ 3] 	bne df_tk_num_put
d914 :                       df_tk_num_bin
d914 : a907             [ 2] 	lda #DFTK_BYTBIN	; Assume BYT
d916 : e00b             [ 2] 	cpx #11				; If >10 chars then INT
d918 : 9002             [ 3] 	bcc df_tk_num_put
d91a : a90b             [ 2] 	lda #DFTK_INTBIN
d91c :                       df_tk_num_put
d91c : 205ed8           [ 6] 	jsr df_tk_put_tok	; Save number type (DEC,HEX,BI
d91f : a53d             [ 3] 	lda num_a
d921 : 205ed8           [ 6] 	jsr df_tk_put_tok
d924 : a53e             [ 3] 	lda num_a+1
d926 : 4c5ed8           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise a constant char
                             ;****************************************
d929 :                       df_tk_char
                             	; skip the first quote
d929 : 2053d8           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
d92c : a900             [ 2] 	lda #DFTK_CHR
d92e : 205ed8           [ 6] 	jsr df_tk_put_tok
                             	; get the char value and save
d931 : 2053d8           [ 6] 	jsr df_tk_get_buf
d934 : 205ed8           [ 6] 	jsr df_tk_put_tok
                             	; always put two bytes in, even for a BYTE type
d937 : a900             [ 2] 	lda #0
d939 : 205ed8           [ 6] 	jsr df_tk_put_tok
                             	; next byte must be single quote
d93c : 2053d8           [ 6] 	jsr df_tk_get_buf
d93f : c927             [ 2] 	cmp #0x27
d941 : d08e             [ 4] 	bne df_tk_char_err
d943 : 18               [ 2] 	clc
d944 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  155
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* Tokenise a constant string
                             ;****************************************
d945 :                       df_tk_str
                             	; skip the first quote
d945 : 2053d8           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
d948 : a910             [ 2] 	lda #DFTK_STRLIT
d94a : 205ed8           [ 6] 	jsr df_tk_put_tok
d94d :                       df_tk_str_ch
                             	; copy string chars in to token buffer
                             	; until another quote or end of line
d94d : 2053d8           [ 6] 	jsr df_tk_get_buf
d950 : c900             [ 2] 	cmp #0
d952 : f011             [ 3] 	beq df_tk_str_err
d954 : c922             [ 2] 	cmp #0x22
d956 : f006             [ 3] 	beq df_tk_str_don
d958 : 205ed8           [ 6] 	jsr df_tk_put_tok
d95b : 4c4dd9           [ 3] 	jmp df_tk_str_ch
d95e :                       df_tk_str_don
                             	; zero terminated strings
d95e : a900             [ 2] 	lda #0
d960 : 4c5ed8           [ 3] 	jmp df_tk_put_tok
d963 :                       df_tk_var_noarry
d963 : 18               [ 2] 	clc
d964 : 60               [ 6] 	rts
d965 :                       df_tk_str_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant (num, string, char)
                             ;****************************************
d967 :                       df_tk_const
d967 : 20afd8           [ 6] 	jsr df_tk_skip_ws
                             	; Check what constant it is
d96a : 204dd8           [ 6] 	jsr df_tk_peek_buf
                             	; Minus symbol could be start of a number
d96d : c92d             [ 2] 	cmp #'-'
d96f : f005             [ 3] 	beq df_tk_const_try_num
d971 : 206cd8           [ 6] 	jsr df_tk_isdigit
d974 : 9003             [ 3] 	bcc df_tk_const_try_str
d976 :                       df_tk_const_try_num
d976 : 4ce5d8           [ 3] 	jmp df_tk_num
d979 :                       df_tk_const_try_str
                             	; check for double quote
d979 : c922             [ 2] 	cmp #0x22
d97b : d003             [ 3] 	bne df_tk_const_try_char
d97d : 4c45d9           [ 3] 	jmp df_tk_str
d980 :                       df_tk_const_try_char
                             	; check for single apostrophe
d980 : c927             [ 2] 	cmp #0x27
d982 : d003             [ 3] 	bne df_tk_const_err
d984 : 4c29d9           [ 3] 	jmp df_tk_char
d987 :                       df_tk_const_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a variable - A = mask
                             ;* Return : A = variable index
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  156
-------------------------------- bank\bank0.s --------------------------------

d989 :                       df_tk_var
                             	; Find or create variable, address in X,A
d989 : 20e8d7           [ 6] 	jsr df_var_findcreate
d98c : 9001             [ 3] 	bcc df_tk_var_cont
d98e : 60               [ 6] 	rts
d98f :                       df_tk_var_cont
                             	; Save X,A for later
d98f : 48               [ 3] 	pha
d990 : 8a               [ 2] 	txa
d991 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
d992 : a911             [ 2] 	lda #DFTK_VAR
d994 : 205ed8           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
d997 : 68               [ 4] 	pla
d998 : 205ed8           [ 6] 	jsr df_tk_put_tok
d99b : 68               [ 4] 	pla
d99c : 205ed8           [ 6] 	jsr df_tk_put_tok
                             	; count of any array indices
d99f :                       df_tk_var_ck
                             	; check if array procesing needed
d99f : a95b             [ 2] 	lda #'['
d9a1 : 20d3d8           [ 6] 	jsr df_tk_expect_tok
d9a4 : b0bd             [ 3] 	bcs df_tk_var_noarry
                             	; process numeric expression in bracket
d9a6 : 4c50da           [ 3] 	jmp df_tk_narry
                             
                             
                             ;****************************************
                             ;* Tokenise a parameter in proc definition
                             ;* Return : A = variable index
                             ;****************************************
d9a9 :                       df_tk_parm
                             	; if preceeding with non-local qualifier DFTK_VA
d9a9 : 204dd8           [ 6] 	jsr df_tk_peek_buf
d9ac : c926             [ 2] 	cmp #DFTK_VARPARM
d9ae : d006             [ 3] 	bne df_tk_parm_skip_var
                             	; get the qualifier and put in token buffer
d9b0 : 2053d8           [ 6] 	jsr df_tk_get_buf
d9b3 : 205ed8           [ 6] 	jsr df_tk_put_tok
d9b6 :                       df_tk_parm_skip_var
                             	; don't have a certain type of var
d9b6 : a900             [ 2] 	lda #0
d9b8 : 4c89d9           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* Tokenise a variable to localise
                             ;* Return : A,X = variable index
                             ;****************************************
d9bb :                       df_tk_localvar
                             	; Find or create variable, index in A
d9bb : 20e8d7           [ 6] 	jsr df_var_findcreate
d9be : 9001             [ 3] 	bcc df_tk_localvar_cont
d9c0 : 60               [ 6] 	rts
d9c1 :                       df_tk_localvar_cont
                             	; Save variable address for later
d9c1 : 48               [ 3] 	pha
d9c2 : 8a               [ 2] 	txa
d9c3 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
d9c4 : a911             [ 2] 	lda #DFTK_VAR
AS65 Assembler for R6502 [1.42].                                     Page  157
-------------------------------- bank\bank0.s --------------------------------

d9c6 : 205ed8           [ 6] 	jsr df_tk_put_tok
                             	; Get variable index and put in token buffer
d9c9 : 68               [ 4] 	pla
d9ca : 205ed8           [ 6] 	jsr df_tk_put_tok
d9cd : 68               [ 4] 	pla
d9ce : 4c5ed8           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise array variable
                             ;* Return : A = variable index
                             ;****************************************
d9d1 :                       df_tk_arrvar
                             	; Like a local var at first
d9d1 : 20bbd9           [ 6] 	jsr df_tk_localvar
                             	; but must be array
d9d4 : a95b             [ 2] 	lda #'['
d9d6 : 20ded8           [ 6] 	jsr df_tk_expect_tok_err
                             	; process numeric expression in bracket
d9d9 : 4c50da           [ 3] 	jmp df_tk_narry
                             
                             ;****************************************
                             ;* Tokenise call or def of proc
                             ;* Mode : A = 0 means def, else call
                             ;****************************************
d9dc :                       df_tk_proc
d9dc : 858c             [ 3] 	sta df_procmode
d9de : 20afd8           [ 6] 	jsr df_tk_skip_ws
                             	; Find or create proc, index in A
d9e1 : a940             [ 2] 	lda #DFVVT_PROC
d9e3 : 20e8d7           [ 6] 	jsr df_var_findcreate
d9e6 : b066             [ 4] 	bcs df_tk_proc_err
                             
                             	; Save variable address for later
d9e8 : 868f             [ 3] 	stx df_procptr
d9ea : 8590             [ 3] 	sta df_procptr+1
                             
                             	; Put PROC escape in token buffer
d9ec : a912             [ 2] 	lda #DFTK_PROC
d9ee : 205ed8           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
d9f1 : a58f             [ 3] 	lda df_procptr
d9f3 : 205ed8           [ 6] 	jsr df_tk_put_tok
d9f6 : a590             [ 3] 	lda df_procptr+1
d9f8 : 205ed8           [ 6] 	jsr df_tk_put_tok
                             
                             	; initially assume no args
d9fb : a900             [ 2] 	lda #0
d9fd : 858d             [ 3] 	sta df_procargs
                             
                             	; Must have an open bracket
d9ff : a928             [ 2] 	lda #'('
da01 : 20ded8           [ 6] 	jsr df_tk_expect_tok_err
                             	; if immediately followed by close bracket then 
da04 : 204dd8           [ 6] 	jsr df_tk_peek_buf
da07 : c929             [ 2] 	cmp #')'
da09 : f030             [ 3] 	beq df_tk_proc_noparm
                             	; else tokenise parm variables
da0b :                       df_tk_proc_parms
da0b : 20afd8           [ 6] 	jsr df_tk_skip_ws
                             	; call appropriate routine for mode
da0e : a58c             [ 3] 	lda df_procmode
da10 : d006             [ 3] 	bne df_tk_proc_call
AS65 Assembler for R6502 [1.42].                                     Page  158
-------------------------------- bank\bank0.s --------------------------------

                             	; tokenise parameter variable in def mode
da12 : 20a9d9           [ 6] 	jsr df_tk_parm
da15 : 4c21da           [ 3] 	jmp df_tk_proc_skip_call
da18 :                       df_tk_proc_call
                             	; tokenise expression in call mode
                             	;**CHECK**
da18 : a58d             [ 3] 	lda df_procargs	; procargs could be impacted ins
da1a : 48               [ 3] 	pha
da1b : 20d0da           [ 6] 	jsr df_tk_expression
da1e : 68               [ 4] 	pla
da1f : 858d             [ 3] 	sta df_procargs
da21 :                       df_tk_proc_skip_call
da21 : b02a             [ 3] 	bcs df_tk_proc_errp
                             	; increment number of args
da23 : e68d             [ 5] 	inc df_procargs
                             	; what is next non ws char
da25 : 20afd8           [ 6] 	jsr df_tk_skip_ws
da28 : c92c             [ 2] 	cmp #','
da2a : f006             [ 3] 	beq df_tk_proc_comma
da2c : c929             [ 2] 	cmp #')'
da2e : d01d             [ 3] 	bne df_tk_proc_errp
da30 : f009             [ 3] 	beq df_tk_proc_noparm
                             	; comma found, more parms to process
da32 :                       df_tk_proc_comma
da32 : 2053d8           [ 6] 	jsr df_tk_get_buf
da35 : 205ed8           [ 6] 	jsr df_tk_put_tok
da38 : 4c0bda           [ 3] 	jmp df_tk_proc_parms
da3b :                       df_tk_proc_noparm
                             	; consume the close bracket
da3b : 2053d8           [ 6] 	jsr df_tk_get_buf
da3e : 205ed8           [ 6] 	jsr df_tk_put_tok
                             
                             	; update arg count if def mode
da41 : a68c             [ 3] 	ldx df_procmode
da43 : d006             [ 3] 	bne df_tk_proc_skip_args
                             	; use address of proc
                             	; put arg count in dim2
da45 : a004             [ 2] 	ldy #DFVVT_DIM2
da47 : a58d             [ 3] 	lda df_procargs
da49 : 918f             [ 5] 	sta (df_procptr),y
da4b :                       df_tk_proc_skip_args
da4b : 18               [ 2] 	clc
da4c : 60               [ 6] 	rts
da4d :                       df_tk_proc_errp
da4d : 68               [ 4] 	pla
da4e :                       df_tk_proc_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse array index
                             ;****************************************
da50 :                       df_tk_narry
                             	; if array open bracket encountered
                             	; then tokenise a numeric expression
da50 : 20d0da           [ 6] 	jsr df_tk_expression
                             	; If a comma is next, then another expression
da53 : a92c             [ 2] 	lda #','
da55 : 20d3d8           [ 6] 	jsr df_tk_expect_tok
da58 : b003             [ 3] 	bcs df_tk_narry_end
da5a : 20d0da           [ 6] 	jsr df_tk_expression
da5d :                       df_tk_narry_end
AS65 Assembler for R6502 [1.42].                                     Page  159
-------------------------------- bank\bank0.s --------------------------------

                             	; after the second dimension, must be close sq b
da5d : a95d             [ 2] 	lda #']'
da5f : 4cded8           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse bracket
                             ;****************************************
da62 :                       df_tk_nbrkt
                             	; if  open bracket encountered
                             	; then tokenise a numeric expression
da62 : 20d0da           [ 6] 	jsr df_tk_expression
da65 : a929             [ 2] 	lda #')'
da67 : 4cded8           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse call to numeric proc
                             ;****************************************
da6a :                       df_tk_nterm_proc
                             	; call mode
da6a : a901             [ 2] 	lda #1
da6c : 4cdcd9           [ 3] 	jmp df_tk_proc
                             
                             ;****************************************
                             ;* Parse numeric term
                             ;****************************************
da6f :                       df_tk_nterm
                             	; skip any ws first, copying in to tokbuff
                             	; A containts the non-ws char
da6f : 20afd8           [ 6] 	jsr df_tk_skip_ws
da72 : c900             [ 2] 	cmp #0
da74 : f004             [ 3] 	beq df_tk_nterm_done
da76 : c93a             [ 2] 	cmp #':'
da78 : d002             [ 3] 	bne df_tk_nterm_cont
da7a :                       df_tk_nterm_done
da7a :                       df_tk_nop_false
da7a : 38               [ 2] 	sec
da7b : 60               [ 6] 	rts
da7c :                       df_tk_nterm_cont
                             	; if open bracket then process it
da7c : c928             [ 2] 	cmp #'('
da7e : d009             [ 3] 	bne df_tk_nterm_tryfn
                             	; get the bracket and put in token buffer
da80 : 2053d8           [ 6] 	jsr df_tk_get_buf
da83 : 205ed8           [ 6] 	jsr df_tk_put_tok
                             	; go process the open bracket
da86 : 4c62da           [ 3] 	jmp df_tk_nbrkt
da89 :                       df_tk_nterm_tryfn
da89 : 48               [ 3] 	pha
                             	; try decoding a built-in function
da8a : a902             [ 2] 	lda #DFTK_FN
da8c : 20c3db           [ 6] 	jsr df_tk_matchtok
da8f : b00e             [ 3] 	bcs df_tk_nterm_try_proc
                             	; pull old A in to Y but don't use
da91 : 68               [ 4] 	pla
da92 : a8               [ 2] 	tay
                             	; restore A and put the token with MSB set
da93 : 8a               [ 2] 	txa
da94 : 0980             [ 2] 	ora #0x80
da96 : 205ed8           [ 6] 	jsr df_tk_put_tok
da99 : 2095db           [ 6] 	jsr df_tk_exec_parser
da9c : b01b             [ 3] 	bcs df_tk_nterm_err
da9e : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  160
-------------------------------- bank\bank0.s --------------------------------

da9f :                       df_tk_nterm_try_proc
da9f : 68               [ 4] 	pla
                             	; if it's not a func then try proc
daa0 : 20a9d8           [ 6] 	jsr df_tk_isproc
daa3 : 9006             [ 3] 	bcc df_tk_nterm_try_var
daa5 : 206ada           [ 6] 	jsr df_tk_nterm_proc
daa8 : b00f             [ 3] 	bcs df_tk_nterm_err
daaa : 60               [ 6] 	rts
daab :                       df_tk_nterm_try_var
                             	; Non-zero mask means var must be this type
daab : a900             [ 2] 	lda #0
daad : 2089d9           [ 6] 	jsr df_tk_var
dab0 : b001             [ 3] 	bcs df_tk_nterm_try_const
dab2 : 60               [ 6] 	rts
dab3 :                       df_tk_nterm_try_const
                             	; Try decoding a constant
dab3 : 2067d9           [ 6] 	jsr df_tk_const
dab6 : b001             [ 3] 	bcs df_tk_nterm_err
dab8 : 60               [ 6] 	rts
dab9 :                       df_tk_nterm_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric operator
                             ;****************************************
dabb :                       df_tk_nop
dabb : 20afd8           [ 6] 	jsr df_tk_skip_ws
dabe : c900             [ 2] 	cmp #0
dac0 : f0b8             [ 3] 	beq df_tk_nop_false
                             	; must be an operator token for numeric
dac2 : a90c             [ 2] 	lda #DFTK_OP | DFTK_STROP
dac4 : 20c3db           [ 6] 	jsr df_tk_matchtok
dac7 : b0b1             [ 3] 	bcs df_tk_nop_false
                             	; got a token
dac9 : 0980             [ 2] 	ora #DFTK_TOKEN
dacb : 205ed8           [ 6] 	jsr df_tk_put_tok
dace : 18               [ 2] 	clc
dacf : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Parse numeric expression
                             ;****************************************
dad0 :                       df_tk_expression
                             	; Tokenise a numeric term
dad0 : 206fda           [ 6] 	jsr df_tk_nterm
dad3 : b006             [ 3] 	bcs df_tk_expre_err
                             	; Try and tokenise a numeric operator
dad5 : 20bbda           [ 6] 	jsr df_tk_nop
                             	; If an operator was tokenised
                             	; then loop back for another term
dad8 : 90f6             [ 3] 	bcc df_tk_expression
                             	; If no operator was found then
                             	; expression is done
dada :                       df_tk_not_eos
dada : 18               [ 2] 	clc
dadb :                       df_tk_expre_err
dadb : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find expected token and parse expression
AS65 Assembler for R6502 [1.42].                                     Page  161
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
dadc :                       df_tk_tok_expression
dadc : 20ded8           [ 6] 	jsr df_tk_expect_tok_err
dadf : 4cd0da           [ 3] 	jmp df_tk_expression
                             
                             
                             ;****************************************
                             ;* Check end of statement
                             ;****************************************
dae2 :                       df_tk_isEOS
dae2 : a93a             [ 2] 	lda #':'
dae4 : 20d3d8           [ 6] 	jsr df_tk_expect_tok
dae7 : b0f1             [ 3] 	bcs df_tk_not_eos
                             	; this is the position of the next statement
dae9 : a57e             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
daeb : a480             [ 3] 	ldy df_nxtstidx
daed : 998004           [ 5] 	sta df_tokbuff,y
daf0 : 38               [ 2] 	sec
daf1 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Parse user defined proc
                             ;****************************************
daf2 :                       df_tk_parse_user_proc
                             	; put proc token in as a call
daf2 : a981             [ 2] 	lda #0x81
daf4 : 205ed8           [ 6] 	jsr df_tk_put_tok
daf7 : a901             [ 2] 	lda #1
daf9 : 4cdcd9           [ 3] 	jmp df_tk_proc
                             
                             
                             ;****************************************
                             ;* Parse a command
                             ;* Do not fatal error if this fails
                             ;****************************************
dafc :                       df_tk_parse_command
                             	; only looking for keywords
dafc : a901             [ 2] 	lda #DFTK_KW
dafe : 20c3db           [ 6] 	jsr df_tk_matchtok
                             	; if didn't find regular keywords then try non f
db01 : b010             [ 3] 	bcs df_tk_parse_command_err
                             	; if match then store token in the line buffer
                             	; Set MSB
db03 : 0980             [ 2] 	ora #0x80
db05 : 205ed8           [ 6] 	jsr df_tk_put_tok
                             	; call the parser to do tokenise based on the st
db08 : a584             [ 3] 	lda df_symoff
db0a : 2095db           [ 6] 	jsr df_tk_exec_parser
db0d : b004             [ 3] 	bcs df_tk_parse_command_err
                             	; [1] ignore white space but keep it
db0f : 20afd8           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
db12 :                       df_tk_parse_command_done
db12 : 18               [ 2] 	clc
db13 :                       df_tk_parse_command_err
db13 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* lexer
AS65 Assembler for R6502 [1.42].                                     Page  162
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
db14 :                       df_lexer_line
db14 : a900             [ 2] 	lda #0
                             	; start at the beginning of the line buffer
db16 : 857d             [ 3] 	sta df_linoff
                             	; start at the beginning of the tokenised buffer
db18 : 857e             [ 3] 	sta df_tokoff
                             	; set current line to the token buffer
db1a : a980             [ 2] 	lda #lo(df_tokbuff)
db1c : 8587             [ 3] 	sta df_currlin
db1e : a904             [ 2] 	lda #hi(df_tokbuff)
db20 : 8588             [ 3] 	sta df_currlin+1
                             	; Set the line length to 0
db22 : a900             [ 2] 	lda #0
db24 : 205ed8           [ 6] 	jsr df_tk_put_tok
                             
                             	; any leading white space, ignore and discard
                             ;	jsr df_tk_strip_ws
                             
                             	; if peek next character is a number then assume
                             	; else assume a statement
db27 : 204dd8           [ 6] 	jsr df_tk_peek_buf
db2a : 206cd8           [ 6] 	jsr df_tk_isdigit
db2d : 9006             [ 3] 	bcc df_lexer_skip_lnum
                             	; if line number then capture the line number an
db2f : 20a4db           [ 6] 	jsr df_tk_linenum
db32 : 4c3ddb           [ 3] 	jmp df_tk_body
db35 :                       df_lexer_skip_lnum
                             	; if no line number then zero out the line numbe
                             	; line zero will indicate an immediate mode comm
db35 : a900             [ 2] 	lda #0
db37 : 205ed8           [ 6] 	jsr df_tk_put_tok				; Line num low byte
db3a : 205ed8           [ 6] 	jsr df_tk_put_tok				; Line num high byte
db3d :                       df_tk_body
                             	; Offset for next statement
db3d : a57e             [ 3] 	lda df_tokoff
db3f : 8580             [ 3] 	sta df_nxtstidx
db41 : a900             [ 2] 	lda #0
db43 : 205ed8           [ 6] 	jsr df_tk_put_tok				; Offset to next statement
db46 : 204dd8           [ 6] 	jsr df_tk_peek_buf				; Check for a single space
db49 : 20bed8           [ 6] 	jsr df_tk_isws					; and first character
db4c : 9002             [ 3] 	bcc df_tk_skip_1_spc
db4e : e67d             [ 5] 	inc df_linoff					; Don't tokenise this single s
db50 :                       df_tk_skip_1_spc
                             	; [1] capture white space from line buffer in to
db50 : 20afd8           [ 6] 	jsr df_tk_skip_ws
                             	; If next non ws is zero then this is an empty l
                             	; so return with length zero but line number fil
                             	; token buffer
db53 : c900             [ 2] 	cmp #0
db55 : f03a             [ 3] 	beq df_tk_line_empty
                             	; if next char is _ then parse a user defined pr
db57 : 20a9d8           [ 6] 	jsr df_tk_isproc
db5a : 9006             [ 3] 	bcc df_tk_try_command
db5c : 20f2da           [ 6] 	jsr df_tk_parse_user_proc
db5f : 4c73db           [ 3] 	jmp df_tk_done
db62 :                       df_tk_try_command
                             	; try a keyword
db62 : 20fcda           [ 6] 	jsr df_tk_parse_command
db65 : b002             [ 3] 	bcs	df_tk_try_asm
db67 : 900a             [ 3] 	bcc df_tk_done
db69 :                       df_tk_try_asm
AS65 Assembler for R6502 [1.42].                                     Page  163
-------------------------------- bank\bank0.s --------------------------------

                             	; try an asm keyword
db69 : 2094f9           [ 6] 	jsr df_tk_asm_parse_command
db6c : 9005             [ 3] 	bcc df_tk_done
db6e :                       df_tk_try_assign
                             	; nothing but to try an assignment operation
db6e : 2028df           [ 6] 	jsr df_tk_assign
db71 : b020             [ 3] 	bcs	df_tk_parseerror
db73 :                       df_tk_done
                             	; put statement index stuff here in case of mult
                             	; check for : and if present tokenise plus updat
                             	; then go back to try and process another statem
db73 : 20e2da           [ 6] 	jsr df_tk_isEOS
db76 : b0c5             [ 3] 	bcs df_tk_body
                             	; if not at end of line, then must be error
db78 : 204dd8           [ 6] 	jsr df_tk_peek_buf
db7b : c900             [ 2] 	cmp #0
db7d : d014             [ 3] 	bne df_tk_parseerror
                             	; this is the position of the next line
db7f : a57e             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
db81 : a480             [ 3] 	ldy df_nxtstidx
db83 : 998004           [ 5] 	sta df_tokbuff,y
                             	; Get line length
db86 : a47e             [ 3] 	ldy df_tokoff
                             	; ensure there is always a zero after the last t
                             	; A is already zero
db88 : a900             [ 2] 	lda #0
db8a : 998004           [ 5] 	sta df_tokbuff,y
                             	; save the line length
db8d : 98               [ 2] 	tya
db8e : 8d8004           [ 4] 	sta df_tokbuff
db91 :                       df_tk_line_empty
db91 : 18               [ 2] 	clc
db92 : 60               [ 6] 	rts
db93 :                       df_tk_parseerror
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* df_tk_parsestatement
                             ;* Execute parse routine for this statement
                             ;* Input: df_tokoff is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
db95 :                       df_tk_exec_parser
db95 : 0a               [ 2] 	asl a
db96 : aa               [ 2] 	tax
db97 : bddfdd           [ 4] 	lda df_tk_tokenjmp,x
db9a : 85a2             [ 3] 	sta df_tmpptra
db9c : bde0dd           [ 4] 	lda df_tk_tokenjmp+1,x
db9f : 85a3             [ 3] 	sta df_tmpptra+1
dba1 : 6ca200           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_linenum
                             ;* Tokenise line number
                             ;****************************************
dba4 :                       df_tk_linenum
                             	; Convert line number to 16 bit number
                             	; Save the line number
                             	; Increment the buffer pointer
AS65 Assembler for R6502 [1.42].                                     Page  164
-------------------------------- bank\bank0.s --------------------------------

dba4 : 18               [ 2] 	clc
dba5 : a900             [ 2] 	lda #lo(df_linbuff)
dba7 : 657d             [ 3] 	adc df_linoff
dba9 : aa               [ 2] 	tax
dbaa : a904             [ 2] 	lda #hi(df_linbuff)
dbac : 6900             [ 2] 	adc #0
dbae : a001             [ 2] 	ldy #1			; Decimal format only
dbb0 : 20cec1           [ 6] 	jsr con_n_to_a
dbb3 : 18               [ 2] 	clc
dbb4 : 8a               [ 2] 	txa
dbb5 : 657d             [ 3] 	adc df_linoff
dbb7 : 857d             [ 3] 	sta df_linoff
                             	; Now save line number
dbb9 : a53d             [ 3] 	lda num_a
dbbb : 205ed8           [ 6] 	jsr df_tk_put_tok
dbbe : a53e             [ 3] 	lda num_a+1
dbc0 : 4c5ed8           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* df_tk_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;*			df_symoff is the symbol table index
                             ;****************************************
dbc3 :                       df_tk_matchtok
                             	; save the mask to check types against
dbc3 : 48               [ 3] 	pha
                             	; Start at token symbols beginning
dbc4 : a945             [ 2] 	lda #lo(df_tokensyms)
dbc6 : 8582             [ 3] 	sta df_symtab
dbc8 : a9dc             [ 2] 	lda #hi(df_tokensyms)
dbca : 8583             [ 3] 	sta df_symtab+1
dbcc : a900             [ 2] 	lda #0
dbce : 8584             [ 3] 	sta df_symoff
dbd0 :                       df_tk_checknexttok
                             	; check this token type first
dbd0 : 68               [ 4] 	pla
dbd1 : 48               [ 3] 	pha
dbd2 : a684             [ 3] 	ldx df_symoff
dbd4 : 3da5de           [ 4] 	and df_tk_tokentype,x
dbd7 : f032             [ 4] 	beq df_tk_symnomatch
                             	; Special check for operator token
                             	; because of order of precedence fudge
                             	; ******FIX THIS ONE DAY!!!!!!******
                             	; if parm and token type = DFTK_OP then ok
                             	; if parm and token type <> DFTK_OP then not ok
dbd9 : bda5de           [ 4] 	lda df_tk_tokentype,x
dbdc : 2908             [ 2] 	and #DFTK_OP
dbde : f009             [ 3] 	beq df_tk_matchtok_skip_op
dbe0 : 68               [ 4] 	pla
dbe1 : 48               [ 3] 	pha
dbe2 : 2908             [ 2] 	and #DFTK_OP
dbe4 : 3da5de           [ 4] 	and df_tk_tokentype,x
dbe7 : f022             [ 4] 	beq df_tk_symnomatch
dbe9 :                       df_tk_matchtok_skip_op
                             	; From the line buffer current pointer
                             	; Check for a token match
dbe9 : a47d             [ 3] 	ldy df_linoff
dbeb : a200             [ 2] 	ldx #0
AS65 Assembler for R6502 [1.42].                                     Page  165
-------------------------------- bank\bank0.s --------------------------------

dbed :                       df_tk_checktokch
                             	; Get symtable char
                             	; and mask off MSB
dbed : a182             [ 6] 	lda (df_symtab,x)
                             	; Save the value and mask off MSB
dbef : 48               [ 3] 	pha
dbf0 : 297f             [ 2] 	and #0x7f
                             	; Compare with current line buffer char
dbf2 : d90004           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
dbf5 : d013             [ 4] 	bne df_tk_symnomatchp
                             	; If match and symbol has MSB then
                             	; all of the symbol matched
dbf7 : 68               [ 4] 	pla
dbf8 : 3033             [ 4] 	bmi df_tk_symfound
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
dc00 : c8               [ 2] 	iny
                             	; If buffer is '.' then let this be a match
dc01 : b90004           [ 4] 	lda df_linbuff,y
dc04 : c92e             [ 2] 	cmp #'.'
dc06 : f025             [ 3] 	beq df_tk_symfound
dc08 : d0e3             [ 4] 	bne df_tk_checktokch	; branch always
dc0a :                       df_tk_symnomatchp
dc0a : 68               [ 4] 	pla
dc0b :                       df_tk_symnomatch
                             	; Increment symbol counter to next symbol
dc0b : e684             [ 5] 	inc df_symoff
dc0d :                       df_tk_symnextentry
dc0d : a200             [ 2] 	ldx #0
dc0f : a182             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is MSB
dc11 : 3009             [ 3] 	bmi  df_tk_foundsymend
                             	_incZPWord df_symtab
                             
dc19 : 4c0ddc           [ 3] 	jmp df_tk_symnextentry
dc1c :                       df_tk_foundsymend
                             	; Increment char to point to new symbol
                             	; for matching with line buffer
                             	_incZPWord df_symtab
                             
                             	; If next char is not zero then
                             	; try and match with line buffer
dc22 : a182             [ 6] 	lda (df_symtab,x)
dc24 : d0aa             [ 4] 	bne df_tk_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; pop mask off stack
dc26 : 68               [ 4] 	pla
                             	; Zero symbol counter
dc27 : a900             [ 2] 	lda #0
dc29 : 8584             [ 3] 	sta df_symoff
                             	; Set C to indicate error (no match)
dc2b : 38               [ 2] 	sec
dc2c : 60               [ 6] 	rts
dc2d :                       df_tk_symfound
                             	; Full match with keyword in symtable but
                             	; if matching with something that ended in alpha
                             	; then check the next buffer char is not alphanu
                             	; as this could be part of a variable name
AS65 Assembler for R6502 [1.42].                                     Page  166
-------------------------------- bank\bank0.s --------------------------------

                             	; Point to next buffer char in any case
dc2d : c8               [ 2] 	iny
                             	; First mask off MSB
dc2e : 297f             [ 2] 	and #0x7f
                             	; Then check if alpha
dc30 : 2096d8           [ 6] 	jsr df_tk_isalpha
                             	; if not alpha then we're definitely done
dc33 : 9008             [ 3] 	bcc df_tk_symfound_final
                             	; else check buffer
dc35 : b90004           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
dc38 : 20a3d8           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
dc3b : b0ce             [ 3] 	bcs df_tk_symnomatch
dc3d :                       df_tk_symfound_final
                             	; pop mask off stack
dc3d : 68               [ 4] 	pla
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
dc3e : 847d             [ 3] 	sty df_linoff
dc40 : a584             [ 3] 	lda df_symoff
dc42 : aa               [ 2] 	tax
dc43 : 18               [ 2] 	clc
dc44 : 60               [ 6] 	rts
                             
                             	include "dflat/tksymtab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TKSYMTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Statement Token table
                             ; keywords
dc45 :                       df_tokensyms
dc45 : 80                    	db	0x80						; Implicit numeric assign
dc46 : 80                    	db	0x80						; Implicit call procedure
dc47 : bb                    	db	";"+0x80					; Comment
dc48 : 7072696e746cee        	db	"printl",'n'+0x80			; println exprlist
dc4f : 7072696e7461f4        	db	"printa",'t'+0x80			; printat x,y,exprlist
dc56 : 7072696ef4            	db	"prin",'t'+0x80				; print exprlist
dc5b : 6465e6                	db	"de",'f'+0x80				; def_subname
AS65 Assembler for R6502 [1.42].                                     Page  167
-------------------------------- bank\bank0.s --------------------------------

dc5e : 656e646465e6          	db	"endde",'f'+0x80			; enddef
dc64 : 7265747572ee          	db	"retur",'n'+0x80			; return
dc6a : 61626f72f4            	db	"abor",'t'+0x80				; abort
dc6f : 6c6f6361ec            	db	"loca",'l'+0x80				; local varlist
dc74 : 6469ed                	db	"di",'m'+0x80				; dim varlist
dc77 : 7265706561f4          	db	"repea",'t'+0x80			; repeat
dc7d : 756e7469ec            	db	"unti", 'l'+0x80			; until condition
dc82 : 666ff2                	db	"fo",'r'+0x80				; for var=start,end,incremen
dc85 : 6e6578f4              	db	"nex",'t'+0x80				; next
dc89 : 7768696ce5            	db	"whil",'e'+0x80				; while condition
dc8e : 77656ee4              	db	"wen",'d'+0x80				; wend
dc92 : 69e6                  	db	"i",'f'+0x80				; if condition
dc94 : 656c73e5              	db	"els",'e'+0x80				; else
dc98 : 656e6469e6            	db	"endi",'f'+0x80				; endif
dc9d : 656c69e6              	db	"eli",'f'+0x80				; elif condition
dca1 : 646174e1              	db	"dat",'a'+0x80				; data
dca5 : ff                    	db	0xff						; assembler command (non standard p
dca6 : 7275ee                	db	"ru",'n'+0x80				; run
dca9 : 6c6973f4              	db	"lis",'t'+0x80				; list _proc-|*|line,line
dcad : 696e7075f4            	db	"inpu",'t'+0x80				; input var
dcb2 : 746578f4              	db	"tex",'t'+0x80				; text
dcb6 : 706c6ff4              	db	"plo",'t'+0x80				; plot x,y,char|string
dcba : 637572736ff2          	db	"curso",'r'+0x80			; cursor n
dcc0 : 636cf3                	db	"cl",'s'+0x80				; cls
dcc3 : 706f6be5              	db	"pok",'e'+0x80				; poke a,v
dcc7 : 646f6be5              	db	"dok",'e'+0x80				; doke a,v
dccb : 736f756ee4            	db	"soun",'d'+0x80				; sound
dcd0 : 6d757369e3            	db	"musi",'c'+0x80				; music
dcd5 : 706c61f9              	db	"pla",'y'+0x80				; play
dcd9 : 726561e4              	db	"rea",'d'+0x80				; read
dcdd : 6e65f7                	db	"ne",'w'+0x80				; new
                             ;	db	"renu",'m'+0x80				; renum start,offset,incr
dce0 : 776169f4              	db	"wai",'t'+0x80				; wait delay
dce4 : 72657365f4            	db	"rese",'t'+0x80				; reset var
dce9 : 68697265f3            	db	"hire",'s'+0x80				; hires col
dcee : 706f696ef4            	db	"poin",'t'+0x80				; point x,y
dcf3 : 6c696ee5              	db	"lin",'e'+0x80				; line x0,y0,x1,y1
dcf7 : 6c696e6574ef          	db	"linet",'o'+0x80			; lineto x1,y1
dcfd : 7069786d6f64e5        	db	"pixmod",'e'+0x80			; pixmode n
dd04 : 696eeb                	db	"in",'k'+0x80				; ink n
dd07 : 70617065f2            	db	"pape",'r'+0x80				; paper n
dd0c : 636972636ce5          	db	"circl",'e'+0x80			; circle x,y,r
                             ;	db	"hime",'m'+0x80				; himem addr
dd12 : 6d6f6e69746ff2        	db	"monito",'r'+0x80			; monitor
dd19 : 737072636861f2        	db	"sprcha",'r'+0x80			; sprchar sp,ch
dd20 : 737072706ff3          	db	"sprpo",'s'+0x80			; sprpos sp,x,y
dd26 : 7370727570e4          	db	"sprup",'d'+0x80			; sprupd
dd2c : 737072696e69f4        	db	"sprini",'t'+0x80			; sprinit
dd33 : 7370726d756c74e9      	db	"sprmult",'i'+0x80			; sprmulti x[],y[]
                             ;	db	"sav",'e'+0x80				; save "fname"
                             ;	db	"loa",'d'+0x80				; load "fname"
dd3b : 62736176e5            	db	"bsav",'e'+0x80				; bsave addr,len,"fname"
dd40 : 626c6f61e4            	db	"bloa",'d'+0x80				; bload addr,"fname"
dd45 : 74736176e5            	db	"tsav",'e'+0x80				; tsave "fname"
dd4a : 746c6f61e4            	db	"tloa",'d'+0x80				; tload "fname"
dd4f : 64656c6574e5          	db 	"delet",'e'+0x80			; delete "fname"
dd55 : 6469f2                	db	"di",'r'+0x80				; dir
dd58 : 72656469ed            	db	"redi",'m'+0x80				; redim varlist
                             ; Functions
dd5d : 7065656ba8            	db	"peek",'('+0x80				; peek(x)
dd62 : 6465656ba8            	db	"deek",'('+0x80				; peek(x)
dd67 : 737469636ba8          	db	"stick",'('+0x80			; stick(x)
AS65 Assembler for R6502 [1.42].                                     Page  168
-------------------------------- bank\bank0.s --------------------------------

dd6d : 676574a8              	db	"get",'('+0x80				; get(x)
dd71 : 636872a8              	db	"chr",'('+0x80				; chr(x)
dd75 : 6c656674a8            	db	"left",'('+0x80				; left(x$,y)
dd7a : 7269676874a8          	db	"right",'('+0x80			; right(x$,y)
dd80 : 6d6964a8              	db	"mid",'('+0x80				; mid(x$,y)
dd84 : 6c656ea8              	db	"len",'('+0x80				; len(x$)
dd88 : 6d656da8              	db	"mem",'('+0x80				; mem(x)
dd8c : 7363726ea8            	db	"scrn",'('+0x80				; scrn(x,y)
dd91 : 726e64a8              	db	"rnd",'('+0x80				; rnd(x)
dd95 : 656c6170736564a8      	db	"elapsed",'('+0x80			; elapsed(var)
dd9d : 63616c6ca8            	db	"call",'('+0x80				; call(addr,A,X,Y)
dda2 : 686578a8              	db	"hex",'('+0x80				; hex(x)
dda6 : 646563a8              	db	"dec",'('+0x80				; dec(x)
ddaa : 617363a8              	db	"asc",'('+0x80				; asc(x$)
ddae : 76616ca8              	db	"val",'('+0x80				; val(x$)
ddb2 : 706978656ca8          	db	"pixel",'('+0x80			; pixel(x,y)
ddb8 : 737072686974a8        	db	"sprhit",'('+0x80			; sprhit(sp)
ddbf : 73676ea8              	db	"sgn",'('+0x80				; sgn(x)
ddc3 : 61646472a8            	db	"addr",'('+0x80				; addr(var)
                             ; Numeric operators, in priority
ddc8 : aa                    	db	'*'+0x80					; Multiply
ddc9 : af                    	db 	'/'+0x80					; Divide
ddca : dc                    	db 	'\\'+0x80					; Modulus
ddcb : 3cbc                  	db	'<','<'+0x80				; Shift left
ddcd : 3ebe                  	db	'>','>'+0x80				; Shift right
ddcf : ab                    	db 	'+'+0x80					; Add
ddd0 : ad                    	db	'-'+0x80					; Subtract
                             ; Bool and conditional operators, in priority
ddd1 : a6                    	db '&'+0x80						; AND
ddd2 : fc                    	db '|'+0x80						; OR
ddd3 : de                    	db '^'+0x80						; EOR
ddd4 : 3cbd                  	db "<",'='+0x80					; Less than or equal
ddd6 : 3ebd                  	db ">",'='+0x80					; Greater than or equal
ddd8 : 3cbe                  	db "<",'>'+0x80					; Not equal
ddda : bc                    	db '<'+0x80						; Less than
dddb : be                    	db '>'+0x80						; Greater than
dddc : 3dbd                  	db "=",'='+0x80					; Equality (always last)
                             
ddde : 00                    	db  0
                             
                             
                             	
                             	
                             	include "dflat/tkjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TKJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
AS65 Assembler for R6502 [1.42].                                     Page  169
-------------------------------- bank\bank0.s --------------------------------

                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
dddf :                       df_tk_tokenjmp
dddf : 28df                  	dw	df_tk_assign
dde1 : dfdf                  	dw	df_tk_callproc
dde3 : 31df                  	dw	df_tk_comment
dde5 : 78df                  	dw	df_tk_println
dde7 : 72df                  	dw	df_tk_printat
dde9 : 78df                  	dw	df_tk_print
ddeb : c3df                  	dw	df_tk_def
dded : 18e0                  	dw	df_tk_enddef
ddef : 1ae0                  	dw	df_tk_return
ddf1 : 18e0                  	dw	df_tk_abort
ddf3 : b4df                  	dw	df_tk_local
ddf5 : a5df                  	dw	df_tk_dim
ddf7 : 18e0                  	dw	df_tk_repeat
ddf9 : 1de0                  	dw	df_tk_until
ddfb : c8df                  	dw	df_tk_for
ddfd : 18e0                  	dw	df_tk_next
ddff : 1de0                  	dw	df_tk_while
de01 : 18e0                  	dw	df_tk_wend
de03 : 1de0                  	dw	df_tk_if
de05 : 18e0                  	dw	df_tk_else
de07 : 18e0                  	dw	df_tk_endif
de09 : 1de0                  	dw	df_tk_elseif
de0b : 7fdf                  	dw	df_tk_data
de0d : 40f9                  	dw	df_trap_monitor
de0f : 18e0                  	dw	df_tk_run
de11 : 61df                  	dw	df_tk_list
de13 : 8ddf                  	dw	df_tk_input
de15 : 18e0                  	dw	df_tk_text
de17 : 2de0                  	dw	df_tk_plot
de19 : 1de0                  	dw	df_tk_cursor
de1b : 18e0                  	dw	df_tk_cls
de1d : 23e0                  	dw	df_tk_poke
de1f : 23e0                  	dw	df_tk_doke
de21 : 2de0                  	dw	df_tk_sound
de23 : 35e0                  	dw	df_tk_music
de25 : 35e0                  	dw	df_tk_play
de27 : 96df                  	dw	df_tk_read
de29 : 18e0                  	dw	df_tk_new
                             ;	dw	df_tk_renum
de2b : 1de0                  	dw	df_tk_wait
de2d : e1df                  	dw	df_tk_reset
de2f : 18e0                  	dw	df_tk_hires
de31 : 23e0                  	dw	df_tk_point
de33 : 35e0                  	dw	df_tk_line
de35 : 23e0                  	dw	df_tk_lineto
de37 : 1de0                  	dw	df_tk_pixmode
de39 : 1de0                  	dw	df_tk_ink
de3b : 1de0                  	dw	df_tk_paper
de3d : 2de0                  	dw	df_tk_circle
                             ;	dw	df_tk_himem
de3f : 18e0                  	dw	df_tk_monitor
AS65 Assembler for R6502 [1.42].                                     Page  170
-------------------------------- bank\bank0.s --------------------------------

de41 : 23e0                  	dw	df_tk_sprchar
de43 : 2de0                  	dw	df_tk_sprpos
de45 : 18e0                  	dw	df_tk_sprupd
de47 : 18e0                  	dw	df_tk_sprinit
de49 : 23e0                  	dw	df_tk_sprmulti
                             ;	dw	df_tk_save
                             ;	dw	df_tk_load
de4b : 2de0                  	dw	df_tk_bsave
de4d : 23e0                  	dw	df_tk_bload
de4f : 1de0                  	dw	df_tk_tsave
de51 : 1de0                  	dw	df_tk_tload
de53 : 1de0                  	dw	df_tk_delete
de55 : 18e0                  	dw	df_tk_dir
de57 : a5df                  	dw	df_tk_redim
                             	
de59 : ebdf                  	dw	df_tk_peek
de5b : ebdf                  	dw	df_tk_deek
de5d : f0df                  	dw	df_tk_stick
de5f : ebdf                  	dw	df_tk_get
de61 : ebdf                  	dw	df_tk_chr
de63 : fedf                  	dw	df_tk_left
de65 : fedf                  	dw	df_tk_right
de67 : 04e0                  	dw	df_tk_mid
de69 : ebdf                  	dw	df_tk_len
de6b : ebdf                  	dw	df_tk_mem
de6d : fedf                  	dw	df_tk_scrn
de6f : ebdf                  	dw	df_tk_rnd
de71 : f5df                  	dw	df_tk_elapsed
de73 : 0ae0                  	dw	df_tk_call
de75 : ebdf                  	dw	df_tk_hex
de77 : ebdf                  	dw	df_tk_dec
de79 : ebdf                  	dw	df_tk_asc
de7b : ebdf                  	dw	df_tk_val
de7d : fedf                  	dw	df_tk_pixel
de7f : ebdf                  	dw	df_tk_sprhit
de81 : ebdf                  	dw	df_tk_sgn
de83 : f5df                  	dw	df_tk_addr
                             	
de85 : 18e0                  	dw	df_tk_mult
de87 : 18e0                  	dw	df_tk_div
de89 : 18e0                  	dw	df_tk_mod
de8b : 18e0                  	dw	df_tk_asl
de8d : 18e0                  	dw	df_tk_lsr
de8f : 18e0                  	dw	df_tk_add
de91 : 18e0                  	dw	df_tk_sub
                             	
de93 : 18e0                  	dw	df_tk_and
de95 : 18e0                  	dw	df_tk_or
de97 : 18e0                  	dw	df_tk_eor
de99 : 18e0                  	dw	df_tk_lte
de9b : 18e0                  	dw	df_tk_gte
de9d : 18e0                  	dw	df_tk_ne
de9f : 18e0                  	dw	df_tk_lt
dea1 : 18e0                  	dw	df_tk_gt
dea3 : 18e0                  	dw	df_tk_eq
                             
                             
                             	
                             	
                             	
                             	
                             	
AS65 Assembler for R6502 [1.42].                                     Page  171
-------------------------------- bank\bank0.s --------------------------------

                             	include "dflat/tktyptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser type table (is it a keyword, function
                             ; In token order of df_tokensyms
dea5 :                       df_tk_tokentype
dea5 : 01                    	db	DFTK_KW
dea6 : 01                    	db	DFTK_KW
dea7 : 01                    	db	DFTK_KW
dea8 : 01                    	db	DFTK_KW
dea9 : 01                    	db	DFTK_KW
deaa : 01                    	db	DFTK_KW
deab : 01                    	db	DFTK_KW
deac : 01                    	db	DFTK_KW
dead : 01                    	db	DFTK_KW
deae : 01                    	db	DFTK_KW
deaf : 01                    	db	DFTK_KW
deb0 : 01                    	db	DFTK_KW
deb1 : 01                    	db	DFTK_KW
deb2 : 01                    	db	DFTK_KW
deb3 : 01                    	db	DFTK_KW
deb4 : 01                    	db	DFTK_KW
deb5 : 01                    	db	DFTK_KW
deb6 : 01                    	db	DFTK_KW
deb7 : 01                    	db	DFTK_KW
deb8 : 01                    	db	DFTK_KW
deb9 : 01                    	db	DFTK_KW
deba : 01                    	db	DFTK_KW
debb : 01                    	db	DFTK_KW
debc : 01                    	db	DFTK_KW
debd : 01                    	db	DFTK_KW
debe : 01                    	db	DFTK_KW
debf : 01                    	db	DFTK_KW
dec0 : 01                    	db	DFTK_KW
dec1 : 01                    	db	DFTK_KW
dec2 : 01                    	db	DFTK_KW
dec3 : 01                    	db	DFTK_KW
dec4 : 01                    	db	DFTK_KW
AS65 Assembler for R6502 [1.42].                                     Page  172
-------------------------------- bank\bank0.s --------------------------------

dec5 : 01                    	db	DFTK_KW
dec6 : 01                    	db	DFTK_KW
dec7 : 01                    	db	DFTK_KW
dec8 : 01                    	db	DFTK_KW
dec9 : 01                    	db	DFTK_KW
deca : 01                    	db	DFTK_KW
                             ;	db	DFTK_KW
decb : 01                    	db	DFTK_KW
decc : 01                    	db	DFTK_KW
decd : 01                    	db	DFTK_KW
dece : 01                    	db	DFTK_KW
decf : 01                    	db	DFTK_KW
ded0 : 01                    	db	DFTK_KW
ded1 : 01                    	db	DFTK_KW
ded2 : 01                    	db	DFTK_KW
ded3 : 01                    	db	DFTK_KW
ded4 : 01                    	db	DFTK_KW
                             ;	db	DFTK_KW
ded5 : 01                    	db	DFTK_KW
ded6 : 01                    	db	DFTK_KW
ded7 : 01                    	db	DFTK_KW
ded8 : 01                    	db	DFTK_KW
ded9 : 01                    	db	DFTK_KW
deda : 01                    	db	DFTK_KW
                             ;	db	DFTK_KW
                             ;	db	DFTK_KW
dedb : 01                    	db	DFTK_KW
dedc : 01                    	db	DFTK_KW
dedd : 01                    	db	DFTK_KW
dede : 01                    	db	DFTK_KW
dedf : 01                    	db	DFTK_KW
dee0 : 01                    	db	DFTK_KW
dee1 : 01                    	db	DFTK_KW
                             
dee2 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dee3 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dee4 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dee5 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dee6 : 42                    	db 	DFTK_FN | DFTK_STR
dee7 : 42                    	db 	DFTK_FN | DFTK_STR
dee8 : 42                    	db 	DFTK_FN | DFTK_STR
dee9 : 42                    	db 	DFTK_FN | DFTK_STR
deea : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
deeb : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
deec : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
deed : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
deee : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
deef : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
def0 : 42                    	db 	DFTK_FN | DFTK_STR
def1 : 42                    	db 	DFTK_FN | DFTK_STR
def2 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
def3 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
def4 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
def5 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
def6 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
def7 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
                             	;* Operators add the order of precedence (0=high
def8 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
def9 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
defa : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
defb : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
defc : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
AS65 Assembler for R6502 [1.42].                                     Page  173
-------------------------------- bank\bank0.s --------------------------------

defd : 3e                    	db 	DFTK_OP | DFTK_STROP | DFTK_INT | DFTK_BYT +
defe : 3a                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 2
                             
deff : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
df00 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
df01 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
df02 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
df03 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
df04 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
df05 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
df06 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
df07 : 3f                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 7
                             
                             
                             	
                             	
                             	
                             	
                             
                             	include "dflat/toksubs.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKSUBS.S
                             ;*  Module that implements the tokenisation of ke
                             ;*  When a line is being parsed, the index of the
                             ;*  found in the symbol table is used to call a r
                             ;*  here.  The job of a routine here is then to f
                             ;*  parse the raw input e.g. a command that takes
                             ;*  parameters, need to do what it needs to ident
                             ;*  Despite the number of keywords in dflat, this
                             ;*  anywhere near the size of rtsubs.s (the runti
                             ;*  equivalent of this) because there is so much 
                             ;*  synactically.
                             ;*  The tokenised output is put in to its own buf
                             ;*  if the whole input was tokenised successfully
                             ;*  dflat will either try and execute (if in imme
                             ;*  mode), or save it to program memory in line n
                             ;*  order.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
df08 :                       mod_sz_toksubs_s
                             
                             ;* General routine to tokenise a mandatory variab
df08 :                       df_tk_variable
df08 : 20afd8           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
df0b : 204dd8           [ 6] 	jsr df_tk_peek_buf
df0e : 2096d8           [ 6] 	jsr df_tk_isalpha
df11 : 9013             [ 3] 	bcc df_tk_error
df13 : a900             [ 2] 	lda #0
df15 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  174
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* Parse assignment preamble
                             ;****************************************
df16 :                       df_tk_preassign
                             	; Put assignment token
                             	; assume its a numeric int for now
df16 : a980             [ 2] 	lda #0x80
df18 : 205ed8           [ 6] 	jsr df_tk_put_tok
                             	
                             	; first find or create a variable
df1b : 2008df           [ 6] 	jsr df_tk_variable
df1e : 2089d9           [ 6] 	jsr df_tk_var
                             	; next char should be '='
df21 : a93d             [ 2] 	lda #'='
df23 : 4cded8           [ 3] 	jmp df_tk_expect_tok_err
                             
df26 :                       df_tk_error
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric assignment
                             ;****************************************
df28 :                       df_tk_assign
df28 : 2016df           [ 6] 	jsr df_tk_preassign
                             	; tokenise an expression (int or byte)
df2b : 20d0da           [ 6] 	jsr df_tk_expression
df2e : b0f6             [ 3] 	bcs df_tk_error
df30 : 60               [ 6] 	rts
                             
df31 :                       df_tk_comment
                             	; copy all subsequent chars to token
df31 : 2053d8           [ 6] 	jsr df_tk_get_buf
df34 : f006             [ 3] 	beq df_tk_comment_done
df36 : 205ed8           [ 6] 	jsr df_tk_put_tok
df39 : 4c31df           [ 3] 	jmp df_tk_comment
df3c :                       df_tk_comment_done
df3c : 18               [ 2] 	clc
df3d : 60               [ 6] 	rts
                             
                             ; Utility to get procedure name with _
df3e :                       df_tk_listp_procname
                             	; try and find the first proc
df3e : a95f             [ 2] 	lda #'_'
df40 : 20d3d8           [ 6] 	jsr df_tk_expect_tok
df43 : b01a             [ 3] 	bcs df_tk_listp_procname_err
                             	; now get first alpha then all alphanum
df45 : 204dd8           [ 6] 	jsr df_tk_peek_buf
df48 : 2096d8           [ 6] 	jsr df_tk_isalpha
df4b : 9012             [ 3] 	bcc df_tk_listp_procname_err
df4d :                       df_tk_listp_procname_ch
df4d : 204dd8           [ 6] 	jsr df_tk_peek_buf
df50 : 20a3d8           [ 6] 	jsr df_tk_isalphanum
df53 : 9009             [ 3] 	bcc df_tk_listp_procname_ok
df55 : 2053d8           [ 6] 	jsr df_tk_get_buf
df58 : 205ed8           [ 6] 	jsr df_tk_put_tok
df5b : 4c4ddf           [ 3] 	jmp df_tk_listp_procname_ch
df5e :                       df_tk_listp_procname_ok
df5e : 60               [ 6] 	rts		; C=0
df5f :                       df_tk_listp_procname_err
df5f : 38               [ 2] 	sec
df60 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  175
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; list		: list whole program
                             ; list n	: list line n to end
                             ; list *	: list all procedures
                             ; list _proc: list _proc lines
df61 :                       df_tk_list
df61 : 203edf           [ 6] 	jsr df_tk_listp_procname
df64 : 900b             [ 3] 	bcc df_tk_list_done
                             	; if not found try '*' or normal list
df66 :                       df_tk_list_procs
                             	; first try for list symbol
df66 : a92a             [ 2] 	lda #'*'
df68 : 20d3d8           [ 6] 	jsr df_tk_expect_tok
df6b : 9004             [ 3] 	bcc df_tk_list_done
                             	; else normal line number or nothing
df6d :                       df_tk_list_line
                             	; tokenise an expression, nothing is ok
df6d : 20d0da           [ 6] 	jsr df_tk_expression
df70 : 18               [ 2] 	clc
df71 :                       df_tk_list_done
df71 : 60               [ 6] 	rts
                             
                             ; printat,print,println can have 0,1 or many expr
df72 :                       df_tk_printat
                             	; Must get 2 parms for x,y
df72 : 2023e0           [ 6] 	jsr df_tk_2parms
                             	; try getting more parms
df75 : 4c84df           [ 3] 	jmp df_tk_expr_more
df78 :                       df_tk_println
df78 :                       df_tk_print
                             	; tokenise an expression ok if null
df78 : 20d0da           [ 6] 	jsr df_tk_expression
df7b : 9007             [ 3] 	bcc df_tk_expr_more
df7d :                       df_tk_print_done
df7d :                       df_tk_data_done
df7d : 18               [ 2] 	clc
df7e : 60               [ 6] 	rts
                             
                             ; these must have 1 or more expressions
df7f :                       df_tk_data
df7f :                       df_tk_asm_db
df7f :                       df_tk_asm_dw
df7f :                       df_tk_next_expr
                             	; tokenise an expression
df7f : 20d0da           [ 6] 	jsr df_tk_expression
df82 : b065             [ 3] 	bcs df_tk_error2
                             ; this loop keeps processing comma seprated exore
df84 :                       df_tk_expr_more
                             	; is there more to come?
df84 : a92c             [ 2] 	lda #','
df86 : 20d3d8           [ 6] 	jsr df_tk_expect_tok
df89 : b0f2             [ 3] 	bcs df_tk_data_done
df8b : 90f2             [ 3] 	bcc df_tk_next_expr
                             
df8d :                       df_tk_input
df8d : 20afd8           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
df90 : 2008df           [ 6] 	jsr df_tk_variable
df93 : 4c89d9           [ 3] 	jmp df_tk_var
                             	
df96 :                       df_tk_read
                             	; tokenise a variable
AS65 Assembler for R6502 [1.42].                                     Page  176
-------------------------------- bank\bank0.s --------------------------------

df96 : 2008df           [ 6] 	jsr df_tk_variable
df99 : 2089d9           [ 6] 	jsr df_tk_var
                             	; if not at the end then keep going
df9c : a92c             [ 2] 	lda #','
df9e : 20d3d8           [ 6] 	jsr df_tk_expect_tok
dfa1 : 90f3             [ 3] 	bcc df_tk_read
dfa3 : 18               [ 2] 	clc
dfa4 : 60               [ 6] 	rts
                             
dfa5 :                       df_tk_dim
dfa5 :                       df_tk_redim
                             	; tokenise a variable
dfa5 : 2008df           [ 6] 	jsr df_tk_variable
dfa8 : 20d1d9           [ 6] 	jsr df_tk_arrvar
                             	; if not at the end then keep going
dfab : a92c             [ 2] 	lda #','
dfad : 20d3d8           [ 6] 	jsr df_tk_expect_tok
dfb0 : 90f3             [ 3] 	bcc df_tk_dim
dfb2 : 18               [ 2] 	clc
dfb3 : 60               [ 6] 	rts
                             
dfb4 :                       df_tk_local
                             	; tokenise a variable
dfb4 : 2008df           [ 6] 	jsr df_tk_variable
dfb7 : 20bbd9           [ 6] 	jsr df_tk_localvar
                             	; if not at the end then keep going
dfba : a92c             [ 2] 	lda #','
dfbc : 20d3d8           [ 6] 	jsr df_tk_expect_tok
dfbf : 90f3             [ 3] 	bcc df_tk_local
dfc1 : 18               [ 2] 	clc
dfc2 : 60               [ 6] 	rts
                             
                             ; A = 0 : Def
                             ; A = 1 : Call
dfc3 :                       df_tk_def
dfc3 : a900             [ 2] 	lda #0
dfc5 : 4cdcd9           [ 3] 	jmp df_tk_proc
                             
                             ; syntax : for a=1,10,1
dfc8 :                       df_tk_for
dfc8 : 20afd8           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise the for variable
dfcb : a901             [ 2] 	lda #DFVVT_INT
dfcd : 2089d9           [ 6] 	jsr df_tk_var
                             
                             	; always expect '='
                             	; then starting value
dfd0 : a93d             [ 2] 	lda #'='
dfd2 : 20dcda           [ 6] 	jsr df_tk_tok_expression
                             	
                             	; always expect ',' separator
                             	; then ending value
dfd5 : a92c             [ 2] 	lda #','
dfd7 : 20dcda           [ 6] 	jsr df_tk_tok_expression
                             
                             	; always expect ',' separator
                             	; then step value
dfda : a92c             [ 2] 	lda #','
dfdc : 4cdcda           [ 3] 	jmp df_tk_tok_expression
                             
                             	
AS65 Assembler for R6502 [1.42].                                     Page  177
-------------------------------- bank\bank0.s --------------------------------

                             ; call to proc should not occur by itself
dfdf :                       df_tk_callproc
dfdf : 38               [ 2] 	sec
dfe0 : 60               [ 6] 	rts
                             
                             ; timer reset expects an int variable only
dfe1 :                       df_tk_reset
dfe1 : 20afd8           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
dfe4 : a901             [ 2] 	lda #DFVVT_INT
dfe6 : 4c89d9           [ 3] 	jmp df_tk_var
                             
dfe9 :                       df_tk_error2
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ; These functions expect 1 parmeter
dfeb :                       df_tk_len
dfeb :                       df_tk_chr
dfeb :                       df_tk_get
dfeb :                       df_tk_deek
dfeb :                       df_tk_vpeek
dfeb :                       df_tk_peek
dfeb :                       df_tk_mem
dfeb :                       df_tk_rnd
dfeb :                       df_tk_hex
dfeb :                       df_tk_dec
dfeb :                       df_tk_asc
dfeb :                       df_tk_val
dfeb :                       df_tk_sprhit
dfeb :                       df_tk_sgn
dfeb : 20d0da           [ 6] 	jsr df_tk_expression
dfee : b0f9             [ 3] 	bcs df_tk_error2
dff0 :                       df_tk_closebrkt
dff0 :                       df_tk_stick				; This function needs no parms
dff0 : a929             [ 2] 	lda #')'
dff2 : 4cded8           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ; These function expect a variable only
dff5 :                       df_tk_addr
dff5 :                       df_tk_elapsed
dff5 : 2008df           [ 6] 	jsr df_tk_variable
dff8 : 2089d9           [ 6] 	jsr df_tk_var
                             	; must have close braket
dffb : 4cf0df           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 2 parameters
dffe :                       df_tk_left
dffe :                       df_tk_right
dffe :                       df_tk_scrn
dffe :                       df_tk_pixel
dffe : 2023e0           [ 6] 	jsr df_tk_2parms
e001 : 4cf0df           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 3 parameters
e004 :                       df_tk_mid
e004 : 202de0           [ 6] 	jsr df_tk_3parms
e007 : 4cf0df           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 4 parameters
e00a :                       df_tk_call
AS65 Assembler for R6502 [1.42].                                     Page  178
-------------------------------- bank\bank0.s --------------------------------

e00a : 2023e0           [ 6] 	jsr df_tk_2parms
e00d : a92c             [ 2] 	lda #','
e00f : 20ded8           [ 6] 	jsr df_tk_expect_tok_err
e012 : 2023e0           [ 6] 	jsr df_tk_2parms
e015 : 4cf0df           [ 3] 	jmp df_tk_closebrkt
                             
                             ;all these commands require no parameters
e018 :                       df_tk_else
e018 :                       df_tk_endif
e018 :                       df_tk_enddef
e018 :                       df_tk_abort
e018 :                       df_tk_repeat
e018 :                       df_tk_next
e018 :                       df_tk_wend
e018 :                       df_tk_run
e018 :                       df_tk_cls
e018 :                       df_tk_new
e018 :                       df_tk_mult
e018 :                       df_tk_div
e018 :                       df_tk_mod
e018 :                       df_tk_asl
e018 :                       df_tk_lsr
e018 :                       df_tk_add
e018 :                       df_tk_sub
e018 :                       df_tk_and
e018 :                       df_tk_or
e018 :                       df_tk_eor
e018 :                       df_tk_lte
e018 :                       df_tk_lt
e018 :                       df_tk_gte
e018 :                       df_tk_gt
e018 :                       df_tk_ne
e018 :                       df_tk_eq
e018 :                       df_tk_monitor
e018 :                       df_tk_sprupd
e018 :                       df_tk_sprinit
e018 :                       df_tk_text
e018 :                       df_tk_hires
e018 :                       df_tk_dir
e018 : 18               [ 2] 	clc
e019 : 60               [ 6] 	rts
                             
                             ; 0 or 1 parameter special!
e01a :                       df_tk_return
e01a : 4cd0da           [ 3] 	jmp df_tk_expression
                             
                             
                             ; These commands expect 1 parameter	
e01d :                       df_tk_while
e01d :                       df_tk_until
e01d :                       df_tk_if
e01d :                       df_tk_elseif
e01d :                       df_tk_wait
e01d :                       df_tk_cursor
e01d :                       df_tk_del
e01d :                       df_tk_chdir
e01d :                       df_tk_pixmode
e01d :                       df_tk_ink
e01d :                       df_tk_paper
                             ;df_tk_himem
e01d :                       df_tk_tload
e01d :                       df_tk_tsave
AS65 Assembler for R6502 [1.42].                                     Page  179
-------------------------------- bank\bank0.s --------------------------------

e01d :                       df_tk_delete
e01d :                       df_tk_asm_org
e01d :                       df_tk_asm_opt
e01d :                       df_tk_asm_ds
                             
                             	; first parm
e01d : 20d0da           [ 6] 	jsr df_tk_expression
e020 : b0c7             [ 4] 	bcs df_tk_error2
e022 : 60               [ 6] 	rts
                             
                             ; These commands expect 2 numeric parameters
e023 :                       df_tk_poke
e023 :                       df_tk_doke
e023 :                       df_tk_point
e023 :                       df_tk_sprchar
e023 :                       df_tk_sprmulti
                             ;df_tk_load
                             ;df_tk_save
e023 :                       df_tk_bload
e023 :                       df_tk_lineto
e023 :                       df_tk_2parms
                             	; first parm
e023 : 20d0da           [ 6] 	jsr df_tk_expression
e026 : b0c1             [ 4] 	bcs df_tk_error2
                             	; tokenise second parm
e028 : a92c             [ 2] 	lda #','
e02a : 4cdcda           [ 3] 	jmp df_tk_tok_expression
                             
                             ; these commands expect 3 numeric parameters
e02d :                       df_tk_hchar
e02d :                       df_tk_plot
e02d :                       df_tk_circle
e02d :                       df_tk_sound
e02d :                       df_tk_colour
e02d :                       df_tk_spritepos
                             ;df_tk_renum
e02d :                       df_tk_sprpos
e02d :                       df_tk_bsave
e02d :                       df_tk_3parms
e02d : 2023e0           [ 6] 	jsr df_tk_2parms
                             	; tokenise third parm
e030 : a92c             [ 2] 	lda #','
e032 : 4cdcda           [ 3] 	jmp df_tk_tok_expression
                             
                             ; these commands expect 4 numeric parameters
e035 :                       df_tk_play
e035 :                       df_tk_music
e035 :                       df_tk_line
e035 :                       df_tk_4parms
e035 : 2023e0           [ 6] 	jsr df_tk_2parms
e038 : a92c             [ 2] 	lda #','
e03a : 20ded8           [ 6] 	jsr df_tk_expect_tok_err
e03d : 4c23e0           [ 3] 	jmp df_tk_2parms
                             
                             ;df_tk_fill
                             ;df_tk_5parms
                             ;	jsr df_tk_3parms
                             ;	lda #','
                             ;	jsr df_tk_expect_tok_err
                             ;	jmp df_tk_2parms
                             
e040 :                       mod_sz_toksubs_e
AS65 Assembler for R6502 [1.42].                                     Page  180
-------------------------------- bank\bank0.s --------------------------------

                             
                             
e040 :                       mod_sz_tokenise_e
                             
                             
                             
                             	include "dflat/progedit.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROGEDIT.S
                             ;*  dflat module to enable editing of a dflat pro
                             ;*  dflat bascially starts here - waiting for use
                             ;*  when a line is entered, if it is not preceede
                             ;*  line number it is tokenised and attempted to 
                             ;*  immediatly.  If it is preceeded by a line num
                             ;*  number is used to save the tokenised line in 
                             ;*  position in memory.
                             ;*  So this is just like a good old editing sessi
                             ;*  nearly any common flavour of 80s basic. Howev
                             ;*  tokenises everything except whitespace and st
                             ;*  constants - even when saving.  Unlike my trus
                             ;*  where I could type in any garbage and it woul
                             ;*  saved with the line number, dflat needs to be
                             ;*  tokenise the line.  So it's actually a bit mo
                             ;*  Atari 8 bit BASIC.
                             ;*
                             ;************************************************
                             
e040 :                       mod_sz_progedit_s
                             
                             ;****************************************
                             ;* df_pg_find_line
                             ;* Find a line number in X(L), A(H)
                             ;* Return X(L), A(H) of line, Y = Length
                             ;* C=1 Exact match not found, C=0 Exact Found
                             ;* If not exact match then next highest line addr
                             ;* Will be in X and A
                             ;****************************************
e040 :                       df_pg_find_line
e040 : 863d             [ 3] 	stx num_a
e042 : 853e             [ 3] 	sta num_a+1
e044 : a566             [ 3] 	lda df_prgstrt
e046 : 8549             [ 3] 	sta num_tmp
e048 : a567             [ 3] 	lda df_prgstrt+1
e04a : 854a             [ 3] 	sta num_tmp+1
e04c :                       df_pg_check_next_line
e04c : a549             [ 3] 	lda num_tmp
e04e : c568             [ 3] 	cmp df_prgend
e050 : d011             [ 3] 	bne df_pg_check_line
e052 : a54a             [ 3] 	lda num_tmp+1
e054 : c569             [ 3] 	cmp df_prgend+1
e056 : d00b             [ 3] 	bne df_pg_check_line
e058 :                       df_pr_line_gt_target	
                             	; End of program or line > target
                             	; X,A = address of finish
                             	; Load Y with the length
AS65 Assembler for R6502 [1.42].                                     Page  181
-------------------------------- bank\bank0.s --------------------------------

e058 : a200             [ 2] 	ldx #0
e05a : a149             [ 6] 	lda (num_tmp,x)
e05c : a8               [ 2] 	tay
e05d : a649             [ 3] 	ldx num_tmp
e05f : a54a             [ 3] 	lda num_tmp+1
e061 : 38               [ 2] 	sec
e062 : 60               [ 6] 	rts
e063 :                       df_pg_check_line
e063 : 38               [ 2] 	sec					; Do a trial subtract of
e064 : a001             [ 2] 	ldy #DFTK_LINNUM	; target - line
e066 : a53d             [ 3] 	lda num_a
e068 : f149             [ 5] 	sbc (num_tmp),y
e06a : 854b             [ 3] 	sta num_tmp+2		; Partial result of sbc
e06c : c8               [ 2] 	iny
e06d : a53e             [ 3] 	lda num_a+1
e06f : f149             [ 5] 	sbc (num_tmp),y
e071 : 054b             [ 3] 	ora num_tmp+2		; or with partial result for z ch
                             	; If C=0 then line > target (done)
e073 : 90e3             [ 3] 	bcc df_pr_line_gt_target
                             	; If partial result Z=0 then got an exact match
e075 : f00f             [ 3] 	beq df_pr_line_match
                             	; Else we go to next line
e077 : a200             [ 2] 	ldx #0
e079 : 18               [ 2] 	clc
e07a : a549             [ 3] 	lda num_tmp
e07c : 6149             [ 6] 	adc (num_tmp,x)
e07e : 8549             [ 3] 	sta num_tmp
e080 : 90ca             [ 3] 	bcc df_pg_check_next_line
e082 : e64a             [ 5] 	inc num_tmp+1
e084 : d0c6             [ 3] 	bne df_pg_check_next_line	; Always
e086 :                       df_pr_line_match
e086 : a200             [ 2] 	ldx #0
e088 : a149             [ 6] 	lda (num_tmp,x)
e08a : a8               [ 2] 	tay
e08b : a649             [ 3] 	ldx num_tmp
e08d : a54a             [ 3] 	lda num_tmp+1
e08f : 18               [ 2] 	clc
e090 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* df_pg_insert_block
                             ;* Insert a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
e091 :                       df_pg_insert_block
                             	; Inserting requires a block copy from
                             	; end of program space to the insert address
                             	
                             	; Save address as this is the lowest address
e091 : 863d             [ 3] 	stx num_a
e093 : 853e             [ 3] 	sta num_a+1
                             	; End of program space is the first byte to move
e095 : a568             [ 3] 	lda df_prgend
e097 : 8545             [ 3] 	sta num_x
e099 : a569             [ 3] 	lda df_prgend+1
e09b : 8546             [ 3] 	sta num_x+1	
e09d :                       df_pg_insert_byte
                             	; Move a byte from the current top
e09d : a200             [ 2] 	ldx #0
e09f : a145             [ 6] 	lda (num_x,x)
                             	; To the new top (+Y)
AS65 Assembler for R6502 [1.42].                                     Page  182
-------------------------------- bank\bank0.s --------------------------------

e0a1 : 9145             [ 5] 	sta (num_x),y
                             	; Compare current address with lowest
e0a3 : a545             [ 3] 	lda num_x
e0a5 : c53d             [ 3] 	cmp num_a
e0a7 : d012             [ 3] 	bne df_pg_insert_next_byte
e0a9 : a546             [ 3] 	lda num_x+1
e0ab : c53e             [ 3] 	cmp num_a+1
e0ad : d00c             [ 3] 	bne df_pg_insert_next_byte
                             	; Finished, update program end pointer
e0af : 18               [ 2] 	clc
e0b0 : 98               [ 2] 	tya
e0b1 : 6568             [ 3] 	adc df_prgend
e0b3 : 8568             [ 3] 	sta df_prgend
                             	_bcc 2
                             
e0b7 : e669             [ 5] 	inc df_prgend+1
e0b9 : 18               [ 2] 	clc
e0ba : 60               [ 6] 	rts	; C=0
e0bb :                       df_pg_insert_next_byte
                             	; Decrement current address (trashes A)
                             	_decZPWordA num_x
                             
e0c3 : 4c9de0           [ 3] 	jmp df_pg_insert_byte
                             
                             ;****************************************
                             ;* df_pg_delete_block
                             ;* Delete a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
e0c6 :                       df_pg_delete_block
                             	; Deleting requires a block copy from
                             	; deletion address to end of program
                             	
                             	; Save address as this is the start address
e0c6 : 863d             [ 3] 	stx num_a
e0c8 : 853e             [ 3] 	sta num_a+1
e0ca : a200             [ 2] 	ldx #0	; No indirect indexing
e0cc :                       df_pg_delete_byte
                             	; Move a byte from current+Y
e0cc : b13d             [ 5] 	lda (num_a),y
                             	; Down to current (x=0)
e0ce : 813d             [ 6] 	sta (num_a,x)
                             	; Compare current address with lowest
e0d0 : a53d             [ 3] 	lda num_a
e0d2 : c568             [ 3] 	cmp df_prgend
e0d4 : d017             [ 3] 	bne df_pg_delete_next_byte
e0d6 : a53e             [ 3] 	lda num_a+1
e0d8 : c569             [ 3] 	cmp df_prgend+1
e0da : d011             [ 3] 	bne df_pg_delete_next_byte
                             	; Finished, update program end pointer
e0dc : 843d             [ 3] 	sty num_a
e0de : 38               [ 2] 	sec
e0df : a568             [ 3] 	lda df_prgend
e0e1 : e53d             [ 3] 	sbc num_a
e0e3 : 8568             [ 3] 	sta df_prgend
e0e5 : a569             [ 3] 	lda df_prgend+1
e0e7 : e900             [ 2] 	sbc #0
e0e9 : 8569             [ 3] 	sta df_prgend+1
e0eb : 18               [ 2] 	clc
e0ec : 60               [ 6] 	rts
e0ed :                       df_pg_delete_next_byte
AS65 Assembler for R6502 [1.42].                                     Page  183
-------------------------------- bank\bank0.s --------------------------------

                             	; Increment current address
                             	_incZPWord num_a
                             
e0f3 : 4ccce0           [ 3] 	jmp df_pg_delete_byte
                             
                             
                             ;****************************************
                             ;* Get a line of input
                             ;* Input: C=1 for echo, 0 for no echo
                             ;* Output: C=0 means linbuff is valid
                             ;****************************************
e0f6 :                       df_pg_inputline
                             	; C is set on input for echo or not
                             	; Read a line of input
e0f6 : 203fc4           [ 6] 	jsr io_read_line
                             	
                             	; If nothing entered then sec
e0f9 : 98               [ 2] 	tya
e0fa : d002             [ 3] 	bne df_pg_inputline_ok
e0fc : 38               [ 2] 	sec
e0fd : 60               [ 6] 	rts
e0fe :                       df_pg_inputline_ok
                             	; Copy input bytes to line buffer
                             	; for lexical analysis
e0fe :                       df_pg_copyinputtolinbuff
e0fe : b139             [ 5] 	lda (buf_lo),y
e100 : 990004           [ 5] 	sta df_linbuff,y
e103 : 88               [ 2] 	dey
e104 : 10f8             [ 4] 	bpl df_pg_copyinputtolinbuff
e106 : 18               [ 2] 	clc
e107 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_pg_dflat
                             ;* Start a dflat editing session
                             ;****************************************
e108 :                       df_pg_dflat
                             	; reset stack pointer
e108 : a2ff             [ 2] 	ldx #255
e10a : 9a               [ 2] 	txs
                             
                             	; error handler address
e10b : a9b2             [ 2] 	lda #lo(df_trap_error)
e10d : 8561             [ 3] 	sta df_pc
e10f : a9f8             [ 2] 	lda #hi(df_trap_error)
e111 : 8562             [ 3] 	sta df_pc+1
                             	
                             	; make sure normal I/O is resumed
                             	;jsr io_init_default
e113 :                       df_pg_prompt
e113 : a2a8             [ 2] 	ldx #lo(df_pg_prompt_msg)
e115 : a9e1             [ 2] 	lda #hi(df_pg_prompt_msg)
e117 : 2078c4           [ 6] 	jsr io_print_line
e11a : a900             [ 2] 	lda #0
e11c : 855f             [ 3] 	sta df_immed
e11e :                       df_pg_getcommand
                             	; current line is the token buffer when editing
e11e : a980             [ 2] 	lda #lo(df_tokbuff)
e120 : 8587             [ 3] 	sta df_currlin
e122 : a904             [ 2] 	lda #hi(df_tokbuff)
e124 : 8588             [ 3] 	sta df_currlin+1
AS65 Assembler for R6502 [1.42].                                     Page  184
-------------------------------- bank\bank0.s --------------------------------

e126 : 38               [ 2] 	sec
e127 : 20f6e0           [ 6] 	jsr df_pg_inputline
e12a : b0e7             [ 3] 	bcs df_pg_prompt	; If no input then back to prom
e12c : 2047e1           [ 6] 	jsr df_pg_tokenise
e12f : a55f             [ 3] 	lda df_immed
e131 : f0eb             [ 3] 	beq df_pg_getcommand
                             	; clear variables ready to run the statement
e133 : 20afe1           [ 6] 	jsr df_initrun
                             	; run from tokbuff
e136 : a280             [ 2] 	ldx #lo(df_tokbuff)
e138 : a904             [ 2] 	lda #hi(df_tokbuff)
                             	; always skip length and line number
e13a : a003             [ 2] 	ldy #3
e13c : 8489             [ 3] 	sty df_exeoff
                             	; init currlin
e13e : 2021e5           [ 6] 	jsr df_rt_init_stat_ptr
                             	; start execution
e141 : 2034e5           [ 6] 	jsr df_rt_exec_stat
                             	; Go and get another line of input
e144 : 4c13e1           [ 3] 	jmp df_pg_prompt
                             
                             	; tokenise the line
e147 :                       df_pg_tokenise
e147 : a900             [ 2] 	lda #0
e149 : 855e             [ 3] 	sta errno
e14b : 2014db           [ 6] 	jsr df_lexer_line
                             	; check if line number == 0
e14e : ad8104           [ 4] 	lda df_tokbuff+DFTK_LINNUM
e151 : 0d8204           [ 4] 	ora df_tokbuff+DFTK_LINNUM+1
e154 : d00a             [ 3] 	bne df_pg_line_number
                             	; check if line empty
e156 : ad8004           [ 4] 	lda df_tokbuff
e159 : f004             [ 3] 	beq df_pg_nothing
                             	
                             	; line number == 0 so in immediate mode from tok
                             	; don't zero out the line length as some routine
                             	; run the line in immediate mode
e15b : a901             [ 2] 	lda #1
e15d : 855f             [ 3] 	sta df_immed
e15f :                       df_pg_nothing
e15f : 60               [ 6] 	rts
                             
                             	; put the numbered line in to the right bit of m
e160 :                       df_pg_line_number
                             	; Check if this line exists
e160 : ad8104           [ 4] 	lda df_tokbuff+DFTK_LINNUM
e163 : aa               [ 2] 	tax
e164 : ad8204           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
e167 : 2040e0           [ 6] 	jsr df_pg_find_line
                             	; Save line address for later X then A
e16a : 8538             [ 3] 	sta tmp_d
e16c : 8a               [ 2] 	txa
e16d : 48               [ 3] 	pha
e16e : a538             [ 3] 	lda tmp_d
e170 : 48               [ 3] 	pha
                             	; If line exists then it needs deleting
e171 : b003             [ 3] 	bcs df_pg_skip_del_line
                             
                             	; delete line from program
e173 : 20c6e0           [ 6] 	jsr df_pg_delete_block
e176 :                       df_pg_skip_del_line
                             	; If line length is zero
AS65 Assembler for R6502 [1.42].                                     Page  185
-------------------------------- bank\bank0.s --------------------------------

                             	; then nothing else to do (i.e. line was deleted
e176 : ad8004           [ 4] 	lda df_tokbuff+DFTK_LINLEN
                             	; save the tokenised line length
e179 : 48               [ 3] 	pha
e17a : d004             [ 3] 	bne df_pg_insertline
                             	; Length was zero, so get temp stuff off stack
e17c : 68               [ 4] 	pla
e17d : 68               [ 4] 	pla
e17e : 68               [ 4] 	pla
e17f : 60               [ 6] 	rts
                             
                             	; insert a program line unless it is immediate
e180 :                       df_pg_insertline
                             	; Restore previously saved length
e180 : 68               [ 4] 	pla
e181 : a8               [ 2] 	tay
                             	; Restore previously saved address to reinsert t
e182 : 68               [ 4] 	pla
e183 : 8538             [ 3] 	sta tmp_d
e185 : 68               [ 4] 	pla
e186 : aa               [ 2] 	tax
e187 : a538             [ 3] 	lda tmp_d
                             	; And save it all back to stack again A,X,Y
                             	_pushAXY
                             
                             	; We now have insert address and length
e192 : 2091e0           [ 6] 	jsr df_pg_insert_block
                             	; Restore length and sub 1 to get index in to th
e195 : 68               [ 4] 	pla
e196 : a8               [ 2] 	tay
e197 : 88               [ 2] 	dey
                             	; Restore address to a pointer, X is pulled firs
e198 : 68               [ 4] 	pla
e199 : aa               [ 2] 	tax
e19a : 863d             [ 3] 	stx num_a
e19c : 68               [ 4] 	pla
e19d : 853e             [ 3] 	sta num_a+1
                             	; num_a is destination, tokbuff is source, Y is 
e19f :                       df_pg_insertlinbyte
e19f : b98004           [ 4] 	lda df_tokbuff,y
e1a2 : 913d             [ 5] 	sta (num_a),y
e1a4 : 88               [ 2] 	dey
e1a5 : 10f8             [ 3] 	bpl df_pg_insertlinbyte
e1a7 : 60               [ 6] 	rts
                             	
e1a8 :                       df_pg_prompt_msg
e1a8 : 52656164790d00        	db "Ready",UTF_CR,0
                             
e1af :                       mod_sz_progedit_e
                             
                             	include "dflat/runtime.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RUNTIME.S
                             ;*  This module is the runtime coordinator.  When
                             ;*  wants to run a program, execution of statemen
AS65 Assembler for R6502 [1.42].                                     Page  186
-------------------------------- bank\bank0.s --------------------------------

                             ;*  required procedure starts and proceeds from t
                             ;*  according to normal program flow.
                             ;*  This module also contains critical routines f
                             ;*  evaluation of expressions (numeric and string
                             ;*  Whilst the code to implement a specific comma
                             ;*  rtsubs.s, this is the key module that control
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
e1af :                       mod_sz_runtime_s
                             
                             ;****************************************
                             ;* df_initrun
                             ;* Initialise program space for runtime
                             ;****************************************
e1af :                       df_initrun
                             	; Set the key mask to check every 16 instruction
e1af : a910             [ 2] 	lda #0x10
e1b1 : 855d             [ 3] 	sta df_checkmsk
e1b3 : 855c             [ 3] 	sta df_checkkey
                             
                             	; String and array heap initialisation
                             	; Grows up from end of prog space PLUS 1
                             	; Initially empty (dim will allocate)
                             	_cpyZPWord df_prgend,df_starstrt
                             
                             	_incZPWord df_starstrt
                             
                             	_cpyZPWord df_starstrt,df_starend
                             
                             
e1cb : a2ff             [ 2] 	ldx #0xff
                             	; Reset runtime stack (grows down)
e1cd : 8677             [ 3] 	stx df_rtstop
                             	; make X=0
e1cf : e8               [ 2] 	inx
                             	; Reset parameter stack (grows up)
e1d0 : 8678             [ 3] 	stx df_parmtop
                             	; Reset data pointer high byte
e1d2 : 8696             [ 3] 	stx df_currdat+1
                             	; if nest counter zeroed
e1d4 : 8694             [ 3] 	stx df_ifnest
                             
                             	; clear proc addresses
e1d6 : 20dae1           [ 6] 	jsr df_rt_init_vvt
                             
                             ;	clc
e1d9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Initialise vvt
                             ;****************************************
e1da :                       df_rt_init_vvt
                             	; starting at beginning of vvt
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
e1e2 : a200             [ 2] 	ldx #0
e1e4 :                       df_rt_init_vvt_slot
e1e4 : a5a2             [ 3] 	lda df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  187
-------------------------------- bank\bank0.s --------------------------------

e1e6 : c56e             [ 3] 	cmp df_vvtstrt
e1e8 : d006             [ 3] 	bne df_rt_init_vvt_slot_undim
e1ea : a5a3             [ 3] 	lda df_tmpptra+1
e1ec : c56f             [ 3] 	cmp df_vvtstrt+1
e1ee : f025             [ 4] 	beq df_rt_init_done
e1f0 :                       df_rt_init_vvt_slot_undim
                             	; Only zero out proc and array pointers
                             	; Scalar variables are not initialised
e1f0 : a000             [ 2] 	ldy #0
e1f2 : b1a2             [ 5] 	lda (df_tmpptra),y
e1f4 : 29c0             [ 2] 	and #DFVVT_PROC|DFVVT_PTR
e1f6 : f00f             [ 4] 	beq df_rt_init_vvt_skip
e1f8 : a204             [ 2] 	ldx #4			; Number of bytes to clear for array
e1fa : 2940             [ 2] 	and #DFVVT_PROC	; But if proc, then 3 bytes
e1fc : f001             [ 3] 	beq df_rt_init_vvt_skip_proc
e1fe : ca               [ 2] 	dex
e1ff :                       df_rt_init_vvt_skip_proc
e1ff : 98               [ 2] 	tya				; Set A to 0 (Y already zero)
                             	; skip over the first byte which is variable typ
e200 : c8               [ 2] 	iny
                             	; zero out bytes for proc and arrays
e201 :                       df_rt_init_vvt_z_loop
e201 : 91a2             [ 5] 	sta (df_tmpptra),y
e203 : c8               [ 2] 	iny
e204 : ca               [ 2] 	dex
e205 : d0fa             [ 3] 	bne df_rt_init_vvt_z_loop
e207 :                       df_rt_init_vvt_skip
                             	; increment pointer to next slot
                             	_adcZPByte df_tmpptra,#8
                             
e212 : 4ce4e1           [ 3] 	jmp df_rt_init_vvt_slot 	; Don't rely on bcc
e215 :                       df_rt_init_done
e215 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* pop  X,A result from operator stack
                             ;****************************************
e216 :                       df_rt_getnval
                             	; evaluate the expression
e216 : 201ce2           [ 6] 	jsr df_rt_neval
                             	; get X,A off operator stack
e219 : 4c9af7           [ 3] 	jmp df_ost_popInt
                             
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* Push result to operator stack
                             ;****************************************
e21c :                       df_rt_neval
                             	; push terminator on cpu stack
                             	; so we know where we are
e21c : a900             [ 2] 	lda #0
e21e : 48               [ 3] 	pha
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword token push on to operator stack
e21f :                       df_rt_neval_optk
e21f : a489             [ 3] 	ldy df_exeoff
                             	; check end of line
                             
AS65 Assembler for R6502 [1.42].                                     Page  188
-------------------------------- bank\bank0.s --------------------------------

                             ;	cpy df_eolidx
                             ;	beq df_rt_neval_process
e221 : c480             [ 3] 	cpy df_nxtstidx
e223 : f03a             [ 3] 	beq df_rt_neval_process
e225 : b187             [ 5] 	lda (df_currlin),y		; Get the byte which could b
e227 : 3024             [ 3] 	bmi df_rt_neval_tk		; N=1 means it's a keyword t
e229 : c920             [ 2] 	cmp #DFTK_ESCVAL		; <=32 means it's an escape to
e22b : 9019             [ 3] 	bcc df_rt_neval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ']'
e22d : c92c             [ 2] 	cmp #','
e22f : f02e             [ 3] 	beq df_rt_neval_process
e231 : c95d             [ 2] 	cmp #']'
e233 : f02a             [ 3] 	beq df_rt_neval_process
                             	; check for brackets
                             	; if close bracket then process
e235 : c929             [ 2] 	cmp #')'
e237 : f026             [ 3] 	beq df_rt_neval_process
                             	; Nothing of interest matched or it's open brack
                             	; so move to next byte either way
e239 : e689             [ 5] 	inc df_exeoff				; Next byte 
                             	; if bracket then evaluate expression recursivel
e23b : c928             [ 2] 	cmp #'('
e23d : d0e0             [ 3] 	bne df_rt_neval_optk
                             	; call evaluation function recursively
e23f : 201ce2           [ 6] 	jsr df_rt_neval
                             	; move to next byte
e242 : e689             [ 5] 	inc df_exeoff
e244 : d0d9             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
e246 :                       df_rt_neval_esc
e246 : 20a1e2           [ 6] 	jsr df_rt_eval_esc
                             	; move to next byte
e249 : e689             [ 5] 	inc df_exeoff
e24b : d0d2             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             	; if a token then push on operator stack
e24d :                       df_rt_neval_tk
e24d : 297f             [ 2] 	and #0x7f
                             	; check if op (look up type using X as index)
                             	; X contains the current operator index
                             
e24f : aa               [ 2] 	tax
e250 : bda5de           [ 4] 	lda df_tk_tokentype,x
                             	; A contains token type
e253 : 48               [ 3] 	pha
e254 : 2908             [ 2] 	and #DFTK_OP
e256 : d01c             [ 3] 	bne df_rt_neval_tk_opp
                             	; check if fn
e258 : 68               [ 4] 	pla
e259 : 2902             [ 2] 	and #DFTK_FN
e25b : d00c             [ 3] 	bne df_rt_neval_tk_fn
                             
                             	; If got here then something wrong
                             	SWBRK DFERR_OK
                             
                             
e25f :                       df_rt_neval_process
                             	; pop operator off stack and execute
                             	; keep popping until reached the terminator
e25f : 68               [ 4] 	pla
e260 : f006             [ 3] 	beq df_rt_neval_done
                             	; run the token code
e262 : 2094e5           [ 6] 	jsr df_rt_run_token
AS65 Assembler for R6502 [1.42].                                     Page  189
-------------------------------- bank\bank0.s --------------------------------

                             	; top two bytes on ost stack is the result
e265 : 4c5fe2           [ 3] 	jmp df_rt_neval_process
e268 :                       df_rt_neval_done
e268 : 60               [ 6] 	rts
                             
e269 :                       df_rt_neval_tk_fn
e269 : 18               [ 2] 	clc
e26a : 8a               [ 2] 	txa
                             	; run a fn token - returns a value on stack
e26b : e689             [ 5] 	inc df_exeoff
e26d : 2094e5           [ 6] 	jsr df_rt_run_token
                             	; move to next byte
e270 :                       df_rt_neval_nextbyte
e270 : e689             [ 5] 	inc df_exeoff
e272 : d0ab             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             
e274 :                       df_rt_neval_tk_opp
e274 : 68               [ 4] 	pla				; Get A off stack which is the type
e275 :                       df_rt_neval_tk_op
                             	; X=Op, A=Type
                             	; if this op < current top of op stack
                             	; then do the op as it is higher priority so sho
                             	; not be pushed
                             	; what is top of the op stack?
                             	; save current op token value
                             	; C=0 means process the op now, else don't
                             	; save current operator index
e275 : 86a2             [ 3] 	stx df_tmpptra				; Index in to token table not 
                             	; mask off to keep priority
e277 : 2907             [ 2] 	and #DFTK_OPMSK
e279 : 85a4             [ 3] 	sta df_tmpptrb
                             	; peek top of op stack - pull and push X
e27b : 68               [ 4] 	pla
e27c : 48               [ 3] 	pha
e27d : aa               [ 2] 	tax
                             	; if 0 then nothing so push op
e27e : f01c             [ 3] 	beq df_rt_neval_pushOp
                             	; use it to index in to type table
e280 : bda5de           [ 4] 	lda df_tk_tokentype,x
                             	; mask off to keep priority
e283 : 2907             [ 2] 	and #DFTK_OPMSK
                             	; compare with the saved token type which includ
e285 : c5a4             [ 3] 	cmp df_tmpptrb
                             	; if top of stack >= current then C=1
                             	; else C=0
                             	; what is the state of C?
                             	; if 1 then just pushOp
e287 : f002             [ 3] 	beq df_rt_neval_donow
e289 : b011             [ 3] 	bcs df_rt_neval_pushOp
e28b :                       df_rt_neval_donow
                             	; was C=0 so process now before pushing the new 
                             	; get operator off cpu stack
e28b : 68               [ 4] 	pla
e28c : a8               [ 2] 	tay		; Save whilst need to push other things
                             	; save the current op on cpu stack
e28d : a5a2             [ 3] 	lda df_tmpptra
e28f : 48               [ 3] 	pha
e290 : aa               [ 2] 	tax		; X = current op
e291 : 98               [ 2] 	tya		; Get A back from Y (new op)
                             	; now run the token in A that came off the stack
e292 : 2094e5           [ 6] 	jsr df_rt_run_token
                             	; get current op off cpu stack in to X
AS65 Assembler for R6502 [1.42].                                     Page  190
-------------------------------- bank\bank0.s --------------------------------

e295 : 68               [ 4] 	pla
e296 : aa               [ 2] 	tax
                             	; get the token type in to A
e297 : bda5de           [ 4] 	lda df_tk_tokentype,x
                             	; now go back around again to check whether to p
e29a : d0d9             [ 3] 	bne df_rt_neval_tk_op		; ALWAYS as type never ze
e29c :                       df_rt_neval_pushOp
                             	; push the operator
e29c : a5a2             [ 3] 	lda df_tmpptra
e29e : 48               [ 3] 	pha
                             	; move to next byte
e29f : d0cf             [ 3] 	bne df_rt_neval_nextbyte	; ALWAYS as token index
                             
                             
                             
                             
                             ; jump to escape evaluation routine
e2a1 :                       df_rt_eval_esc
e2a1 : 0a               [ 2] 	asl a
e2a2 : aa               [ 2] 	tax
e2a3 : bdb0e2           [ 4] 	lda df_rt_eval_esc_tab,x
e2a6 : 85a2             [ 3] 	sta df_tmpptra
e2a8 : bdb1e2           [ 4] 	lda df_rt_eval_esc_tab+1,x
e2ab : 85a3             [ 3] 	sta df_tmpptra+1
e2ad : 6ca200           [ 6] 	jmp (df_tmpptra)
                             
e2b0 :                       df_rt_eval_esc_tab
e2b0 : 6de3                  	dw df_rt_eval_chr
e2b2 : 79e3                  	dw df_rt_eval_reserved
e2b4 : 79e3                  	dw df_rt_eval_reserved
e2b6 : 79e3                  	dw df_rt_eval_reserved
e2b8 : 79e3                  	dw df_rt_eval_reserved
e2ba : 79e3                  	dw df_rt_eval_reserved	; no such thing as bytdec
e2bc : 6de3                  	dw df_rt_eval_bythex
e2be : 6de3                  	dw df_rt_eval_bytbin
e2c0 : 79e3                  	dw df_rt_eval_reserved
e2c2 : 6de3                  	dw df_rt_eval_intdec
e2c4 : 6de3                  	dw df_rt_eval_inthex
e2c6 : 6de3                  	dw df_rt_eval_intbin
e2c8 : 79e3                  	dw df_rt_eval_reserved
e2ca : 79e3                  	dw df_rt_eval_reserved
e2cc : 79e3                  	dw df_rt_eval_reserved
e2ce : 79e3                  	dw df_rt_eval_reserved
e2d0 : 7be3                  	dw df_rt_eval_strlit
e2d2 : c0e3                  	dw df_rt_eval_var
e2d4 : b6e4                  	dw df_rt_eval_proc
                             
                             
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination is string accumulator
                             ;****************************************
e2d6 :                       df_rt_seval
e2d6 : a67b             [ 3] 	ldx df_sevalptr
e2d8 : a57c             [ 3] 	lda df_sevalptr+1
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination buffer / space
                             ;****************************************
e2da :                       df_rt_sval
                             	; keep X,A on the stack - will be modified
e2da : 8538             [ 3] 	sta tmp_d
AS65 Assembler for R6502 [1.42].                                     Page  191
-------------------------------- bank\bank0.s --------------------------------

e2dc : 48               [ 3] 	pha
e2dd : 8a               [ 2] 	txa
e2de : 48               [ 3] 	pha
e2df : a538             [ 3] 	lda tmp_d
                             	; push original destination
e2e1 : 2075f7           [ 6] 	jsr df_ost_pushStr
                             	; Push the destination to the 6502 stack
                             	; hi byte first then lo
                             	; push string idx so we know our starting positi
                             	; in the string buffer
                             	; this limits all evaluations to 255 bytes
                             ;	lda df_stridx
                             ;	jsr df_st_pushOp
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword operator token push on to operator 
                             	; if keyword function token run it
                             
e2e4 :                       df_rt_seval_optk
e2e4 : a489             [ 3] 	ldy df_exeoff
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_seval_done
e2e6 : c480             [ 3] 	cpy df_nxtstidx
e2e8 : f069             [ 4] 	beq df_rt_seval_done
                             
e2ea : b187             [ 5] 	lda (df_currlin),y
e2ec : 301c             [ 4] 	bmi df_rt_seval_tk
                             
e2ee : c920             [ 2] 	cmp #DFTK_ESCVAL
e2f0 : 900a             [ 3] 	bcc df_rt_seval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ')'
e2f2 : c92c             [ 2] 	cmp #','
e2f4 : f05d             [ 4] 	beq df_rt_seval_done
e2f6 : c929             [ 2] 	cmp #')'
e2f8 : f059             [ 4] 	beq df_rt_seval_done
e2fa : d04a             [ 4] 	bne df_rt_seval_nextbyte
e2fc :                       df_rt_seval_esc
                             	; the only escape char is STRLIT, VAR or PROC
e2fc : c910             [ 2] 	cmp #DFTK_STRLIT
e2fe : f04b             [ 4] 	beq	df_rt_seval_esc_strlit
e300 : c911             [ 2] 	cmp #DFTK_VAR
e302 : f028             [ 3] 	beq	df_rt_seval_esc_var
e304 : c912             [ 2] 	cmp #DFTK_PROC
e306 : f049             [ 3] 	beq	df_rt_seval_esc_proc
                             
                             	; error if got here
                             	SWBRK DFERR_SYNTAX
                             
                             
                             	; if a token then push on operator stack
e30a :                       df_rt_seval_tk
e30a : 8489             [ 3] 	sty df_exeoff
e30c : 297f             [ 2] 	and #0x7f
                             	; check if op
e30e : aa               [ 2] 	tax
e30f : bda5de           [ 4] 	lda df_tk_tokentype,x
e312 : 2904             [ 2] 	and #DFTK_STROP
e314 : d009             [ 3] 	bne df_rt_seval_tk_op
                             	; check if fn
AS65 Assembler for R6502 [1.42].                                     Page  192
-------------------------------- bank\bank0.s --------------------------------

e316 : bda5de           [ 4] 	lda df_tk_tokentype,x
e319 : 2902             [ 2] 	and #DFTK_FN
e31b : d006             [ 3] 	bne df_rt_seval_tk_fn
                             
                             	; token type mismatch if got here
                             	SWBRK DFERR_TYPEMISM
                             
                             
e31f :                       df_rt_seval_tk_op
                             	; the only op is $+
                             	; so just ignore!
e31f : 8a               [ 2] 	txa
e320 : 4c46e3           [ 3] 	jmp df_rt_seval_nextbyte
                             
e323 :                       df_rt_seval_tk_fn
e323 : 8a               [ 2] 	txa
e324 : e689             [ 5] 	inc df_exeoff
e326 : 2094e5           [ 6] 	jsr df_rt_run_token
e329 : 4c30e3           [ 3] 	jmp df_rt_seval_copy
                             
e32c :                       df_rt_seval_esc_var
                             	; go process the variable as a normal RVAL
e32c : 18               [ 2] 	clc
e32d : 20c0e3           [ 6] 	jsr df_rt_eval_var
                             	; copy source off rt stack to destination
e330 :                       df_rt_seval_copy
                             	; pull destination pointer
e330 : 68               [ 4] 	pla
e331 : 85a2             [ 3] 	sta df_tmpptra
e333 : 68               [ 4] 	pla
e334 : 85a3             [ 3] 	sta df_tmpptra+1
                             	; pop source string pointer off stack
e336 : 209ef7           [ 6] 	jsr df_ost_popStr
e339 : 86a4             [ 3] 	stx df_tmpptrb
e33b : 85a5             [ 3] 	sta df_tmpptrb+1
                             	; go and copy the string
e33d : 2057e3           [ 6] 	jsr df_rt_copyStr
                             	; now save the destination
e340 : a5a3             [ 3] 	lda df_tmpptra+1
e342 : 48               [ 3] 	pha
e343 : a5a2             [ 3] 	lda df_tmpptra
e345 : 48               [ 3] 	pha
                             
                             ;	jmp df_rt_seval_nextbyte
e346 :                       df_rt_seval_nextbyte
e346 : e689             [ 5] 	inc df_exeoff
e348 : 4ce4e2           [ 3] 	jmp df_rt_seval_optk
                             
e34b :                       df_rt_seval_esc_strlit
                             	; evaluate string literal
e34b : 207be3           [ 6] 	jsr df_rt_eval_strlit
e34e : 4c30e3           [ 3] 	jmp df_rt_seval_copy
                             
e351 :                       df_rt_seval_esc_proc
                             	; not yet suported *******
                             	SWBRK DFERR_OK
                             
                             
                             	; keep going until non-ws char found or end of l
e353 :                       df_rt_seval_done
                             	;
e353 : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  193
-------------------------------- bank\bank0.s --------------------------------

e354 : 68               [ 4] 	pla
                             
e355 : 18               [ 2] 	clc
e356 : 60               [ 6] 	rts
                             
                             
                             ; Copy string from ptrb to ptra
e357 :                       df_rt_copyStr
e357 : a000             [ 2] 	ldy #0
e359 :                       df_rt_copyStr_ch
e359 : b1a4             [ 5] 	lda (df_tmpptrb),y
e35b : 91a2             [ 5] 	sta (df_tmpptra),y
e35d : f003             [ 3] 	beq df_rt_copyStr_done
e35f : c8               [ 2] 	iny
e360 : d0f7             [ 3] 	bne df_rt_copyStr_ch	; Always relying in Y never
e362 :                       df_rt_copyStr_done
e362 : 98               [ 2] 	tya
e363 : 18               [ 2] 	clc
e364 : 65a2             [ 3] 	adc df_tmpptra
e366 : 85a2             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
e36a : e6a3             [ 5] 	inc df_tmpptra+1
e36c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate and push numeric value
                             ;****************************************
e36d :                       df_rt_eval_intdec
e36d :                       df_rt_eval_bytdec
e36d :                       df_rt_eval_inthex
e36d :                       df_rt_eval_bythex
e36d :                       df_rt_eval_intbin
e36d :                       df_rt_eval_bytbin
e36d :                       df_rt_eval_chr
                             	; numeric constant
e36d : c8               [ 2] 	iny
e36e : b187             [ 5] 	lda (df_currlin),y
e370 : aa               [ 2] 	tax
e371 : c8               [ 2] 	iny
e372 : b187             [ 5] 	lda (df_currlin),y
                             	; save offset before calling any routine
e374 : 8489             [ 3] 	sty df_exeoff
                             	; push number on to stack
e376 : 4c6af7           [ 3] 	jmp df_ost_pushInt
                             
e379 :                       df_rt_eval_reserved
                             	; should not get here
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* Evaluate and push string constant
                             ;****************************************
e37b :                       df_rt_eval_strlit
e37b : 8489             [ 3] 	sty df_exeoff
                             	; calculate the effective address in to AX
                             	; y + currlin
e37d : 98               [ 2] 	tya
                             	; set carry to add one extra
e37e : 38               [ 2] 	sec
e37f : 6587             [ 3] 	adc df_currlin
AS65 Assembler for R6502 [1.42].                                     Page  194
-------------------------------- bank\bank0.s --------------------------------

e381 : aa               [ 2] 	tax
e382 : a588             [ 3] 	lda df_currlin+1
e384 : 6900             [ 2] 	adc #0
                             
                             	; push string on to stack
e386 : 2075f7           [ 6] 	jsr df_ost_pushStr
                             	; now proceed until end of string found
e389 : a489             [ 3] 	ldy df_exeoff
e38b :                       df_rt_eval_strlit_ch
e38b : b187             [ 5] 	lda (df_currlin),y
e38d : f003             [ 3] 	beq df_rt_eval_strlit_done
e38f : c8               [ 2] 	iny
e390 : d0f9             [ 3] 	bne df_rt_eval_strlit_ch
e392 :                       df_rt_eval_strlit_done	; Always relying on Y neve
e392 : 8489             [ 3] 	sty df_exeoff
e394 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return array parameter
                             ;* A has parm
                             ;****************************************
e395 :                       df_rt_arry_parm
                             	; move past open bracket or comma
e395 : e689             [ 5] 	inc df_exeoff
                             	; evaluate expression inside bracket
e397 : 2016e2           [ 6] 	jsr df_rt_getnval
e39a : 8a               [ 2] 	txa
                             ;	clc
e39b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return double array parameter
                             ;* X = dim1, Y = dim2
                             ;****************************************
e39c :                       df_rt_arry_parm2
                             	; go get array parm 1
e39c : 2095e3           [ 6] 	jsr df_rt_arry_parm
e39f : 48               [ 3] 	pha
e3a0 : a200             [ 2] 	ldx #0
e3a2 : a489             [ 3] 	ldy df_exeoff
e3a4 :                       df_rt_arry_parm2_term
e3a4 : b187             [ 5] 	lda (df_currlin),y
e3a6 : c95d             [ 2] 	cmp #']'
e3a8 : f011             [ 3] 	beq df_rt_arry_parm2_skiparry2
e3aa : c92c             [ 2] 	cmp #','
e3ac : f006             [ 3] 	beq df_rt_arry_parm2_arry2
e3ae : 8489             [ 3] 	sty df_exeoff
e3b0 : c8               [ 2] 	iny
e3b1 : 4ca4e3           [ 3] 	jmp df_rt_arry_parm2_term
e3b4 :                       df_rt_arry_parm2_arry2
                             	; get second dimension and put in Y
e3b4 : 2095e3           [ 6] 	jsr df_rt_arry_parm
e3b7 : a8               [ 2] 	tay
e3b8 : 68               [ 4] 	pla
e3b9 : aa               [ 2] 	tax
                             ;	clc
e3ba : 60               [ 6] 	rts
e3bb :                       df_rt_arry_parm2_skiparry2
e3bb : a000             [ 2] 	ldy #0
e3bd : 68               [ 4] 	pla
e3be : aa               [ 2] 	tax
                             ;	clc
AS65 Assembler for R6502 [1.42].                                     Page  195
-------------------------------- bank\bank0.s --------------------------------

e3bf : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Evaluate and push variable
                             ;* The actual value is pushed if numeric
                             ;* The pointer is pushed if string
                             ;* Carry Set = LVAR else normal RVAR
                             ;* LVAR : Y = line index, A=vvt type, tmpptra = v
                             ;****************************************
e3c0 :                       df_rt_eval_var
                             	; save carry bit
e3c0 : 08               [ 3] 	php
                             	; if lvar mode then already passed escape token
e3c1 : b010             [ 3] 	bcs df_rt_eval_lvskip
                             	; move past var escape token
e3c3 : c8               [ 2] 	iny
                             	; get var vvt address
e3c4 : b187             [ 5] 	lda (df_currlin),y
e3c6 : 85a2             [ 3] 	sta df_tmpptra
e3c8 : c8               [ 2] 	iny
e3c9 : 8489             [ 3] 	sty df_exeoff
e3cb : b187             [ 5] 	lda (df_currlin),y
e3cd : 85a3             [ 3] 	sta df_tmpptra+1
                             	; push vvt type first as this is the last thing 
e3cf : a200             [ 2] 	ldx #0
e3d1 : a1a2             [ 6] 	lda (df_tmpptra,x)
e3d3 :                       df_rt_eval_lvskip
e3d3 : 48               [ 3] 	pha
                             	; Test A for array or string
e3d4 : 2984             [ 2] 	and #DFVVT_PTR|DFVVT_STR
                             	; simple variable
e3d6 : f00e             [ 3] 	beq df_rt_eval_var_notarry
                             	; even if an array if no dimensions then return 
                             	; if at end of statement or line then simple cop
e3d8 : c480             [ 3] 	cpy df_nxtstidx
e3da : f027             [ 4] 	beq df_rt_eval_var_simple
                             	; if next ch is not [ then simple copy
e3dc : c8               [ 2] 	iny
e3dd : b187             [ 5] 	lda (df_currlin),y
e3df : 88               [ 2] 	dey
e3e0 : c95b             [ 2] 	cmp #'['
e3e2 : d01f             [ 4] 	bne df_rt_eval_var_simple
                             	; go do array handling
e3e4 : f02d             [ 4] 	beq df_rt_eval_var_do_arry
e3e6 :                       df_rt_eval_var_notarry
                             	; pull the type, not needed here
e3e6 : 68               [ 4] 	pla
                             	; pull C and check if lvar wanted rather than rv
e3e7 : 28               [ 4] 	plp
e3e8 : b00c             [ 3] 	bcs df_rt_eval_lvar
                             	; just push the vvt lo,hi value
e3ea : a001             [ 2] 	ldy #DFVVT_LO
e3ec : b1a2             [ 5] 	lda (df_tmpptra),y
e3ee : aa               [ 2] 	tax
e3ef : a002             [ 2] 	ldy #DFVVT_HI
e3f1 : b1a2             [ 5] 	lda (df_tmpptra),y
                             
e3f3 : 4c6af7           [ 3] 	jmp df_ost_pushInt
                             
e3f6 :                       df_rt_eval_lvar
                             	; it's not an array, push the address of DFVVT_L
AS65 Assembler for R6502 [1.42].                                     Page  196
-------------------------------- bank\bank0.s --------------------------------

                             	; add DFVVT_LO offset to slot address in X,A
e3f6 : 18               [ 2] 	clc
e3f7 : a901             [ 2] 	lda #DFVVT_LO
e3f9 : 65a2             [ 3] 	adc df_tmpptra
e3fb : aa               [ 2] 	tax
e3fc : a5a3             [ 3] 	lda df_tmpptra+1
e3fe : 6900             [ 2] 	adc #0
                             
                             	; push pointer to lo,hi
e400 : 4c79f7           [ 3] 	jmp df_ost_pushPtr
                             
                             	; Simple push of pointer, needs to be valid
e403 :                       df_rt_eval_var_simple
                             	; clean up stack
e403 : 68               [ 4] 	pla
e404 : 68               [ 4] 	pla
                             	; simply get lo,hi and push ptr on stack
e405 : a001             [ 2] 	ldy #DFVVT_LO
e407 : b1a2             [ 5] 	lda (df_tmpptra),y
e409 : aa               [ 2] 	tax
e40a : a002             [ 2] 	ldy #DFVVT_HI
e40c : b1a2             [ 5] 	lda (df_tmpptra),y
e40e : f078             [ 3] 	beq df_rt_not_dimed
e410 : 4c79f7           [ 3] 	jmp df_ost_pushPtr
                             
e413 :                       df_rt_eval_var_do_arry
                             	; move past var index
e413 : e689             [ 5] 	inc df_exeoff
                             	; zero out x,y as they have dimension info
e415 : a200             [ 2] 	ldx #0
e417 : a000             [ 2] 	ldy #0
                             
                             	; ** Array handling routine **
                             	; A on stack = type
                             	; save vvt address
e419 : a5a3             [ 3] 	lda df_tmpptra+1
e41b : 48               [ 3] 	pha
e41c : a5a2             [ 3] 	lda df_tmpptra
e41e : 48               [ 3] 	pha
                             
                             	; get array parms in X,Y
e41f : 209ce3           [ 6] 	jsr df_rt_arry_parm2
                             	; restore vvt address
e422 : 68               [ 4] 	pla
e423 : 85a2             [ 3] 	sta df_tmpptra
e425 : 68               [ 4] 	pla
e426 : 85a3             [ 3] 	sta df_tmpptra+1
                             	; save dimension indices for later
e428 : 86a4             [ 3] 	stx df_tmpptrb
e42a : 84a5             [ 3] 	sty df_tmpptrb+1
                             	; if y is zero then need to decide some stuff
e42c : c000             [ 2] 	cpy #0
e42e : d00e             [ 3] 	bne df_rt_eval_var_dim2adj
                             	; if dim2 > 0 then swap x,y
e430 : a004             [ 2] 	ldy #DFVVT_DIM2
e432 : b1a2             [ 5] 	lda (df_tmpptra),y
e434 : f008             [ 3] 	beq df_rt_eval_var_dim2adj
                             	; swap x,y
e436 : a6a4             [ 3] 	ldx df_tmpptrb
e438 : a4a5             [ 3] 	ldy df_tmpptrb+1
e43a : 86a5             [ 3] 	stx df_tmpptrb+1
e43c : 84a4             [ 3] 	sty df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  197
-------------------------------- bank\bank0.s --------------------------------

                             
e43e :                       df_rt_eval_var_dim2adj
e43e : a6a4             [ 3] 	ldx df_tmpptrb
e440 : a4a5             [ 3] 	ldy df_tmpptrb+1
                             	; don't let y=0
e442 : d001             [ 3] 	bne df_rt_eval_var_dim2adjy
e444 : c8               [ 2] 	iny
e445 :                       df_rt_eval_var_dim2adjy
                             	; don't let x=0
e445 : e000             [ 2] 	cpx #0
e447 : d001             [ 3] 	bne df_rt_eval_var_dim2adjx
e449 : e8               [ 2] 	inx
e44a :                       df_rt_eval_var_dim2adjx
                             	;calculate offset
                             	;(y-1)*dim1 + (x-1)
e44a : ca               [ 2] 	dex
e44b : a900             [ 2] 	lda #0
e44d : 853e             [ 3] 	sta num_a+1
e44f : 88               [ 2] 	dey
                             	; (y-1)
e450 : 843d             [ 3] 	sty num_a
                             	; if y is 0 then no need to multiply
e452 : f00d             [ 3] 	beq df_rt_eval_var_nomult
                             	; (dim1)
e454 : a003             [ 2] 	ldy #DFVVT_DIM1
e456 : a900             [ 2] 	lda #0
e458 : 8542             [ 3] 	sta num_b+1
e45a : b1a2             [ 5] 	lda (df_tmpptra),y
e45c : 8541             [ 3] 	sta num_b
                             	; (y-1)*dim1 num_a has result
e45e : 200ed6           [ 6] 	jsr int_fast_mult
e461 :                       df_rt_eval_var_nomult
                             	; move x to a
e461 : 8a               [ 2] 	txa
                             	; add x to num_a
e462 : 18               [ 2] 	clc
e463 : 653d             [ 3] 	adc num_a
e465 : 853d             [ 3] 	sta num_a
                             	_bcc 2
                             
e469 : e63e             [ 5] 	inc num_a+1
                             	; now have element offset in num_a
                             	; dimensions in x and y
e46b : a6a4             [ 3] 	ldx df_tmpptrb
e46d : a4a5             [ 3] 	ldy df_tmpptrb+1
                             	; get type of variable originally found
e46f : 68               [ 4] 	pla
e470 : 48               [ 3] 	pha
e471 : 2901             [ 2] 	and #DFVVT_INT
e473 : f004             [ 3] 	beq df_rt_eval_var_push
                             	; if it is int then multiply offset by 2
e475 : 063d             [ 5] 	asl num_a
e477 : 263e             [ 5] 	rol num_a+1
e479 :                       df_rt_eval_var_push
                             	; add pointer in lo,hi to num_a
e479 : 18               [ 2] 	clc
e47a : a001             [ 2] 	ldy #DFVVT_LO
e47c : b1a2             [ 5] 	lda (df_tmpptra),y
e47e : 653d             [ 3] 	adc num_a
e480 : 853d             [ 3] 	sta num_a
e482 : a002             [ 2] 	ldy #DFVVT_HI
e484 : b1a2             [ 5] 	lda (df_tmpptra),y
AS65 Assembler for R6502 [1.42].                                     Page  198
-------------------------------- bank\bank0.s --------------------------------

e486 : d002             [ 3] 	bne df_rt_array_exists
                             	; if vvt address hi is zero then array not dimen
e488 :                       df_rt_not_dimed
                             	SWBRK DFERR_DIM
                             
e48a :                       df_rt_array_exists
e48a : 653e             [ 3] 	adc num_a+1
e48c : 853e             [ 3] 	sta num_a+1
                             	; get the type
e48e : 68               [ 4] 	pla
                             	; if not int or byte then push string
e48f : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
e491 : f01b             [ 3] 	beq df_rt_eval_var_str
                             	; get LVAR preference
e493 : 28               [ 4] 	plp
e494 : b019             [ 3] 	bcs df_rt_eval_ptr
                             	; need to load lo and hi for int
                             	; but only lo for byt
e496 : 2901             [ 2] 	and #DFVVT_INT
e498 : f00b             [ 3] 	beq df_rt_eval_byt
                             	; push the contents pointed to by num_a
e49a : a000             [ 2] 	ldy #0
e49c : b13d             [ 5] 	lda (num_a),y
e49e : aa               [ 2] 	tax
e49f : c8               [ 2] 	iny
e4a0 : b13d             [ 5] 	lda (num_a),y
e4a2 : 4c6af7           [ 3] 	jmp df_ost_pushInt
e4a5 :                       df_rt_eval_byt
e4a5 : a000             [ 2] 	ldy #0
e4a7 : b13d             [ 5] 	lda (num_a),y
e4a9 : aa               [ 2] 	tax
e4aa : 98               [ 2] 	tya			; Make A=0
e4ab : 4c6af7           [ 3] 	jmp df_ost_pushInt
e4ae :                       df_rt_eval_var_str
e4ae : 28               [ 4] 	plp
e4af :                       df_rt_eval_ptr
                             ;	clc
                             	; put num_a not contents
e4af : a63d             [ 3] 	ldx num_a
e4b1 : a53e             [ 3] 	lda num_a+1
e4b3 : 4c79f7           [ 3] 	jmp df_ost_pushPtr
                             
e4b6 :                       df_rt_eval_proc
e4b6 : a578             [ 3] 	lda df_parmtop				; Save current position of par
e4b8 : 48               [ 3] 	pha
e4b9 : 20cbf5           [ 6] 	jsr df_rt_proc				; Go and call the user functio
e4bc : 68               [ 4] 	pla							; Get back the original parameter stac
e4bd : c578             [ 3] 	cmp df_parmtop				; if it is the same, then no r
e4bf : f002             [ 3] 	beq df_rt_eval_proc_err
e4c1 : 18               [ 2] 	clc
e4c2 : 60               [ 6] 	rts
e4c3 :                       df_rt_eval_proc_err
                             	; if no return value then report an errror
                             	SWBRK DFERR_RETURN
                             
                             
                             
                             
                             ;****************************************
                             ;* get two ints off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  199
-------------------------------- bank\bank0.s --------------------------------

e4c5 :                       df_rt_get2Ints
                             	; the first int popped is actually the second pa
e4c5 : 209af7           [ 6] 	jsr df_ost_popInt
e4c8 : 86a4             [ 3] 	stx df_tmpptrb
e4ca : 85a5             [ 3] 	sta df_tmpptrb+1
                             
e4cc : 209af7           [ 6] 	jsr df_ost_popInt
e4cf : 86a2             [ 3] 	stx df_tmpptra
e4d1 : 85a3             [ 3] 	sta df_tmpptra+1
e4d3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* get two strings off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
e4d4 :                       df_rt_get2Strs
                             	; the first int popped is actually the second pa
e4d4 : 209ef7           [ 6] 	jsr df_ost_popStr
e4d7 : 86a4             [ 3] 	stx df_tmpptrb
e4d9 : 85a5             [ 3] 	sta df_tmpptrb+1
                             
e4db : 209ef7           [ 6] 	jsr df_ost_popStr
e4de : 86a2             [ 3] 	stx df_tmpptra
e4e0 : 85a3             [ 3] 	sta df_tmpptra+1
e4e2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 2 ints runtime parsing
                             ;****************************************
e4e3 :                       df_rt_parm_2ints
                             	; evaluate 1st parm
e4e3 : 201ce2           [ 6] 	jsr df_rt_neval
                             	; jump over comma
e4e6 : e689             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e4e8 : 201ce2           [ 6] 	jsr df_rt_neval
                             	
e4eb : 4cc5e4           [ 3] 	jmp df_rt_get2Ints
                             	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 3 ints runtime parsing
                             ;****************************************
e4ee :                       df_rt_parm_3ints
                             	; evaluate 1st parm
e4ee : 201ce2           [ 6] 	jsr df_rt_neval
e4f1 : e689             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e4f3 : 201ce2           [ 6] 	jsr df_rt_neval
e4f6 : e689             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e4f8 : 201ce2           [ 6] 	jsr df_rt_neval
                             
                             	; pop 3rd parm
AS65 Assembler for R6502 [1.42].                                     Page  200
-------------------------------- bank\bank0.s --------------------------------

e4fb :                       df_rt_parm_pop3
e4fb : 209af7           [ 6] 	jsr df_ost_popInt
e4fe : 86a6             [ 3] 	stx df_tmpptrc
e500 : 85a7             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd and 1st
e502 : 4cc5e4           [ 3] 	jmp df_rt_get2Ints
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 4 ints runtime parsing
                             ;****************************************
e505 :                       df_rt_parm_4ints
                             	; evaluate 1st parm
e505 : 201ce2           [ 6] 	jsr df_rt_neval
e508 : e689             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e50a : 201ce2           [ 6] 	jsr df_rt_neval
e50d : e689             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e50f : 201ce2           [ 6] 	jsr df_rt_neval
e512 : e689             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
e514 : 201ce2           [ 6] 	jsr df_rt_neval
                             
                             	; pop 4th parm
e517 : 209af7           [ 6] 	jsr df_ost_popInt
e51a : 86a8             [ 3] 	stx df_tmpptrd
e51c : 85a9             [ 3] 	sta df_tmpptrd+1
                             
                             	; pop 3,2,1 parms
e51e : 4cfbe4           [ 3] 	jmp df_rt_parm_pop3
                             
                             	; pop 3rd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 5 ints runtime parsing
                             ;****************************************
                             ;df_rt_parm_5ints
                             ;	; evaluate 1st parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 2nd parm
                             ;	jsr df_rt_neval
AS65 Assembler for R6502 [1.42].                                     Page  201
-------------------------------- bank\bank0.s --------------------------------

                             ;	inc df_exeoff
                             ;	; evaluate the 3rd parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 4th parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 5th parm
                             ;	jsr df_rt_neval
                             ;
                             ;	; pop 5th parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptre
                             ;	sta df_tmpptre+1
                             ;	; pop 4th parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrd
                             ;	sta df_tmpptrd+1
                             ;	; pop 3rd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             ;	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             ;	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;
                             ;	rts
                             
                             ;****************************************
                             ;* initialise statement to be executed
                             ;* X,A = line pointer, Y=statement offset
                             ;****************************************
e521 :                       df_rt_init_stat_ptr
                             	; save current line
e521 : 8687             [ 3] 	stx df_currlin
e523 : 8588             [ 3] 	sta df_currlin+1
e525 : 8481             [ 3] 	sty df_curstidx
e527 : 8489             [ 3] 	sty df_exeoff
e529 : b187             [ 5] 	lda (df_currlin),y
e52b : 8580             [ 3] 	sta df_nxtstidx
e52d : a200             [ 2] 	ldx #0
e52f : a187             [ 6] 	lda (df_currlin,x)
e531 : 857f             [ 3] 	sta df_eolidx
                             ;	ldy df_curstidx
                             ;	lda (df_currlin),y
                             ;	sta df_nxtstidx
e533 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Execute from a statement pointed to
                             ;* by currlin and exeoff
                             ;****************************************
e534 :                       df_rt_exec_stat
e534 : a687             [ 3] 	ldx df_currlin
e536 : a588             [ 3] 	lda df_currlin+1
e538 : a489             [ 3] 	ldy df_exeoff
e53a :                       df_rt_exec_init_ptr
AS65 Assembler for R6502 [1.42].                                     Page  202
-------------------------------- bank\bank0.s --------------------------------

e53a : 2021e5           [ 6] 	jsr df_rt_init_stat_ptr
                             	; assume normal flow of control if next line hi 
                             	; this means no line can execute below page 1, n
e53d : a900             [ 2] 	lda #0
e53f : 858b             [ 3] 	sta df_nextlin+1
                             
                             	; find first token in statement
e541 :                       df_rt_exec_find_tok
e541 : c8               [ 2] 	iny
e542 : b187             [ 5] 	lda (df_currlin),y
e544 : 10fb             [ 3] 	bpl df_rt_exec_find_tok
e546 :                       df_rt_exec_found_tok
                             	; skip past token to next byte in readiness
e546 : c8               [ 2] 	iny
e547 : 8489             [ 3] 	sty df_exeoff
                             	; Run that statement - if end of return will pul
                             	; and effectively do an rts from this routine.
e549 : 2094e5           [ 6] 	jsr df_rt_run_token
                             
                             	; check for break, asynch get
e54c : c65c             [ 5] 	dec df_checkkey
e54e : d00a             [ 3] 	bne df_rt_exec_no_key
e550 : a55d             [ 3] 	lda df_checkmsk
e552 : 855c             [ 3] 	sta df_checkkey
e554 : 18               [ 2] 	clc
e555 : 2027c4           [ 6] 	jsr io_get_ch
e558 : 9025             [ 3] 	bcc df_rt_exec_check_key
e55a :                       df_rt_exec_no_key
                             	; check if normal flow of control
e55a : a58b             [ 3] 	lda df_nextlin+1
e55c : d02d             [ 3] 	bne df_rt_exec_jump
                             	; try and execute another statement until end of
e55e : a480             [ 3] 	ldy df_nxtstidx
e560 : c47f             [ 3] 	cpy df_eolidx
e562 : 8489             [ 3] 	sty df_exeoff
e564 : d0ce             [ 3] 	bne df_rt_exec_stat
                             	
                             	; reached end of line, move to next
e566 : a200             [ 2] 	ldx #0
e568 : 18               [ 2] 	clc
e569 : a187             [ 6] 	lda (df_currlin,x)
e56b : 6587             [ 3] 	adc df_currlin
e56d : 8587             [ 3] 	sta df_currlin
                             	_bcc 2
                             
e571 : e688             [ 5] 	inc df_currlin+1
                             
                             	; start from first statement in new line
e573 : a003             [ 2] 	ldy #3
e575 : 8489             [ 3] 	sty df_exeoff
                             
                             	; check if this line has any content (length >0)
e577 : a187             [ 6] 	lda (df_currlin,x)
e579 : 857f             [ 3] 	sta df_eolidx
                             	; no more lines (len = 0), program done
e57b : d0b7             [ 3] 	bne df_rt_exec_stat
                             	; else done
                             	; normally wouldn't get here except immediate mo
                             	; if line number <> 0 then error
                             ;	lda df_immed
                             ;	beq df_rt_unexpected_end
e57d :                       df_rt_exec_end
AS65 Assembler for R6502 [1.42].                                     Page  203
-------------------------------- bank\bank0.s --------------------------------

e57d : 18               [ 2] 	clc
e57e : 60               [ 6] 	rts
e57f :                       df_rt_exec_check_key
e57f : c91a             [ 2] 	cmp #UTF_BRK					; CTRK-Z?
e581 : f006             [ 3] 	beq df_rt_exec_ctrl_z
e583 : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
e585 : d0d3             [ 3] 	bne df_rt_exec_no_key			; None relevant keys, go
e587 :                       df_rt_exec_ctrl_c
                             	SWBRK DFERR_BREAK
                             
e589 :                       df_rt_exec_ctrl_z
                             	; Force a break with zero error number
                             	; this will drop in to the monitor
                             	SWBRK 0
                             
                             
                             ;df_rt_unexpected_end
                             ;	SWBRK DFERR_IMMEDIATE
                             
                             	; if hi byte of nextline is not zero then
                             	; current line = next line
e58b :                       df_rt_exec_jump
                             	; initialise statement pointer from nextlin,toks
e58b : a68a             [ 3] 	ldx df_nextlin
e58d : a58b             [ 3] 	lda df_nextlin+1
e58f : a480             [ 3] 	ldy df_nxtstidx
e591 : 4c3ae5           [ 3] 	jmp df_rt_exec_init_ptr
                             
                             
                             ;****************************************
                             ;* Run statement in A
                             ;****************************************
e594 :                       df_rt_run_token
                             	; mask off MSB
                             ;	and #0x7f
                             	; multiply by 2
e594 : 0a               [ 2] 	asl a
e595 : aa               [ 2] 	tax
e596 : bd7fe6           [ 4] 	lda df_rt_tokenjmp,x
e599 : 85a2             [ 3] 	sta df_tmpptra
e59b : bd80e6           [ 4] 	lda df_rt_tokenjmp+1,x
e59e : 85a3             [ 3] 	sta df_tmpptra+1
                             	; execution code finishes with rts
e5a0 : 6ca200           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* X,A : Line Address, Y = Index
                             ;* C=0 Found next statement
                             ;* C=1 No statement found
                             ;****************************************
e5a3 :                       df_rt_nextstat
                             	; save pointer
e5a3 : 8691             [ 3] 	stx df_lineptr
e5a5 : 8592             [ 3] 	sta df_lineptr+1
                             	; if end of program then err
e5a7 : a200             [ 2] 	ldx #0
e5a9 : a191             [ 6] 	lda (df_lineptr,x)
e5ab : f022             [ 3] 	beq df_rt_nextstat_err
                             	; if next statement idx == line length
                             ;	lda (df_lineptr),y
                             ;	beq df_rt_nextstat_ln
AS65 Assembler for R6502 [1.42].                                     Page  204
-------------------------------- bank\bank0.s --------------------------------

e5ad : b191             [ 5] 	lda (df_lineptr),y
e5af : c191             [ 6] 	cmp (df_lineptr,x)
e5b1 : f007             [ 3] 	beq df_rt_nextstat_ln
                             	; then go to next line
                             	; else make this Y
e5b3 : a8               [ 2] 	tay
                             	; X = line low
e5b4 : a691             [ 3] 	ldx df_lineptr
                             	; A = line high
e5b6 : a592             [ 3] 	lda df_lineptr+1
e5b8 : 18               [ 2] 	clc
e5b9 : 60               [ 6] 	rts
e5ba :                       df_rt_nextstat_ln
                             	; for next line, add line length to ptr
e5ba : 18               [ 2] 	clc
                             ;	lda (df_lineptr,x)
e5bb : 6591             [ 3] 	adc df_lineptr
e5bd : 8591             [ 3] 	sta df_lineptr
                             	_bcc 2
                             
e5c1 : e692             [ 5] 	inc df_lineptr+1
                             	; if end of program set C as error
e5c3 : a191             [ 6] 	lda (df_lineptr,x)
e5c5 : f008             [ 3] 	beq df_rt_nextstat_err
e5c7 : a691             [ 3] 	ldx df_lineptr
e5c9 : a592             [ 3] 	lda df_lineptr+1
                             	; always skip line number and length for start o
e5cb : a003             [ 2] 	ldy #3
e5cd : 18               [ 2] 	clc
e5ce : 60               [ 6] 	rts
e5cf :                       df_rt_nextstat_err
e5cf : a000             [ 2] 	ldy #0
e5d1 : 38               [ 2] 	sec
e5d2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push current line and statement to runtime sta
                             ;****************************************
e5d3 :                       df_rt_push_stat
e5d3 : a581             [ 3] 	lda df_curstidx
e5d5 : 2021f7           [ 6] 	jsr df_rst_pushByte
e5d8 : a588             [ 3] 	lda df_currlin+1
e5da : a687             [ 3] 	ldx df_currlin
e5dc : 4c39f7           [ 3] 	jmp df_rst_pushWord
                             ;	clc
                             ;	rts
                             
                             ;****************************************
                             ;* Pop line and statement from runtime stack
                             ;* And transfer control to next statement
                             ;****************************************
e5df :                       df_rt_pop_stat
e5df : 2047f7           [ 6] 	jsr df_rst_popWord
e5e2 : 868a             [ 3] 	stx	df_nextlin
e5e4 : 858b             [ 3] 	sta df_nextlin+1
e5e6 : 202af7           [ 6] 	jsr df_rst_popByte
e5e9 : a8               [ 2] 	tay
e5ea : a68a             [ 3] 	ldx df_nextlin
e5ec : a58b             [ 3] 	lda df_nextlin+1
e5ee : 20a3e5           [ 6] 	jsr df_rt_nextstat
e5f1 : 868a             [ 3] 	stx df_nextlin
e5f3 : 858b             [ 3] 	sta df_nextlin+1
AS65 Assembler for R6502 [1.42].                                     Page  205
-------------------------------- bank\bank0.s --------------------------------

e5f5 : 8480             [ 3] 	sty df_nxtstidx
                             ;	clc
e5f7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find proc definition in procptr
                             ;* Only call if proc not found before
                             ;****************************************
e5f8 :                       df_rt_findproc
                             	; start at program beginning
                             	_cpyZPWord df_prgstrt,df_lineptr
                             
e600 : a003             [ 2] 	ldy #3
e602 : 8493             [ 3] 	sty df_lineidx
e604 : a200             [ 2] 	ldx #0
e606 : a191             [ 6] 	lda (df_lineptr,x)
e608 : f034             [ 3] 	beq df_rt_findproc_err
e60a :                       df_rt_findproc_cmd
e60a : c8               [ 2] 	iny
e60b : b191             [ 5] 	lda (df_lineptr),y
e60d : 10fb             [ 3] 	bpl df_rt_findproc_cmd
e60f : c986             [ 2] 	cmp #DFRT_DEF
e611 : d017             [ 3] 	bne df_rt_findproc_nextstat
                             	; skip def token
e613 : c8               [ 2] 	iny
                             	; skip proc escape token
e614 : c8               [ 2] 	iny
                             	; now check the proc address against procptr
e615 : b191             [ 5] 	lda (df_lineptr),y
e617 : c58f             [ 3] 	cmp df_procptr
e619 : d00f             [ 3] 	bne df_rt_findproc_nextstat
e61b : c8               [ 2] 	iny
e61c : b191             [ 5] 	lda (df_lineptr),y
e61e : c590             [ 3] 	cmp df_procptr+1
e620 : d008             [ 3] 	bne df_rt_findproc_nextstat
                             
                             	; found it, return AXY with line details
e622 : a691             [ 3] 	ldx df_lineptr
e624 : a592             [ 3] 	lda df_lineptr+1
e626 : a493             [ 3] 	ldy df_lineidx
e628 : 18               [ 2] 	clc
e629 : 60               [ 6] 	rts
e62a :                       df_rt_findproc_nextstat
                             	; restore AXY line details and find next stateme
e62a : a691             [ 3] 	ldx df_lineptr
e62c : a592             [ 3] 	lda df_lineptr+1
e62e : a493             [ 3] 	ldy df_lineidx
e630 : 20a3e5           [ 6] 	jsr df_rt_nextstat
e633 : b009             [ 3] 	bcs df_rt_findproc_err
e635 : 8691             [ 3] 	stx df_lineptr
e637 : 8592             [ 3] 	sta df_lineptr+1
e639 : 8493             [ 3] 	sty df_lineidx
e63b : 4c0ae6           [ 3] 	jmp df_rt_findproc_cmd
                             	; error
e63e :                       df_rt_findproc_err
                             	SWBRK DFERR_NOPROC
                             
                             
                             ;****************************************
                             ;* Find an escape value
                             ;* Does not check for end of line or statement
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  206
-------------------------------- bank\bank0.s --------------------------------

e640 :                       df_rt_findescval
e640 : a489             [ 3] 	ldy df_exeoff
e642 : 88               [ 2] 	dey
e643 :                       df_rt_findescval_loop
e643 : c8               [ 2] 	iny
e644 : b187             [ 5] 	lda (df_currlin),y
e646 : c920             [ 2] 	cmp #DFTK_ESCVAL
e648 : b0f9             [ 3] 	bcs df_rt_findescval_loop
e64a : 8489             [ 3] 	sty df_exeoff
e64c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Skip white space
                             ;* Does not check for end of line or statement
                             ;* A contains non-ws char, df_exeoff updated
                             ;****************************************
e64d :                       df_rt_skip_ws
e64d : a489             [ 3] 	ldy df_exeoff
e64f : 88               [ 2] 	dey
e650 :                       df_rt_skip_ws_loop
e650 : c8               [ 2] 	iny
e651 : b187             [ 5] 	lda (df_currlin),y
e653 : c920             [ 2] 	cmp #' '
e655 : f0f9             [ 3] 	beq df_rt_skip_ws_loop
e657 : 8489             [ 3] 	sty df_exeoff
e659 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Get an lvar
                             ;* Assumes next token will be escape DFTK_VAR
                             ;* tmpptra contains vvt slot address
                             ;* X,A is the lvar pointer
                             ;****************************************
e65a :                       df_rt_getlvar
e65a : 2040e6           [ 6] 	jsr df_rt_findescval
                             	; move past the escape value
e65d : c8               [ 2] 	iny
                             
                             	; get variable address
e65e : b187             [ 5] 	lda (df_currlin),y
e660 : 85a2             [ 3] 	sta df_tmpptra
e662 : c8               [ 2] 	iny
e663 : b187             [ 5] 	lda (df_currlin),y
e665 : 85a3             [ 3] 	sta df_tmpptra+1
                             
e667 : 8489             [ 3] 	sty df_exeoff
                             	; get the type
e669 : a000             [ 2] 	ldy #0
e66b : b1a2             [ 5] 	lda (df_tmpptra),y
                             	; set carry flag to return pointer (lvar)
e66d : 38               [ 2] 	sec
e66e : a489             [ 3] 	ldy df_exeoff
e670 : 20c0e3           [ 6] 	jsr df_rt_eval_var
e673 : 4ca2f7           [ 3] 	jmp df_ost_popPtr
                             ;	rts
                             
                             ;****************************************
                             ;* Pop stat from rt stack and continue
                             ;* Y MUST BE ON THE CPU STACK AS IT GETS PLYed HE
                             ;****************************************
e676 :                       df_rt_pop_stat_go
e676 : 20dfe5           [ 6] 	jsr df_rt_pop_stat
AS65 Assembler for R6502 [1.42].                                     Page  207
-------------------------------- bank\bank0.s --------------------------------

                             	; restore stack pointer so we don't lose this en
e679 : 68               [ 4] 	pla
e67a : a8               [ 2] 	tay
e67b : 8477             [ 3] 	sty df_rtstop
e67d : 18               [ 2] 	clc
e67e : 60               [ 6] 	rts
                             
                             	include "dflat/rtjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime token an
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
e67f :                       df_rt_tokenjmp
e67f : 5fee                  	dw	df_rt_assign
e681 : cbf5                  	dw	df_rt_proc
e683 : 70ee                  	dw	df_rt_comment
e685 : 17ee                  	dw	df_rt_println
e687 : dced                  	dw	df_rt_printat
e689 : e6ed                  	dw	df_rt_print
e68b : 6bf6                  	dw	df_rt_def			; 0x86
e68d : e3f6                  	dw	df_rt_enddef		; 0x87
e68f : e0f6                  	dw	df_rt_return		; 0x88
e691 : 8df5                  	dw	df_rt_abort			; 0x89
e693 : 3aec                  	dw	df_rt_local
e695 : 69ec                  	dw	df_rt_dim
e697 : 08eb                  	dw	df_rt_repeat		; 0x8c
e699 : 10eb                  	dw	df_rt_until
e69b : 6fea                  	dw	df_rt_for			; 0x8e
e69d : adea                  	dw	df_rt_next			; 0x8f
e69f : 48e9                  	dw	df_rt_while			; 0x90
e6a1 : abe9                  	dw	df_rt_wend			; 0x81
e6a3 : 2eea                  	dw	df_rt_if			; 0x92
e6a5 : 1cea                  	dw	df_rt_else			; 0x93
e6a7 : 17ea                  	dw	df_rt_endif			; 0x94
e6a9 : 1cea                  	dw	df_rt_elseif		; 0x95
e6ab : 70ee                  	dw	df_rt_data			; 0x96
e6ad : 8efa                  	dw	df_rt_asm_assemble	; 0x97 df_rt_asm_assemble
e6af : 71ee                  	dw	df_rt_run
AS65 Assembler for R6502 [1.42].                                     Page  208
-------------------------------- bank\bank0.s --------------------------------

e6b1 : 23ef                  	dw	df_rt_list
e6b3 : feeb                  	dw	df_rt_input
e6b5 : 6fed                  	dw	df_rt_text
e6b7 : f7ec                  	dw	df_rt_plot
e6b9 : 69ed                  	dw	df_rt_cursor
e6bb : f4ec                  	dw	df_rt_cls
e6bd : 7ff1                  	dw	df_rt_poke
e6bf : 70f1                  	dw	df_rt_doke
e6c1 : b7f1                  	dw	df_rt_sound
e6c3 : bdf1                  	dw	df_rt_music
e6c5 : d2f1                  	dw	df_rt_play
e6c7 : e6eb                  	dw	df_rt_read
e6c9 : 45e9                  	dw	df_rt_new
                             ;	dw	df_rt_renum
e6cb : c6ed                  	dw	df_rt_wait
e6cd : 58f3                  	dw	df_rt_reset
e6cf : 72ed                  	dw	df_rt_hires
e6d1 : 8bed                  	dw	df_rt_point
e6d3 : b5ed                  	dw	df_rt_line
e6d5 : a7ed                  	dw	df_rt_lineto
e6d7 : 75ed                  	dw	df_rt_pixmode
e6d9 : 7bed                  	dw	df_rt_ink
e6db : 81ed                  	dw	df_rt_paper
e6dd : 95ed                  	dw	df_rt_circle
                             ;	dw	df_rt_himem
e6df : 42e9                  	dw	df_rt_monitor
e6e1 : 8ff5                  	dw	df_rt_sprchar
e6e3 : 99f5                  	dw	df_rt_sprpos
e6e5 : a5f5                  	dw	df_rt_sprupd
e6e7 : aef5                  	dw	df_rt_sprinit
e6e9 : b1f5                  	dw	df_rt_sprmulti
                             ;	dw	df_rt_save
                             ;	dw	df_rt_load
e6eb : faf2                  	dw	df_rt_bsave
e6ed : c7f2                  	dw	df_rt_bload
e6ef : 60f2                  	dw	df_rt_tsave
e6f1 : 7af2                  	dw	df_rt_tload
e6f3 : 34f2                  	dw	df_rt_delete
e6f5 : 41f2                  	dw	df_rt_dir
e6f7 : 66ec                  	dw	df_rt_redim
                             
e6f9 : 6ff3                  	dw	df_rt_peek
e6fb : 6df3                  	dw	df_rt_deek
e6fd : f8f3                  	dw	df_rt_stick
e6ff : fef3                  	dw	df_rt_get
e701 : bef4                  	dw	df_rt_chr
e703 : 10f5                  	dw	df_rt_left
e705 : 21f5                  	dw	df_rt_right
e707 : 3cf5                  	dw	df_rt_mid
e709 : 5af5                  	dw	df_rt_len
e70b : aaf3                  	dw	df_rt_mem
e70d : 12f4                  	dw	df_rt_scrn
e70f : 88f3                  	dw	df_rt_rnd
e711 : 2cf4                  	dw	df_rt_elapsed
e713 : 47f4                  	dw	df_rt_call
e715 : d2f4                  	dw	df_rt_hex
e717 : 03f5                  	dw	df_rt_dec
e719 : 66f5                  	dw	df_rt_asc
e71b : 77f5                  	dw	df_rt_val
e71d : 1ff4                  	dw	df_rt_pixel
e71f : b7f5                  	dw	df_rt_sprhit
e721 : 59f4                  	dw	df_rt_sgn
AS65 Assembler for R6502 [1.42].                                     Page  209
-------------------------------- bank\bank0.s --------------------------------

e723 : 76f4                  	dw	df_rt_addr
                             	
e725 : 98e7                  	dw	df_rt_mult
e727 : b9e7                  	dw	df_rt_div
e729 : dae7                  	dw	df_rt_mod
e72b : fbe7                  	dw	df_rt_asl
e72d : 0ee8                  	dw	df_rt_lsr
e72f : 72e7                  	dw	df_rt_add
e731 : 85e7                  	dw	df_rt_sub
                             	
e733 : 21e8                  	dw	df_rt_and
e735 : 30e8                  	dw	df_rt_or
e737 : 3fe8                  	dw	df_rt_eor
e739 : d8e8                  	dw	df_rt_comlte
e73b : e1e8                  	dw	df_rt_comgte
e73d : eae8                  	dw	df_rt_comne
e73f : bde8                  	dw	df_rt_comlt
e741 : c6e8                  	dw	df_rt_comgt
e743 : cfe8                  	dw	df_rt_comeq
                             
                             
                             ; escape sequence handlers
                             ; to do the reverse of tokenising during the list
                             ; command which is also used to save to disk.
e745 :                       df_rt_escjmp
e745 : f6ef                  	dw df_rt_lst_chr
e747 : f5ef                  	dw df_rt_lst_reserved
e749 : f5ef                  	dw df_rt_lst_reserved
e74b : f5ef                  	dw df_rt_lst_reserved
e74d : f5ef                  	dw df_rt_lst_reserved	
e74f : f5ef                  	dw df_rt_lst_reserved	; no such thing as bytdec
e751 : 13f0                  	dw df_rt_lst_bythex
e753 : 38f0                  	dw df_rt_lst_bytbin
e755 : f5ef                  	dw df_rt_lst_reserved	
e757 : 5cf0                  	dw df_rt_lst_intdec
e759 : 26f0                  	dw df_rt_lst_inthex
e75b : 40f0                  	dw df_rt_lst_intbin
e75d : f5ef                  	dw df_rt_lst_reserved
e75f : f5ef                  	dw df_rt_lst_reserved
e761 : f5ef                  	dw df_rt_lst_reserved
e763 : f5ef                  	dw df_rt_lst_reserved	
e765 : b9f0                  	dw df_rt_lst_strlit
e767 : 67f0                  	dw df_rt_lst_var
e769 : 67f0                  	dw df_rt_lst_proc
                             
                             	include "dflat/rtsubs.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTSUBS.S
                             ;*  Module that implements the runtime execution 
                             ;*  keywords and functions.
                             ;*  So this is where most of the action is for ru
                             ;*  a line is being executed, the dflat runtime c
                             ;*  jumps through the runtime table to routines h
                             ;*  Every dflat statement begins with a token (ig
                             ;*  whitespace), even the implicit assignment and
AS65 Assembler for R6502 [1.42].                                     Page  210
-------------------------------- bank\bank0.s --------------------------------

                             ;*  invocation.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
e76b :                       mod_sz_rtsubs_s
                             
                             	include "dflat/numop.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  NUMOP.S
                             ;*	Dflat number AND string operators.
                             ;*  Uses the operator stack to get parameters, le
                             ;*  result on the operator stack.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; common pushint code
e76b :                       df_rt_putintres
e76b : a6a2             [ 3] 	ldx df_tmpptra
e76d : a5a3             [ 3] 	lda df_tmpptra+1
e76f : 4c6af7           [ 3] 	jmp df_ost_pushInt
                             
                             ; add two numbers
e772 :                       df_rt_add
e772 : 20c5e4           [ 6] 	jsr df_rt_get2Ints
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e782 : 4c6be7           [ 3] 	jmp df_rt_putintres
                             	
                             ; subtract
e785 :                       df_rt_sub
e785 : 20c5e4           [ 6] 	jsr df_rt_get2Ints
                             	_subZPWord df_tmpptra,df_tmpptrb
                             
e795 : 4c6be7           [ 3] 	jmp df_rt_putintres
                             
                             ; multiply
e798 :                       df_rt_mult
e798 : 20c5e4           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e7ab : 2037d6           [ 6] 	jsr int_mult
                             	_cpyZPWord num_a,df_tmpptra
                             
e7b6 : 4c6be7           [ 3] 	jmp df_rt_putintres
                             
                             ; divide
e7b9 :                       df_rt_div
AS65 Assembler for R6502 [1.42].                                     Page  211
-------------------------------- bank\bank0.s --------------------------------

e7b9 : 20c5e4           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e7cc : 2062d6           [ 6] 	jsr int_div
                             	_cpyZPWord num_a,df_tmpptra
                             
e7d7 : 4c6be7           [ 3] 	jmp df_rt_putintres
                             
                             ; mod
e7da :                       df_rt_mod
e7da : 20c5e4           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e7ed : 2062d6           [ 6] 	jsr int_div
                             	_cpyZPWord num_x,df_tmpptra
                             
e7f8 : 4c6be7           [ 3] 	jmp df_rt_putintres
                             
                             ; shift left
e7fb :                       df_rt_asl
e7fb : 20c5e4           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
e7fe : a6a4             [ 3] 	ldx df_tmpptrb
e800 : e8               [ 2] 	inx
e801 :                       df_rt_aslbit
e801 : ca               [ 2] 	dex
e802 : f007             [ 3] 	beq df_rt_asldone
e804 : 06a2             [ 5] 	asl df_tmpptra
e806 : 26a3             [ 5] 	rol df_tmpptra+1
e808 : 4c01e8           [ 3] 	jmp df_rt_aslbit
e80b :                       df_rt_asldone
e80b : 4c6be7           [ 3] 	jmp df_rt_putintres
                             
                             ; shift right
e80e :                       df_rt_lsr
e80e : 20c5e4           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
e811 : a6a4             [ 3] 	ldx df_tmpptrb
e813 : e8               [ 2] 	inx
e814 :                       df_rt_lsrbit
e814 : ca               [ 2] 	dex
e815 : f007             [ 3] 	beq df_rt_lsrdone
e817 : 46a3             [ 5] 	lsr df_tmpptra+1
e819 : 66a2             [ 5] 	ror df_tmpptra
e81b : 4c14e8           [ 3] 	jmp df_rt_lsrbit
e81e :                       df_rt_lsrdone
e81e : 4c6be7           [ 3] 	jmp df_rt_putintres
                             
                             ; logical and
e821 :                       df_rt_and
e821 : 20c5e4           [ 6] 	jsr df_rt_get2Ints
e824 : a5a2             [ 3] 	lda df_tmpptra
e826 : 25a4             [ 3] 	and df_tmpptrb
e828 : aa               [ 2] 	tax
e829 : a5a3             [ 3] 	lda df_tmpptra+1
e82b : 25a5             [ 3] 	and df_tmpptrb+1
e82d : 4c6af7           [ 3] 	jmp df_ost_pushInt
                             	
AS65 Assembler for R6502 [1.42].                                     Page  212
-------------------------------- bank\bank0.s --------------------------------

                             ; logical or
e830 :                       df_rt_or
e830 : 20c5e4           [ 6] 	jsr df_rt_get2Ints
e833 : a5a2             [ 3] 	lda df_tmpptra
e835 : 05a4             [ 3] 	ora df_tmpptrb
e837 : aa               [ 2] 	tax
e838 : a5a3             [ 3] 	lda df_tmpptra+1
e83a : 05a5             [ 3] 	ora df_tmpptrb+1
e83c : 4c6af7           [ 3] 	jmp df_ost_pushInt
                             
                             ; logical eor
e83f :                       df_rt_eor
e83f : 20c5e4           [ 6] 	jsr df_rt_get2Ints
e842 : a5a2             [ 3] 	lda df_tmpptra
e844 : 45a4             [ 3] 	eor df_tmpptrb
e846 : aa               [ 2] 	tax
e847 : a5a3             [ 3] 	lda df_tmpptra+1
e849 : 45a5             [ 3] 	eor df_tmpptrb+1
e84b : 4c6af7           [ 3] 	jmp df_ost_pushInt
                             
                             ; a==b common function
e84e :                       df_rt_aequb
e84e : a5a2             [ 3] 	lda df_tmpptra
e850 : c5a4             [ 3] 	cmp df_tmpptrb
e852 : d004             [ 3] 	bne df_rt_aequbFin
e854 : a5a3             [ 3] 	lda df_tmpptra+1
e856 : c5a5             [ 3] 	cmp df_tmpptrb+1
e858 :                       df_rt_aequbFin
e858 : 60               [ 6] 	rts
                             
                             ; a-b common function
e859 :                       df_rt_asubb
e859 : 38               [ 2] 	sec
e85a : a5a2             [ 3] 	lda df_tmpptra
e85c : e5a4             [ 3] 	sbc df_tmpptrb
e85e : a5a3             [ 3] 	lda df_tmpptra+1
e860 : e5a5             [ 3] 	sbc df_tmpptrb+1
e862 : 5002             [ 3] 	bvc df_rt_asubbFin
e864 : 4980             [ 2] 	eor #0x80
e866 :                       df_rt_asubbFin
e866 : 60               [ 6] 	rts
                             
                             ; b-a common function
e867 :                       df_rt_bsuba
e867 : 38               [ 2] 	sec
e868 : a5a4             [ 3] 	lda df_tmpptrb
e86a : e5a2             [ 3] 	sbc df_tmpptra
e86c : a5a5             [ 3] 	lda df_tmpptrb+1
e86e : e5a3             [ 3] 	sbc df_tmpptra+1
e870 : 5002             [ 3] 	bvc df_rt_bsubaFin
e872 : 4980             [ 2] 	eor #0x80
e874 :                       df_rt_bsubaFin
e874 : 60               [ 6] 	rts
                             
                             ; common routine push true
e875 :                       df_rt_true
e875 : a2ff             [ 2] 	ldx #0xff
e877 : 8a               [ 2] 	txa
e878 : 4c6af7           [ 3] 	jmp df_ost_pushInt
                             
                             ; common routine push false
e87b :                       df_rt_false
AS65 Assembler for R6502 [1.42].                                     Page  213
-------------------------------- bank\bank0.s --------------------------------

e87b : a200             [ 2] 	ldx #0x00
e87d : 8a               [ 2] 	txa
e87e : 4c6af7           [ 3] 	jmp df_ost_pushInt
                             
                             ; a < b == (a-b) < 0
e881 :                       df_rt_lt
e881 : 20c5e4           [ 6] 	jsr df_rt_get2Ints
e884 : 2059e8           [ 6] 	jsr df_rt_asubb
e887 : 30ec             [ 3] 	bmi df_rt_true
e889 : 10f0             [ 3] 	bpl df_rt_false
                             
                             ; a <=b == !(b-a > 0)
e88b :                       df_rt_lte
e88b : 20c5e4           [ 6] 	jsr df_rt_get2Ints
e88e :                       df_rt_lte_calc
e88e : 2067e8           [ 6] 	jsr df_rt_bsuba
e891 : 30e8             [ 3] 	bmi df_rt_false
e893 : 10e0             [ 3] 	bpl df_rt_true
                             
                             ; a > b == (b-a) < 0
e895 :                       df_rt_gt
e895 : 20c5e4           [ 6] 	jsr df_rt_get2Ints
e898 : 2067e8           [ 6] 	jsr df_rt_bsuba
e89b : 30d8             [ 3] 	bmi df_rt_true
e89d : 10dc             [ 3] 	bpl df_rt_false
                             
                             ; a >= b == (a-b >=0)
e89f :                       df_rt_gte
e89f : 20c5e4           [ 6] 	jsr df_rt_get2Ints
e8a2 :                       df_rt_gte_calc
e8a2 : 2059e8           [ 6] 	jsr df_rt_asubb
e8a5 : 10ce             [ 3] 	bpl df_rt_true
e8a7 : 30d2             [ 3] 	bmi df_rt_false
                             
                             ; a == b
e8a9 :                       df_rt_eq
e8a9 : 20c5e4           [ 6] 	jsr df_rt_get2Ints
e8ac : 204ee8           [ 6] 	jsr df_rt_aequb
e8af : d0ca             [ 3] 	bne df_rt_false
e8b1 : f0c2             [ 3] 	beq df_rt_true
                             
                             ; a <> b
e8b3 :                       df_rt_ne
e8b3 : 20c5e4           [ 6] 	jsr df_rt_get2Ints
e8b6 : 204ee8           [ 6] 	jsr df_rt_aequb
e8b9 : f0c0             [ 3] 	beq df_rt_false
e8bb : d0b8             [ 3] 	bne df_rt_true
                             
                             ; Common usage of boolean operators for num and s
                             
e8bd :                       df_rt_comlt
                             	; First find the data type on the stack
e8bd : 2094f7           [ 6] 	jsr df_ost_peekType
e8c0 : 2904             [ 2] 	and #DFST_STR
e8c2 : d04a             [ 4] 	bne df_rt_slt
                             	; If not string then assume number
e8c4 : f0bb             [ 3] 	beq df_rt_lt
                             
e8c6 :                       df_rt_comgt
                             	; First find the data type on the stack
e8c6 : 2094f7           [ 6] 	jsr df_ost_peekType
e8c9 : 2904             [ 2] 	and #DFST_STR
AS65 Assembler for R6502 [1.42].                                     Page  214
-------------------------------- bank\bank0.s --------------------------------

e8cb : d048             [ 4] 	bne df_rt_sgt
                             	; If not string then assume number
e8cd : f0c6             [ 3] 	beq df_rt_gt
                             
e8cf :                       df_rt_comeq
                             	; First find the data type on the stack
e8cf : 2094f7           [ 6] 	jsr df_ost_peekType
e8d2 : 2904             [ 2] 	and #DFST_STR
e8d4 : d048             [ 4] 	bne df_rt_seq
                             	; If not string then assume number
e8d6 : f0d1             [ 3] 	beq df_rt_eq
                             
e8d8 :                       df_rt_comlte
                             	; First find the data type on the stack
e8d8 : 2094f7           [ 6] 	jsr df_ost_peekType
e8db : 2904             [ 2] 	and #DFST_STR
e8dd : d014             [ 3] 	bne df_rt_slte
                             	; If not string then assume number
e8df : f0aa             [ 3] 	beq df_rt_lte
                             	
e8e1 :                       df_rt_comgte
                             	; First find the data type on the stack
e8e1 : 2094f7           [ 6] 	jsr df_ost_peekType
e8e4 : 2904             [ 2] 	and #DFST_STR
e8e6 : d018             [ 4] 	bne df_rt_sgte
                             	; If not string then assume number
e8e8 : f0b5             [ 3] 	beq df_rt_gte
                             
e8ea :                       df_rt_comne
                             	; First find the data type on the stack
e8ea : 2094f7           [ 6] 	jsr df_ost_peekType
e8ed : 2904             [ 2] 	and #DFST_STR
e8ef : d016             [ 4] 	bne df_rt_sne
                             	; If not string then assume number
e8f1 : f0c0             [ 3] 	beq df_rt_ne
                             
                             
                             ;********** STRING OPS **********
                             
                             ; string less than or equal
e8f3 :                       df_rt_slte
e8f3 : 2025e9           [ 6] 	jsr df_rt_str_comp
e8f6 : 3005             [ 3] 	bmi df_rt_str_comp_true
e8f8 : f003             [ 3] 	beq df_rt_str_comp_true
e8fa :                       df_rt_str_comp_false
e8fa : 4c7be8           [ 3] 	jmp df_rt_false
e8fd :                       df_rt_str_comp_true
e8fd : 4c75e8           [ 3] 	jmp df_rt_true	
                             
                             ; string greater then or equal	
e900 :                       df_rt_sgte
e900 : 2025e9           [ 6] 	jsr df_rt_str_comp
e903 : 10f8             [ 4] 	bpl df_rt_str_comp_true
e905 : 30f3             [ 4] 	bmi df_rt_str_comp_false
                             
                             ; string not equal
e907 :                       df_rt_sne
e907 : 2025e9           [ 6] 	jsr df_rt_str_comp
e90a : d0f1             [ 4] 	bne df_rt_str_comp_true
e90c : f0ec             [ 4] 	beq df_rt_str_comp_false
                             
                             ; string less than
AS65 Assembler for R6502 [1.42].                                     Page  215
-------------------------------- bank\bank0.s --------------------------------

e90e :                       df_rt_slt
e90e : 2025e9           [ 6] 	jsr df_rt_str_comp
e911 : 30ea             [ 4] 	bmi df_rt_str_comp_true
e913 : 10e5             [ 4] 	bpl df_rt_str_comp_false
                             
                             ; string greater than
e915 :                       df_rt_sgt
e915 : 2025e9           [ 6] 	jsr df_rt_str_comp
e918 : 30e0             [ 4] 	bmi df_rt_str_comp_false
e91a : f0de             [ 4] 	beq df_rt_str_comp_false
e91c : d0df             [ 4] 	bne df_rt_str_comp_true
                             
                             ; string equal
e91e :                       df_rt_seq
e91e : 2025e9           [ 6] 	jsr df_rt_str_comp
e921 : f0da             [ 4] 	beq df_rt_str_comp_true
e923 : d0d5             [ 4] 	bne df_rt_str_comp_false
                             
                             ; common string comparator
                             ; N=1 means <
                             ; Z=0 means >
                             ; Z=1 means ==
e925 :                       df_rt_str_comp
e925 : 20d4e4           [ 6] 	jsr df_rt_get2Strs
e928 : a000             [ 2] 	ldy #0
e92a :                       df_rt_str_comp_byte
e92a : b1a2             [ 5] 	lda (df_tmpptra),y
e92c : aa               [ 2] 	tax							; Save op1 char in X
e92d : d1a4             [ 5] 	cmp (df_tmpptrb),y
                             	; if c=0 then <
e92f : 9008             [ 3] 	bcc df_rt_str_comp_lt
                             	; if c=1 and nz then >
e931 : d009             [ 3] 	bne df_rt_str_comp_gt
                             	; if here then both strings still the same
e933 : 8a               [ 2] 	txa							; What was op1 char
                             	; if char is zero then end
e934 : f009             [ 3] 	beq df_rt_str_comp_eq
                             	; else do next char
e936 : c8               [ 2] 	iny
e937 : d0f1             [ 3] 	bne df_rt_str_comp_byte ; Always - relying on Y 
e939 :                       df_rt_str_comp_lt
e939 : a9ff             [ 2] 	lda #0xff
e93b : 60               [ 6] 	rts
e93c :                       df_rt_str_comp_gt
e93c : a901             [ 2] 	lda #0x01
e93e : 60               [ 6] 	rts
e93f :                       df_rt_str_comp_eq
e93f : a900             [ 2] 	lda #0x00
e941 : 60               [ 6] 	rts
                             
                             
                             
                             
e942 :                       df_rt_monitor
e942 : 4cb2d4           [ 3] 	jmp command_line
                             
e945 :                       df_rt_new
e945 : 4ccbf7           [ 3] 	jmp df_clear
                             
e948 :                       df_rt_while
                             	; push statement address
e948 : 20d3e5           [ 6] 	jsr df_rt_push_stat
AS65 Assembler for R6502 [1.42].                                     Page  216
-------------------------------- bank\bank0.s --------------------------------

                             	; DFRT_WHILE token
e94b : a990             [ 2] 	lda #DFRT_WHILE
e94d : 2021f7           [ 6] 	jsr df_rst_pushByte
                             
                             	; get value in A,X
e950 : 2016e2           [ 6] 	jsr df_rt_getnval
                             
                             	; if value<>0 then continue
e953 : e000             [ 2] 	cpx #0
e955 : f001             [ 3] 	beq df_rt_while_done
e957 : 60               [ 6] 	rts
e958 :                       df_rt_while_done
                             	; pop while data off stack as not needed
e958 : 2047f7           [ 6] 	jsr df_rst_popWord
e95b : 2047f7           [ 6] 	jsr df_rst_popWord
                             	; while evaluated false so find wend
                             	; but check for any nested while/wends
                             	; nest = 1 to start
e95e : a594             [ 3] 	lda df_ifnest
e960 : 48               [ 3] 	pha
e961 : a901             [ 2] 	lda #1
e963 : 8594             [ 3] 	sta df_ifnest
                             	; find the matching else/elseif/endif
                             	; start from current statement
                             	_cpyZPWord df_currlin,df_nextlin
                             
e96d :                       df_rt_findwend
e96d : a68a             [ 3] 	ldx df_nextlin
e96f : a58b             [ 3] 	lda df_nextlin+1
e971 : a481             [ 3] 	ldy df_curstidx
e973 : 20a3e5           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e976 : b031             [ 3] 	bcs df_rt_wend_end
e978 : 868a             [ 3] 	stx df_nextlin
e97a : 858b             [ 3] 	sta df_nextlin+1
e97c : 8481             [ 3] 	sty df_curstidx
                             	; find the command token
e97e :                       df_rt_while_cmd
e97e : c8               [ 2] 	iny
e97f : b18a             [ 5] 	lda (df_nextlin),y
e981 : 10fb             [ 3] 	bpl df_rt_while_cmd
                             	; check for wend
e983 : c991             [ 2] 	cmp #DFRT_WEND
e985 : d019             [ 3] 	bne df_rt_check_while
                             	; decrement nest
e987 : c694             [ 5] 	dec df_ifnest
                             	; if not zero then go find more commands
e989 : d0e2             [ 3] 	bne df_rt_findwend
                             	; else found it, restore if nest
                             	; and skip the wend statement
e98b : 68               [ 4] 	pla
e98c : 8594             [ 3] 	sta df_ifnest
e98e : a68a             [ 3] 	ldx df_nextlin
e990 : a58b             [ 3] 	lda df_nextlin+1
e992 : a481             [ 3] 	ldy df_curstidx
e994 : 20a3e5           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e997 : b010             [ 3] 	bcs df_rt_wend_end
                             	; need to update nxtstidx to transfer control
e999 : 868a             [ 3] 	stx df_nextlin
e99b : 858b             [ 3] 	sta df_nextlin+1
e99d : 8480             [ 3] 	sty df_nxtstidx
AS65 Assembler for R6502 [1.42].                                     Page  217
-------------------------------- bank\bank0.s --------------------------------

e99f : 60               [ 6] 	rts
e9a0 :                       df_rt_check_while
                             	; check for while
e9a0 : c990             [ 2] 	cmp #DFRT_WHILE
e9a2 : d0c9             [ 3] 	bne df_rt_findwend
                             	; if while found then increment nest
e9a4 : e694             [ 5] 	inc df_ifnest
e9a6 : 4c6de9           [ 3] 	jmp df_rt_findwend
e9a9 :                       df_rt_wend_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
e9ab :                       df_rt_wend
e9ab : 202af7           [ 6] 	jsr df_rst_popByte
e9ae : c990             [ 2] 	cmp #DFRT_WHILE
e9b0 : d00d             [ 3] 	bne df_rt_wend_err
                             	; pop the stat and continue
e9b2 : 2047f7           [ 6] 	jsr df_rst_popWord
e9b5 : 868a             [ 3] 	stx	df_nextlin
e9b7 : 858b             [ 3] 	sta df_nextlin+1
e9b9 : 202af7           [ 6] 	jsr df_rst_popByte
e9bc : 8580             [ 3] 	sta df_nxtstidx
e9be : 60               [ 6] 	rts
e9bf :                       df_rt_wend_err
                             	SWBRK DFERR_WEND
                             
                             
                             ;move to next statement during if/else matching
                             ;end of program is an error
e9c1 :                       df_rt_if_stat
e9c1 : a68a             [ 3] 	ldx df_nextlin
e9c3 : a58b             [ 3] 	lda df_nextlin+1
e9c5 : a481             [ 3] 	ldy df_curstidx
e9c7 : 20a3e5           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e9ca : b009             [ 3] 	bcs df_rt_if_stat_err
e9cc : 868a             [ 3] 	stx df_nextlin
e9ce : 858b             [ 3] 	sta df_nextlin+1
e9d0 : 8481             [ 3] 	sty df_curstidx
e9d2 : 8480             [ 3] 	sty df_nxtstidx
e9d4 : 60               [ 6] 	rts
                             ; program ended with no match
e9d5 :                       df_rt_if_stat_err
                             	SWBRK DFERR_UNCLOSEDIF
                             
                             
                             ; find matching else/elseif/endif
                             ; C = 0 match else/elseif/endif
                             ; C = 1 match endif only
                             ; endif is always matched
                             ; ** MAKE SURE NEXTLIN IS POPULATED! **
e9d7 :                       df_rt_if_match
                             	; save the current if nest level
e9d7 : a594             [ 3] 	lda df_ifnest
e9d9 : 48               [ 3] 	pha
                             	; local if nest level is zero to start with
e9da : a900             [ 2] 	lda #0
e9dc : 8594             [ 3] 	sta df_ifnest
                             	; save match pref
e9de : 08               [ 3] 	php
                             	; find the matching else/elseif/endif
                             	; start from df_nextlin, df_curstidx
AS65 Assembler for R6502 [1.42].                                     Page  218
-------------------------------- bank\bank0.s --------------------------------

e9df :                       df_rt_findelseendif
e9df : 20c1e9           [ 6] 	jsr df_rt_if_stat
                             	; find command
e9e2 :                       df_rt_ifcmd
e9e2 : c8               [ 2] 	iny
e9e3 : b18a             [ 5] 	lda (df_nextlin),y
e9e5 : 10fb             [ 3] 	bpl df_rt_ifcmd
                             	; check for endif
e9e7 : c994             [ 2] 	cmp #DFRT_ENDIF
e9e9 : f015             [ 4] 	beq df_rt_ifelse
                             
e9eb : 28               [ 4] 	plp
e9ec : 08               [ 3] 	php
                             
e9ed : b008             [ 3] 	bcs df_rt_ifskipelseif
e9ef : c993             [ 2] 	cmp #DFRT_ELSE
e9f1 : f00d             [ 4] 	beq df_rt_ifelse
e9f3 : c995             [ 2] 	cmp #DFRT_ELSEIF
e9f5 : f009             [ 4] 	beq df_rt_ifelse
e9f7 :                       df_rt_ifskipelseif
                             	; another if token found - increment lcoal if ne
e9f7 : c992             [ 2] 	cmp #DFRT_IF
e9f9 : d002             [ 3] 	bne df_rt_skipnestif
e9fb : e694             [ 5] 	inc df_ifnest
e9fd :                       df_rt_skipnestif
                             	; no tokens of interest found, so next statement
e9fd : 4cdfe9           [ 3] 	jmp df_rt_findelseendif
                             
                             	; found else/elseif/endif
                             	; but check if this is nested
ea00 :                       df_rt_ifelse
                             	; nest counter zero then found matching else/els
ea00 : a694             [ 3] 	ldx df_ifnest
ea02 : f009             [ 3] 	beq df_rt_if_found
                             	; endif token found so decrement local nest
ea04 : c994             [ 2] 	cmp #DFRT_ENDIF
ea06 : d002             [ 3] 	bne df_rt_skipnestendif
ea08 : c694             [ 5] 	dec df_ifnest
ea0a :                       df_rt_skipnestendif
                             	; continue to search for else/endif
ea0a : 4cdfe9           [ 3] 	jmp df_rt_findelseendif
                             	; ok got a match
ea0d :                       df_rt_if_found
                             	; remove pref
ea0d : 28               [ 4] 	plp
                             	; restore global if nest
ea0e : 8538             [ 3] 	sta tmp_d			; Using as a temp place!
ea10 : 68               [ 4] 	pla					; Get nest from stack
ea11 : aa               [ 2] 	tax					; And put in X
ea12 : a538             [ 3] 	lda tmp_d			; Get a back from temp!
ea14 : 8694             [ 3] 	stx df_ifnest		; Now restore the nest counter
                             
                             	;A contains the token found, Y is index in to df
                             ;	clc
ea16 : 60               [ 6] 	rts
                             
ea17 :                       df_rt_endif
                             	; decrement if next level
ea17 : c694             [ 5] 	dec df_ifnest
ea19 : 3011             [ 3] 	bmi df_rt_noif_err
ea1b :                       df_rt_if_done
ea1b : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  219
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; else and ifelse encountered in a normal sequen
                             	; only happens when the clause has been executed
                             	; so we only now need to find the endif
ea1c :                       df_rt_elseif
ea1c :                       df_rt_else
                             	; not in if mode then error
ea1c : a594             [ 3] 	lda df_ifnest
ea1e : f00c             [ 3] 	beq df_rt_noif_err
                             	; find endif only
                             	; starting from current line and curstidx
                             	_cpyZPWord df_currlin,df_nextlin
                             
ea28 : 38               [ 2] 	sec
ea29 : 4cd7e9           [ 3] 	jmp df_rt_if_match
                             
                             ; endif/else/elseif encountered outside of an if
ea2c :                       df_rt_noif_err
                             	SWBRK DFERR_NOIF
                             
                             
                             	; when if is encountered, the job of this routin
                             	; to determine which clause to execute, then tra
                             	; program control to that point.  in normal prog
                             	; sequence else/elseif statements will signify t
                             	; of an if construct.
ea2e :                       df_rt_if
                             	; increment global if nest counter
ea2e : e694             [ 5] 	inc df_ifnest
ea30 :                       df_rt_ifeval
                             	; get value
ea30 : 2016e2           [ 6] 	jsr df_rt_getnval
                             	; if X,A<>0 if is successful then continue norma
ea33 : a8               [ 2] 	tay
ea34 : d0e5             [ 3] 	bne df_rt_if_done
ea36 : 8a               [ 2] 	txa
ea37 : d0e2             [ 3] 	bne df_rt_if_done
                             	; got here then if clause evaluated to false
                             	; match with else/elseif/endif
                             	; df_nextlin is used to find the clause to execu
                             	_cpyZPWord df_currlin,df_nextlin
                             
ea41 : 18               [ 2] 	clc
ea42 : 20d7e9           [ 6] 	jsr df_rt_if_match
                             	; A contains the token found, Y is index of this
                             
ea45 : c993             [ 2] 	cmp #DFRT_ELSE
                             	; else: df_nextlin and df_nxtstidx points to the
ea47 : f023             [ 3] 	beq df_rt_do_else
                             
ea49 : c994             [ 2] 	cmp #DFRT_ENDIF
                             	; else: df_nextlin and df_nxtstidx points to the
ea4b : f0ce             [ 3] 	beq df_rt_if_done
                             
                             	; elif detected - increment past the token and e
                             	; make this the current line and token index
                             	_cpyZPWord df_nextlin,df_currlin
                             
                             	; move past the token and save position
ea55 : c8               [ 2] 	iny
ea56 : 98               [ 2] 	tya
ea57 : 48               [ 3] 	pha
AS65 Assembler for R6502 [1.42].                                     Page  220
-------------------------------- bank\bank0.s --------------------------------

                             	; initialise statement pointer
ea58 : a481             [ 3] 	ldy df_curstidx
ea5a : a687             [ 3] 	ldx df_currlin
ea5c : a588             [ 3] 	lda df_currlin+1
ea5e : 2021e5           [ 6] 	jsr df_rt_init_stat_ptr
                             	; restore Y (one byte past the token) and save i
ea61 : 68               [ 4] 	pla
ea62 : a8               [ 2] 	tay
ea63 : 8489             [ 3] 	sty df_exeoff
                             	; don't force a jump as we've initalised all var
ea65 : a900             [ 2] 	lda #0
ea67 : 858b             [ 3] 	sta df_nextlin+1
                             	; now everyting is set up to evaluate the elif c
ea69 : 4c30ea           [ 3] 	jmp df_rt_ifeval
                             
ea6c :                       df_rt_do_else
                             	; we need to point to the next statement not thi
ea6c : 4cc1e9           [ 3] 	jmp df_rt_if_stat
                             
ea6f :                       df_rt_for
                             	; push statement address to rt stack
ea6f : 20d3e5           [ 6] 	jsr df_rt_push_stat
                             	; get lvar
ea72 : 205ae6           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer, A is fine to trample
ea75 : 48               [ 3] 	pha
ea76 : 8a               [ 2] 	txa
ea77 : 48               [ 3] 	pha
                             
                             	; find starting value
                             	; evaluate the starting value
                             	; can't use df_rt_getnval as need to use A,X fir
ea78 : e689             [ 5] 	inc df_exeoff
ea7a : 201ce2           [ 6] 	jsr df_rt_neval
                             	; get ready to update the counter using pointer
ea7d : 68               [ 4] 	pla
ea7e : aa               [ 2] 	tax
ea7f : 86a2             [ 3] 	stx df_tmpptra
ea81 : 68               [ 4] 	pla
ea82 : 85a3             [ 3] 	sta df_tmpptra+1
                             	; But remember lvar pointer for later A is ok to
ea84 : 48               [ 3] 	pha
ea85 : 8a               [ 2] 	txa
ea86 : 48               [ 3] 	pha
                             
                             	; get the starting value from op stack
ea87 : 209af7           [ 6] 	jsr df_ost_popInt
                             	; save it to counter slot
ea8a : a001             [ 2] 	ldy #1
ea8c : 91a2             [ 5] 	sta (df_tmpptra),y
ea8e : 8a               [ 2] 	txa
ea8f : 88               [ 2] 	dey
ea90 : 91a2             [ 5] 	sta (df_tmpptra),y
                             
                             	; find end value
                             	; evaluate the end value
ea92 : e689             [ 5] 	inc df_exeoff
ea94 : 2016e2           [ 6] 	jsr df_rt_getnval
                             	; and put on rt stack
ea97 : 2039f7           [ 6] 	jsr df_rst_pushWord
                             
                             	; find step value
AS65 Assembler for R6502 [1.42].                                     Page  221
-------------------------------- bank\bank0.s --------------------------------

                             	; evaluate the end value
ea9a : e689             [ 5] 	inc df_exeoff
ea9c : 2016e2           [ 6] 	jsr df_rt_getnval
                             	; and push on rt stack
ea9f : 2039f7           [ 6] 	jsr df_rst_pushWord
                             	; save the counter lvar pointer
eaa2 : 68               [ 4] 	pla
eaa3 : aa               [ 2] 	tax
eaa4 : 68               [ 4] 	pla
eaa5 : 2039f7           [ 6] 	jsr df_rst_pushWord
                             	; all done - counter set to start
                             	; stack contains counter slot, step val, end val
                             	; now push for token
eaa8 : a98e             [ 2] 	lda #DFRT_FOR
eaaa : 4c21f7           [ 3] 	jmp df_rst_pushByte
                             
eaad :                       df_rt_next
                             	; remember stack position
eaad : a477             [ 3] 	ldy df_rtstop
eaaf : 98               [ 2] 	tya
eab0 : 48               [ 3] 	pha
eab1 : 202af7           [ 6] 	jsr df_rst_popByte
eab4 : c98e             [ 2] 	cmp #DFRT_FOR
eab6 : d04e             [ 4] 	bne df_rt_next_err
                             	; get the slot address
eab8 : 2047f7           [ 6] 	jsr df_rst_popWord
                             	; save address to ptrd, contents to ptra
eabb : 86a8             [ 3] 	stx df_tmpptrd
eabd : 85a9             [ 3] 	sta df_tmpptrd+1
eabf : a000             [ 2] 	ldy #0
eac1 : b1a8             [ 5] 	lda (df_tmpptrd),y
eac3 : 85a2             [ 3] 	sta df_tmpptra
eac5 : c8               [ 2] 	iny
eac6 : b1a8             [ 5] 	lda (df_tmpptrd),y
eac8 : 85a3             [ 3] 	sta df_tmpptra+1
                             
                             	; get step value, save in ptrb
eaca : 2047f7           [ 6] 	jsr df_rst_popWord
eacd : 86a4             [ 3] 	stx df_tmpptrb
eacf : 85a5             [ 3] 	sta df_tmpptrb+1
ead1 : 48               [ 3] 	pha					; Push A to check for -ve step
                             
                             	; add step to counter and save back to counter
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
eadf : a5a2             [ 3] 	lda df_tmpptra
eae1 : a000             [ 2] 	ldy #0
eae3 : 91a8             [ 5] 	sta (df_tmpptrd),y
eae5 : a5a3             [ 3] 	lda df_tmpptra+1
eae7 : c8               [ 2] 	iny
eae8 : 91a8             [ 5] 	sta (df_tmpptrd),y
                             
                             	; get end value, save in ptrb
eaea : 2047f7           [ 6] 	jsr df_rst_popWord
eaed : 86a4             [ 3] 	stx df_tmpptrb
eaef : 85a5             [ 3] 	sta df_tmpptrb+1
eaf1 : 68               [ 4] 	pla					; check if if +ve or -ve step
eaf2 : 1006             [ 3] 	bpl df_rt_check_pos
                             	; call gte operation but no need to get ints
                             	; as already in ptra and ptrb
eaf4 : 20a2e8           [ 6] 	jsr df_rt_gte_calc
eaf7 : 4cfdea           [ 3] 	jmp df_rt_next_check
AS65 Assembler for R6502 [1.42].                                     Page  222
-------------------------------- bank\bank0.s --------------------------------

eafa :                       df_rt_check_pos
                             	; call lte operation but no need to get ints
                             	; as already in ptra and ptrb
eafa : 208ee8           [ 6] 	jsr df_rt_lte_calc
eafd :                       df_rt_next_check
                             	; check if true or false
eafd : 209af7           [ 6] 	jsr df_ost_popInt
eb00 : 8a               [ 2] 	txa
                             	; if false then next is done
eb01 : f020             [ 3] 	beq df_rt_untilnext_done
                             	; else we continue
eb03 : 4c76e6           [ 3] 	jmp df_rt_pop_stat_go
                             
eb06 :                       df_rt_next_err
                             	SWBRK DFERR_NEXTFOR
                             
                             
                             
eb08 :                       df_rt_repeat
                             	; push statement address
eb08 : 20d3e5           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_REPEAT token
eb0b : a98c             [ 2] 	lda #DFRT_REPEAT
eb0d : 4c21f7           [ 3] 	jmp df_rst_pushByte
                             
eb10 :                       df_rt_until
                             	; remember stack position
eb10 : a577             [ 3] 	lda df_rtstop
eb12 : 48               [ 3] 	pha
eb13 : 202af7           [ 6] 	jsr df_rst_popByte
eb16 : c98c             [ 2] 	cmp #DFRT_REPEAT
eb18 : d011             [ 3] 	bne df_rt_until_err
                             	; evaluate expression in to A,X
eb1a : 2016e2           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 then continue
eb1d : 8a               [ 2] 	txa
eb1e : d003             [ 3] 	bne df_rt_untilnext_done
                             
                             	; pop the stat and continue
eb20 : 4c76e6           [ 3] 	jmp df_rt_pop_stat_go
                             
eb23 :                       df_rt_untilnext_done
eb23 : 68               [ 4] 	pla
eb24 : a8               [ 2] 	tay
                             	; pop 2 items off stack (line address, index)
                             	; and continue
eb25 : 2047f7           [ 6] 	jsr df_rst_popWord
eb28 : 4c2af7           [ 3] 	jmp df_rst_popByte
                             
eb2b :                       df_rt_until_err
                             	SWBRK DFERR_UNTIL
                             
                             
eb2d :                       df_rt_sadd
eb2d : 60               [ 6] 	rts
                             
eb2e :                       df_rt_print_num
eb2e : 209af7           [ 6] 	jsr df_ost_popInt
eb31 : 18               [ 2] 	clc
eb32 : 4ce5c3           [ 3] 	jmp print_a_to_d
                             
eb35 :                       df_rt_print_str
AS65 Assembler for R6502 [1.42].                                     Page  223
-------------------------------- bank\bank0.s --------------------------------

eb35 : 209ef7           [ 6] 	jsr df_ost_popStr
eb38 : 86a2             [ 3] 	stx df_tmpptra
eb3a : 85a3             [ 3] 	sta df_tmpptra+1
eb3c : a000             [ 2] 	ldy #0
eb3e :                       df_rt_print_str_ch
eb3e : b1a2             [ 5] 	lda (df_tmpptra),y
eb40 : f006             [ 3] 	beq df_rt_print_str_done
eb42 : 202ac4           [ 6] 	jsr io_put_ch
eb45 : c8               [ 2] 	iny
eb46 : d0f6             [ 3] 	bne df_rt_print_str_ch		; Rely on y not wrapping
eb48 :                       df_rt_print_str_done
eb48 : 60               [ 6] 	rts
                             
                             ; * Find the position of the next data item to re
eb49 :                       df_rt_nextdatum
eb49 : a200             [ 2] 	ldx #0
                             	; load data line offset
eb4b : a497             [ 3] 	ldy df_datoff
                             	; if data pointer unitialised (because high byte
eb4d : a596             [ 3] 	lda df_currdat+1
eb4f : d02e             [ 3] 	bne df_rt_skipinitdataptr
                             	; then start at program beginning
                             	_cpyZPWord df_prgstrt,df_currdat
                             
eb59 :                       df_rt_datlinstart
                             	; if end of program then error
eb59 : a195             [ 6] 	lda (df_currdat,x)
eb5b : f032             [ 3] 	beq df_rt_datumerr
                             	; index in to first line byte
eb5d : a003             [ 2] 	ldy #3
eb5f : 8497             [ 3] 	sty df_datoff
                             	; find first 'data' statement
eb61 :                       df_rt_datastatement
eb61 : c8               [ 2] 	iny
eb62 : 98               [ 2] 	tya
                             	; end of line reached?
eb63 : c195             [ 6] 	cmp (df_currdat,x)
                             	; if not find data token
eb65 : d00e             [ 3] 	bne df_rt_getdatatk
eb67 :                       df_rt_datnextlin
                             	; if so then go to next line
eb67 : 18               [ 2] 	clc
eb68 : a595             [ 3] 	lda df_currdat
eb6a : 6195             [ 6] 	adc (df_currdat,x)
eb6c : 8595             [ 3] 	sta df_currdat
                             	_bcc 2
                             
eb70 : e696             [ 5] 	inc df_currdat+1
eb72 : 4c59eb           [ 3] 	jmp df_rt_datlinstart
eb75 :                       df_rt_getdatatk
eb75 : b195             [ 5] 	lda (df_currdat),y
eb77 : 10e8             [ 3] 	bpl df_rt_datastatement
                             	; found data statement?
eb79 : c996             [ 2] 	cmp #DFRT_DATA
                             	; if not then go to next line
eb7b : d0ea             [ 3] 	bne df_rt_datnextlin
eb7d : 8497             [ 3] 	sty df_datoff
eb7f :                       df_rt_skipinitdataptr
eb7f : 98               [ 2] 	tya
                             	; end of line reached?
eb80 : c195             [ 6] 	cmp (df_currdat,x)
                             	; if so go to next line
AS65 Assembler for R6502 [1.42].                                     Page  224
-------------------------------- bank\bank0.s --------------------------------

eb82 : f0e3             [ 3] 	beq df_rt_datnextlin
                             	; else see if escape value
eb84 : b195             [ 5] 	lda (df_currdat),y
eb86 : c920             [ 2] 	cmp #DFTK_ESCVAL
eb88 : c8               [ 2] 	iny
eb89 : b0f4             [ 3] 	bcs df_rt_skipinitdataptr
                             	; ok found an escape value
                             	; save position and return
eb8b : 88               [ 2] 	dey
eb8c : 8497             [ 3] 	sty df_datoff
eb8e : 60               [ 6] 	rts
eb8f :                       df_rt_datumerr
                             	SWBRK DFERR_NODATA
                             
                             
                             ; read a datum
eb91 :                       df_rt_readdatum
                             	; update data pointer to next data item
eb91 : 2049eb           [ 6] 	jsr df_rt_nextdatum
                             	; now get lvar X,A from current statement
eb94 : 205ae6           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
eb97 : 86a4             [ 3] 	stx df_tmpptrb
eb99 : 85a5             [ 3] 	sta df_tmpptrb+1
                             
                             	; first save save current prgoram line and offse
eb9b : a587             [ 3] 	lda df_currlin
eb9d : 48               [ 3] 	pha
eb9e : a588             [ 3] 	lda df_currlin+1
eba0 : 48               [ 3] 	pha
eba1 : a589             [ 3] 	lda df_exeoff
eba3 : 48               [ 3] 	pha
eba4 : a57f             [ 3] 	lda df_eolidx
eba6 : 48               [ 3] 	pha
eba7 : a580             [ 3] 	lda df_nxtstidx
eba9 : 48               [ 3] 	pha
ebaa : a581             [ 3] 	lda df_curstidx
ebac : 48               [ 3] 	pha
                             
                             	; use data pointer as current position for evalu
                             	_cpyZPWord df_currdat,df_currlin
                             
ebb5 : a597             [ 3] 	lda df_datoff
ebb7 : 8589             [ 3] 	sta df_exeoff
ebb9 : a200             [ 2] 	ldx #0
ebbb : a195             [ 6] 	lda (df_currdat,x)
ebbd : 857f             [ 3] 	sta df_eolidx
ebbf : 8580             [ 3] 	sta df_nxtstidx
ebc1 : a903             [ 2] 	lda #3
ebc3 : 8581             [ 3] 	sta df_curstidx
                             
                             	; get type from vvt ptr in tmpa
ebc5 : a1a2             [ 6] 	lda (df_tmpptra,x)
ebc7 : a8               [ 2] 	tay
                             	; get lvar point from tmpb
ebc8 : a6a4             [ 3] 	ldx df_tmpptrb
ebca : a5a5             [ 3] 	lda df_tmpptrb+1
                             
                             	; X,A and Y set up, now evaluate and perform ass
ebcc : 2062ee           [ 6] 	jsr df_rt_doassign
                             
                             	; update data offset as data has been consumed
AS65 Assembler for R6502 [1.42].                                     Page  225
-------------------------------- bank\bank0.s --------------------------------

ebcf : a589             [ 3] 	lda df_exeoff
ebd1 : 8597             [ 3] 	sta df_datoff
                             	; restore line settings
ebd3 : 68               [ 4] 	pla
ebd4 : 8581             [ 3] 	sta df_curstidx
ebd6 : 68               [ 4] 	pla
ebd7 : 8580             [ 3] 	sta df_nxtstidx
ebd9 : 68               [ 4] 	pla
ebda : 857f             [ 3] 	sta df_eolidx
ebdc : 68               [ 4] 	pla
ebdd : 8589             [ 3] 	sta df_exeoff
ebdf : 68               [ 4] 	pla
ebe0 : 8588             [ 3] 	sta df_currlin+1
ebe2 : 68               [ 4] 	pla
ebe3 : 8587             [ 3] 	sta df_currlin
ebe5 : 60               [ 6] 	rts
                             
                             
ebe6 :                       df_rt_read
                             	; find variable to read in to from current posit
ebe6 : a489             [ 3] 	ldy df_exeoff
ebe8 :                       df_rt_read_find_var
ebe8 : c8               [ 2] 	iny
                             	; if end of line or statement then done
                             ;	cpy df_eolidx
                             ;	beq df_rt_read_done
ebe9 : c480             [ 3] 	cpy df_nxtstidx
ebeb : f00e             [ 3] 	beq df_rt_read_done
                             	; if not found escape then next byte
ebed : b187             [ 5] 	lda (df_currlin),y
ebef : c920             [ 2] 	cmp #DFTK_ESCVAL
ebf1 : b0f5             [ 3] 	bcs df_rt_read_find_var
                             	; ok found escape, save position
ebf3 : 8489             [ 3] 	sty df_exeoff
                             	; go and read in the value
ebf5 : 2091eb           [ 6] 	jsr df_rt_readdatum
                             	; try find another variable
ebf8 : 4ce6eb           [ 3] 	jmp df_rt_read
                             
ebfb :                       df_rt_read_done
                             	; save position
ebfb : 8489             [ 3] 	sty df_exeoff
ebfd : 60               [ 6] 	rts
                             
ebfe :                       df_rt_input
                             	; df_tmpptra has the vvt address, X,A is the lva
ebfe : 205ae6           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
ec01 : 86a4             [ 3] 	stx df_tmpptrb
ec03 : 85a5             [ 3] 	sta df_tmpptrb+1
                             	; go read a line of input
                             	; buf_lo ptr has the input, Y is size
ec05 : 38               [ 2] 	sec
ec06 : 203fc4           [ 6] 	jsr io_read_line
                             	; check the type
ec09 : a200             [ 2] 	ldx #0
ec0b : a1a2             [ 6] 	lda (df_tmpptra,x)
ec0d : 2904             [ 2] 	and #DFVVT_STR
ec0f : d008             [ 3] 	bne df_rt_input_str
ec11 : a1a2             [ 6] 	lda (df_tmpptra,x)
ec13 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
ec15 : d00a             [ 3] 	bne df_rt_input_num
AS65 Assembler for R6502 [1.42].                                     Page  226
-------------------------------- bank\bank0.s --------------------------------

                             	; if not int or byte then error
ec17 : f01f             [ 3] 	beq df_rt_input_err
ec19 :                       df_rt_input_str
ec19 : b139             [ 5] 	lda (buf_lo),y
ec1b : 91a4             [ 5] 	sta (df_tmpptrb),y
ec1d : 88               [ 2] 	dey
ec1e : 10f9             [ 3] 	bpl df_rt_input_str
ec20 : 60               [ 6] 	rts
                             
ec21 :                       df_rt_input_num
                             	; X,A = address, linbuff must be on page boundar
ec21 : a53a             [ 3] 	lda buf_lo+1
ec23 : a639             [ 3] 	ldx buf_lo
ec25 : a000             [ 2] 	ldy #0				; any numeric format
ec27 : 20cec1           [ 6] 	jsr con_n_to_a
ec2a : b00c             [ 3] 	bcs df_rt_input_err
ec2c : a000             [ 2] 	ldy #0
ec2e : a53d             [ 3] 	lda num_a
ec30 : 91a4             [ 5] 	sta (df_tmpptrb),y
ec32 : c8               [ 2] 	iny
ec33 : a53e             [ 3] 	lda num_a+1
ec35 : 91a4             [ 5] 	sta (df_tmpptrb),y
ec37 : 60               [ 6] 	rts
ec38 :                       df_rt_input_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
ec3a :                       df_rt_local
                             	; get current local count off rt stack
ec3a : 202af7           [ 6] 	jsr df_rst_popByte
                             	; save on pc stack for incrmenting
ec3d : 48               [ 3] 	pha
ec3e : a489             [ 3] 	ldy df_exeoff
ec40 : 88               [ 2] 	dey
ec41 :                       df_rt_local_findesc
ec41 : c8               [ 2] 	iny
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_local_done
ec42 : c480             [ 3] 	cpy df_nxtstidx
ec44 : f01c             [ 3] 	beq df_rt_local_done
                             	; find a var
ec46 : b187             [ 5] 	lda (df_currlin),y
ec48 : c911             [ 2] 	cmp #DFTK_VAR
ec4a : d0f5             [ 3] 	bne df_rt_local_findesc
                             	; jump over escape value
ec4c : c8               [ 2] 	iny
                             	; get var slot in A,X
ec4d : b187             [ 5] 	lda (df_currlin),y
ec4f : aa               [ 2] 	tax
ec50 : c8               [ 2] 	iny
ec51 : b187             [ 5] 	lda (df_currlin),y
ec53 : 8489             [ 3] 	sty df_exeoff
                             	; localise this variable
ec55 : 200df7           [ 6] 	jsr df_rt_proc_local
                             	; increment local counter
ec58 : 68               [ 4] 	pla
ec59 : 18               [ 2] 	clc
ec5a : 6901             [ 2] 	adc #1
ec5c : 48               [ 3] 	pha
ec5d : a489             [ 3] 	ldy df_exeoff
ec5f : 4c41ec           [ 3] 	jmp df_rt_local_findesc
AS65 Assembler for R6502 [1.42].                                     Page  227
-------------------------------- bank\bank0.s --------------------------------

ec62 :                       df_rt_local_done
                             	; get the local counter
                             	; put on to rt stack
ec62 : 68               [ 4] 	pla
ec63 : 4c21f7           [ 3] 	jmp df_rst_pushByte
                             
                             
ec66 :                       df_rt_redim
ec66 : 38               [ 2] 	sec
ec67 : b001             [ 3] 	bcs df_rt_dim_main
ec69 :                       df_rt_dim
ec69 : 18               [ 2] 	clc
ec6a :                       df_rt_dim_main
ec6a : 08               [ 3] 	php
ec6b :                       df_rt_dim_loop
ec6b : a489             [ 3] 	ldy df_exeoff
ec6d : 88               [ 2] 	dey
ec6e :                       df_rt_dim_findesc
                             	; check end of line
ec6e : c8               [ 2] 	iny
                             ;	cpy df_eolidx
                             ;	beq df_rt_dim_done
ec6f : c480             [ 3] 	cpy df_nxtstidx
ec71 : f07d             [ 3] 	beq df_rt_dim_done
                             	; find a var
ec73 : b187             [ 5] 	lda (df_currlin),y
ec75 : c911             [ 2] 	cmp #DFTK_VAR
ec77 : d0f5             [ 3] 	bne df_rt_dim_findesc
                             	; jump over escape value
ec79 : c8               [ 2] 	iny
                             	; get var address
ec7a : b187             [ 5] 	lda (df_currlin),y
ec7c : 85a2             [ 3] 	sta df_tmpptra
ec7e : c8               [ 2] 	iny
ec7f : b187             [ 5] 	lda (df_currlin),y
ec81 : 85a3             [ 3] 	sta df_tmpptra+1
                             	; move to open bracket
ec83 : c8               [ 2] 	iny
ec84 : 8489             [ 3] 	sty df_exeoff
                             	; If re-dim, don't check for existing dimensions
ec86 : 28               [ 4] 	plp
ec87 : 08               [ 3] 	php
ec88 : b006             [ 3] 	bcs df_rt_skip_dim_chk
                             	; check if already dim'd
ec8a : a003             [ 2] 	ldy #DFVVT_DIM1
ec8c : b1a2             [ 5] 	lda (df_tmpptra),y
ec8e : d062             [ 3] 	bne df_rt_dim_err
ec90 :                       df_rt_skip_dim_chk
                             	; Save slot address found earlier
ec90 : a5a2             [ 3] 	lda df_tmpptra
ec92 : 48               [ 3] 	pha
ec93 : a5a3             [ 3] 	lda df_tmpptra+1
ec95 : 48               [ 3] 	pha
ec96 : 209ce3           [ 6] 	jsr df_rt_arry_parm2
                             	; Restore slot address
ec99 : 68               [ 4] 	pla
ec9a : 85a3             [ 3] 	sta df_tmpptra+1
ec9c : 68               [ 4] 	pla
ec9d : 85a2             [ 3] 	sta df_tmpptra
                             ;	bcs df_rt_dim_err
                             	; save x,y to dim1,2
ec9f : 98               [ 2] 	tya
AS65 Assembler for R6502 [1.42].                                     Page  228
-------------------------------- bank\bank0.s --------------------------------

eca0 : 48               [ 3] 	pha
eca1 : 8a               [ 2] 	txa
eca2 : 48               [ 3] 	pha
eca3 : a003             [ 2] 	ldy #DFVVT_DIM1
eca5 : 68               [ 4] 	pla
eca6 : 91a2             [ 5] 	sta (df_tmpptra),y
eca8 : c8               [ 2] 	iny
eca9 : 68               [ 4] 	pla
ecaa : 91a2             [ 5] 	sta (df_tmpptra),y
ecac : 28               [ 4] 	plp
ecad : 08               [ 3] 	php
ecae : b035             [ 3] 	bcs df_rt_dim_set_type
ecb0 :                       df_rt_dim_alloc
                             	; ok we have up to 2 dimensions
                             	; mult dim 1 and 2 if dim 2 <> 0
ecb0 : a003             [ 2] 	ldy #DFVVT_DIM1
ecb2 : b1a2             [ 5] 	lda (df_tmpptra),y
ecb4 : 853d             [ 3] 	sta num_a
ecb6 : a900             [ 2] 	lda #0
ecb8 : 853e             [ 3] 	sta num_a+1
ecba : c8               [ 2] 	iny
ecbb : b1a2             [ 5] 	lda (df_tmpptra),y
ecbd : d002             [ 3] 	bne df_rt_dim2_nz
ecbf : a901             [ 2] 	lda #1
ecc1 :                       df_rt_dim2_nz
ecc1 : 8541             [ 3] 	sta num_b
ecc3 : a900             [ 2] 	lda #0
ecc5 : 8542             [ 3] 	sta num_b+1
ecc7 : 200ed6           [ 6] 	jsr int_fast_mult
                             	; check the type if int then mult2
ecca : a200             [ 2] 	ldx #0
eccc : a1a2             [ 6] 	lda (df_tmpptra,x)
ecce : 2901             [ 2] 	and #DFVVT_INT
ecd0 : f004             [ 3] 	beq df_rt_dim2_mul2
ecd2 : 063d             [ 5] 	asl num_a
ecd4 : 263e             [ 5] 	rol num_a+1
ecd6 :                       df_rt_dim2_mul2
                             	; finally, we have a size of array
ecd6 : a63d             [ 3] 	ldx num_a
ecd8 : a53e             [ 3] 	lda num_a+1
                             
                             	; get a block of that size from heap
ecda : 20a6f7           [ 6] 	jsr df_st_malloc
                             	; save pointer to block in var
ecdd : a002             [ 2] 	ldy #DFVVT_HI
ecdf : 91a2             [ 5] 	sta (df_tmpptra),y
ece1 : 8a               [ 2] 	txa
ece2 : 88               [ 2] 	dey
ece3 : 91a2             [ 5] 	sta (df_tmpptra),y
                             	; finally, update the type to indicate array
ece5 :                       df_rt_dim_set_type
ece5 : a200             [ 2] 	ldx #0
ece7 : a1a2             [ 6] 	lda (df_tmpptra,x)
ece9 : 0980             [ 2] 	ora #DFVVT_PTR
eceb : 81a2             [ 6] 	sta (df_tmpptra,x)
                             	; don't increment byte again - go check for more
eced : 4c6bec           [ 3] 	jmp df_rt_dim_loop
ecf0 :                       df_rt_dim_done
ecf0 : 28               [ 4] 	plp
ecf1 : 60               [ 6] 	rts
ecf2 :                       df_rt_dim_err
                             	SWBRK DFERR_DIM
AS65 Assembler for R6502 [1.42].                                     Page  229
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             
ecf4 :                       df_rt_cls
ecf4 : 4c3bcf           [ 3] 	jmp gr_cls
                             
                             
ecf7 :                       df_rt_plot
                             	; evaluate the expression
ecf7 : 2016e2           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
ecfa : 8a               [ 2] 	txa
ecfb : 48               [ 3] 	pha
                             	; jump over comma
ecfc : e689             [ 5] 	inc df_exeoff
                             	; evaluate the expression
ecfe : 2016e2           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
ed01 : 8a               [ 2] 	txa
ed02 : 48               [ 3] 	pha
                             	; jump over comma
ed03 : e689             [ 5] 	inc df_exeoff
                             	; evaluate the expression
ed05 : 201ce2           [ 6] 	jsr df_rt_neval
                             	; check the type on the stack
ed08 : 2094f7           [ 6] 	jsr df_ost_peekType
                             	; if >=0x80 then a pointer / string
ed0b : 2904             [ 2] 	and #DFST_STR
ed0d : d01b             [ 3] 	bne df_rt_plotstr
                             	; else it is int
ed0f : 209af7           [ 6] 	jsr df_ost_popInt
                             	; save  low byte of pop result in a temp
ed12 : 86a2             [ 3] 	stx df_tmpptra
ed14 : a511             [ 3] 	lda gr_scrngeom+gr_mode			; Check screen mode
ed16 : d009             [ 3] 	bne df_rt_plot_h_int
                             	; get X and Y coord in that order
                             	; but Y coord goes in X register!!!
ed18 : 68               [ 4] 	pla
ed19 : aa               [ 2] 	tax
ed1a : 68               [ 4] 	pla
ed1b : a8               [ 2] 	tay
ed1c : a5a2             [ 3] 	lda df_tmpptra	; Get pop result in to A
ed1e : 4c8fcf           [ 3] 	jmp gr_plot
ed21 :                       df_rt_plot_h_int
ed21 : 68               [ 4] 	pla
ed22 : a8               [ 2] 	tay
ed23 : 68               [ 4] 	pla
ed24 : aa               [ 2] 	tax
ed25 : a5a2             [ 3] 	lda df_tmpptra	; Get pop result in to A
ed27 : 4c54d1           [ 3] 	jmp gr_hchar
                             
                             
ed2a :                       df_rt_plotstr
                             	; pop string pointer
ed2a : 20a2f7           [ 6] 	jsr df_ost_popPtr
                             	; save pointer to tmpa
ed2d : 86a2             [ 3] 	stx df_tmpptra
ed2f : 85a3             [ 3] 	sta df_tmpptra+1
                             	; get y and x in that order
                             	; but X register is Y coord!!
ed31 : 68               [ 4] 	pla
ed32 : 85a6             [ 3] 	sta df_tmpptrc			; Y coord in C
AS65 Assembler for R6502 [1.42].                                     Page  230
-------------------------------- bank\bank0.s --------------------------------

ed34 : 68               [ 4] 	pla
ed35 : 85a4             [ 3] 	sta df_tmpptrb			; X coord in B
                             	; set cursror position
ed37 : a000             [ 2] 	ldy #0
ed39 : 84aa             [ 3] 	sty df_tmpptre
ed3b :                       df_rt_plotstrch
ed3b : a4aa             [ 3] 	ldy df_tmpptre
ed3d : b1a2             [ 5] 	lda (df_tmpptra),y
ed3f : 85a8             [ 3] 	sta df_tmpptrd			; char in D
ed41 : f025             [ 3] 	beq df_rt_plotstrdone
ed43 : e6aa             [ 5] 	inc df_tmpptre
ed45 : a511             [ 3] 	lda gr_scrngeom+gr_mode; Check screen mode
ed47 : d00d             [ 3] 	bne df_rt_plot_h_str
ed49 : a5a8             [ 3] 	lda df_tmpptrd			; Get char to plot
ed4b : a6a6             [ 3] 	ldx df_tmpptrc			; Get Y coord
ed4d : a4a4             [ 3] 	ldy df_tmpptrb			; Get X coord
ed4f : 208fcf           [ 6] 	jsr gr_plot
ed52 : e6a4             [ 5] 	inc df_tmpptrb			; Increment X coord
ed54 : d0e5             [ 3] 	bne df_rt_plotstrch		; Always - assume x is neve
ed56 :                       df_rt_plot_h_str
ed56 : a5a8             [ 3] 	lda df_tmpptrd			; Get char to plot
ed58 : a6a4             [ 3] 	ldx df_tmpptrb			; Get X coord
ed5a : a4a6             [ 3] 	ldy df_tmpptrc			; Get Y coord
ed5c : 2054d1           [ 6] 	jsr gr_hchar
ed5f : 18               [ 2] 	clc
ed60 : a5a4             [ 3] 	lda df_tmpptrb
ed62 : 6520             [ 3] 	adc gr_scrngeom+gr_pitch
ed64 : 85a4             [ 3] 	sta df_tmpptrb
ed66 : d0d3             [ 3] 	bne df_rt_plotstrch		; Always - assume adding pi
ed68 :                       df_rt_plotstrdone
ed68 : 60               [ 6] 	rts
                             
ed69 :                       df_rt_cursor
                             	; evaluate the expression
ed69 : 2016e2           [ 6] 	jsr df_rt_getnval
                             	; write low byte of vdp_curoff
                             	; by writing a zero then cursor on else not
ed6c : 860d             [ 3] 	stx vdp_curoff
ed6e : 60               [ 6] 	rts
                             
                             ;df_rt_himem
                             ;	; evaluate the expression
                             ;	jsr df_rt_getnval
                             ;	; write X,A to df_memtop
                             ;	stx df_memtop
                             ;	sta df_memtop+1
                             ;	; now clear everything down
                             ;	jmp df_clear
                             
ed6f :                       df_rt_text
ed6f : 4ca5ce           [ 3] 	jmp gr_init_screen_txt
                             
ed72 :                       df_rt_hires
ed72 : 4cbece           [ 3] 	jmp gr_init_hires
                             
ed75 :                       df_rt_pixmode
                             	; evaluate the expression X = mode
ed75 : 2016e2           [ 6] 	jsr df_rt_getnval
ed78 : 861f             [ 3] 	stx gr_scrngeom+gr_pixmode
ed7a : 60               [ 6] 	rts
                             
ed7b :                       df_rt_ink
AS65 Assembler for R6502 [1.42].                                     Page  231
-------------------------------- bank\bank0.s --------------------------------

                             	; evaluate the expression X = col
ed7b : 2016e2           [ 6] 	jsr df_rt_getnval
ed7e : 8623             [ 3] 	stx gr_scrngeom+gr_ink
ed80 : 60               [ 6] 	rts
                             
ed81 :                       df_rt_paper
                             	; evaluate the expression X = col
ed81 : 2016e2           [ 6] 	jsr df_rt_getnval
                             	; Add 16 to get paper colour
ed84 : 8a               [ 2] 	txa
ed85 : 18               [ 2] 	clc
ed86 : 6910             [ 2] 	adc #16
ed88 : 8524             [ 3] 	sta gr_scrngeom+gr_paper
ed8a : 60               [ 6] 	rts
                             
ed8b :                       df_rt_point
ed8b : 20e3e4           [ 6] 	jsr df_rt_parm_2ints
ed8e : a6a2             [ 3] 	ldx df_tmpptra
ed90 : a4a4             [ 3] 	ldy df_tmpptrb
ed92 : 4c14d2           [ 3] 	jmp gr_point
                             
ed95 :                       df_rt_circle
ed95 : 20eee4           [ 6] 	jsr df_rt_parm_3ints
ed98 : a5a2             [ 3] 	lda df_tmpptra				; load x0
ed9a : 853d             [ 3] 	sta num_a
ed9c : a5a4             [ 3] 	lda	df_tmpptrb				; load y0
ed9e : 853e             [ 3] 	sta num_a+1
eda0 : a5a6             [ 3] 	lda df_tmpptrc				; load r
eda2 : 853f             [ 3] 	sta num_a+2
eda4 : 4c45d2           [ 3] 	jmp gr_circle
                             
eda7 :                       df_rt_lineto
eda7 : 20e3e4           [ 6] 	jsr df_rt_parm_2ints
edaa : a6a2             [ 3] 	ldx df_tmpptra				; load x1
edac : a4a4             [ 3] 	ldy df_tmpptrb				; load y1
edae :                       df_rt_doline
edae : 863f             [ 3] 	stx num_a+2
edb0 : 8440             [ 3] 	sty num_a+3
edb2 : 4cfbd2           [ 3] 	jmp gr_line
edb5 :                       df_rt_line
edb5 : 2005e5           [ 6] 	jsr df_rt_parm_4ints
edb8 : a6a2             [ 3] 	ldx df_tmpptra				; load x0
edba : a4a4             [ 3] 	ldy	df_tmpptrb				; load y0
edbc : 2009d2           [ 6] 	jsr gr_set_hires_cur		; Start from x,y
edbf : a6a6             [ 3] 	ldx df_tmpptrc				; load x1
edc1 : a4a8             [ 3] 	ldy df_tmpptrd				; load y1
edc3 : 4caeed           [ 3] 	jmp df_rt_doline
                             
edc6 :                       df_rt_wait
                             	; evaluate the expression
edc6 : 2016e2           [ 6] 	jsr df_rt_getnval
                             	; put high byte in to Y (X,Y)=16 bits
edc9 : a8               [ 2] 	tay
edca :                       df_rt_wait_counter
                             	; get vdp low byte timer val in A
edca : a508             [ 3] 	lda vdp_cnt
edcc :                       df_rt_wait_tick
                             	; check if a tick has occurred (i.e. val <> A)
edcc : c508             [ 3] 	cmp vdp_cnt
edce : f0fc             [ 3] 	beq df_rt_wait_tick
                             	; countdown tick
edd0 : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page  232
-------------------------------- bank\bank0.s --------------------------------

edd1 : d001             [ 3] 	bne df_rt_wait_skiphi
edd3 : 88               [ 2] 	dey
edd4 :                       df_rt_wait_skiphi	
edd4 : ca               [ 2] 	dex
edd5 : 8a               [ 2] 	txa
edd6 : d0f2             [ 3] 	bne df_rt_wait_counter
edd8 : 98               [ 2] 	tya
edd9 : d0ef             [ 3] 	bne df_rt_wait_counter
eddb :                       df_rt_wait_done
eddb : 60               [ 6] 	rts
                             
eddc :                       df_rt_printat
                             	; Get x,y
eddc : 20e3e4           [ 6] 	jsr df_rt_parm_2ints
eddf : a6a2             [ 3] 	ldx df_tmpptra
ede1 : a4a4             [ 3] 	ldy df_tmpptrb
                             	; Set the cursror here
ede3 : 20a8cf           [ 6] 	jsr gr_set_cur
                             	; and continue to normal print command
ede6 :                       df_rt_print
ede6 : a489             [ 3] 	ldy df_exeoff
ede8 : 88               [ 2] 	dey
ede9 :                       df_rt_print_ws
ede9 : c8               [ 2] 	iny
                             
                             	; evaluate an expression
                             ;	cpy df_eolidx
                             ;	beq df_rt_print_done
edea : c480             [ 3] 	cpy df_nxtstidx
edec : f026             [ 4] 	beq df_rt_print_done
edee : b187             [ 5] 	lda (df_currlin),y
edf0 : c93a             [ 2] 	cmp #':'
edf2 : f020             [ 4] 	beq df_rt_print_done
edf4 : c920             [ 2] 	cmp #' '
edf6 : f0f1             [ 3] 	beq df_rt_print_ws
edf8 : c92c             [ 2] 	cmp #','
edfa : f0ed             [ 3] 	beq df_rt_print_ws
                             	; save index
edfc : 8489             [ 3] 	sty df_exeoff
                             
                             	; if starts with string literal then process sev
                             ;	cmp #DFTK_STRLIT
                             ;	beq df_rt_print_string
                             	; else evaluate a numeric
edfe : 201ce2           [ 6] 	jsr df_rt_neval
                             	; check what is on the argument stack
ee01 : 2094f7           [ 6] 	jsr df_ost_peekType
ee04 : 2904             [ 2] 	and #DFST_STR
ee06 : d006             [ 3] 	bne df_rt_print_gotstr
ee08 : 202eeb           [ 6] 	jsr df_rt_print_num
ee0b : 4ce6ed           [ 3] 	jmp df_rt_print
ee0e :                       df_rt_print_gotstr
ee0e : 2035eb           [ 6] 	jsr df_rt_print_str
ee11 : 4ce6ed           [ 3] 	jmp df_rt_print
                             ;df_rt_print_string
                             ;	jsr df_rt_seval
                             ;	jmp df_rt_print_gotstr
ee14 :                       df_rt_print_done
ee14 : 8489             [ 3] 	sty df_exeoff
ee16 : 60               [ 6] 	rts
                             
ee17 :                       df_rt_println
AS65 Assembler for R6502 [1.42].                                     Page  233
-------------------------------- bank\bank0.s --------------------------------

ee17 : 20e6ed           [ 6] 	jsr df_rt_print
ee1a : a90d             [ 2] 	lda #UTF_CR
ee1c : 4c2ac4           [ 3] 	jmp io_put_ch
                             
                             
                             ; assign to a number variable
                             ; X,A must have lvar
ee1f :                       df_rt_nassign
                             	; push var address, A ok to trample
ee1f : 48               [ 3] 	pha
ee20 : 8a               [ 2] 	txa
ee21 : 48               [ 3] 	pha
                             
                             	; now go evaluate expression in to A,X
ee22 : 2016e2           [ 6] 	jsr df_rt_getnval
                             	; restore variable address to write to to df_tmp
                             	; but don't lose current A
ee25 : a8               [ 2] 	tay					; Save A in Y
ee26 : 68               [ 4] 	pla
ee27 : 85a2             [ 3] 	sta df_tmpptra
ee29 : 68               [ 4] 	pla
ee2a : 85a3             [ 3] 	sta df_tmpptra+1
ee2c : 98               [ 2] 	tya					; Get A back from Y
                             
                             	; save X,A int in contents section
ee2d : a001             [ 2] 	ldy #1
ee2f : 91a2             [ 5] 	sta (df_tmpptra),y
ee31 : 8a               [ 2] 	txa
ee32 : 88               [ 2] 	dey
ee33 : 91a2             [ 5] 	sta (df_tmpptra),y
                             
ee35 : 60               [ 6] 	rts
                             
                             ; assign to a string variable
                             ; X,A must have lvar
ee36 :                       df_rt_sassign
                             	; now go evaluate expression
                             	; with the destination being already in X,A
ee36 : 20dae2           [ 6] 	jsr df_rt_sval
                             
                             	; get string pointer from top of runtime stack
ee39 : 4c9ef7           [ 3] 	jmp df_ost_popStr
                             
                             
                             ; generate lvar from a var token ready for assign
ee3c :                       df_rt_generate_lvar
                             	; move past escape val
ee3c : a489             [ 3] 	ldy df_exeoff
ee3e : c8               [ 2] 	iny
                             	; pointing to variable index
ee3f : b187             [ 5] 	lda (df_currlin),y
ee41 : 85a2             [ 3] 	sta df_tmpptra
ee43 : c8               [ 2] 	iny
ee44 : b187             [ 5] 	lda (df_currlin),y
ee46 : 8489             [ 3] 	sty df_exeoff
ee48 : 85a3             [ 3] 	sta df_tmpptra+1
                             
                             	; get the type and save
ee4a : a200             [ 2] 	ldx #0
ee4c : a1a2             [ 6] 	lda (df_tmpptra,x)
ee4e : 48               [ 3] 	pha
                             
AS65 Assembler for R6502 [1.42].                                     Page  234
-------------------------------- bank\bank0.s --------------------------------

                             	; set carry flag to return pointer (lvar)
ee4f : 38               [ 2] 	sec
ee50 : 20c0e3           [ 6] 	jsr df_rt_eval_var
ee53 : 20a2f7           [ 6] 	jsr df_ost_popPtr
                             
                             	; pull the type previously saved into Y
ee56 : 8538             [ 3] 	sta tmp_d		; Save A
ee58 : 68               [ 4] 	pla
ee59 : a8               [ 2] 	tay
ee5a : a538             [ 3] 	lda tmp_d
                             	; move past the lvar variable index
ee5c : e689             [ 5] 	inc df_exeoff
ee5e : 60               [ 6] 	rts
                             
                             ; general assignment execution
                             ; generate lvar first
ee5f :                       df_rt_assign
ee5f : 203cee           [ 6] 	jsr df_rt_generate_lvar
                             ; X,A,Y contain lvar pointer and type
ee62 :                       df_rt_doassign
                             	; save A and put type Y in to A to check for str
ee62 : 48               [ 3] 	pha
ee63 : 98               [ 2] 	tya
ee64 : 2904             [ 2] 	and #DFVVT_STR
                             	; if a string then string expression
ee66 : d004             [ 3] 	bne df_rt_assign_str
                             	;  jump to numeric expression evaluator
                             	; remember to restore A
ee68 : 68               [ 4] 	pla
ee69 : 4c1fee           [ 3] 	jmp df_rt_nassign
ee6c :                       df_rt_assign_str
                             	; else jump to string expression evaluator
                             	; remember to restore A
ee6c : 68               [ 4] 	pla
ee6d : 4c36ee           [ 3] 	jmp df_rt_sassign
                             
                             ; comment or data token is ignored by runtime
ee70 :                       df_rt_comment
ee70 :                       df_rt_data
ee70 : 60               [ 6] 	rts
                             
                             
                             ; run token - future expansion
ee71 :                       df_rt_run
ee71 : 60               [ 6] 	rts
                             
                             ; end of line / statement indicator
                             ; CS = End, CC = not end
ee72 :                       df_rt_eos
ee72 : a489             [ 3] 	ldy df_exeoff
                             ;	cpy df_eolidx
                             ;	beq df_rt_eos_true
ee74 : c480             [ 3] 	cpy df_nxtstidx
ee76 : f008             [ 3] 	beq df_rt_eos_true
ee78 : b187             [ 5] 	lda (df_currlin),y
ee7a : c93a             [ 2] 	cmp #':'
ee7c : f002             [ 3] 	beq df_rt_eos_true
ee7e : 18               [ 2] 	clc
ee7f : 60               [ 6] 	rts
ee80 :                       df_rt_eos_true
ee80 : 38               [ 2] 	sec
ee81 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  235
-------------------------------- bank\bank0.s --------------------------------

                             
                             ; renum startLine,newStart,increment
                             ; renumbers from the first matching line to end o
                             ;df_rt_renum
                             ;	inc df_exeoff
                             ;	jsr df_rt_parm_3ints
                             ;	; starting line number
                             ;	ldx df_tmpptra
                             ;	lda df_tmpptra+1
                             ;	jsr df_pg_find_line
                             ;	bcc df_rt_renum_ok
                             ;	SWBRK DFERR_NOLINE
                             ;df_rt_renum_ok
                             ;	; save starting position pointer in ptrd
                             ;	stx df_tmpptrd
                             ;	sta df_tmpptrd+1
                             ;df_rt_renum_do
                             ;	; if not end of program
                             ;	ldy #0
                             ;	lda (df_tmpptrd),y
                             ;	; then renumber this line
                             ;	bne df_rt_renum_update
                             ;	; else done
                             ;	rts
                             ;df_rt_renum_update
                             ;	; so set this line number to new line number
                             ;	ldy #DFTK_LINNUM
                             ;	lda df_tmpptrb
                             ;	sta (df_tmpptrd),y
                             ;	iny
                             ;	lda df_tmpptrb+1
                             ;	sta (df_tmpptrd),y
                             ;	; add increment to new line
                             ;	_addZPWord df_tmpptrb,df_tmpptrc
                             ;df_rt_renum_next
                             ;	; point ptrd to the next line
                             ;	clc
                             ;	lda df_tmpptrd
                             ;	ldx #0
                             ;	adc (df_tmpptrd,x)
                             ;	sta df_tmpptrd
                             ;	_bcc 2
                             ;	inc df_tmpptrd+1
                             ;	jmp df_rt_renum_do
                             
                             
                             ; * List all procs in VNT
ee82 :                       df_rt_listprocnames
                             	; start at the beginning of the vnt table
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             	; start at varcnt
ee8a : a572             [ 3] 	lda df_varcnt
ee8c : 85a4             [ 3] 	sta df_tmpptrb
ee8e :                       df_rt_listcheckvnt
                             	; If reached 0 then not found
ee8e : a5a4             [ 3] 	lda df_tmpptrb
ee90 : f03a             [ 3] 	beq df_rt_listpn_done
ee92 : a000             [ 2] 	ldy #0
ee94 : b1a2             [ 5] 	lda (df_tmpptra),y
ee96 : c95f             [ 2] 	cmp #'_'
ee98 : d01b             [ 3] 	bne df_rt_listnextvnt
AS65 Assembler for R6502 [1.42].                                     Page  236
-------------------------------- bank\bank0.s --------------------------------

ee9a :                       df_rt_listprocch
ee9a : b1a2             [ 5] 	lda (df_tmpptra),y
ee9c : 202ac4           [ 6] 	jsr io_put_ch
ee9f : aa               [ 2] 	tax
eea0 : f003             [ 3] 	beq df_rt_listproccr
eea2 : c8               [ 2] 	iny
eea3 : d0f5             [ 3] 	bne df_rt_listprocch		; Always
eea5 :                       df_rt_listproccr
eea5 : a90d             [ 2] 	lda #UTF_CR
eea7 : 202ac4           [ 6] 	jsr io_put_ch
eeaa : 18               [ 2] 	clc
eeab :                       df_rt_listprocpause
eeab : 2027c4           [ 6] 	jsr io_get_ch
eeae : c920             [ 2] 	cmp #' '
eeb0 : d003             [ 3] 	bne df_rt_listnextvnt
eeb2 :                       df_rt_listwait
eeb2 : 38               [ 2] 	sec
eeb3 : b0f6             [ 3] 	bcs df_rt_listprocpause
eeb5 :                       df_rt_listnextvnt
eeb5 : b1a2             [ 5] 	lda (df_tmpptra),y
eeb7 : f003             [ 3] 	beq df_rt_listgotnext
eeb9 : c8               [ 2] 	iny
eeba : d0f9             [ 3] 	bne df_rt_listnextvnt		; Always
eebc :                       df_rt_listgotnext
                             	; dec vnt #
eebc : c6a4             [ 5] 	dec df_tmpptrb
                             	; skip past zero terminator
eebe : c8               [ 2] 	iny
                             	; add this to vnt pointer
eebf : 18               [ 2] 	clc
eec0 : 98               [ 2] 	tya
eec1 : 65a2             [ 3] 	adc df_tmpptra
eec3 : 85a2             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
eec7 : e6a3             [ 5] 	inc df_tmpptra+1
eec9 : 4c8eee           [ 3] 	jmp df_rt_listcheckvnt
eecc :                       df_rt_listpn_done
eecc : 60               [ 6] 	rts
                             
eecd :                       df_rt_listproc
                             	; A already contains '_'
eecd : 8d0004           [ 4] 	sta df_linbuff
eed0 : a200             [ 2] 	ldx #0
eed2 : a489             [ 3] 	ldy df_exeoff
eed4 :                       df_rt_listp_copy
eed4 : c8               [ 2] 	iny
eed5 : e8               [ 2] 	inx
eed6 : b187             [ 5] 	lda (df_currlin),y
eed8 : 9d0004           [ 5] 	sta df_linbuff,x
eedb : 20a3d8           [ 6] 	jsr df_tk_isalphanum
eede : b0f4             [ 3] 	bcs df_rt_listp_copy
                             	; zero the line index
eee0 : a200             [ 2] 	ldx #0
eee2 : 867d             [ 3] 	stx df_linoff
                             	; save runtime pos
eee4 : 8489             [ 3] 	sty df_exeoff
                             	; Now try and find in VNT
eee6 : 20c5d6           [ 6] 	jsr df_var_find
eee9 : b036             [ 4] 	bcs df_rt_listp_notfound
                             	; Ok we have got a match in X,A find the proc
eeeb : 868f             [ 3] 	stx df_procptr
AS65 Assembler for R6502 [1.42].                                     Page  237
-------------------------------- bank\bank0.s --------------------------------

eeed : 8590             [ 3] 	sta df_procptr+1
eeef : 20f8e5           [ 6] 	jsr df_rt_findproc
                             	; Save the line pointer
eef2 : 86a2             [ 3] 	stx df_tmpptra
eef4 : 85a3             [ 3] 	sta df_tmpptra+1
                             	; save statement index in to line
                             ;	sty df_lineidx
                             ;	; Check if '-' option used
                             ;	ldy df_exeoff
                             ;	lda (df_currlin),y
                             ;	cmp #'-'
                             ;	; if so, list to end of program
                             ;	beq df_rt_listprgend
                             	; Now try and find the end of this procedure
                             	; enddef or another def
                             	; A,X=Line ptr, Y=line idx
                             ;	ldx df_tmpptra
                             ;	lda df_tmpptra+1
                             ;	ldy df_lineidx
eef6 :                       df_rt_listp_findend
                             	; Go to next stat
eef6 : 20a3e5           [ 6] 	jsr df_rt_nextstat
eef9 : b057             [ 4] 	bcs df_rt_listprgend
                             	; save y (a,x in lineptr), A is ok to trample
eefb : 98               [ 2] 	tya
eefc : 48               [ 3] 	pha
                             	; find the command
eefd :                       df_rt_listp_findcmd
eefd : c8               [ 2] 	iny
eefe : b191             [ 5] 	lda (df_lineptr),y
ef00 : 10fb             [ 4] 	bpl df_rt_listp_findcmd
                             	; restore y to stat beginning
ef02 : 8538             [ 3] 	sta tmp_d
ef04 : 68               [ 4] 	pla
ef05 : a8               [ 2] 	tay
ef06 : a538             [ 3] 	lda tmp_d
                             	; check A - looking for enddef or def
ef08 : c987             [ 2] 	cmp #DFRT_ENDDEF
ef0a : f00b             [ 3] 	beq df_rt_listp_done
ef0c : c986             [ 2] 	cmp #DFRT_DEF
ef0e : f007             [ 3] 	beq df_rt_listp_done
                             	; if neither then next stat from current
ef10 : a691             [ 3] 	ldx df_lineptr
ef12 : a592             [ 3] 	lda df_lineptr+1
ef14 : 4cf6ee           [ 3] 	jmp df_rt_listp_findend
ef17 :                       df_rt_listp_done
                             	; Push end line on to stack
ef17 : a592             [ 3] 	lda df_lineptr+1
ef19 : 48               [ 3] 	pha
ef1a : 8a               [ 2] 	txa
ef1b : 48               [ 3] 	pha
ef1c : a592             [ 3] 	lda df_lineptr+1
ef1e : 4c58ef           [ 3] 	jmp df_rt_list_line
ef21 :                       df_rt_listp_notfound
                             	; Fatal error if proc not found
                             	SWBRK DFERR_NOPROC
                             
                             
                             ; list token
ef23 :                       df_rt_list
ef23 : a900             [ 2] 	lda #0
ef25 : 85aa             [ 3] 	sta df_tmpptre		; Zero means in normal list mode
AS65 Assembler for R6502 [1.42].                                     Page  238
-------------------------------- bank\bank0.s --------------------------------

                             	; find non-ws
ef27 : 204de6           [ 6] 	jsr df_rt_skip_ws
                             	; if end of statement then no line specifiers
ef2a : 2072ee           [ 6] 	jsr df_rt_eos
                             	; so list whole program
ef2d : b01b             [ 3] 	bcs df_rt_listprg
                             
                             	;if '_' then use procnames
ef2f : c95f             [ 2] 	cmp #'_'
ef31 : d003             [ 3] 	bne df_rt_list_all
ef33 : 4ccdee           [ 3] 	jmp df_rt_listproc
ef36 :                       df_rt_list_all
                             	;if '*' then display all procnames
ef36 : c92a             [ 2] 	cmp #'*'
ef38 : d003             [ 3] 	bne df_rt_list_linno
ef3a : 4c82ee           [ 3] 	jmp df_rt_listprocnames
ef3d :                       df_rt_list_linno
                             	; else get 1st parameter
ef3d : 2016e2           [ 6] 	jsr df_rt_getnval
                             	; find the starting line number in X,A
ef40 : 2040e0           [ 6] 	jsr df_pg_find_line
                             	; save start in ptra
ef43 : 86a2             [ 3] 	stx df_tmpptra
ef45 : 85a3             [ 3] 	sta df_tmpptra+1
ef47 : 4c52ef           [ 3] 	jmp df_rt_listprgend
                             	; NO ability to choose and ending line number!
                             
                             ; Common listing routine used by LIST and SAVE
                             ; tmpe = 0 means in LIST mode else SAVE mode
                             ; can stop the listing in LIST mode with CTRL-C
ef4a :                       df_rt_listprg
                             	; program start and end as for pointer value
                             	_cpyZPWord df_prgstrt, df_tmpptra
                             
ef52 :                       df_rt_listprgend
ef52 : a569             [ 3] 	lda df_prgend+1
ef54 : 48               [ 3] 	pha
ef55 : a568             [ 3] 	lda df_prgend
ef57 : 48               [ 3] 	pha
ef58 :                       df_rt_list_line
                             	; if line length = 0 then end of program
ef58 : a000             [ 2] 	ldy #0
ef5a : b1a2             [ 5] 	lda (df_tmpptra),y
ef5c : f038             [ 3] 	beq df_rt_list_line_fin
                             	; if in list mode and CTRL-C then also stop
ef5e : a5aa             [ 3] 	lda df_tmpptre
ef60 : d010             [ 3] 	bne df_rt_list_line_cont
                             	; check for break, asynch get
ef62 : 18               [ 2] 	clc
ef63 :                       df_rt_list_synckey
ef63 : a5aa             [ 3] 	lda df_tmpptre					; Ignore keys on save mode
ef65 : d00b             [ 3] 	bne df_rt_list_line_cont
ef67 :                       df_rt_list_pause
ef67 : 2027c4           [ 6] 	jsr io_get_ch
ef6a : c920             [ 2] 	cmp #' '						; Space = PAUSE
ef6c : f0f9             [ 3] 	beq df_rt_list_pause			; C=1 for synchronouse ke
ef6e : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
ef70 : f024             [ 3] 	beq df_rt_list_line_fin
ef72 :                       df_rt_list_line_cont
ef72 : a000             [ 2] 	ldy #0
ef74 : 847d             [ 3] 	sty df_linoff
ef76 : 2099ef           [ 6] 	jsr df_rt_list_all_line
AS65 Assembler for R6502 [1.42].                                     Page  239
-------------------------------- bank\bank0.s --------------------------------

ef79 :                       df_rt_list_next_line
                             	; new line
ef79 : 2068c1           [ 6] 	jsr utilPrintCRLF
                             	; increment pointer to next line
ef7c : 18               [ 2] 	clc
ef7d : a5a2             [ 3] 	lda df_tmpptra
ef7f : a000             [ 2] 	ldy #0
ef81 : 71a2             [ 5] 	adc (df_tmpptra),y
ef83 : 85a2             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
ef87 : e6a3             [ 5] 	inc df_tmpptra+1
                             	; if pointer > end then listing is done
ef89 : 38               [ 2] 	sec
ef8a : 68               [ 4] 	pla
ef8b : aa               [ 2] 	tax
ef8c : e5a2             [ 3] 	sbc df_tmpptra
ef8e : 68               [ 4] 	pla
ef8f : 48               [ 3] 	pha
ef90 : e5a3             [ 3] 	sbc df_tmpptra+1
ef92 : 8a               [ 2] 	txa
ef93 : 48               [ 3] 	pha
ef94 : b0c2             [ 3] 	bcs df_rt_list_line
ef96 :                       df_rt_list_line_fin
                             	; if got here then reached tmpb
ef96 : 68               [ 4] 	pla
ef97 : 68               [ 4] 	pla
ef98 :                       df_rt_list_line_only_fin
ef98 : 60               [ 6] 	rts
                             
                             ;Using df_tmpptra as line pointer
                             ;Print decode an entire line
ef99 :                       df_rt_list_all_line				; Start here to include nu
ef99 : 20d3f0           [ 6] 	jsr df_rt_list_linnum
ef9c :                       df_rt_list_line_only			; Start here for just the 
ef9c : a003             [ 2] 	ldy #3
ef9e : b1a2             [ 5] 	lda (df_tmpptra),y
efa0 : 8593             [ 3] 	sta df_lineidx
efa2 : c8               [ 2] 	iny
efa3 : 847d             [ 3] 	sty df_linoff
efa5 :                       df_rt_list_decode
efa5 : a47d             [ 3] 	ldy df_linoff
efa7 : b1a2             [ 5] 	lda (df_tmpptra),y
efa9 : 3010             [ 3] 	bmi df_rt_list_token
efab : c920             [ 2] 	cmp #DFTK_ESCVAL
efad : 9006             [ 3] 	bcc df_rt_list_escval
                             	; normal char just print it
efaf : 202ac4           [ 6] 	jsr io_put_ch
efb2 : 4cbeef           [ 3] 	jmp df_rt_list_nexttok
efb5 :                       df_rt_list_escval
                             	; A and Y need to be valid on entry
efb5 : 20d7ef           [ 6] 	jsr df_rt_list_decode_esc
efb8 : 4cbeef           [ 3] 	jmp df_rt_list_nexttok
efbb :                       df_rt_list_token
efbb : 20e4f0           [ 6] 	jsr df_rt_list_decode_token
efbe :                       df_rt_list_nexttok
                             	; advance the line offset
efbe : e67d             [ 5] 	inc df_linoff
efc0 : a57d             [ 3] 	lda df_linoff
                             	; check if at end of line
efc2 : a200             [ 2] 	ldx #0
efc4 : c1a2             [ 6] 	cmp (df_tmpptra,x)
AS65 Assembler for R6502 [1.42].                                     Page  240
-------------------------------- bank\bank0.s --------------------------------

efc6 : f0d0             [ 3] 	beq df_rt_list_line_only_fin
                             	; check if at end of statement
efc8 : c593             [ 3] 	cmp df_lineidx
efca : d0d9             [ 3] 	bne df_rt_list_decode
efcc : a8               [ 2] 	tay
                             	; save the next statement offset
efcd : b1a2             [ 5] 	lda (df_tmpptra),y
efcf : 8593             [ 3] 	sta df_lineidx
efd1 : c8               [ 2] 	iny
efd2 : 847d             [ 3] 	sty df_linoff
efd4 : 4ca5ef           [ 3] 	jmp df_rt_list_decode
                             
                             
                             ; decode escape sequences
                             ; Input: A contains the esc val and Y is char lin
efd7 :                       df_rt_list_decode_esc
                             	; jump over esc byte
efd7 : c8               [ 2] 	iny
efd8 : 847d             [ 3] 	sty df_linoff
efda : 48               [ 3] 	pha
                             	; get the next two bytes in case needed
efdb : b1a2             [ 5] 	lda (df_tmpptra),y
efdd : 85a4             [ 3] 	sta df_tmpptrb
efdf : c8               [ 2] 	iny
efe0 : b1a2             [ 5] 	lda (df_tmpptra),y
efe2 : 85a5             [ 3] 	sta df_tmpptrb+1
efe4 : 88               [ 2] 	dey				; Y is on byte after esc byte
efe5 : 68               [ 4] 	pla
                             	; x2 to get jmp offset
efe6 : 0a               [ 2] 	asl a
efe7 : aa               [ 2] 	tax
efe8 : bd45e7           [ 4] 	lda df_rt_escjmp,x
efeb : 85a6             [ 3] 	sta df_tmpptrc
efed : bd46e7           [ 4] 	lda df_rt_escjmp+1,x
eff0 : 85a7             [ 3] 	sta df_tmpptrc+1
                             	; now jump to decoder
eff2 : 6ca600           [ 6] 	jmp (df_tmpptrc)
                             
                             ; reserved
eff5 :                       df_rt_lst_reserved
eff5 : 60               [ 6] 	rts
                             
                             ; decode a byte char
eff6 :                       df_rt_lst_chr
eff6 : a927             [ 2] 	lda #0x27			; Single quote
eff8 : 202ac4           [ 6] 	jsr io_put_ch
effb : a5a4             [ 3] 	lda df_tmpptrb
effd : 202ac4           [ 6] 	jsr io_put_ch
f000 : a927             [ 2] 	lda #0x27			; Single quote
f002 : 202ac4           [ 6] 	jsr io_put_ch
f005 : c8               [ 2] 	iny
f006 : 847d             [ 3] 	sty df_linoff
f008 : 60               [ 6] 	rts
                             
                             ; Output 0x for hex chars
f009 :                       df_rt_lst_hex_pre
f009 : a930             [ 2] 	lda #'0'
f00b : 202ac4           [ 6] 	jsr io_put_ch
f00e : a978             [ 2] 	lda #'x'
f010 : 4c2ac4           [ 3] 	jmp io_put_ch
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  241
-------------------------------- bank\bank0.s --------------------------------

                             ; Decode a byte hex
f013 :                       df_rt_lst_bythex
f013 : 2009f0           [ 6] 	jsr df_rt_lst_hex_pre
f016 :                       df_rt_lst_lo_hex
f016 : a5a4             [ 3] 	lda df_tmpptrb
f018 : 2085c1           [ 6] 	jsr str_a_to_x
f01b : 202ac4           [ 6] 	jsr io_put_ch
f01e : 8a               [ 2] 	txa
f01f : 202ac4           [ 6] 	jsr io_put_ch
f022 :                       df_rt_lst_const_done
f022 : c8               [ 2] 	iny
f023 : 847d             [ 3] 	sty df_linoff
f025 : 60               [ 6] 	rts
                             
                             ; Decode an int hex
f026 :                       df_rt_lst_inthex
f026 : 2009f0           [ 6] 	jsr df_rt_lst_hex_pre
f029 : a5a5             [ 3] 	lda df_tmpptrb+1
f02b : 2085c1           [ 6] 	jsr str_a_to_x
f02e : 202ac4           [ 6] 	jsr io_put_ch
f031 : 8a               [ 2] 	txa
f032 : 202ac4           [ 6] 	jsr io_put_ch
f035 : 4c16f0           [ 3] 	jmp df_rt_lst_lo_hex
                             
                             ; Decode a byte binary
f038 :                       df_rt_lst_bytbin
f038 : a5a4             [ 3] 	lda df_tmpptrb
f03a : 85a5             [ 3] 	sta df_tmpptrb+1
f03c : a208             [ 2] 	ldx #8
f03e : d002             [ 3] 	bne df_rt_lst_bin
                             
                             ; Decode a int binary
f040 :                       df_rt_lst_intbin
f040 : a210             [ 2] 	ldx #16
                             	; FALL THROUGH
                             ; Main 01 decoding of binary
f042 :                       df_rt_lst_bin
f042 : a930             [ 2] 	lda #'0'
f044 : 202ac4           [ 6] 	jsr io_put_ch
f047 : a962             [ 2] 	lda #'b'
f049 : 202ac4           [ 6] 	jsr io_put_ch
f04c :                       df_rt_lst_bit
f04c : a930             [ 2] 	lda #'0'
f04e : 06a4             [ 5] 	asl df_tmpptrb
f050 : 26a5             [ 5] 	rol df_tmpptrb+1
f052 : 6900             [ 2] 	adc #0				; If C=1 then '0' becomes '1'
f054 :                       df_rt_lst_bit_skip0
f054 : 202ac4           [ 6] 	jsr io_put_ch
f057 : ca               [ 2] 	dex
f058 : d0f2             [ 3] 	bne df_rt_lst_bit
f05a : f0c6             [ 3] 	beq df_rt_lst_const_done
                             
                             ; Decode a decimal integer
f05c :                       df_rt_lst_intdec
f05c : a6a4             [ 3] 	ldx df_tmpptrb
f05e : a5a5             [ 3] 	lda df_tmpptrb+1
f060 : c8               [ 2] 	iny
f061 : 847d             [ 3] 	sty df_linoff
f063 : 18               [ 2] 	clc
f064 : 4ce5c3           [ 3] 	jmp print_a_to_d
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  242
-------------------------------- bank\bank0.s --------------------------------

                             ; decode a variable or procedure
                             ; Slot address to decode in ptrb
f067 :                       df_rt_lst_var
f067 :                       df_rt_lst_proc
                             	; jump over the address bytes
f067 : c8               [ 2] 	iny
f068 : 847d             [ 3] 	sty df_linoff
                             
                             	; ptrc starts at VNT start
                             	_cpyZPWord df_vntstrt,df_tmpptrc
                             
                             
                             	; ptrd starts at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptrd
                             
f07a : a000             [ 2] 	ldy #0
f07c :                       df_rt_list_findvvt
                             	; Check have we reached target addr in vvt?
f07c : a5a8             [ 3] 	lda df_tmpptrd
f07e : c5a4             [ 3] 	cmp df_tmpptrb
f080 : d006             [ 3] 	bne df_rt_list_vvtend
f082 : a5a9             [ 3] 	lda df_tmpptrd+1
f084 : c5a5             [ 3] 	cmp df_tmpptrb+1
f086 : f021             [ 3] 	beq df_rt_list_gotvvt
f088 :                       df_rt_list_vvtend
f088 : b1a6             [ 5] 	lda (df_tmpptrc),y
f08a : f009             [ 3] 	beq df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
f092 : 4c88f0           [ 3] 	jmp df_rt_list_vvtend
f095 :                       df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
                             	; move target slot address towards top of mem
f09b : 18               [ 2] 	clc
f09c : a5a8             [ 3] 	lda df_tmpptrd
f09e : 6908             [ 2] 	adc #DFVVT_SZ
f0a0 : 85a8             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
f0a4 : e6a9             [ 5] 	inc df_tmpptrd+1
                             	; go back and check again
f0a6 : 4c7cf0           [ 3] 	jmp df_rt_list_findvvt
f0a9 :                       df_rt_list_gotvvt
f0a9 : b1a6             [ 5] 	lda (df_tmpptrc),y
f0ab : f025             [ 3] 	beq df_rt_list_donvvt
f0ad : 202ac4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrc
                             
f0b6 : 4ca9f0           [ 3] 	jmp df_rt_list_gotvvt
                             
f0b9 :                       df_rt_lst_strlit
f0b9 : a922             [ 2] 	lda #0x22
f0bb : 202ac4           [ 6] 	jsr io_put_ch
f0be : a47d             [ 3] 	ldy df_linoff
f0c0 :                       df_rt_lst_strlitch
f0c0 : b1a2             [ 5] 	lda (df_tmpptra),y
f0c2 : f007             [ 3] 	beq df_rt_lst_strlitdon
f0c4 : 202ac4           [ 6] 	jsr io_put_ch
f0c7 : c8               [ 2] 	iny
f0c8 : 4cc0f0           [ 3] 	jmp df_rt_lst_strlitch
f0cb :                       df_rt_lst_strlitdon
AS65 Assembler for R6502 [1.42].                                     Page  243
-------------------------------- bank\bank0.s --------------------------------

f0cb : a922             [ 2] 	lda #0x22
f0cd : 202ac4           [ 6] 	jsr io_put_ch
f0d0 : 847d             [ 3] 	sty df_linoff
f0d2 :                       df_rt_list_donvvt
f0d2 : 60               [ 6] 	rts
                             
f0d3 :                       df_rt_list_linnum
f0d3 : a001             [ 2] 	ldy #1
f0d5 : b1a2             [ 5] 	lda (df_tmpptra),y
f0d7 : aa               [ 2] 	tax
f0d8 : c8               [ 2] 	iny
f0d9 : b1a2             [ 5] 	lda (df_tmpptra),y
f0db : 18               [ 2] 	clc
f0dc : 20e5c3           [ 6] 	jsr print_a_to_d
f0df : a920             [ 2] 	lda #0x20			; Always add a space after line num
f0e1 : 4c2ac4           [ 3] 	jmp io_put_ch
                             
                             ; decode a token value with MSB set
f0e4 :                       df_rt_list_decode_token
                             	; if not assembler then normal listing
f0e4 : c997             [ 2] 	cmp #DFRT_ASM
f0e6 : d003             [ 3] 	bne df_rt_list_decode_token_normal
f0e8 : 4c22f1           [ 3] 	jmp df_rt_asm_decode_token
f0eb :                       df_rt_list_decode_token_normal
f0eb : 297f             [ 2] 	and #0x7f
                             	; token 0 and 1 don't get decoded they are impli
f0ed : c902             [ 2] 	cmp #2
f0ef : b001             [ 3] 	bcs df_rt_list_do_decode_tkn
f0f1 : 60               [ 6] 	rts
f0f2 :                       df_rt_list_do_decode_tkn
f0f2 : aa               [ 2] 	tax
f0f3 : a945             [ 2] 	lda #lo(df_tokensyms)
f0f5 : 85a4             [ 3] 	sta df_tmpptrb
f0f7 : a9dc             [ 2] 	lda #hi(df_tokensyms)
f0f9 : 85a5             [ 3] 	sta df_tmpptrb+1
f0fb :                       df_rt_list_find_sym
f0fb : 8a               [ 2] 	txa
f0fc : f012             [ 4] 	beq df_rt_list_got_sym
f0fe : a000             [ 2] 	ldy #0
f100 :                       df_rt_list_next_ch
f100 : b1a4             [ 5] 	lda (df_tmpptrb),y
f102 : 48               [ 3] 	pha
                             	_incZPWord df_tmpptrb
                             
f109 : 68               [ 4] 	pla
f10a : 10f4             [ 3] 	bpl df_rt_list_next_ch
f10c :                       df_rt_list_got_last_sym
                             	; ok got to the last ch
                             	; advance to next sym
f10c : ca               [ 2] 	dex
f10d : 4cfbf0           [ 3] 	jmp df_rt_list_find_sym
f110 :                       df_rt_list_got_sym
f110 : a1a4             [ 6] 	lda (df_tmpptrb,x)		; Relies on X=0 from branch
f112 : 08               [ 3] 	php
f113 : 297f             [ 2] 	and #0x7f
f115 : 202ac4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
f11e : 28               [ 4] 	plp
f11f : 10ef             [ 3] 	bpl df_rt_list_got_sym
f121 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  244
-------------------------------- bank\bank0.s --------------------------------

                             ;** Decode assembler token in A **
f122 :                       df_rt_asm_decode_token
f122 : e67d             [ 5] 	inc df_linoff		; Point to token after asm token
f124 : a47d             [ 3] 	ldy df_linoff
f126 : b1a2             [ 5] 	lda (df_tmpptra),y	;If token N=1 then keyword
f128 : 300a             [ 3] 	bmi df_rt_asm_decode_token_keyword
f12a : a92e             [ 2] 	lda #'.'			;Put the '.' before escape processing
f12c : 202ac4           [ 6] 	jsr io_put_ch
f12f : b1a2             [ 5] 	lda (df_tmpptra),y	;Get asm token back
f131 : 4cd7ef           [ 3] 	jmp df_rt_list_decode_esc
f134 :                       df_rt_asm_decode_token_keyword
f134 : 297f             [ 2] 	and #0x7f			; Mask off MSB
f136 : aa               [ 2] 	tax					;Put it in to X as the counter
                             	; Point to asm symbol table
f137 : a9ab             [ 2] 	lda #lo(df_asm_tokensyms)
f139 : 85a4             [ 3] 	sta df_tmpptrb
f13b : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
f13d : 85a5             [ 3] 	sta df_tmpptrb+1
f13f :                       df_rt_list_find_asm_sym
f13f : 8a               [ 2] 	txa
f140 : f01b             [ 3] 	beq df_rt_list_got_asm_sym
f142 : a000             [ 2] 	ldy #0
f144 :                       df_rt_list_next_asm_ch
                             	_incZPWord df_tmpptrb
                             
f14a : b1a4             [ 5] 	lda (df_tmpptrb),y
f14c : c920             [ 2] 	cmp #' '			; Skip all chars >=' '
f14e : b0f4             [ 3] 	bcs df_rt_list_next_asm_ch
f150 : 38               [ 2] 	sec					; Skip offset and mode bytes
f151 : 65a4             [ 3] 	adc df_tmpptrb
f153 : 85a4             [ 3] 	sta df_tmpptrb
                             	_bcc 2
                             
f157 : e6a5             [ 5] 	inc df_tmpptrb+1
f159 : ca               [ 2] 	dex					; One less symbol to skip over
f15a : 4c3ff1           [ 3] 	jmp df_rt_list_find_asm_sym
f15d :                       df_rt_list_got_asm_sym
f15d : a1a4             [ 6] 	lda (df_tmpptrb,x)	; Relies on X=0 from branch
f15f : c920             [ 2] 	cmp #' '
f161 : 900c             [ 3] 	bcc df_rt_asm_decode_token_done
f163 : 202ac4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
f16c : 4c5df1           [ 3] 	jmp df_rt_list_got_asm_sym
f16f :                       df_rt_asm_decode_token_done
f16f : 60               [ 6] 	rts
                             
                             
f170 :                       df_rt_doke
f170 : 20e3e4           [ 6] 	jsr df_rt_parm_2ints
f173 : a5a4             [ 3] 	lda df_tmpptrb
f175 : a000             [ 2] 	ldy #0
f177 : 91a2             [ 5] 	sta (df_tmpptra),y
                             	; get high byte to doke
f179 : a5a5             [ 3] 	lda df_tmpptrb+1
f17b : c8               [ 2] 	iny
                             	; poke hi byte
f17c : 91a2             [ 5] 	sta (df_tmpptra),y
f17e : 60               [ 6] 	rts
                             
f17f :                       df_rt_poke
f17f : 20e3e4           [ 6] 	jsr df_rt_parm_2ints
AS65 Assembler for R6502 [1.42].                                     Page  245
-------------------------------- bank\bank0.s --------------------------------

f182 : a5a4             [ 3] 	lda df_tmpptrb
f184 : a000             [ 2] 	ldy #0
f186 : 91a2             [ 5] 	sta (df_tmpptra),y
f188 : 60               [ 6] 	rts
                             
f189 :                       df_rt_snd_common
                             	; 3 inputs
                             	; tmpa = channel (1,2,3), tmpb = period, tmpc = 
f189 : a5a2             [ 3] 	lda df_tmpptra
                             	; tone channel addressing is 0 to 2
f18b : 38               [ 2] 	sec
f18c : e901             [ 2] 	sbc #1
f18e : 2903             [ 2] 	and #3
                             	; ok doing a tone channel, get reg index for per
f190 : 0a               [ 2] 	asl a
f191 : aa               [ 2] 	tax
                             	; get low byte of period
f192 : a5a4             [ 3] 	lda df_tmpptrb
f194 : 206ec0           [ 6] 	jsr snd_set
                             	; increment reg number to high byte
f197 : e8               [ 2] 	inx
                             	; but if now at R7 then it's was noise period
                             	; so then no high period or volume
f198 : e007             [ 2] 	cpx #7
f19a : d001             [ 3] 	bne df_rt_not_noise
                             	; else do nothing more
f19c : 60               [ 6] 	rts
f19d :                       df_rt_not_noise
                              	; get high byte of period
f19d : a5a5             [ 3] 	lda df_tmpptrb+1
f19f : 290f             [ 2] 	and #0x0f
                             	; set hi period
f1a1 : 206ec0           [ 6] 	jsr snd_set
                             	; get volume register index (8 = channel 1)
f1a4 : 18               [ 2] 	clc
f1a5 : a5a2             [ 3] 	lda df_tmpptra
f1a7 : 2903             [ 2] 	and #3
f1a9 : 6907             [ 2] 	adc #7
f1ab : aa               [ 2] 	tax
                             	; get volume
f1ac : a5a6             [ 3] 	lda df_tmpptrc
f1ae : 290f             [ 2] 	and #0x0f
f1b0 : d002             [ 3] 	bne df_rt_sound_env_skip
                             	; envelope mode
f1b2 : 0910             [ 2] 	ora #0x10
f1b4 :                       df_rt_sound_env_skip
f1b4 : 4c6ec0           [ 3] 	jmp snd_set
                             
                             ; sound chan,period,volume
f1b7 :                       df_rt_sound
f1b7 : 20eee4           [ 6] 	jsr df_rt_parm_3ints
f1ba :                       df_rt_dosound
f1ba : 4c89f1           [ 3] 	jmp df_rt_snd_common
                             
                             ; music chan,octave,note,volume
f1bd :                       df_rt_music
f1bd : 2005e5           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 2 = octave, need to x 12word = 24
                             	; get period A,X (hi/lo)
                             	; pass in octave # in X and note # in Y
f1c0 : a6a4             [ 3] 	ldx df_tmpptrb
f1c2 : a4a6             [ 3] 	ldy df_tmpptrc
AS65 Assembler for R6502 [1.42].                                     Page  246
-------------------------------- bank\bank0.s --------------------------------

f1c4 : 20c1d5           [ 6] 	jsr snd_get_note
                             	; store note period in b
f1c7 : 86a4             [ 3] 	stx df_tmpptrb
f1c9 : 85a5             [ 3] 	sta df_tmpptrb+1
                             	; put vol in tmpc
f1cb : a5a8             [ 3] 	lda df_tmpptrd
f1cd : 85a6             [ 3] 	sta df_tmpptrc
                             	; tmpa,b,c contain chan,per,vol
f1cf : 4cbaf1           [ 3] 	jmp df_rt_dosound
                             
                             
                             ; play tonemask,noisemask,envelope,period
f1d2 :                       df_rt_play
f1d2 : 2005e5           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 1 = tone enable
f1d5 : a5a2             [ 3] 	lda df_tmpptra
f1d7 : 2907             [ 2] 	and #7
f1d9 : 85a2             [ 3] 	sta df_tmpptra
                             	; parm 2 = noise enable
f1db : a5a4             [ 3] 	lda df_tmpptrb
f1dd : 2907             [ 2] 	and #7
f1df : 0a               [ 2] 	asl a
f1e0 : 0a               [ 2] 	asl a
f1e1 : 0a               [ 2] 	asl a
f1e2 : 05a2             [ 3] 	ora df_tmpptra
                             	; we now have bits set for channels to enable
                             	; but need to invert for the 8910
                             	; top 2 bits are 0 and 1 as these are port b (in
f1e4 : 497f             [ 2] 	eor #0x7f
                             	; reg 7 is control register
f1e6 : a207             [ 2] 	ldx #7
f1e8 : 206ec0           [ 6] 	jsr snd_set
                             	; parm 4 = envelope period
                             	; 11 is envelope period register
f1eb : a20b             [ 2] 	ldx #11
                             	; get low
f1ed : a5a8             [ 3] 	lda df_tmpptrd
f1ef : 206ec0           [ 6] 	jsr snd_set
                             	; get high
f1f2 : e8               [ 2] 	inx
f1f3 : a5a9             [ 3] 	lda df_tmpptrd+1
f1f5 : 206ec0           [ 6] 	jsr snd_set
                             	; parm 3 = envelope mode
f1f8 : a5a6             [ 3] 	lda df_tmpptrc
f1fa : 290f             [ 2] 	and #0xf
                             	; 13 is envelope shape register
f1fc : a20d             [ 2] 	ldx #13
f1fe : 4c6ec0           [ 3] 	jmp snd_set
                             
                             ;df_rt_fill
                             ;	jsr df_rt_parm_5ints
                             ;	rts
                             	
                             ;* common filename procesing routine
                             ;* expects s: or t: followed by filename
                             ;* if no device specified then sd card default
f201 :                       df_rt_init_filename
                             	; evaluate string
f201 : 201ce2           [ 6] 	jsr df_rt_neval
f204 : 209ef7           [ 6] 	jsr df_ost_popStr
                             
                             	; save string address
AS65 Assembler for R6502 [1.42].                                     Page  247
-------------------------------- bank\bank0.s --------------------------------

f207 : 86a6             [ 3] 	stx df_tmpptrc
f209 : 85a7             [ 3] 	sta df_tmpptrc+1
                             
                             	; Check first 2 chars of string
                             	; if s: then device = sd card
                             	; if t: then device = tape
f20b : a201             [ 2] 	ldx #1							; Assume SD card i.e. device 1
f20d : a001             [ 2] 	ldy #1
f20f : b1a6             [ 5] 	lda (df_tmpptrc),y
f211 : 88               [ 2] 	dey								; Y=0 i.e. assume no s: or t:
f212 : c93a             [ 2] 	cmp #':'						; if no ':' in pos 1 then default
f214 : d00d             [ 3] 	bne df_rt_do_fname
f216 : b1a6             [ 5] 	lda (df_tmpptrc),y				; get first char
f218 : a002             [ 2] 	ldy #2							; filename must start at pos 2
f21a : c973             [ 2] 	cmp #'s'						; if s then still sd card
f21c : f005             [ 3] 	beq df_rt_do_fname
f21e : c974             [ 2] 	cmp #'t'						; MUST be t else an error!
f220 : d03c             [ 3] 	bne df_rt_file_errc
f222 : ca               [ 2] 	dex								; DEX makes it zero for tape
f223 :                       df_rt_do_fname
f223 : 8a               [ 2] 	txa								; Save device number
f224 : 48               [ 3] 	pha
                             	; copy string to fhandle, Y is at start pos of f
f225 : a200             [ 2] 	ldx #0
f227 :                       df_rt_copy_fn
f227 : b1a6             [ 5] 	lda (df_tmpptrc),y
f229 :                       df_rt_fname_case
f229 : 9d0004           [ 5] 	sta df_linbuff,x				; Put filename in line buffe
f22c : c8               [ 2] 	iny
f22d : e8               [ 2] 	inx
f22e : c900             [ 2] 	cmp #0
f230 : d0f5             [ 3] 	bne df_rt_copy_fn
f232 : 68               [ 4] 	pla								; Get device number in A
f233 : 60               [ 6] 	rts
                             
                             ; Delete a file from SD card
                             ; Only valid for SD card
f234 :                       df_rt_delete
f234 : 2044f2           [ 6] 	jsr df_rt_parse_file
f237 : c901             [ 2] 	cmp #1
f239 : d023             [ 3] 	bne df_rt_file_errc
f23b : 2072c8           [ 6] 	jsr sd_delete
f23e : 4cfec3           [ 3] 	jmp io_set_default
                             
f241 :                       df_rt_dir
f241 : 4c7dc8           [ 3] 	jmp sd_dir
                             
                             ;* common file parsing routine
                             ;* sets tp_print flag for interactive mode or not
f244 :                       df_rt_parse_file
                             	; if line number is zero then interactive mode..
f244 : a280             [ 2] 	ldx #0x80						; Assume interactive mode i.e. pr
f246 : a001             [ 2] 	ldy #DFTK_LINNUM				; Check the line number
f248 : b187             [ 5] 	lda (df_currlin),y
f24a : c8               [ 2] 	iny
f24b : 1187             [ 5] 	ora (df_currlin),y
f24d : d002             [ 3] 	bne df_rt_parse_file_print		; If not zero then n
f24f : a200             [ 2] 	ldx #0x00						; Ok must be running mode i.e no 
f251 :                       df_rt_parse_file_print
f251 : 865b             [ 3] 	stx tp_print					; Save the print flag for file 
                             	; now process filename
f253 : 2001f2           [ 6] 	jsr df_rt_init_filename
AS65 Assembler for R6502 [1.42].                                     Page  248
-------------------------------- bank\bank0.s --------------------------------

                             	; device number is in A (0=tape, 1=sdcard)
f256 : 48               [ 3] 	pha								; Save sub-device number
f257 : a900             [ 2] 	lda #0							; Always 0 for file device
f259 : 2001c4           [ 6] 	jsr io_active_device
f25c : 68               [ 4] 	pla								; Exit with device number found
f25d : 60               [ 6] 	rts
f25e :                       df_rt_file_errc
                             	SWBRK DFERR_FNAME
                             
                             
                             ; save "file" as text
f260 :                       df_rt_tsave
f260 : 2044f2           [ 6] 	jsr df_rt_parse_file
f263 : 2030c4           [ 6] 	jsr io_open_write
f266 : b0f6             [ 3] 	bcs df_rt_file_errc
                             	; ok now have redirected output to device
                             	; go and list the program in save mode
f268 : a901             [ 2] 	lda #1
f26a : 85aa             [ 3] 	sta df_tmpptre
f26c : 204aef           [ 6] 	jsr df_rt_listprg
                             	; final CR to end the save
f26f : a90d             [ 2] 	lda #UTF_CR
f271 : 202ac4           [ 6] 	jsr io_put_ch
f274 :                       df_rt_file_cleanup
                             	; close the file
f274 : 2033c4           [ 6] 	jsr io_close
                             	; restore to default device io
f277 : 4cfec3           [ 3] 	jmp io_set_default
                             
                             
                             ; load "file" from text
f27a :                       df_rt_tload
f27a : 2044f2           [ 6] 	jsr df_rt_parse_file
f27d : 202dc4           [ 6] 	jsr io_open_read
f280 : b0dc             [ 3] 	bcs df_rt_file_errc
                             	; no echo - very important
                             	; else might try and write to a device
                             	; only open for reading (i.e. SD CARD)
f282 :                       df_rt_loadline
f282 : 18               [ 2] 	clc					; NO ECHO!
f283 : 20f6e0           [ 6] 	jsr df_pg_inputline
                             	; if C clear then tokenise line
f286 : 9027             [ 3] 	bcc df_rt_ldtokenise
                             	; remember num_a as this is the pointer to previ
                             	; push high then low
f288 : a53e             [ 3] 	lda num_a+1
f28a : 48               [ 3] 	pha
f28b : a53d             [ 3] 	lda num_a
f28d : 48               [ 3] 	pha
f28e : 2074f2           [ 6] 	jsr df_rt_file_cleanup	; Ok now close file
                             	; check if line number == 0
f291 : ad8104           [ 4] 	lda df_tokbuff+DFTK_LINNUM
f294 : 0d8204           [ 4] 	ora df_tokbuff+DFTK_LINNUM+1
f297 : d003             [ 3] 	bne df_rt_tload_autostart
f299 : 68               [ 4] 	pla
f29a : 68               [ 4] 	pla
f29b : 60               [ 6] 	rts
f29c :                       df_rt_tload_autostart
                             	; clear variables ready to run the last statemen
f29c : 20afe1           [ 6] 	jsr df_initrun
                             	; run restore from num_a
f29f : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  249
-------------------------------- bank\bank0.s --------------------------------

f2a0 : aa               [ 2] 	tax
f2a1 : 68               [ 4] 	pla
                             	; always skip length and line number
f2a2 : a003             [ 2] 	ldy #3
f2a4 : 8489             [ 3] 	sty df_exeoff
                             	; init currlin
f2a6 : 2021e5           [ 6] 	jsr df_rt_init_stat_ptr
                             	; start execution
f2a9 : 2034e5           [ 6] 	jsr df_rt_exec_stat
                             	; Go and get another line of input
f2ac : 4c13e1           [ 3] 	jmp df_pg_prompt
f2af :                       df_rt_ldtokenise
f2af : 2047e1           [ 6] 	jsr df_pg_tokenise		; Tokenise loaded string
f2b2 : 4c82f2           [ 3] 	jmp df_rt_loadline		; Continue with next until b
                             
                             ; Utility to open in binary mode save
f2b5 :                       df_rt_openforbinsave
f2b5 : 2044f2           [ 6] 	jsr df_rt_parse_file
f2b8 : 203cc4           [ 6] 	jsr io_open_ext2		; Ext2 is binary file save
f2bb : b0a1             [ 3] 	bcs df_rt_file_errc
f2bd : 60               [ 6] 	rts
                             
                             ; Utility to open in binary mode load
f2be :                       df_rt_openforbinload
                             	; Get filename and open file for binary read
f2be : 2044f2           [ 6] 	jsr df_rt_parse_file
f2c1 : 2039c4           [ 6] 	jsr io_open_ext1		; Ext1 is binary file read
f2c4 : b098             [ 3] 	bcs df_rt_file_errc
f2c6 : 60               [ 6] 	rts
                             
                             ; bload addr,"file"
f2c7 :                       df_rt_bload
                             	; Get address but keep on stack
f2c7 : e689             [ 5] 	inc df_exeoff
f2c9 : 201ce2           [ 6] 	jsr df_rt_neval
                             
                             	; Get filename and open file for binary read
f2cc : e689             [ 5] 	inc df_exeoff
f2ce : 20bef2           [ 6] 	jsr df_rt_openforbinload
                             
                             	; Get address from stack in to ptra
f2d1 : 209af7           [ 6] 	jsr df_ost_popInt
f2d4 : 86a2             [ 3] 	stx df_tmpptra
f2d6 : 85a3             [ 3] 	sta df_tmpptra+1
                             
                             	; Get file address to X,Y
f2d8 : 2027c4           [ 6] 	jsr io_get_ch
f2db : aa               [ 2] 	tax
f2dc : 2027c4           [ 6] 	jsr io_get_ch
f2df : a8               [ 2] 	tay
                             
                             	; Check if user address is zero
f2e0 : a5a2             [ 3] 	lda df_tmpptra
f2e2 : 05a3             [ 3] 	ora df_tmpptra+1
f2e4 : d004             [ 3] 	bne df_rt_bload_addr
                             	; If it is zero then use address from file
f2e6 : 86a2             [ 3] 	stx df_tmpptra
f2e8 : 84a3             [ 3] 	sty df_tmpptra+1
f2ea :                       df_rt_bload_addr
                             	; Get file length
f2ea : 2027c4           [ 6] 	jsr io_get_ch
f2ed : 85a4             [ 3] 	sta df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  250
-------------------------------- bank\bank0.s --------------------------------

f2ef : 2027c4           [ 6] 	jsr io_get_ch
f2f2 : 85a5             [ 3] 	sta df_tmpptrb+1
                             
                             	; Go and load the bytes
f2f4 : 201bf3           [ 6] 	jsr df_rt_loadbin
                             	; Close the file
f2f7 : 4c74f2           [ 3] 	jmp df_rt_file_cleanup
                             
                             ; Save a binary file
                             ; addr,length,fname
f2fa :                       df_rt_bsave
                             	; Get source address and length but leave on sta
                             	; evaluate 1st parm
f2fa : 201ce2           [ 6] 	jsr df_rt_neval
                             	; jump over comma
f2fd : e689             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
f2ff : 201ce2           [ 6] 	jsr df_rt_neval
                             
                             	; Process file and open for binary save
f302 : e689             [ 5] 	inc df_exeoff
f304 : 20b5f2           [ 6] 	jsr df_rt_openforbinsave
                             
                             	; Get length in to ptrb
f307 : 209af7           [ 6] 	jsr df_ost_popInt
f30a : 86a4             [ 3] 	stx df_tmpptrb
f30c : 85a5             [ 3] 	sta df_tmpptrb+1
                             
                             	; Get address in to ptra
f30e : 209af7           [ 6] 	jsr df_ost_popInt
f311 : 86a2             [ 3] 	stx df_tmpptra
f313 : 85a3             [ 3] 	sta df_tmpptra+1
                             
                             	; now save bytes
f315 : 202df3           [ 6] 	jsr df_rt_savebin
                             	; Close the file
f318 : 4c74f2           [ 3] 	jmp df_rt_file_cleanup
                             
                             
                             ; save dflat tokenised program as binary
                             ;df_rt_save
                             ;	; Process file and open for binary save
                             ;	jsr df_rt_openforbinsave
                             ;
                             ;	; first save zero page stuff
                             ;	; ok this saves a bit more than needed
                             ;	; but it's no biggie and doesn't
                             ;	; clobber temp space
                             ;	lda #lo(dflat_zp_save_s)
                             ;	sta df_tmpptra
                             ;	lda #hi(dflat_zp_save_s)
                             ;	sta df_tmpptra+1
                             ;	; save length
                             ;	sec
                             ;	lda #lo(dflat_zp_save_e)
                             ;	sbc #lo(dflat_zp_save_s)
                             ;	sta df_tmpptrb
                             ;	lda #hi(dflat_zp_save_e)
                             ;	sbc #hi(dflat_zp_save_s)
                             ;	sta df_tmpptrb+1
                             ;	; now save bytes
                             ;	jsr df_rt_savebin
AS65 Assembler for R6502 [1.42].                                     Page  251
-------------------------------- bank\bank0.s --------------------------------

                             ;
                             ;	; now save the dflat program
                             ;	lda df_prgstrt
                             ;	sta df_tmpptra
                             ;	lda df_prgstrt+1
                             ;	sta df_tmpptra+1
                             ;	; save length
                             ;	sec
                             ;	lda df_prgend
                             ;	sbc df_prgstrt
                             ;	sta df_tmpptrb
                             ;	lda df_prgend+1
                             ;	sbc df_prgstrt+1
                             ;	sta df_tmpptrb+1
                             ;	; now save bytes
                             ;	jsr df_rt_savebin
                             ;
                             ;	; now save the variables VVT and VNT
                             ;	lda df_vntstrt
                             ;	sta df_tmpptra
                             ;	lda df_vntstrt+1
                             ;	sta df_tmpptra+1
                             ;	; save length
                             ;	sec
                             ;	lda df_vvtstrt
                             ;	sbc df_vntstrt
                             ;	sta df_tmpptrb
                             ;	lda df_vvtstrt+1
                             ;	sbc df_vntstrt+1
                             ;	sta df_tmpptrb+1
                             ;	; now save bytes
                             ;	jsr df_rt_savebin
                             ;
                             ;	; close the file
                             ;	jsr io_close
                             ;	clc
                             ;	; Close the file
                             ;	jmp df_rt_file_cleanup
                             
                             
                             ; load dflat tokenised program as binary
                             ;df_rt_load
                             ;	jsr df_rt_openforbinload
                             ;
                             ;	; Get zero page header
                             ;	jsr df_rt_getbin_parms
                             ;	; and get bytes
                             ;	jsr df_rt_loadbin
                             ;
                             ;	; Get program header
                             ;	jsr df_rt_getbin_parms
                             ;	; and get bytes
                             ;	jsr df_rt_loadbin
                             ;
                             ;	; Get variables header
                             ;	jsr df_rt_getbin_parms
                             ;	; and get bytes
                             ;	jsr df_rt_loadbin
                             ;
                             ;	; close the file
                             ;	jsr io_close
                             ;	clc
AS65 Assembler for R6502 [1.42].                                     Page  252
-------------------------------- bank\bank0.s --------------------------------

                             ;	; Close the file
                             ;	jmp df_rt_file_cleanup
                             ;
                             
                             ; Utility to get 4 parms from binary header
                             ;df_rt_getbin_parms
                             ;	ldx #0
                             ;df_rt_getbin_parms_loop
                             ;	jsr io_get_ch
                             ;	sta df_tmpptra,x
                             ;	inx
                             ;	cpx #4
                             ;	bne df_rt_getbin_parms_loop
                             ;	rts
                             
                             ; Utility to load a bin file in address ptra
                             ; Length in ptr b
f31b :                       df_rt_loadbin
                             	; Now load all bytes
f31b : a000             [ 2] 	ldy #0
f31d :                       df_rt_loadbin_byte
                             	; Get a byte from tape
f31d : 2027c4           [ 6] 	jsr io_get_ch
                             	; Save it to destination
f320 : 91a2             [ 5] 	sta (df_tmpptra),y
                             	; Increment destination
f322 : c8               [ 2] 	iny
f323 : d002             [ 3] 	bne df_rt_loadbin_inc
f325 : e6a3             [ 5] 	inc df_tmpptra+1
f327 :                       df_rt_loadbin_inc
                             	; Decrement length remaining
f327 : 204bf3           [ 6] 	jsr df_rt_dec_binlen
                             	; Not done, do another byte
f32a : d0f1             [ 3] 	bne df_rt_loadbin_byte
                             	; Yes the close the file
f32c : 60               [ 6] 	rts
                             
                             ; Utility to save a bin file from address ptra
                             ; Length in ptr b
f32d :                       df_rt_savebin
                             	; Save dest and length to tape
f32d : a200             [ 2] 	ldx #0
f32f :                       df_rt_bsave_parms
f32f : b5a2             [ 4] 	lda df_tmpptra,x
f331 : 202ac4           [ 6] 	jsr io_put_ch
f334 : e8               [ 2] 	inx
f335 : e004             [ 2] 	cpx #4
f337 : d0f6             [ 3] 	bne df_rt_bsave_parms
                             
                             	; Now save all bytes
f339 : a000             [ 2] 	ldy #0
f33b :                       df_rt_savebin_byte
                             	; Get byte from memory
f33b : b1a2             [ 5] 	lda (df_tmpptra),y
                             	; Put byte to tape
f33d : 202ac4           [ 6] 	jsr io_put_ch
                             	; Increment destination
f340 : c8               [ 2] 	iny
f341 : d002             [ 3] 	bne df_rt_savebin_inc
f343 : e6a3             [ 5] 	inc df_tmpptra+1
f345 :                       df_rt_savebin_inc
                             	; Decrement length remaining
AS65 Assembler for R6502 [1.42].                                     Page  253
-------------------------------- bank\bank0.s --------------------------------

f345 : 204bf3           [ 6] 	jsr df_rt_dec_binlen
                             	; Not done, do another byte
f348 : d0f1             [ 3] 	bne df_rt_savebin_byte
f34a : 60               [ 6] 	rts
                             
                             ; Decrement length in ptrb
f34b :                       df_rt_dec_binlen
                             	; Decrement length remaining
f34b : a5a4             [ 3] 	lda df_tmpptrb
f34d : d002             [ 3] 	bne df_rt_binlen_skip
f34f : c6a5             [ 5] 	dec df_tmpptrb+1
f351 :                       df_rt_binlen_skip
f351 : c6a4             [ 5] 	dec df_tmpptrb
                             	; Reached zero?
f353 : a5a4             [ 3] 	lda df_tmpptrb
f355 : 05a5             [ 3] 	ora df_tmpptrb+1
f357 : 60               [ 6] 	rts
                             
                             
                             ; reset var
f358 :                       df_rt_reset
                             	; now get lvar X,A from current statement
f358 : 205ae6           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
f35b : 86a4             [ 3] 	stx df_tmpptrb
f35d : 85a5             [ 3] 	sta df_tmpptrb+1
                             	; load the vdp count as the reset value of timer
                             	; turn off interrupts while reading vdp lo,hi
f35f : a000             [ 2] 	ldy #0	; This is in readiness to read high byte 
                             	; clear interrupts to access 3 byte vdp counter 
f361 : 78               [ 2] 	sei
f362 : a508             [ 3] 	lda vdp_cnt
f364 : 91a4             [ 5] 	sta (df_tmpptrb),y
f366 : a509             [ 3] 	lda vdp_cnt+1
f368 : c8               [ 2] 	iny
f369 : 91a4             [ 5] 	sta (df_tmpptrb),y
                             	; restore interrupts asap
f36b : 58               [ 2] 	cli
f36c : 60               [ 6] 	rts
                             
                             ;***** FUNCTIONS *****
                             
f36d :                       df_rt_deek
f36d : 38               [ 2] 	sec
f36e : 24                    	db 0x24	; BIT skip the clc
f36f :                       df_rt_peek
f36f : 18               [ 2] 	clc
f370 :                       df_rt_readbyte
f370 : 08               [ 3] 	php
                             ;	inc df_exeoff
f371 : 2016e2           [ 6] 	jsr df_rt_getnval
f374 : 86a2             [ 3] 	stx df_tmpptra
f376 : 85a3             [ 3] 	sta df_tmpptra+1
f378 : a000             [ 2] 	ldy #0
f37a : b1a2             [ 5] 	lda (df_tmpptra),y
f37c : aa               [ 2] 	tax
f37d : a900             [ 2] 	lda #0
f37f : 28               [ 4] 	plp
f380 : 9003             [ 3] 	bcc df_rt_readbyte_skip
f382 : c8               [ 2] 	iny
f383 : b1a2             [ 5] 	lda (df_tmpptra),y
f385 :                       df_rt_readbyte_skip
AS65 Assembler for R6502 [1.42].                                     Page  254
-------------------------------- bank\bank0.s --------------------------------

f385 : 4c6af7           [ 3] 	jmp df_ost_pushInt
                             
                             ; Random number generator
                             ; rnd(0) = get next number
                             ; rnd(>0) = set seed
f388 :                       df_rt_rnd
                             ;	inc df_exeoff
f388 : 2016e2           [ 6] 	jsr df_rt_getnval
                             	; if input is 0 then generate next random number
f38b : e000             [ 2] 	cpx #0
f38d : d014             [ 3] 	bne df_rt_rnd_set
f38f : c900             [ 2] 	cmp #0
f391 : d010             [ 3] 	bne df_rt_rnd_set
                             	; generate next number
f393 : a599             [ 3] 	lda df_rnd+1
f395 : 4a               [ 2] 	lsr a
f396 : 2698             [ 5] 	rol df_rnd
f398 : 9002             [ 3] 	bcc df_rt_rnd_noeor
f39a : 49b4             [ 2] 	eor #0xb4
f39c :                       df_rt_rnd_noeor
f39c : 8599             [ 3] 	sta df_rnd+1
f39e : 4598             [ 3] 	eor df_rnd
f3a0 : 4c6ef7           [ 3] 	jmp df_ost_pushIntA
                             	; else set the seed to that number and done
f3a3 :                       df_rt_rnd_set
f3a3 : 8698             [ 3] 	stx df_rnd
f3a5 : 8599             [ 3] 	sta df_rnd+1
f3a7 : 4c6af7           [ 3] 	jmp df_ost_pushInt
                             
                             
                             ;* Return memory footprint as follows:
                             ;* 0	Return free memory (start of vnt - end of he
                             ;* 1	Return program size (end of prg - start of p
                             ;* 2	Return size of vars (end of vvt - start of v
f3aa :                       df_rt_mem
                             ;	inc df_exeoff
f3aa : 2016e2           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
f3ad : e001             [ 2] 	cpx #1
f3af : f017             [ 3] 	beq df_rt_mem_prg
f3b1 : e002             [ 2] 	cpx #2
f3b3 : f026             [ 3] 	beq df_rt_mem_var
                             	; default is free memory
f3b5 :                       df_rt_mem_free
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             	_cpyZPWord df_starend,df_tmpptrb
                             
f3c5 : 4cebf3           [ 3] 	jmp df_rt_mem_calc
f3c8 :                       df_rt_mem_prg
                             	_cpyZPWord df_prgend,df_tmpptra
                             
                             	_cpyZPWord df_prgstrt,df_tmpptrb
                             
f3d8 : 4cebf3           [ 3] 	jmp df_rt_mem_calc
f3db :                       df_rt_mem_var
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
f3eb :                       df_rt_mem_calc
                             	; tmpa-tmpb result in X,A
AS65 Assembler for R6502 [1.42].                                     Page  255
-------------------------------- bank\bank0.s --------------------------------

f3eb : 38               [ 2] 	sec
f3ec : a5a2             [ 3] 	lda df_tmpptra
f3ee : e5a4             [ 3] 	sbc df_tmpptrb
f3f0 : aa               [ 2] 	tax
f3f1 : a5a3             [ 3] 	lda df_tmpptra+1
f3f3 : e5a5             [ 3] 	sbc df_tmpptrb+1
f3f5 : 4c6af7           [ 3] 	jmp df_ost_pushInt
                             
                             ;* a=stick()
                             ;* returns bit condition of joystick positions
                             ;* no actual joystick support so this is
                             ;* Check for fire | down | up | right | left
                             ;*        bit  4     3      2     1       0
f3f8 :                       df_rt_stick
                             ;	inc df_exeoff
f3f8 : 20cdc8           [ 6] 	jsr kb_stick				; Get pos in to A
f3fb : 4c6ef7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; k=get(sync) sync>=1 means sync
f3fe :                       df_rt_get
                             ;	inc df_exeoff
f3fe : 2016e2           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used, check for sync or async
                             	; c=0 if x<1 else x>=1 makes c=1
f401 : e001             [ 2] 	cpx #1
f403 :                       df_rt_get_sync
f403 : 08               [ 3] 	php
f404 : 2027c4           [ 6] 	jsr io_get_ch				; Return in A, C=0 is good
f407 : 9005             [ 3] 	bcc df_rt_get_pushp			; Push A (and do plp)
f409 : 28               [ 4] 	plp
f40a : b0f7             [ 3] 	bcs df_rt_get_sync			; If sync then check again
f40c : 9001             [ 3] 	bcc df_rt_get_push			; Else push zero (no plp)
f40e :                       df_rt_get_pushp
f40e : 28               [ 4] 	plp
f40f :                       df_rt_get_push
f40f : 4c6ef7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; s = scrn(x,y)
f412 :                       df_rt_scrn
                             ;	inc df_exeoff
f412 : 20e3e4           [ 6] 	jsr df_rt_parm_2ints
f415 : a4a2             [ 3] 	ldy df_tmpptra			; Y is the x coord!
f417 : a6a4             [ 3] 	ldx df_tmpptrb			; X is the y coord!
f419 : 20a2cf           [ 6] 	jsr gr_get
f41c : 4c6ef7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; p = pixel(x,y)
f41f :                       df_rt_pixel
                             ;	inc df_exeoff
f41f : 20e3e4           [ 6] 	jsr df_rt_parm_2ints
f422 : a6a2             [ 3] 	ldx df_tmpptra
f424 : a4a4             [ 3] 	ldy df_tmpptrb
f426 : 200ed2           [ 6] 	jsr gr_pixel
f429 : 4c6ef7           [ 3] 	jmp df_ost_pushIntA
                             
                             
                             ; e=elapsed(var)
f42c :                       df_rt_elapsed
                             	; now get lvar X,A from current statement
f42c : 205ae6           [ 6] 	jsr df_rt_getlvar
f42f : e689             [ 5] 	inc df_exeoff
                             	; save lvar in tmpb, vvt ptr in tmpa
AS65 Assembler for R6502 [1.42].                                     Page  256
-------------------------------- bank\bank0.s --------------------------------

f431 : 86a4             [ 3] 	stx df_tmpptrb
f433 : 85a5             [ 3] 	sta df_tmpptrb+1
                             	; subtract vdp counter from value
                             	; turn off interrupts while reading vdp lo,hi
f435 : a000             [ 2] 	ldy #0	; This is in readiness to read high byte 
f437 : 38               [ 2] 	sec
                             	; disable interrupts to access vdp counter
f438 : 78               [ 2] 	sei
f439 : a508             [ 3] 	lda vdp_cnt
f43b : f1a4             [ 5] 	sbc (df_tmpptrb),y
f43d : aa               [ 2] 	tax
f43e : a509             [ 3] 	lda vdp_cnt+1
                             	; restore interrupts asap
f440 : 58               [ 2] 	cli
f441 : c8               [ 2] 	iny
f442 : f1a4             [ 5] 	sbc (df_tmpptrb),y
f444 : 4c6af7           [ 3] 	jmp df_ost_pushInt
                             
f447 :                       df_rt_call
                             ;	inc df_exeoff
f447 : 2005e5           [ 6] 	jsr df_rt_parm_4ints
f44a : a5a4             [ 3] 	lda df_tmpptrb				; load A
f44c : a6a6             [ 3] 	ldx	df_tmpptrc				; load X
f44e : a4a8             [ 3] 	ldy df_tmpptrd				; load Y
f450 : 2056f4           [ 6] 	jsr df_rt_calljsr
f453 :                       df_rt_push_int1
f453 : 4c6af7           [ 3] 	jmp df_ost_pushInt			; A,X pair is return value
f456 :                       df_rt_calljsr
f456 : 6ca200           [ 6] 	jmp (df_tmpptra)			; tmpptra is address, return 
                             
f459 :                       df_rt_sgn
                             ;	inc df_exeoff
f459 : 2016e2           [ 6] 	jsr df_rt_getnval
f45c : 86a2             [ 3] 	stx df_tmpptra
f45e : 05a2             [ 3] 	ora df_tmpptra
f460 : f00f             [ 3] 	beq df_rt_sgn_z
f462 : 2980             [ 2] 	and #0x80
f464 : d006             [ 3] 	bne df_rt_sgn_n
f466 : a201             [ 2] 	ldx #1
f468 : a900             [ 2] 	lda #0
f46a : f0e7             [ 3] 	beq df_rt_push_int1			; Always
f46c :                       df_rt_sgn_n
f46c : a2ff             [ 2] 	ldx #0xff
f46e : 8a               [ 2] 	txa
f46f : d0e2             [ 3] 	bne df_rt_push_int1			; Always
f471 :                       df_rt_sgn_z
f471 : a200             [ 2] 	ldx #0
f473 : 8a               [ 2] 	txa
f474 : f0dd             [ 3] 	beq df_rt_push_int1			; Always
                             
                             ; addr(X)
f476 :                       df_rt_addr
                             	; get lvar X,A from current statement
f476 : 205ae6           [ 6] 	jsr df_rt_getlvar
f479 : e689             [ 5] 	inc df_exeoff
f47b : 4c6af7           [ 3] 	jmp df_ost_pushInt
                             
                             ; string length calculator
                             ; X,A = source
                             ; A = length not including zero
f47e :                       df_rt_strlen_common
f47e : 86a2             [ 3] 	stx df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  257
-------------------------------- bank\bank0.s --------------------------------

f480 : 85a3             [ 3] 	sta df_tmpptra+1
f482 : a0ff             [ 2] 	ldy #0xff
f484 :                       df_rt_strlen_count
f484 : c8               [ 2] 	iny
f485 : b1a2             [ 5] 	lda (df_tmpptra),y
f487 : d0fb             [ 3] 	bne df_rt_strlen_count
f489 : 98               [ 2] 	tya
f48a : 60               [ 6] 	rts
                             
                             
                             ; common routine to extract a string
                             ; tmpa = source string
                             ; tmpb = dest string
                             ; tmpc = start pos
                             ; tmpd = endpos
f48b :                       df_rt_str_extract
                             	; source string
f48b : 209ef7           [ 6] 	jsr df_ost_popStr
f48e : 86a2             [ 3] 	stx df_tmpptra
f490 : 85a3             [ 3] 	sta df_tmpptra+1
                             	; destination is string accumulator
f492 : a57b             [ 3] 	lda df_sevalptr
f494 : 85a4             [ 3] 	sta df_tmpptrb
f496 : a57c             [ 3] 	lda df_sevalptr+1
f498 : 85a5             [ 3] 	sta df_tmpptrb+1
                             	; start pos
f49a : a4a6             [ 3] 	ldy df_tmpptrc
f49c : a200             [ 2] 	ldx #0
f49e :                       df_rt_str_cpy_ch
f49e : c4a8             [ 3] 	cpy df_tmpptrd
f4a0 : f011             [ 3] 	beq df_str_src_end
f4a2 : b1a2             [ 5] 	lda (df_tmpptra),y
f4a4 : f00d             [ 3] 	beq df_str_src_end
f4a6 : 81a4             [ 6] 	sta (df_tmpptrb,x)
                             	_incZPWord df_tmpptrb
                             
f4ae : c8               [ 2] 	iny
f4af : d0ed             [ 3] 	bne df_rt_str_cpy_ch
                             	SWBRK DFERR_STRLONG
                             
f4b3 :                       df_str_src_end
f4b3 : a900             [ 2] 	lda #0
f4b5 : 81a4             [ 6] 	sta (df_tmpptrb,x)
f4b7 : a67b             [ 3] 	ldx df_sevalptr
f4b9 : a57c             [ 3] 	lda df_sevalptr+1
f4bb : 4c75f7           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = chr(x)
f4be :                       df_rt_chr
                             ;	inc df_exeoff
                             	; get char in X
f4be : 2016e2           [ 6] 	jsr df_rt_getnval
f4c1 : a000             [ 2] 	ldy #0
                             	; transfer lo byte to A
f4c3 : 8a               [ 2] 	txa
f4c4 : 917b             [ 5] 	sta (df_sevalptr),y
f4c6 : c8               [ 2] 	iny
                             	; zero terminator
f4c7 : a900             [ 2] 	lda #0
f4c9 : 917b             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f4cb : a67b             [ 3] 	ldx df_sevalptr
AS65 Assembler for R6502 [1.42].                                     Page  258
-------------------------------- bank\bank0.s --------------------------------

f4cd : a57c             [ 3] 	lda df_sevalptr+1
f4cf : 4c75f7           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = hex(x)
f4d2 :                       df_rt_hex
                             ;	inc df_exeoff
                             	; create hex digits
f4d2 : 2016e2           [ 6] 	jsr df_rt_getnval
f4d5 : 85a2             [ 3] 	sta df_tmpptra	; Save the high byte
f4d7 : 8a               [ 2] 	txa				; Convert low byte first
f4d8 : 2085c1           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
f4db : 85a4             [ 3] 	sta df_tmpptrb
f4dd : 8a               [ 2] 	txa				; Push low digit of low byte from X
f4de : 48               [ 3] 	pha
f4df : a5a4             [ 3] 	lda df_tmpptrb	; Get A back from temp
f4e1 : 48               [ 3] 	pha				; Push high digit of low byte
f4e2 : a5a2             [ 3] 	lda df_tmpptra	; Get the high byte
f4e4 : 2085c1           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
                             	; create string
f4e7 : a000             [ 2] 	ldy #0			; Index in to string temp area
                             	; hi/hi
f4e9 : 917b             [ 5] 	sta (df_sevalptr),y
f4eb : c8               [ 2] 	iny
                             	; hi/lo
f4ec : 8a               [ 2] 	txa
f4ed : 917b             [ 5] 	sta (df_sevalptr),y
f4ef : c8               [ 2] 	iny
                             	; lo/hi
f4f0 : 68               [ 4] 	pla
f4f1 : 917b             [ 5] 	sta (df_sevalptr),y
f4f3 : c8               [ 2] 	iny
                             	; lo/lo
f4f4 : 68               [ 4] 	pla
f4f5 : 917b             [ 5] 	sta (df_sevalptr),y
f4f7 : c8               [ 2] 	iny
                             	; zero terminator
f4f8 : a900             [ 2] 	lda #0
f4fa : 917b             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f4fc : a67b             [ 3] 	ldx df_sevalptr
f4fe : a57c             [ 3] 	lda df_sevalptr+1
f500 : 4c75f7           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = dec(x)
f503 :                       df_rt_dec
                             ;	inc df_exeoff
                             	; create dec digits
f503 : 2016e2           [ 6] 	jsr df_rt_getnval
f506 : 209bc3           [ 6] 	jsr int_to_str
                             	; point to num_buf scratch area
f509 : a24d             [ 2] 	ldx #lo(num_buf)
f50b : a900             [ 2] 	lda #hi(num_buf)
f50d : 4c75f7           [ 3] 	jmp df_ost_pushStr
                             
                             
                             ; $l = left($s, x)
f510 :                       df_rt_left
                             ;	inc df_exeoff
                             
                             	; first get the string to act on
                             	; point to string accumulator
f510 : 20d6e2           [ 6] 	jsr df_rt_seval
AS65 Assembler for R6502 [1.42].                                     Page  259
-------------------------------- bank\bank0.s --------------------------------

                             	; now get the num of chars
f513 : e689             [ 5] 	inc df_exeoff
f515 : 2016e2           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract
f518 : 86a8             [ 3] 	stx df_tmpptrd
                             	; start position
f51a : a000             [ 2] 	ldy #0
f51c : 84a6             [ 3] 	sty df_tmpptrc
f51e : 4c8bf4           [ 3] 	jmp df_rt_str_extract
                             
                             ; $r = right($s, x)
f521 :                       df_rt_right
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
f521 : 20d6e2           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars from the right
f524 : e689             [ 5] 	inc df_exeoff
f526 : 2016e2           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract from the right
f529 : 86a6             [ 3] 	stx df_tmpptrc
                             	; end pos = len
f52b : a67b             [ 3] 	ldx df_sevalptr
f52d : a57c             [ 3] 	lda df_sevalptr+1
f52f : 207ef4           [ 6] 	jsr df_rt_strlen_common
f532 : 85a8             [ 3] 	sta df_tmpptrd
                             	; subtract num chars to extract to get start pos
f534 : 38               [ 2] 	sec
f535 : e5a6             [ 3] 	sbc df_tmpptrc
f537 : 85a6             [ 3] 	sta df_tmpptrc
f539 : 4c8bf4           [ 3] 	jmp df_rt_str_extract
                             
                             ; $m = mid($s, x, y)
f53c :                       df_rt_mid
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
f53c : 20d6e2           [ 6] 	jsr df_rt_seval
                             	; now get start of string segment
f53f : e689             [ 5] 	inc df_exeoff
f541 : 201ce2           [ 6] 	jsr df_rt_neval
                             	; number of chars to extract
f544 : e689             [ 5] 	inc df_exeoff
f546 : 2016e2           [ 6] 	jsr df_rt_getnval
f549 : 86a8             [ 3] 	stx df_tmpptrd
                             	; start position
f54b : 209af7           [ 6] 	jsr df_ost_popInt
f54e : ca               [ 2] 	dex					; zero offset rather than 1
f54f : 86a6             [ 3] 	stx df_tmpptrc
                             	; update end pos by adding start pos
f551 : 8a               [ 2] 	txa
f552 : 18               [ 2] 	clc
f553 : 65a8             [ 3] 	adc df_tmpptrd
f555 : 85a8             [ 3] 	sta df_tmpptrd
f557 : 4c8bf4           [ 3] 	jmp df_rt_str_extract
                             
                             ; %l = len($s)
f55a :                       df_rt_len
                             ;	inc df_exeoff
                             	; evaluate the string in the string accumulator
f55a : 20d6e2           [ 6] 	jsr df_rt_seval
f55d : 209ef7           [ 6] 	jsr df_ost_popStr
AS65 Assembler for R6502 [1.42].                                     Page  260
-------------------------------- bank\bank0.s --------------------------------

                             	; now calculate the length of this string
f560 : 207ef4           [ 6] 	jsr df_rt_strlen_common
f563 : 4c6ef7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = asc($s)
f566 :                       df_rt_asc
                             ;	inc df_exeoff
                             	; Evaluate string in the string accumulator
f566 : 20d6e2           [ 6] 	jsr df_rt_seval
f569 : 209ef7           [ 6] 	jsr df_ost_popStr
                             	; Store point in ZP
f56c : 86a2             [ 3] 	stx df_tmpptra
f56e : 85a3             [ 3] 	sta df_tmpptra+1
                             	; Find the character at beginning
f570 : a200             [ 2] 	ldx #0
f572 : a1a2             [ 6] 	lda (df_tmpptra,x)
f574 : 4c6ef7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = val($s)
f577 :                       df_rt_val
                             ;	inc df_exeoff
                             	; evaluate the string
f577 : 20d6e2           [ 6] 	jsr df_rt_seval
f57a : 209ef7           [ 6] 	jsr df_ost_popStr
f57d : a000             [ 2] 	ldy #0				; any numeric format
f57f : 20cec1           [ 6] 	jsr con_n_to_a		; result in num_a
f582 : b007             [ 3] 	bcs df_rt_val_err
f584 : a63d             [ 3] 	ldx num_a
f586 : a53e             [ 3] 	lda num_a+1
                             	; Save as an int
f588 : 4c6af7           [ 3] 	jmp df_ost_pushInt
f58b :                       df_rt_val_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ; stop execution
f58d :                       df_rt_abort
                             	SWBRK DFERR_ABORT
                             
                             
f58f :                       df_rt_sprchar
f58f : 20e3e4           [ 6] 	jsr df_rt_parm_2ints
f592 : a5a2             [ 3] 	lda df_tmpptra
f594 : a6a4             [ 3] 	ldx df_tmpptrb
f596 : 4c81d4           [ 3] 	jmp gr_spr_char
                             
f599 :                       df_rt_sprpos
f599 : 20eee4           [ 6] 	jsr df_rt_parm_3ints
f59c : a5a2             [ 3] 	lda df_tmpptra
f59e : a6a4             [ 3] 	ldx df_tmpptrb
f5a0 : a4a6             [ 3] 	ldy df_tmpptrc
f5a2 : 4c91d4           [ 3] 	jmp gr_spr_pos
                             
f5a5 :                       df_rt_sprupd
f5a5 : 201cd4           [ 6] 	jsr gr_spr_erase
f5a8 : 202ed4           [ 6] 	jsr gr_spr_new
f5ab : 4c60d4           [ 3] 	jmp gr_spr_draw
                             
f5ae :                       df_rt_sprinit
f5ae : 4c0ed4           [ 3] 	jmp gr_spr_init
                             
f5b1 :                       df_rt_sprmulti
AS65 Assembler for R6502 [1.42].                                     Page  261
-------------------------------- bank\bank0.s --------------------------------

f5b1 : 20e3e4           [ 6] 	jsr df_rt_parm_2ints
f5b4 : 4c9ed4           [ 3] 	jmp gr_spr_multi_pos
                             
f5b7 :                       df_rt_sprhit
                             ;	inc df_exeoff
f5b7 : 2016e2           [ 6] 	jsr df_rt_getnval
f5ba : 8a               [ 2] 	txa
f5bb : 2087d4           [ 6] 	jsr gr_spr_hit
f5be : b003             [ 3] 	bcs df_rt_sprhit_inactive
                             	; Active sprite hit = background
f5c0 : 4c6ef7           [ 3] 	jmp df_ost_pushIntA
f5c3 :                       df_rt_sprhit_inactive
                             	; Inactive sprite hit = -1
f5c3 : a2ff             [ 2] 	ldx #0xff
f5c5 : 8a               [ 2] 	txa
f5c6 : 4c6af7           [ 3] 	jmp df_ost_pushInt
                             
                             
f5c9 :                       mod_sz_rtsubs_e
                             
                             
                             	include "dflat/proc.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROC.S
                             ;*  dflat module to handle procedures:
                             ;*  - executing a procedure
                             ;*  - find a proc, pass local and non-local param
                             ;*  - return from a proc, unload locals
                             ;*  - save the definition of a proc in the VNT an
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f5c9 :                       mod_sz_proc_s
                             
f5c9 :                       df_rt_proc_parmerr
f5c9 :                       df_rt_deferr
                             	SWBRK DFERR_PROCPARM
                             
                             
                             
                             ; call procedure
f5cb :                       df_rt_proc
                             	; move past escape token
f5cb : a489             [ 3] 	ldy df_exeoff
f5cd : c8               [ 2] 	iny
                             	; Get VVT address X,A and procptr
f5ce : b187             [ 5] 	lda (df_currlin),y
f5d0 : aa               [ 2] 	tax
f5d1 : c8               [ 2] 	iny
f5d2 : b187             [ 5] 	lda (df_currlin),y
f5d4 : c8               [ 2] 	iny
f5d5 : 8489             [ 3] 	sty df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  262
-------------------------------- bank\bank0.s --------------------------------

f5d7 : 868f             [ 3] 	stx df_procptr
f5d9 : 8590             [ 3] 	sta df_procptr+1
                             	
                             	; is index 0 (held in dim1)
                             	; then need to find the procedure
f5db : a003             [ 2] 	ldy #DFVVT_DIM1
f5dd : b18f             [ 5] 	lda (df_procptr),y
f5df : d014             [ 3] 	bne df_rt_proc_addr
                             	; find proc
f5e1 : 20f8e5           [ 6] 	jsr df_rt_findproc
                             	; save y (line index)
f5e4 : 8438             [ 3] 	sty tmp_d
                             	; now go and update the proc vvt address
f5e6 : a002             [ 2] 	ldy #DFVVT_HI
f5e8 : 918f             [ 5] 	sta (df_procptr),y
f5ea : a001             [ 2] 	ldy #DFVVT_LO
f5ec : 8a               [ 2] 	txa
f5ed : 918f             [ 5] 	sta (df_procptr),y
f5ef : a003             [ 2] 	ldy #DFVVT_DIM1
                             	; get back line index in to A
f5f1 : a538             [ 3] 	lda tmp_d
f5f3 : 918f             [ 5] 	sta (df_procptr),y
f5f5 :                       df_rt_proc_addr
                             	; move past first open bracket
f5f5 : e689             [ 5] 	inc df_exeoff
                             	
                             	; get parm count
f5f7 : a004             [ 2] 	ldy #DFVVT_DIM2
f5f9 : b18f             [ 5] 	lda (df_procptr),y	
f5fb : f018             [ 4] 	beq df_rt_proc_parm_none
                             	; push the right number of parms on
f5fd : 48               [ 3] 	pha
                             
f5fe : c689             [ 5] 	dec df_exeoff		; Pre-adjust
f600 :                       df_rt_proc_push_parm
                             	; move past comma or opening bracket
f600 : e689             [ 5] 	inc df_exeoff
                             	; if at end then error!
f602 : a489             [ 3] 	ldy df_exeoff
f604 : b187             [ 5] 	lda (df_currlin),y
f606 : c929             [ 2] 	cmp #')'
f608 : f0bf             [ 4] 	beq df_rt_proc_parmerr
                             	; else try and evaluate
f60a : 201ce2           [ 6] 	jsr df_rt_neval
                             	; get parm count off stack
f60d : 68               [ 4] 	pla
                             	; decrement
f60e : 38               [ 2] 	sec
f60f : e901             [ 2] 	sbc #1
                             	; and put back on stack
f611 : 48               [ 3] 	pha
                             	; go back and do all required parms
f612 : d0ec             [ 3] 	bne df_rt_proc_push_parm
                             	; remove parm counter from stack
f614 :                       df_rt_proc_parm_done
f614 : 68               [ 4] 	pla
f615 :                       df_rt_proc_parm_none
                             	; should be at close bracket
f615 : a489             [ 3] 	ldy df_exeoff
f617 : b187             [ 5] 	lda (df_currlin),y
f619 : c929             [ 2] 	cmp #')'
f61b : d0ac             [ 4] 	bne df_rt_proc_parmerr
AS65 Assembler for R6502 [1.42].                                     Page  263
-------------------------------- bank\bank0.s --------------------------------

                             	; should be no more parms
                             	; ok, finally we have all parms on rt stack
                             	; now execute the procedure
                             	; get back the proc address
f61d : a68f             [ 3] 	ldx df_procptr
f61f : a590             [ 3] 	lda df_procptr+1
                             ;	bne df_rt_exec_proc		; ALWAYS as procptr+1 !=0
                             	
                             ; executing a procedure in VVT slot A,X
f621 :                       df_rt_exec_proc
                             	; save slot address
f621 : 86a2             [ 3] 	stx df_tmpptra
f623 : 85a3             [ 3] 	sta df_tmpptra+1
                             	
                             	; need to save all important vars
f625 : a587             [ 3] 	lda df_currlin
f627 : 48               [ 3] 	pha
f628 : a588             [ 3] 	lda df_currlin+1
f62a : 48               [ 3] 	pha
f62b : a589             [ 3] 	lda df_exeoff
f62d : 48               [ 3] 	pha
f62e : a580             [ 3] 	lda df_nxtstidx
f630 : 48               [ 3] 	pha
f631 : a581             [ 3] 	lda df_curstidx
f633 : 48               [ 3] 	pha
f634 : a57f             [ 3] 	lda df_eolidx
f636 : 48               [ 3] 	pha
f637 : a594             [ 3] 	lda df_ifnest
f639 : 48               [ 3] 	pha
                             
                             	; now initialise the data
f63a : a001             [ 2] 	ldy #DFVVT_LO
f63c : b1a2             [ 5] 	lda (df_tmpptra),y
f63e : 8587             [ 3] 	sta df_currlin
f640 : c8               [ 2] 	iny
f641 : b1a2             [ 5] 	lda (df_tmpptra),y
f643 : 8588             [ 3] 	sta df_currlin+1
f645 : c8               [ 2] 	iny
f646 : b1a2             [ 5] 	lda (df_tmpptra),y
f648 : 8589             [ 3] 	sta df_exeoff
f64a : 8581             [ 3] 	sta df_curstidx
f64c : a000             [ 2] 	ldy #0		; hmm XXXXX might need to be tay to get 
f64e : b187             [ 5] 	lda (df_currlin),y
f650 : 8580             [ 3] 	sta df_nxtstidx
                             	; now execute statements
f652 : 2034e5           [ 6] 	jsr df_rt_exec_stat
                             ;	bcs df_rt_exec_proc_err
                             	; now restore the position
f655 : 68               [ 4] 	pla
f656 : 8594             [ 3] 	sta df_ifnest
f658 : 68               [ 4] 	pla
f659 : 857f             [ 3] 	sta df_eolidx
f65b : 68               [ 4] 	pla
f65c : 8581             [ 3] 	sta df_curstidx
f65e : 68               [ 4] 	pla
f65f : 8580             [ 3] 	sta df_nxtstidx
f661 : 68               [ 4] 	pla
f662 : 8589             [ 3] 	sta df_exeoff
f664 : 68               [ 4] 	pla
f665 : 8588             [ 3] 	sta df_currlin+1
f667 : 68               [ 4] 	pla
f668 : 8587             [ 3] 	sta df_currlin
AS65 Assembler for R6502 [1.42].                                     Page  264
-------------------------------- bank\bank0.s --------------------------------

                             	; should be all restored, so return
f66a : 60               [ 6] 	rts
                             
                             
f66b :                       df_rt_def
                             	; line offset pointing at DFTK_PROC
                             	; skip over PROC address and open bracket
f66b : a689             [ 3] 	ldx df_exeoff
f66d : e8               [ 2] 	inx
f66e : e8               [ 2] 	inx
f66f : e8               [ 2] 	inx
f670 : 8689             [ 3] 	stx df_exeoff
                             	; parms on stack in reverse order to parm list
                             	; so get each parm and type and save to scratch
f672 : a201             [ 2] 	ldx #1									; index in to scratch
f674 : 868d             [ 3] 	stx df_procargs							; Proc args is the #args-1
f676 : a489             [ 3] 	ldy df_exeoff
f678 :                       df_rt_def_find_var
f678 : c8               [ 2] 	iny
f679 : b187             [ 5] 	lda (df_currlin),y
                             	; check if end of parm list
f67b : c929             [ 2] 	cmp #')'
f67d : f01f             [ 3] 	beq df_rt_def_parm_done
                             	; else check if found a variable escape token (<
f67f : c911             [ 2] 	cmp #DFTK_VAR
f681 : f007             [ 3] 	beq df_rt_def_got_var
                             	; else check if non-local specifier
f683 : c926             [ 2] 	cmp #DFTK_VARPARM						; This is a regular ASCII
f685 : d0f1             [ 3] 	bne df_rt_def_find_var
f687 :                       df_rt_def_got_varparm
                             	; set high bit
f687 : 0980             [ 2] 	ora #0x80
                             	; advance over non-local specifier
f689 : c8               [ 2] 	iny
f68a :                       df_rt_def_got_var
f68a : 9d1f06           [ 5] 	sta scratch,x		; Save parm type (by value or ref
                             	; get address and save in scratch
f68d : c8               [ 2] 	iny
f68e : b187             [ 5] 	lda (df_currlin),y
f690 : 9d3f06           [ 5] 	sta scratch+32,x	; Hope 32 params is enough! :-)
f693 : c8               [ 2] 	iny
f694 : b187             [ 5] 	lda (df_currlin),y
f696 : 9d5f06           [ 5] 	sta scratch+64,x
f699 : e8               [ 2] 	inx
f69a : e68d             [ 5] 	inc df_procargs
f69c : d0da             [ 3] 	bne df_rt_def_find_var  ; always - relies not ze
f69e :                       df_rt_def_parm_done
                             	; save index that we got to
f69e : 8489             [ 3] 	sty df_exeoff
                             	; save def param list position in temp
f6a0 : 868c             [ 3] 	stx df_procmode
                             	; all var indices on the operator stack
                             	; now load up variables with parameters
                             	; initially assume no locals
f6a2 : a900             [ 2] 	lda #0
f6a4 : 858e             [ 3] 	sta df_procloc
f6a6 :                       df_rt_def_load_var
f6a6 : c68d             [ 5] 	dec df_procargs
f6a8 : f02f             [ 3] 	beq df_rt_def_load_var_done
                             	; get var address
f6aa : c68c             [ 5] 	dec df_procmode
f6ac : a68c             [ 3] 	ldx df_procmode
AS65 Assembler for R6502 [1.42].                                     Page  265
-------------------------------- bank\bank0.s --------------------------------

f6ae : bd3f06           [ 4] 	lda scratch+32,x
f6b1 : 85a2             [ 3] 	sta df_tmpptra
f6b3 : bd5f06           [ 4] 	lda scratch+64,x
f6b6 : 85a3             [ 3] 	sta df_tmpptra+1
                             	
f6b8 : bd1f06           [ 4] 	lda scratch,x
                             	; if MSB is set then this is not a local variabl
                             	; so just go an initialise with stacking
f6bb : 3009             [ 3] 	bmi df_rt_def_initialise_parm
                             	; else call the local handling code to 
                             	; push the var address on to the runtime stack
f6bd : a6a2             [ 3] 	ldx df_tmpptra
f6bf : a5a3             [ 3] 	lda df_tmpptra+1
f6c1 : 200df7           [ 6] 	jsr df_rt_proc_local
                             	; increment number of locals
f6c4 : e68e             [ 5] 	inc df_procloc
f6c6 :                       df_rt_def_initialise_parm
                             	; load type
f6c6 : a000             [ 2] 	ldy #DFVVT_TYPE
f6c8 : b1a2             [ 5] 	lda (df_tmpptra),y
f6ca : a8               [ 2] 	tay					; Put the type into Y
f6cb : 207df7           [ 6] 	jsr df_ost_popParmX	; Try to get this off the st
                             	; update the variable
f6ce : a002             [ 2] 	ldy #DFVVT_HI
f6d0 : 91a2             [ 5] 	sta (df_tmpptra),y
f6d2 : 88               [ 2] 	dey
f6d3 : 8a               [ 2] 	txa
f6d4 : 91a2             [ 5] 	sta (df_tmpptra),y
                             
f6d6 : 4ca6f6           [ 3] 	jmp df_rt_def_load_var
f6d9 :                       df_rt_def_load_var_done
                             	; save the number of local parameters found so t
                             	; be unloaded when the proc ends
f6d9 : a58e             [ 3] 	lda df_procloc
f6db : 2021f7           [ 6] 	jsr df_rst_pushByte
                             	; continue with next statement
f6de : 18               [ 2] 	clc
f6df : 60               [ 6] 	rts
                             
                             	
                             ; return a value
f6e0 :                       df_rt_return
                             	; evaluate the return and put on the parameter s
                             	; then process this like an end of procedure
f6e0 : 201ce2           [ 6] 	jsr df_rt_neval
                             ; end def for a proc
f6e3 :                       df_rt_enddef
                             	; unload any locals
                             ;	jsr df_rt_proc_unlocal
                             	; nothing to do - main loop will terminate
                             ;	clc
                             ;	rts
                             ; enddef falls through to the unlocal code	
                             	
                             ; unload any local variables from runtime stack
                             ;df_rt_proc_unlocal
f6e3 : 202af7           [ 6] 	jsr df_rst_popByte
f6e6 : aa               [ 2] 	tax
f6e7 : f020             [ 4] 	beq df_rt_proc_unload_done
f6e9 :                       df_rt_proc_unloadvar
f6e9 : 8a               [ 2] 	txa
f6ea : 48               [ 3] 	pha
AS65 Assembler for R6502 [1.42].                                     Page  266
-------------------------------- bank\bank0.s --------------------------------

                             	; var value is popped first then index
                             	; get a word and put in tmpb
f6eb : 2047f7           [ 6] 	jsr df_rst_popWord
f6ee : 86a4             [ 3] 	stx df_tmpptrb
f6f0 : 85a5             [ 3] 	sta df_tmpptrb+1
                             	; get the var address
f6f2 : 2047f7           [ 6] 	jsr df_rst_popWord
f6f5 : 86a2             [ 3] 	stx df_tmpptra
f6f7 : 85a3             [ 3] 	sta df_tmpptra+1
                             	; store lo byte first
f6f9 : a001             [ 2] 	ldy #DFVVT_LO
f6fb : a5a4             [ 3] 	lda df_tmpptrb
f6fd : 91a2             [ 5] 	sta (df_tmpptra),y
                             	; then hi
f6ff : c8               [ 2] 	iny
f700 : a5a5             [ 3] 	lda df_tmpptrb+1
f702 : 91a2             [ 5] 	sta (df_tmpptra),y
                             	; restore counter
f704 : 68               [ 4] 	pla
f705 : aa               [ 2] 	tax
f706 : ca               [ 2] 	dex
f707 : d0e0             [ 4] 	bne df_rt_proc_unloadvar
f709 :                       df_rt_proc_unload_done
f709 : 68               [ 4] 	pla				; Pull old return address from stack
f70a : 68               [ 4] 	pla
f70b : 18               [ 2] 	clc
f70c : 60               [ 6] 	rts
                             	
                             ; push a local variable to the runtime stack
                             ; X,A = var slot
f70d :                       df_rt_proc_local
                             	; save address
f70d : 86a2             [ 3] 	stx df_tmpptra
f70f : 85a3             [ 3] 	sta df_tmpptra+1
                             	; push var slot on rt stack
f711 : 2039f7           [ 6] 	jsr df_rst_pushWord
f714 :                       df_rt_proc_local_load	
                             	; load x,a with var value lo,hi
f714 : a001             [ 2] 	ldy #DFVVT_LO
f716 : b1a2             [ 5] 	lda (df_tmpptra),y
f718 : aa               [ 2] 	tax
f719 : c8               [ 2] 	iny
f71a : b1a2             [ 5] 	lda (df_tmpptra),y
                             	; push word on to rt stack
f71c : 2039f7           [ 6] 	jsr df_rst_pushWord
f71f : 18               [ 2] 	clc
f720 : 60               [ 6] 	rts
                             		
f721 :                       mod_sz_proc_e
                             
                             
f721 :                       mod_sz_runtime_e
                             
                             
                             
                             	include "dflat/stack.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
AS65 Assembler for R6502 [1.42].                                     Page  267
-------------------------------- bank\bank0.s --------------------------------

                             ;*  credit of original my authorship please!
                             ;*
                             ;*  STACK.S
                             ;*  This module implements the dflat software sta
                             ;*  needs a few stacks:
                             ;*  - 6502 stack for expression parsing and reent
                             ;*  - dflat runtime stack for things like for/nex
                             ;*  - dflat parameter stack for passing parameter
                             ;*  The two software stacks are implemented in th
                             ;*  with the operator stack growing up from 0 and
                             ;*  runtime stack growing down from 255.  Hopeful
                             ;*  don't meet as there are no checks for this at
                             ;*  purely because I want speed over friendliness
                             ;*  I may come to regret this!
                             ;*  I have also added the only runtime memory all
                             ;*  needed by dflat here.  Humourously I have cal
                             ;*  which is taken from the C language, but it's 
                             ;*  grab some memory after end the of dflat progr
                             ;*  arrays - which of course cannot have storage 
                             ;*  tokenisation time (e.g. because I dimension a
                             ;*  a size from a variable).
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;****************************************
                             ;* Push a byte on to runtime stack
                             ;* A = byte
                             ;****************************************
f721 :                       df_rst_pushByte
f721 : a477             [ 3] 	ldy df_rtstop
f723 : 990005           [ 5] 	sta df_rtstck,y
f726 : 88               [ 2] 	dey
f727 : 8477             [ 3] 	sty df_rtstop
f729 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f72a :                       df_rst_popByte
f72a : a477             [ 3] 	ldy df_rtstop
f72c : c8               [ 2] 	iny
f72d : b90005           [ 4] 	lda df_rtstck,y
f730 : 8477             [ 3] 	sty df_rtstop
f732 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Peek a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f733 :                       df_rst_peekByte
f733 : a477             [ 3] 	ldy df_rtstop
                             	; Look at what is below top of stack
                             	; below means the next address up as
                             	; this stack grows downwards like 6502
f735 : b90105           [ 4] 	lda df_rtstck+1,y
f738 : 60               [ 6] 	rts
                             	
AS65 Assembler for R6502 [1.42].                                     Page  268
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* Push a word on to runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f739 :                       df_rst_pushWord
f739 : a477             [ 3] 	ldy df_rtstop
f73b : 990005           [ 5] 	sta df_rtstck,y
f73e : 88               [ 2] 	dey
f73f : 8a               [ 2] 	txa
f740 : 990005           [ 5] 	sta df_rtstck,y
f743 : 88               [ 2] 	dey
f744 : 8477             [ 3] 	sty df_rtstop
f746 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a word off runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f747 :                       df_rst_popWord
f747 : a477             [ 3] 	ldy df_rtstop
f749 : c8               [ 2] 	iny
f74a : be0005           [ 4] 	ldx df_rtstck,y
f74d : c8               [ 2] 	iny
f74e : b90005           [ 4] 	lda df_rtstck,y
f751 : 8477             [ 3] 	sty df_rtstop
f753 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push a parameter on to parm stack
                             ;* X,A - int
                             ;* Y - type
                             ;****************************************
f754 :                       df_ost_pushParmX
f754 : 8438             [ 3] 	sty tmp_d		; Save Type
f756 : a478             [ 3] 	ldy df_parmtop	; Get stack index
                             	; push high byte first (A)
f758 : 990005           [ 5] 	sta df_rtstck,y
f75b : c8               [ 2] 	iny
                             	; push low byte next (X)
f75c : 8a               [ 2] 	txa
f75d : 990005           [ 5] 	sta df_rtstck,y
f760 : c8               [ 2] 	iny
f761 : a538             [ 3] 	lda tmp_d		; get Type
f763 : 990005           [ 5] 	sta df_rtstck,y
f766 : c8               [ 2] 	iny
                             	; save new top of stack
f767 : 8478             [ 3] 	sty df_parmtop
f769 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push an int on to parm stack
                             ;* X,A - int
                             ;****************************************
f76a :                       df_ost_pushInt
f76a : a003             [ 2] 	ldy #DFST_INT
f76c : d0e6             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push A on to parm stack
                             ;* X,A - int
                             ;****************************************
f76e :                       df_ost_pushIntA
AS65 Assembler for R6502 [1.42].                                     Page  269
-------------------------------- bank\bank0.s --------------------------------

f76e : a003             [ 2] 	ldy #DFST_INT
f770 : aa               [ 2] 	tax
f771 : a900             [ 2] 	lda #0
f773 : f0df             [ 3] 	beq df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a string pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f775 :                       df_ost_pushStr
f775 : a004             [ 2] 	ldy #DFST_STR
f777 : d0db             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a general pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f779 :                       df_ost_pushPtr
f779 : a0ff             [ 2] 	ldy #DFST_PTR
f77b : d0d7             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop parameter from the stack
                             ;* X,A - int
                             ;* Y - type expected
                             ;****************************************
f77d :                       df_ost_popParmX
f77d : 98               [ 2] 	tya
f77e : a478             [ 3] 	ldy df_parmtop
                             	; pull type first
f780 : 88               [ 2] 	dey
f781 : 390005           [ 4] 	and df_rtstck,y
f784 : f00c             [ 3] 	beq df_st_typemismatcherr
                             	; pull low byte first
f786 : 88               [ 2] 	dey
f787 : be0005           [ 4] 	ldx df_rtstck,y
                             	; pull high byte next
f78a : 88               [ 2] 	dey
f78b : b90005           [ 4] 	lda df_rtstck,y
                             	; save new top of stack
f78e : 8478             [ 3] 	sty df_parmtop
f790 : 18               [ 2] 	clc
f791 : 60               [ 6] 	rts
f792 :                       df_st_typemismatcherr
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ;****************************************
                             ;* Return type on top of stack
                             ;* A - type
                             ;****************************************
f794 :                       df_ost_peekType
f794 : a478             [ 3] 	ldy df_parmtop
f796 : b9ff04           [ 4] 	lda df_rtstck-1,y
f799 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop an int off parm stack
                             ;* X,A - int
                             ;****************************************
f79a :                       df_ost_popInt
f79a : a003             [ 2] 	ldy #DFST_INT
AS65 Assembler for R6502 [1.42].                                     Page  270
-------------------------------- bank\bank0.s --------------------------------

f79c : d0df             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             
                             ;****************************************
                             ;* Pop a string pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f79e :                       df_ost_popStr
f79e : a004             [ 2] 	ldy #DFST_STR
f7a0 : d0db             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop a general pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f7a2 :                       df_ost_popPtr
f7a2 : a0ff             [ 2] 	ldy #DFST_PTR
f7a4 : d0d7             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             	
                             ;****************************************
                             ;* Allocate space on the heap
                             ;* X, A = Number of bytes to allocate
                             ;* X, A return address of allocated space
                             ;****************************************
f7a6 :                       df_st_malloc
                             	; save A in Y
f7a6 : a8               [ 2] 	tay
                             	; save old starend
f7a7 : a576             [ 3] 	lda df_starend+1
f7a9 : 48               [ 3] 	pha
f7aa : a575             [ 3] 	lda df_starend
f7ac : 48               [ 3] 	pha
                             	; restore A from Y
f7ad : 98               [ 2] 	tya
                             	; add X,A to starend
f7ae : 48               [ 3] 	pha
f7af : 8a               [ 2] 	txa
f7b0 : 18               [ 2] 	clc
f7b1 : 6575             [ 3] 	adc df_starend
f7b3 : 8575             [ 3] 	sta df_starend
f7b5 : 68               [ 4] 	pla
f7b6 : 6576             [ 3] 	adc df_starend+1
f7b8 : 8576             [ 3] 	sta df_starend+1
                             	; return old starend as start of space
f7ba : 68               [ 4] 	pla
f7bb : aa               [ 2] 	tax
f7bc : 68               [ 4] 	pla
f7bd : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* df_init
                             ;* Initialise dflat language settings
                             ;****************************************
f7be :                       df_init
                             	; Initialise top of memory to default
                             	; This can be overridden by himem command
f7be : a900             [ 2] 	lda #lo(DF_MEMTOP)
f7c0 : 8d1d06           [ 4] 	sta df_memtop
f7c3 : a998             [ 2] 	lda #hi(DF_MEMTOP)
f7c5 : 8d1e06           [ 4] 	sta df_memtop+1
                             
AS65 Assembler for R6502 [1.42].                                     Page  271
-------------------------------- bank\bank0.s --------------------------------

                             	; Init program space
f7c8 : 4ccbf7           [ 3] 	jmp df_clear
                             
                             	; Initialise assembler
                             ;	jsr asm_init
                             
                             ;	rts
                             
                             
                             ;****************************************
                             ;* df_clear
                             ;* Initialise program space
                             ;****************************************
f7cb :                       df_clear
                             	; Start of program space
f7cb : a91f             [ 2] 	lda #lo(DF_PROGSTART)
f7cd : 8566             [ 3] 	sta df_prgstrt
f7cf : 8568             [ 3] 	sta df_prgend
f7d1 : a907             [ 2] 	lda #hi(DF_PROGSTART)
f7d3 : 8567             [ 3] 	sta df_prgstrt+1
f7d5 : 8569             [ 3] 	sta df_prgend+1
                             	; Terminal value in prog space
f7d7 : a900             [ 2] 	lda #0
f7d9 : a8               [ 2] 	tay
f7da : 9166             [ 5] 	sta (df_prgstrt),y
                             	; No variables - zero the count
f7dc : 8572             [ 3] 	sta df_varcnt
                             
                             	; Variable value table
                             	; Grows down from mem top
f7de : ad1d06           [ 4] 	lda df_memtop
f7e1 : 856e             [ 3] 	sta df_vvtstrt
f7e3 : 8570             [ 3] 	sta df_vvtend
f7e5 : ad1e06           [ 4] 	lda df_memtop+1
f7e8 : 856f             [ 3] 	sta df_vvtstrt+1
f7ea : 8571             [ 3] 	sta df_vvtend+1
                             
                             	; Variable name table
                             	; Grows down from mem top
f7ec : a56e             [ 3] 	lda df_vvtstrt
f7ee : 856a             [ 3] 	sta df_vntstrt
f7f0 : 856c             [ 3] 	sta df_vntend
f7f2 : a56f             [ 3] 	lda df_vvtstrt+1
f7f4 : 856b             [ 3] 	sta df_vntstrt+1
f7f6 : 856d             [ 3] 	sta df_vntend+1
                             
                             	; String accumulator
f7f8 : a91f             [ 2] 	lda #lo(scratch)
f7fa : 857b             [ 3] 	sta df_sevalptr
f7fc : a906             [ 2] 	lda #hi(scratch)
f7fe : 857c             [ 3] 	sta df_sevalptr+1
                             
f800 : 60               [ 6] 	rts
                             
f801 :                       mod_sz_dflat_e
                             
                             	include "dflat/error.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
AS65 Assembler for R6502 [1.42].                                     Page  272
-------------------------------- bank\bank0.s --------------------------------

                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.S
                             ;*  Error handling module.
                             ;*  Whan an error is thrown using BRK, this modul
                             ;*  displaying the error plus any associated line
                             ;*  if it was running a program.  It then resets 
                             ;*  settings and takes the system back to program
                             ;*  mode.  The message uses the general IO handle
                             ;*  output must be set to the right place else fo
                             ;*	the error message will be written to tape!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
AS65 Assembler for R6502 [1.42].                                     Page  273
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             
                             
                             ; Error message table, each msg null terminated
f801 :                       df_tk_errortab
f801 : 4f6b00                	db	"Ok", 0
f804 : 53796e74617800        	db	"Syntax", 0
f80b : 5479706500            	db	"Type", 0
f810 : 44696d00              	db	"Dim", 0
f814 : 4e6f2072657065..      	db	"No repeat", 0
f81e : 4e6f206465666e00      	db	"No defn", 0
f826 : 5061726d00            	db	"Parm", 0
f82b : 456e64656400          	db	"Ended", 0
f831 : 4e6f20656e6469..      	db	"No endif", 0
f83a : 4e6f20696600          	db	"No if", 0
f840 : 4e6f20666f7200        	db	"No for", 0
f847 : 4e6f7420666f75..      	db	"Not found", 0
f851 : 546f6f206c6f6e..      	db	"Too long", 0
f85a : 427265616b00          	db	"Break", 0
f860 : 4e6f206461746100      	db	"No data", 0
f868 : 4e6f207768696c..      	db	"No while", 0
f871 : 4e6f206c696e6500      	db	"No line", 0
f879 : 4e6f2072657475..      	db	"No return ", 0
f884 : 41626f7274656400      	db	"Aborted", 0
f88c : 426f756e647300        	db	"Bounds", 0
f893 : 4e6f206f726700        	db	"No org", 0
f89a : 00                    	db	0
                             
f89b :                       df_tk_error_inline
f89b : 20696e206c696e..      	db	" in line ", 0
f8a5 :                       df_tk_error_atpos
f8a5 : 20706f732000          	db	" pos ", 0
f8ab :                       df_tk_error_error
f8ab : 206572726f7200        	db	" error", 0
                             
                             ;****************************************
                             ;* df_trap_error
                             ;* Show an error message
                             ;* errno is error number
                             ;* currlin = Line number
                             ;* exeoff = offset
                             ;* at the end jump to program editor
                             ;****************************************
f8b2 :                       df_trap_error
                             	; set IO back to normal
f8b2 : 20f7c4           [ 6] 	jsr init_via0
f8b5 : 20fec3           [ 6] 	jsr io_set_default
f8b8 : 58               [ 2] 	cli
                             
f8b9 : a901             [ 2] 	lda #lo(df_tk_errortab)
f8bb : 85a2             [ 3] 	sta df_tmpptra
f8bd : a9f8             [ 2] 	lda #hi(df_tk_errortab)
f8bf : 85a3             [ 3] 	sta df_tmpptra+1
f8c1 : a65e             [ 3] 	ldx errno				; 0 or >=128 goes to monitor
f8c3 : f002             [ 3] 	beq df_trap_go_monitor
f8c5 : 1003             [ 3] 	bpl df_trap_normal
f8c7 :                       df_trap_go_monitor
f8c7 : 4c40f9           [ 3] 	jmp df_trap_monitor
f8ca :                       df_trap_normal
f8ca : a000             [ 2] 	ldy #0
f8cc :                       df_show_err_find
AS65 Assembler for R6502 [1.42].                                     Page  274
-------------------------------- bank\bank0.s --------------------------------

                             	; If on a zero, then error table exhausted
                             	; so drop in to the monitor
f8cc : b1a2             [ 5] 	lda (df_tmpptra),y
f8ce : f070             [ 4] 	beq df_trap_monitor
                             	; Skip over this error text including zero termi
f8d0 :                       df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f8d6 : b1a2             [ 5] 	lda (df_tmpptra),y
f8d8 : d0f6             [ 3] 	bne df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f8e0 : ca               [ 2] 	dex
f8e1 : d0e9             [ 3] 	bne df_show_err_find
                             	; Error message found
f8e3 : a6a2             [ 3] 	ldx df_tmpptra
f8e5 : a5a3             [ 3] 	lda df_tmpptra+1
f8e7 : 2078c4           [ 6] 	jsr io_print_line
f8ea : a2ab             [ 2] 	ldx #lo(df_tk_error_error)
f8ec : a9f8             [ 2] 	lda #hi(df_tk_error_error)
f8ee : 2078c4           [ 6] 	jsr io_print_line
                             	; if line number <> 0 then print it
f8f1 : a001             [ 2] 	ldy #DFTK_LINNUM
f8f3 : b187             [ 5] 	lda (df_currlin),y
f8f5 : aa               [ 2] 	tax
f8f6 : c8               [ 2] 	iny
f8f7 : b187             [ 5] 	lda (df_currlin),y
f8f9 : d004             [ 3] 	bne df_show_err_linnum
f8fb : e000             [ 2] 	cpx #0x00
f8fd : f019             [ 4] 	beq df_show_err_fin
f8ff :                       df_show_err_linnum
                             	_println df_tk_error_inline
                             
f914 : 18               [ 2] 	clc
f915 : 20e5c3           [ 6] 	jsr print_a_to_d
f918 :                       df_show_err_fin
f918 : a489             [ 3] 	ldy df_exeoff
f91a : f01d             [ 3] 	beq df_show_err_done
                             	_println df_tk_error_atpos
                             
f931 : 98               [ 2] 	tya
f932 : aa               [ 2] 	tax
f933 : a900             [ 2] 	lda #0
f935 : 18               [ 2] 	clc
f936 : 20e5c3           [ 6] 	jsr print_a_to_d
f939 :                       df_show_err_done
f939 : 2068c1           [ 6] 	jsr utilPrintCRLF
f93c : 18               [ 2] 	clc
                             	; back to editor
f93d : 4c08e1           [ 3] 	jmp df_pg_dflat
                             
                             
                             ; For unknown errors, jump to monitor
f940 :                       df_trap_monitor
                             	; Print PC
                             	_println_low df_msg_pc
                             
f947 : a564             [ 3] 	lda df_brkpc+1
f949 : 2070c1           [ 6] 	jsr utilPrintA
f94c : a563             [ 3] 	lda df_brkpc
f94e : 2070c1           [ 6] 	jsr utilPrintA
f951 : 2060c1           [ 6] 	jsr utilPrintSPC
AS65 Assembler for R6502 [1.42].                                     Page  275
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; Print A
                             	_println_low df_msg_acc
                             
f95b : a53d             [ 3] 	lda num_a
f95d : 2070c1           [ 6] 	jsr utilPrintA
f960 : 2060c1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print X
                             	_println_low df_msg_xreg
                             
f96a : a53e             [ 3] 	lda num_a+1
f96c : 2070c1           [ 6] 	jsr utilPrintA
f96f : 2060c1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print Y
                             	_println_low df_msg_yreg
                             
f979 : a53f             [ 3] 	lda num_a+2
f97b : 2070c1           [ 6] 	jsr utilPrintA
f97e : 2068c1           [ 6] 	jsr utilPrintCRLF
                             
f981 : 2042e9           [ 6] 	jsr df_rt_monitor
                             	; back to editor
f984 : 4c08e1           [ 3] 	jmp df_pg_dflat
                             
f987 :                       df_msg_pc
f987 : 50433a00              	db "PC:\x0"
f98b :                       df_msg_acc
f98b : 413a00                	db "A:\x0"
f98e :                       df_msg_xreg
f98e : 583a00                	db "X:\x0"
f991 :                       df_msg_yreg
f991 : 593a00                	db "Y:\x0"
                             
                             	include	"dflat/asm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*  This is the main controller code file for the
                             ;*  This file includes all the required source fi
                             ;*	in addition to dflat.s
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
f994 :                       mod_sz_asm_s
                             
                             	;	dflat.s is already included, so just the addit
                             	include "dflat/asm.i"
                             ;* Addressing modes - 15 in total, 16 with direct
                             ;*  0   Nothing
                             ;*	1 	Absolute			XXX <word>
                             ;*	2 	Absolute,X			XXX <word>,x
AS65 Assembler for R6502 [1.42].                                     Page  276
-------------------------------- bank\bank0.s --------------------------------

                             ;*	3 	Absolute,Y			XXX <word>,y
                             ;*	4	Zeropage			XXX	<byte>
                             ;*	5	Zeropage,X			XXX	<byte>,x
                             ;*	6	Zeropage,Y			XXX	<byte>,y
                             ;*	7	Indirect			XXX	(<byte>)
                             ;*	8	Indirect,X			XXX	(<byte>,x)
                             ;*	9	Indirect,Y			XXX	(<byte>),y
                             ;*	A	Absolute indirect	XXX	(<word>)
                             ;*	B	Absolute indirect,x	XXX	(<word>,x)
                             ;*	C	Immediate			XXX #<byte>
                             ;*	D	Accumulator			XXX (same as implied)
                             ;*	E	Implied				XXX
                             ;*	F	Relative			XXX	<byte>
                             ;*	10	Assembler directive	XXX .......
                             
0000 =                       AM_NONE		= 0
0001 =                       AM_ABS	 	= 1
0002 =                       AM_ABSX		= 2
0003 =                       AM_ABSY		= 3
0004 =                       AM_ZP		= 4
0005 =                       AM_ZPX		= 5
0006 =                       AM_ZPY		= 6
0007 =                       AM_ZPIND	= 7
0008 =                       AM_ZPINDX	= 8
0009 =                       AM_ZPINDY	= 9
000a =                       AM_ABSIND	= 10
000b =                       AM_ABSINDX	= 11
000c =                       AM_IMM		= 12
000d =                       AM_ACC		= 13
000d =                       AM_IMP		= AM_ACC
000f =                       AM_REL		= 15
0010 =                       AM_DIR		= 16
                             
                             
                             
                             	include "dflat/tkasm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*	Module that implements tokenisation of the ass
                             ;* 	The assembler is an extension to dflat, almos
                             ;*	almost a language within a language, as it has
                             ;*	own symbol tables to allow adding new keywords
                             ;*	running out of space in the main symtol table 
                             ;*	for normal 6502 asembler syntax which is at od
                             ;*	regular dflat.
                             ;*	Hence, this module has to do its own additiona
                             ;*	to tokenise the assembly.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f994 :                       mod_sz_tkasm_s
                             
AS65 Assembler for R6502 [1.42].                                     Page  277
-------------------------------- bank\bank0.s --------------------------------

                             	; if didn't find regular keywords then try assen
f994 :                       df_tk_asm_parse_command
                             ;	; skip the white space after the dot
                             ;	jsr df_tk_skip_ws
                             	; find the assembler symbol
f994 : 20c9f9           [ 6] 	jsr df_tk_asm_matchtok
                             	; if no match with asm token they maybe a label?
f997 : b01d             [ 3] 	bcs df_tk_asm_label
f999 :                       df_tk_asm_found_command
                             	; Before asm keyword, put the asm handler token
f999 : a997             [ 2] 	lda #DFRT_ASM
f99b : 205ed8           [ 6] 	jsr df_tk_put_tok
                             	; Set the MSB of found symbol index
f99e : a584             [ 3] 	lda df_symoff
f9a0 : 0980             [ 2] 	ora #0x80
f9a2 : 205ed8           [ 6] 	jsr df_tk_put_tok
                             	; check the first addressing mode code
                             	; remember to jump over the offset byte
f9a5 : a001             [ 2] 	ldy #1
f9a7 : b182             [ 5] 	lda (df_symtab),y
                             	; Directive?
f9a9 : c910             [ 2] 	cmp #AM_DIR
f9ab : d006             [ 3] 	bne df_tk_asm_mnemonic
                             	; if directive then process it
f9ad : a584             [ 3] 	lda df_symoff
f9af : 4c20fa           [ 3] 	jmp df_tk_asm_exec_parser
f9b2 :                       df_tk_asm_parse_command_err
f9b2 : 60               [ 6] 	rts
f9b3 :                       df_tk_asm_mnemonic
                             	; for all nmemonics, work out the addressing mod
f9b3 : 4c2ffa           [ 3] 	jmp df_tk_asm_addr_mode
                             
                             ; try to tokenise a label
f9b6 :                       df_tk_asm_label
                             	; labels must start with '.'
f9b6 : a92e             [ 2] 	lda #'.'
f9b8 : 20c5d8           [ 6] 	jsr df_tk_expect
f9bb : b0f5             [ 3] 	bcs df_tk_asm_parse_command_err
                             	; Before asm label, put the asm handler token
f9bd : a997             [ 2] 	lda #DFRT_ASM
f9bf : 205ed8           [ 6] 	jsr df_tk_put_tok
f9c2 : e67d             [ 5] 	inc df_linoff			;Skip the '.'
                             	; Tokenise a variable
f9c4 : a900             [ 2] 	lda #0
f9c6 : 4c89d9           [ 3] 	jmp df_tk_var
                             
                             ;****************************************
                             ;* df_tk_asm_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;****************************************
f9c9 :                       df_tk_asm_matchtok
                             	; Start at token symbols beginning
f9c9 : a9ab             [ 2] 	lda #lo(df_asm_tokensyms)
f9cb : 8582             [ 3] 	sta df_symtab
f9cd : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
f9cf : 8583             [ 3] 	sta df_symtab+1
f9d1 : a900             [ 2] 	lda #0
f9d3 : 8584             [ 3] 	sta df_symoff
AS65 Assembler for R6502 [1.42].                                     Page  278
-------------------------------- bank\bank0.s --------------------------------

f9d5 : a200             [ 2] 	ldx #0
f9d7 :                       df_tk_asm_checknexttok
                             	; From the line buffer current pointer
                             	; Check for a token match
f9d7 : a47d             [ 3] 	ldy df_linoff
f9d9 :                       df_tk_asm_checktokch
                             	; Get symtable char
f9d9 : a182             [ 6] 	lda (df_symtab,x)
                             	; if less than ascii ' ' then reached end of
                             	; this symbol and everything matched so found!
f9db : c920             [ 2] 	cmp #' '
f9dd : 9033             [ 4] 	bcc df_tk_asm_symfound
                             	; Else compare with current line buffer char
f9df : d90004           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
f9e2 : d00a             [ 3] 	bne df_tk_asm_symnomatch
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
f9ea : c8               [ 2] 	iny
f9eb : 4cd9f9           [ 3] 	jmp df_tk_asm_checktokch
f9ee :                       df_tk_asm_symnomatch
                             	; Increment symbol counter to next symbol
f9ee : e684             [ 5] 	inc df_symoff
f9f0 :                       df_tk_asm_symnextentry
f9f0 : a182             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is < ' '
f9f2 : c920             [ 2] 	cmp #' '
f9f4 : 9009             [ 3] 	bcc  df_tk_asm_foundsymend
                             	_incZPWord df_symtab
                             
f9fc : 4cf0f9           [ 3] 	jmp df_tk_asm_symnextentry
f9ff :                       df_tk_asm_foundsymend
                             	; Now at the offset to jump over addressing
                             	; mode and opcode values. Add offset to ptr
                             	; remember than C is clear and A has offset
                             	; set C so always jump over the offset
f9ff : 38               [ 2] 	sec
fa00 : 6582             [ 3] 	adc df_symtab
fa02 : 8582             [ 3] 	sta df_symtab
fa04 : a583             [ 3] 	lda df_symtab+1
fa06 : 6900             [ 2] 	adc #0
fa08 : 8583             [ 3] 	sta df_symtab+1
                             	; If next char is not zero then
                             	; try and match with line buffer
fa0a : a182             [ 6] 	lda (df_symtab,x)
fa0c : d0c9             [ 4] 	bne df_tk_asm_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; Zero symbol counter
fa0e : 8584             [ 3] 	sta df_symoff		; Relies on A=0
                             	; Set C to indicate error (no match)
fa10 : 38               [ 2] 	sec
fa11 : 60               [ 6] 	rts
fa12 :                       df_tk_asm_symfound
                             	; Full match with keyword in symtable but
                             	; check the next buffer char is not alphanum
                             	; as this could be part of a symbol
                             	; Point to next buffer char in any case
                             	; y already points to char after keyword
fa12 : b90004           [ 4] 	lda df_linbuff,y
AS65 Assembler for R6502 [1.42].                                     Page  279
-------------------------------- bank\bank0.s --------------------------------

                             	; if it is an alphanum then
fa15 : 20a3d8           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
fa18 : b0d4             [ 4] 	bcs df_tk_asm_symnomatch
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
fa1a : 847d             [ 3] 	sty df_linoff
fa1c : a584             [ 3] 	lda df_symoff
                             	; df_symtab points to the offset
fa1e :                       df_tk_asm_addr_mode_ok
fa1e : 18               [ 2] 	clc
fa1f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_asm_exec_parser
                             ;* Execute parse routine for this statement
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
fa20 :                       df_tk_asm_exec_parser
fa20 : 0a               [ 2] 	asl a
fa21 : aa               [ 2] 	tax
fa22 : bddcff           [ 4] 	lda df_tk_asm_tokenjmp,x
fa25 : 85a2             [ 3] 	sta df_tmpptra
fa27 : bdddff           [ 4] 	lda df_tk_asm_tokenjmp+1,x
fa2a : 85a3             [ 3] 	sta df_tmpptra+1
fa2c : 6ca200           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_asm_addr_mode
                             ;* Tokenise the addressing mode
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
fa2f :                       df_tk_asm_addr_mode
fa2f : 20afd8           [ 6] 	jsr df_tk_skip_ws		;Skip whitespace
fa32 : c900             [ 2] 	cmp #0					;End of line?
fa34 : f0e8             [ 3] 	beq df_tk_asm_addr_mode_ok
fa36 : c93a             [ 2] 	cmp #':'				;End of statement?
fa38 : f0e4             [ 3] 	beq df_tk_asm_addr_mode_ok
fa3a : a923             [ 2] 	lda #'#'				; Check for immediate
fa3c : 20d3d8           [ 6] 	jsr df_tk_expect_tok
fa3f : b003             [ 3] 	bcs df_tk_asm_addr_mode_1
fa41 : 4c64fa           [ 3] 	jmp df_tk_imm		; Process immediate
fa44 :                       df_tk_asm_addr_mode_1
fa44 : a928             [ 2] 	lda #'('				; One of indirect modes?
fa46 : 20d3d8           [ 6] 	jsr df_tk_expect_tok
fa49 : b003             [ 3] 	bcs df_tk_asm_addr_mode_2
fa4b : 4c67fa           [ 3] 	jmp df_tk_indirect
fa4e :                       df_tk_asm_addr_mode_2
                             	; here just a regular address
                             	; Just one expression expected
fa4e : 20d0da           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
fa51 : a92c             [ 2] 	lda #','
fa53 : 20d3d8           [ 6] 	jsr df_tk_expect_tok
fa56 : b0c6             [ 3] 	bcs df_tk_asm_addr_mode_ok
                             	; must be x or y
fa58 : a978             [ 2] 	lda #'x'
fa5a : 20d3d8           [ 6] 	jsr df_tk_expect_tok
fa5d : 90bf             [ 3] 	bcc df_tk_asm_addr_mode_ok
AS65 Assembler for R6502 [1.42].                                     Page  280
-------------------------------- bank\bank0.s --------------------------------

                             	; got to here, must be y
fa5f : a979             [ 2] 	lda #'y'
fa61 : 4cded8           [ 3] 	jmp df_tk_expect_tok_err
                             	
                             	
                             ;* Tokenise immediate addressing mode	
fa64 :                       df_tk_imm
                             	; Just one expression expected
fa64 : 4cd0da           [ 3] 	jmp df_tk_expression
                             	
                             ;* Tokenise indirect
fa67 :                       df_tk_indirect
                             	; Just one expression expected
fa67 : 20d0da           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
fa6a : a92c             [ 2] 	lda #','
fa6c : 20d3d8           [ 6] 	jsr df_tk_expect_tok
                             	; if not then might be indirect Y
fa6f : b00a             [ 3] 	bcs df_tk_indirect_y
                             	; Else must have be indirect "x)"
fa71 : a978             [ 2] 	lda #'x'
fa73 : 20ded8           [ 6] 	jsr df_tk_expect_tok_err
fa76 : a929             [ 2] 	lda #')'
fa78 : 4cded8           [ 3] 	jmp df_tk_expect_tok_err
                             	
fa7b :                       df_tk_indirect_y
                             	; Definitely has a close bracket
fa7b : a929             [ 2] 	lda #')'
fa7d : 20ded8           [ 6] 	jsr df_tk_expect_tok_err
                             	; Is there a comma after the expression
fa80 : a92c             [ 2] 	lda #','
fa82 : 20d3d8           [ 6] 	jsr df_tk_expect_tok
fa85 : b005             [ 3] 	bcs df_tk_indirect_done
                             	; if comma then must be indirect y
fa87 : a979             [ 2] 	lda #'y'
fa89 : 4cded8           [ 3] 	jmp df_tk_expect_tok_err
                             
fa8c :                       df_tk_indirect_done
fa8c : 18               [ 2] 	clc
fa8d : 60               [ 6] 	rts
                             	
                             
                             	
                             
                             
                             ;************************************************
                             ;*           TOKENISATION SUBROUTINES
                             ;************************************************
                             
                             
                             ;* HANDLE DIRECTIVES
                             
                             ;* All tokenisation is part of regular toksub rou
                             
                             
                             
                             
                             
                             
                             
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  281
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
fa8e :                       mod_sz_tkasm_e
                             
                             
                             	include "dflat/rtasm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTASM.S
                             ;*  Module that implements the runtime execution 
                             ;*  assembler.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
fa8e :                       mod_sz_rtasm_s
                             
fa8e :                       df_rt_asm_assemble
                             	; check if >=0x80 (directive or mnemonic)
fa8e : a489             [ 3] 	ldy df_exeoff
fa90 : b187             [ 5] 	lda (df_currlin),y
fa92 : 1009             [ 3] 	bpl df_rt_asm_do_label
fa94 : 20a1fa           [ 6] 	jsr df_rt_asm_command
fa97 : 208ffc           [ 6] 	jsr df_rt_asm_printCR
fa9a : 4ca0fa           [ 3] 	jmp df_rt_asm_assemble_done
fa9d :                       df_rt_asm_do_label
fa9d : 20c5fa           [ 6] 	jsr df_rt_asm_label
faa0 :                       df_rt_asm_assemble_done
                             	; any clean up here
faa0 : 60               [ 6] 	rts
                             
                             ; Jump to mnemonic or 
                             ; directive with index in A ignoring MSB
faa1 :                       df_rt_asm_command
faa1 : 297f             [ 2] 	and #0x7f
faa3 : 48               [ 3] 	pha
faa4 : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page  282
-------------------------------- bank\bank0.s --------------------------------

                             	; Point to Xth symtable entry of addr modes and 
faa5 : 205dfd           [ 6] 	jsr df_rt_asm_skip_to_sym
                             
                             	; Get first addressing mode (ignoring offset byt
faa8 : a001             [ 2] 	ldy #1
faaa : b182             [ 5] 	lda (df_symtab),y
                             	; is it a directive?
faac : c910             [ 2] 	cmp #AM_DIR
                             	; if directive
faae : f003             [ 3] 	beq df_rt_asm_dir
                             	; Else must be a normal mnemonic
fab0 : 4c8bfb           [ 3] 	jmp df_rt_asm_mnem
                             
                             ; Jump to the appropriate directive
fab3 :                       df_rt_asm_dir
                             	; Get the index and *2
                             	; to get jump vector
fab3 : 68               [ 4] 	pla
fab4 : 0a               [ 2] 	asl a
fab5 : aa               [ 2] 	tax
                             	; jump over directive code
fab6 : e689             [ 5] 	inc df_exeoff
                             	; jump to directive handler
fab8 : bde6ff           [ 4] 	lda df_rt_asm_tokenjmp,x
fabb : 85a2             [ 3] 	sta df_tmpptra
fabd : bde7ff           [ 4] 	lda df_rt_asm_tokenjmp+1,x
fac0 : 85a3             [ 3] 	sta df_tmpptra+1
fac2 : 6ca200           [ 6] 	jmp (df_tmpptra)
                             
                             ; Process label
                             ; Set the label to the PC
fac5 :                       df_rt_asm_label
                             	; Get the address of the variable in A,X
fac5 : 203cee           [ 6] 	jsr df_rt_generate_lvar
fac8 : 869f             [ 3] 	stx df_asmoprnd
faca : 85a0             [ 3] 	sta df_asmoprnd+1
                             	; Assign to value of PC
facc : a000             [ 2] 	ldy #0
face : a59a             [ 3] 	lda df_asmpc
fad0 : 919f             [ 5] 	sta (df_asmoprnd),y
fad2 : a59b             [ 3] 	lda df_asmpc+1
fad4 : c8               [ 2] 	iny
fad5 : 919f             [ 5] 	sta (df_asmoprnd),y
fad7 : 60               [ 6] 	rts	
                             
                             ;* Set the code origin
fad8 :                       df_rt_asm_org
                             	; Get the address from expression
fad8 : 203afd           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to PC
fadb : a59f             [ 3] 	lda df_asmoprnd
fadd : 859a             [ 3] 	sta df_asmpc
fadf : a5a0             [ 3] 	lda df_asmoprnd+1
fae1 : 859b             [ 3] 	sta df_asmpc+1
fae3 : a903             [ 2] 	lda #3
fae5 : 85a1             [ 3] 	sta df_asmlen
fae7 : 4c51fc           [ 3] 	jmp df_rt_asm_printPC
                             
                             ; Set the assembly option
                             ; Bit 0 set = Print code to console
                             ; But 1 set = Write code to memory
                             ; Be sure to run 2 non-write passes
AS65 Assembler for R6502 [1.42].                                     Page  283
-------------------------------- bank\bank0.s --------------------------------

                             ; before a write pass
                             ; First pass may result in ZP used a lot
                             ; Second pass resolves forward refs to ABS
                             ; Final write pass then stores the code
faea :                       df_rt_asm_opt
                             	; Get the value from expression
faea : 203afd           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to OPT
faed : a59f             [ 3] 	lda df_asmoprnd
faef : 859c             [ 3] 	sta df_asmopt
faf1 : 60               [ 6] 	rts
                             
                             ; dw and db handled here
                             ; keep going through comma separated
                             ; list and write bytes or words
                             ; string expansion also handled
faf2 :                       df_rt_asm_db
faf2 : a902             [ 2] 	lda #2
faf4 : 2c                    	db	0x2c			; BIT abs to ignore next 2 bytes
faf5 :                       df_rt_asm_dw
faf5 : a903             [ 2] 	lda #3
faf7 :                       df_rt_asm_db_start
faf7 : 85a1             [ 3] 	sta df_asmlen
faf9 : 2051fc           [ 6] 	jsr df_rt_asm_printPC
fafc : 206cfc           [ 6] 	jsr df_rt_asm_printSPC
faff :                       df_rt_asm_data
faff : 201ce2           [ 6] 	jsr df_rt_neval		; Evaluate expression
fb02 : 2094f7           [ 6] 	jsr df_ost_peekType	; What is the type
fb05 : 2904             [ 2] 	and #DFST_STR
fb07 : d00d             [ 3] 	bne df_rt_asm_string; If string
fb09 : 209af7           [ 6] 	jsr df_ost_popInt	; else get number in A,X
fb0c : 869f             [ 3] 	stx df_asmoprnd		; store low value
fb0e : 85a0             [ 3] 	sta df_asmoprnd+1	; store high value
fb10 : 203efb           [ 6] 	jsr df_rt_asm_data_write
fb13 : 4c33fb           [ 3] 	jmp df_rt_asm_data_next
fb16 :                       df_rt_asm_string
fb16 : 20a2f7           [ 6] 	jsr df_ost_popPtr	; pop string pointer
fb19 : 86a2             [ 3] 	stx df_tmpptra		; save pointer to tmpa
fb1b : 85a3             [ 3] 	sta df_tmpptra+1
fb1d :                       df_rt_asm_string_ch
fb1d : a000             [ 2] 	ldy #0
fb1f : b1a2             [ 5] 	lda (df_tmpptra),y	; Get string char, 0=done
fb21 : f010             [ 3] 	beq df_rt_asm_data_next
fb23 : 859f             [ 3] 	sta df_asmoprnd		; Save as operand
fb25 : 84a0             [ 3] 	sty df_asmoprnd+1	; High is always zero
fb27 : 203efb           [ 6] 	jsr df_rt_asm_data_write
                             	_incZPWord df_tmpptra
                             
fb30 : 4c1dfb           [ 3] 	jmp df_rt_asm_string_ch
fb33 :                       df_rt_asm_data_next
fb33 : 2072ee           [ 6] 	jsr df_rt_eos		; End?
fb36 : b005             [ 3] 	bcs df_rt_asm_data_done
fb38 : e689             [ 5] 	inc df_exeoff		; Jump over ','
fb3a : 4cfffa           [ 3] 	jmp df_rt_asm_data
fb3d :                       df_rt_asm_data_done
fb3d : 60               [ 6] 	rts	
                             
                             ; Write one db or dw value
                             ; Check for value too big for db
                             ; Advance PC by df_asmlen
fb3e :                       df_rt_asm_data_write
fb3e : 2075fc           [ 6] 	jsr df_rt_asm_printOPR
AS65 Assembler for R6502 [1.42].                                     Page  284
-------------------------------- bank\bank0.s --------------------------------

fb41 :                       df_rt_asm_data_write_skip1
fb41 : a902             [ 2] 	lda #2
fb43 : 259c             [ 3] 	and df_asmopt
fb45 : f017             [ 3] 	beq df_rt_asm_data_write_skip2
fb47 : a59f             [ 3] 	lda df_asmoprnd
fb49 : a000             [ 2] 	ldy #0
fb4b : 919a             [ 5] 	sta (df_asmpc),y
fb4d : c8               [ 2] 	iny
fb4e : a902             [ 2] 	lda #2
fb50 : c5a1             [ 3] 	cmp df_asmlen
fb52 : d006             [ 3] 	bne df_rt_asm_data_write_hi
fb54 : a5a0             [ 3] 	lda df_asmoprnd+1
fb56 : d014             [ 3] 	bne df_rt_asm_data_write_err
fb58 : f004             [ 3] 	beq df_rt_asm_data_write_skip2
fb5a :                       df_rt_asm_data_write_hi
fb5a : a5a0             [ 3] 	lda df_asmoprnd+1
fb5c : 919a             [ 5] 	sta (df_asmpc),y
fb5e :                       df_rt_asm_data_write_skip2
fb5e : a4a1             [ 3] 	ldy df_asmlen
fb60 : 88               [ 2] 	dey					; Add 1 less!
fb61 : 98               [ 2] 	tya
fb62 : 18               [ 2] 	clc
fb63 : 659a             [ 3] 	adc df_asmpc
fb65 : 859a             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
fb69 : e69b             [ 5] 	inc df_asmpc+1
fb6b : 60               [ 6] 	rts
fb6c :                       df_rt_asm_data_write_err	
                             	SWBRK DFERR_QUANTITY
                             
                             	
                             	
fb6e :                       df_rt_asm_ds
fb6e : 2051fc           [ 6] 	jsr df_rt_asm_printPC
fb71 : 206cfc           [ 6] 	jsr df_rt_asm_printSPC
                             	; Get the address from expression
fb74 : 203afd           [ 6] 	jsr df_rt_asm_get_operand
                             	; ADD this in to PC
fb77 : 18               [ 2] 	clc
fb78 : a59f             [ 3] 	lda df_asmoprnd
fb7a : 659a             [ 3] 	adc df_asmpc
fb7c : 859a             [ 3] 	sta df_asmpc
fb7e : a5a0             [ 3] 	lda df_asmoprnd+1
fb80 : 659b             [ 3] 	adc df_asmpc+1
fb82 : 859b             [ 3] 	sta df_asmpc+1
                             	; len=1 for printing
fb84 : a903             [ 2] 	lda #3
fb86 : 85a1             [ 3] 	sta df_asmlen
fb88 : 4c75fc           [ 3] 	jmp df_rt_asm_printOPR
                             
                             
                             ; Process a normal assembler mnemonic
fb8b :                       df_rt_asm_mnem
fb8b : 68               [ 4] 	pla				; Throw away previous temp variable
                             	; jump over mnemonic code
fb8c : e689             [ 5] 	inc df_exeoff
                             	; work out the addressing mode and get operand
fb8e : 20bdfc           [ 6] 	jsr df_rt_asm_addrmode
                             
fb91 :                       df_rt_asm_mnem_try
fb91 : a59d             [ 3] 	lda df_asmadmd					; With the addressing mode
AS65 Assembler for R6502 [1.42].                                     Page  285
-------------------------------- bank\bank0.s --------------------------------

fb93 : 2045fd           [ 6] 	jsr df_rt_asm_find_addr_mode	; Find it for this 
fb96 : c900             [ 2] 	cmp #AM_NONE					; Exists?
fb98 : d014             [ 3] 	bne	df_rt_asm_mnem_chk			; If does then check it
fb9a :                       df_rt_asm_check_alt
fb9a : a69d             [ 3] 	ldx df_asmadmd					; Use ad mode as an index
fb9c : bd9afd           [ 4] 	lda df_asm_altaddrmode,x		; Else get alternate
fb9f : c900             [ 2] 	cmp #AM_NONE					; Is there an alternate?
fba1 : f02d             [ 3] 	beq df_rt_asm_mnem_err			; If no then error
fba3 : 2045fd           [ 6] 	jsr df_rt_asm_find_addr_mode	; Check does mode e
fba6 : c900             [ 2] 	cmp #AM_NONE					; this instruction
fba8 : f026             [ 3] 	beq df_rt_asm_mnem_err			; if no then error
fbaa : c59d             [ 3] 	cmp df_asmadmd					; Same as the original?
fbac : f00e             [ 3] 	beq df_rt_asm_mnem_done			; if so then done
fbae :                       df_rt_asm_mnem_chk
fbae : 859d             [ 3] 	sta df_asmadmd					; This is the final mode
fbb0 : aa               [ 2] 	tax								; Get the length
fbb1 : bd89fd           [ 4] 	lda df_asm_length,x
fbb4 : a6a0             [ 3] 	ldx df_asmoprnd+1				; Is operand hi non-zero?
fbb6 : f004             [ 3] 	beq df_rt_asm_mnem_done			; If zero then done
fbb8 : c903             [ 2] 	cmp #3							; Else must be len 3?
fbba : d0de             [ 3] 	bne df_rt_asm_check_alt			; Try an alternate
fbbc :                       df_rt_asm_mnem_done
fbbc : a69d             [ 3] 	ldx df_asmadmd					; Get the final mode index
fbbe : bd89fd           [ 4] 	lda df_asm_length,x				; Get the length
fbc1 : 85a1             [ 3] 	sta df_asmlen
fbc3 : a59d             [ 3] 	lda df_asmadmd					; Get the final mode
fbc5 : 2045fd           [ 6] 	jsr df_rt_asm_find_addr_mode	; Get the Y index o
                             	; Ok now get the opcode
fbc8 : c8               [ 2] 	iny
fbc9 : b182             [ 5] 	lda (df_symtab),y
fbcb : 859e             [ 3] 	sta df_asmopcde
                             	; Now have all information to assemble
fbcd : 4cd2fb           [ 3] 	jmp df_rt_asm_encode
                             	
fbd0 :                       df_rt_asm_mnem_err
                             	SWBRK DFERR_SYNTAX
                             
                             	
                             ; Take assembler data and encode it
                             ; depending on the current option
                             ; Option 0 = No write
                             ; Option 1 = No write, Print
                             ; Option 2 = Write
                             ; Option 3 = Write, Print
fbd2 :                       df_rt_asm_encode
                             	; Only write the code if bit 1=1
fbd2 : a902             [ 2] 	lda #0x02
fbd4 : 259c             [ 3] 	and df_asmopt
fbd6 : f059             [ 4] 	beq df_rt_asm_encode_print
fbd8 : a000             [ 2] 	ldy #0
fbda : a59e             [ 3] 	lda df_asmopcde
fbdc : 919a             [ 5] 	sta (df_asmpc),y
fbde : a5a1             [ 3] 	lda df_asmlen
fbe0 : c901             [ 2] 	cmp #1						; No operand
fbe2 : f04d             [ 4] 	beq df_rt_asm_encode_print
fbe4 : c903             [ 2] 	cmp #3						; Word operand
fbe6 : f03f             [ 4] 	beq df_rt_asm_encode_writeword
                             	; If here then byte operand
                             	; Check relative then need to calculate offset
fbe8 : a59d             [ 3] 	lda df_asmadmd
fbea : c90f             [ 2] 	cmp #AM_REL
fbec : d02c             [ 4] 	bne df_rt_asm_encode_skiprel
AS65 Assembler for R6502 [1.42].                                     Page  286
-------------------------------- bank\bank0.s --------------------------------

                             	; calculate distance from PC
                             	; first take 2 off operand
fbee : 38               [ 2] 	sec
fbef : a59f             [ 3] 	lda df_asmoprnd
fbf1 : e902             [ 2] 	sbc #2
fbf3 : 859f             [ 3] 	sta df_asmoprnd
fbf5 : a5a0             [ 3] 	lda df_asmoprnd+1
fbf7 : e900             [ 2] 	sbc #0
fbf9 : 85a0             [ 3] 	sta df_asmoprnd+1
                             	; now calculate current operand-PC
fbfb : 38               [ 2] 	sec
fbfc : a59f             [ 3] 	lda df_asmoprnd
fbfe : e59a             [ 3] 	sbc df_asmpc
fc00 : 859f             [ 3] 	sta df_asmoprnd
fc02 : a5a0             [ 3] 	lda df_asmoprnd+1
fc04 : e59b             [ 3] 	sbc df_asmpc+1
                             	; A contains high byte result of subtraction
                             	; and must be 0 (operand <=127) or 255 (operand 
fc06 : 85a0             [ 3] 	sta df_asmoprnd+1
fc08 : f00a             [ 3] 	beq df_rt_asm_rel_postive
fc0a : c9ff             [ 2] 	cmp #0xff				; If not 0xff then error
fc0c : d010             [ 3] 	bne df_rt_asm_err_quantity
                             	; Check negative branch >=128 (N=1)
fc0e : a59f             [ 3] 	lda df_asmoprnd
fc10 : 100c             [ 3] 	bpl df_rt_asm_err_quantity
fc12 : 300c             [ 3] 	bmi df_rt_asm_encode_writebyte
fc14 :                       df_rt_asm_rel_postive
                             	; Check positive branch <=127
fc14 : a59f             [ 3] 	lda df_asmoprnd
fc16 : 3006             [ 3] 	bmi df_rt_asm_err_quantity
fc18 : 1006             [ 3] 	bpl df_rt_asm_encode_writebyte
fc1a :                       df_rt_asm_encode_skiprel
                             	; byte operand, high byte must be zero
fc1a : a5a0             [ 3] 	lda df_asmoprnd+1
fc1c : f002             [ 3] 	beq df_rt_asm_encode_writebyte
fc1e :                       df_rt_asm_err_quantity
                             	SWBRK DFERR_QUANTITY
                             
fc20 :                       df_rt_asm_encode_writebyte
fc20 : a59f             [ 3] 	lda df_asmoprnd
fc22 : c8               [ 2] 	iny 
fc23 : 919a             [ 5] 	sta (df_asmpc),y
                             	; Due to the iny, relying on Z=0 here!
fc25 : d00a             [ 3] 	bne df_rt_asm_encode_print
fc27 :                       df_rt_asm_encode_writeword
fc27 : c8               [ 2] 	iny 
fc28 : a59f             [ 3] 	lda df_asmoprnd
fc2a : 919a             [ 5] 	sta (df_asmpc),y
fc2c : c8               [ 2] 	iny 
fc2d : a5a0             [ 3] 	lda df_asmoprnd+1
fc2f : 919a             [ 5] 	sta (df_asmpc),y	
fc31 :                       df_rt_asm_encode_print
fc31 : 2041fc           [ 6] 	jsr df_rt_asm_print_mmen
                             	; advance pc
fc34 : 18               [ 2] 	clc
fc35 : a59a             [ 3] 	lda df_asmpc
fc37 : 65a1             [ 3] 	adc df_asmlen
fc39 : 859a             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
fc3d : e69b             [ 5] 	inc df_asmpc+1
fc3f : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page  287
-------------------------------- bank\bank0.s --------------------------------

fc40 : 60               [ 6] 	rts
                             
                             
                             ; Print the full 1,2,3 byte instruction
                             ; depends on df_asmopt
fc41 :                       df_rt_asm_print_mmen
fc41 : 2051fc           [ 6] 	jsr df_rt_asm_printPC
fc44 : 206cfc           [ 6] 	jsr df_rt_asm_printSPC
fc47 : 2061fc           [ 6] 	jsr df_rt_asm_printOPC
fc4a : 206cfc           [ 6] 	jsr df_rt_asm_printSPC
fc4d : 2075fc           [ 6] 	jsr df_rt_asm_printOPR
fc50 :                       df_rt_asm_print_rts			; Hopefully subs can get he
fc50 : 60               [ 6] 	rts
                             
fc51 :                       df_rt_asm_printPC
                             	; Check the option bit 0 (Print)
fc51 : a901             [ 2] 	lda #0x01
fc53 : 259c             [ 3] 	and df_asmopt
fc55 : f0f9             [ 3] 	beq df_rt_asm_print_rts
                             	; Print current PC
fc57 : a59b             [ 3] 	lda df_asmpc+1
fc59 : 2070c1           [ 6] 	jsr utilPrintA
fc5c : a59a             [ 3] 	lda df_asmpc
fc5e : 4c70c1           [ 3] 	jmp utilPrintA
                             
fc61 :                       df_rt_asm_printOPC
                             	; Check the option bit 0 (Print)
fc61 : a901             [ 2] 	lda #0x01
fc63 : 259c             [ 3] 	and df_asmopt
fc65 : f0e9             [ 3] 	beq df_rt_asm_print_rts
fc67 : a59e             [ 3] 	lda df_asmopcde
fc69 : 4c70c1           [ 3] 	jmp utilPrintA
                             
fc6c :                       df_rt_asm_printSPC
                             	; Check the option bit 0 (Print)
fc6c : a901             [ 2] 	lda #0x01
fc6e : 259c             [ 3] 	and df_asmopt
fc70 : f0de             [ 3] 	beq df_rt_asm_print_rts
fc72 : 4c60c1           [ 3] 	jmp utilPrintSPC
                             	
fc75 :                       df_rt_asm_printOPR
                             	; Check the option bit 0 (Print)
fc75 : a901             [ 2] 	lda #0x01
fc77 : 259c             [ 3] 	and df_asmopt
fc79 : f0d5             [ 3] 	beq df_rt_asm_print_rts	
fc7b : a5a1             [ 3] 	lda df_asmlen				; check how may operand bytes
fc7d : c901             [ 2] 	cmp #1						; if only opcode, done
fc7f : f0cf             [ 3] 	beq df_rt_asm_print_rts	
fc81 : c902             [ 2] 	cmp #2
fc83 : f005             [ 3] 	beq df_rt_asm_printOPR_1	; if only 2 do low byte
fc85 : a5a0             [ 3] 	lda df_asmoprnd+1
fc87 : 2070c1           [ 6] 	jsr utilPrintA
fc8a :                       df_rt_asm_printOPR_1
fc8a : a59f             [ 3] 	lda df_asmoprnd
fc8c : 4c70c1           [ 3] 	jmp utilPrintA
                             
fc8f :                       df_rt_asm_printCR
                             	; Check the option bit 0 (Print)
fc8f : a901             [ 2] 	lda #0x01
fc91 : 259c             [ 3] 	and df_asmopt
fc93 : f0bb             [ 3] 	beq df_rt_asm_print_rts
fc95 : 4c68c1           [ 3] 	jmp utilPrintCRLF
AS65 Assembler for R6502 [1.42].                                     Page  288
-------------------------------- bank\bank0.s --------------------------------

                             
fc98 :                       df_rt_asm_printCH
fc98 : 8538             [ 3] 	sta tmp_d
                             	; Check the option bit 0 (Print)
fc9a : a901             [ 2] 	lda #0x01
fc9c : 259c             [ 3] 	and df_asmopt
fc9e : f0b0             [ 3] 	beq df_rt_asm_print_rts
fca0 : a538             [ 3] 	lda tmp_d
fca2 : 4c2ac4           [ 3] 	jmp io_put_ch
                             
                             ; Print an entire line, but save df_exeoff
fca5 :                       df_rt_asm_printline
                             	; Check the option bit 0 (Print)
fca5 : a901             [ 2] 	lda #0x01
fca7 : 259c             [ 3] 	and df_asmopt
fca9 : f0a5             [ 3] 	beq df_rt_asm_print_rts
fcab : a589             [ 3] 	lda df_exeoff
fcad : 48               [ 3] 	pha
                             	; use df_tmpptra
                             	_cpyZPWord df_currlin, df_tmpptra
                             
fcb6 : 209cef           [ 6] 	jsr df_rt_list_line_only
fcb9 : 68               [ 4] 	pla
fcba : 8589             [ 3] 	sta df_exeoff
fcbc : 60               [ 6] 	rts
                             
                             
                             ; Calculate the addressing mode
                             ; Populate the operand as needed
                             ; A and df_asmadmd contain Addressing Mode
fcbd :                       df_rt_asm_addrmode	
                             	; Store nothing in address mode
fcbd : a900             [ 2] 	lda #AM_NONE
fcbf : 859d             [ 3] 	sta df_asmadmd
                             	; zero out the operand
fcc1 : a900             [ 2] 	lda #0
fcc3 : 859f             [ 3] 	sta df_asmoprnd
fcc5 : 85a0             [ 3] 	sta df_asmoprnd+1
fcc7 : 2072ee           [ 6] 	jsr df_rt_eos			; End of statement?
fcca : b00d             [ 3] 	bcs df_rt_asm_AM_IMP
                             	; jump over whitespace
fccc : 204de6           [ 6] 	jsr df_rt_skip_ws
                             	; Check what it is
fccf : c923             [ 2] 	cmp #'#'				; Immediate?
fcd1 : f034             [ 4] 	beq df_rt_asm_AM_IMM
fcd3 : c928             [ 2] 	cmp #'('				; Indirect something?
fcd5 : f03a             [ 4] 	beq df_rt_asm_AM_INDIRECT
                             	; Must be ABS,ZP or REL
fcd7 : d005             [ 3] 	bne df_rt_asm_ABSREL
                             ; Process IMP/ACC
fcd9 :                       df_rt_asm_AM_IMP
fcd9 : a90d             [ 2] 	lda #AM_IMP
fcdb : 859d             [ 3] 	sta df_asmadmd
fcdd : 60               [ 6] 	rts
                             ; Process ABS or REL
fcde :                       df_rt_asm_ABSREL	
                             	; Evaluate operand
fcde : 203afd           [ 6] 	jsr df_rt_asm_get_operand
                             
fce1 : 2072ee           [ 6] 	jsr df_rt_eos			; End of statement?
fce4 : b00f             [ 3] 	bcs df_rt_asm_AM_ABS
fce6 : c8               [ 2] 	iny						; Jump over ","
AS65 Assembler for R6502 [1.42].                                     Page  289
-------------------------------- bank\bank0.s --------------------------------

fce7 : b187             [ 5] 	lda (df_currlin),y		; Load X or Y
fce9 : c8               [ 2] 	iny						; Jump over index reg
fcea : 8589             [ 3] 	sta df_exeoff			; Save exe offset
fcec : c978             [ 2] 	cmp #'x'				; Indirect X?
fcee : f012             [ 4] 	beq df_rt_asm_AM_ABSX
                             ; Process ABSY
fcf0 :                       df_rt_asm_AM_ABSY
fcf0 : a906             [ 2] 	lda #AM_ZPY				; Go for smallest modes
fcf2 : 859d             [ 3] 	sta df_asmadmd
fcf4 : 60               [ 6] 	rts
                             ; Process what looks like pure ABS, could be REL
fcf5 :                       df_rt_asm_AM_ABS
fcf5 : a001             [ 2] 	ldy #1					; Check first addressing mode
fcf7 : b182             [ 5] 	lda (df_symtab),y
fcf9 : c90f             [ 2] 	cmp #AM_REL
fcfb : f002             [ 3] 	beq df_rt_asm_AM_REL
fcfd : a904             [ 2] 	lda #AM_ZP				; Go for smallest modes
fcff :                       df_rt_asm_AM_REL
fcff : 859d             [ 3] 	sta df_asmadmd
fd01 : 60               [ 6] 	rts
                             ; Process ABSX
fd02 :                       df_rt_asm_AM_ABSX
fd02 : a905             [ 2] 	lda #AM_ZPX				; Go for smallest modes
fd04 : 859d             [ 3] 	sta df_asmadmd
fd06 : 60               [ 6] 	rts
                             ; Process Immediate
fd07 :                       df_rt_asm_AM_IMM
                             	; skip over #
fd07 : e689             [ 5] 	inc df_exeoff
                             	; Get operand
fd09 : 203afd           [ 6] 	jsr df_rt_asm_get_operand
                             	; Mark as immediate
fd0c : a90c             [ 2] 	lda #AM_IMM
fd0e : 859d             [ 3] 	sta df_asmadmd
fd10 : 60               [ 6] 	rts
                             ; Process indirect
fd11 :                       df_rt_asm_AM_INDIRECT
                             	; skip over (
fd11 : e689             [ 5] 	inc df_exeoff
                             	; Calculate the operand
fd13 : 203afd           [ 6] 	jsr df_rt_asm_get_operand
                             	; what is next char?
fd16 : a489             [ 3] 	ldy df_exeoff
fd18 : b187             [ 5] 	lda (df_currlin),y
fd1a : c929             [ 2] 	cmp #')'			; Could be IND or INDY
fd1c : f009             [ 3] 	beq df_rt_asm_AM_ZPINDORY
                             	; else must be INDX
                             	; skip 'x)'
fd1e : c8               [ 2] 	iny
fd1f : c8               [ 2] 	iny
fd20 : 8489             [ 3] 	sty df_exeoff
fd22 : a908             [ 2] 	lda #AM_ZPINDX
fd24 : 859d             [ 3] 	sta df_asmadmd
fd26 : 60               [ 6] 	rts
                             ; Pure indirect mode found
fd27 :                       df_rt_asm_AM_ZPINDORY
fd27 : a907             [ 2] 	lda #AM_ZPIND			; Assume ZPIND
fd29 : c8               [ 2] 	iny
fd2a : 8489             [ 3] 	sty df_exeoff
                             	; if at end of line/statement then pure indirect
fd2c : 2072ee           [ 6] 	jsr df_rt_eos			; End of statement?
fd2f : b006             [ 3] 	bcs df_rt_asm_AM_ZPIND
AS65 Assembler for R6502 [1.42].                                     Page  290
-------------------------------- bank\bank0.s --------------------------------

                             	; else must be INDY
fd31 : a909             [ 2] 	lda #AM_ZPINDY
                             	; skip ',Y'
fd33 : c8               [ 2] 	iny
fd34 : c8               [ 2] 	iny
fd35 : 8489             [ 3] 	sty df_exeoff
fd37 :                       df_rt_asm_AM_ZPIND
fd37 : 859d             [ 3] 	sta df_asmadmd
fd39 : 60               [ 6] 	rts
                             
                             ; Get and save the operand
                             ; df_asmoprnd contains the result
fd3a :                       df_rt_asm_get_operand
                             	; evaluate
fd3a : 201ce2           [ 6] 	jsr df_rt_neval
                             	; Get the parameter from stack
fd3d : 209af7           [ 6] 	jsr df_ost_popInt
                             	; put in the operand
fd40 : 869f             [ 3] 	stx df_asmoprnd
fd42 : 85a0             [ 3] 	sta df_asmoprnd+1
fd44 : 60               [ 6] 	rts
                             	
                             ; From current symtab entry, find addressing
                             ; mode in A.  AM_NONE=Not found, Y=index
fd45 :                       df_rt_asm_find_addr_mode
                             	; save A in tmp
fd45 : 8538             [ 3] 	sta tmp_d
                             	; Start first entry (1) - 2 = 0xff
fd47 : a0ff             [ 2] 	ldy #0xff
fd49 : a200             [ 2] 	ldx #0
fd4b :                       df_rt_asm_find_addr_mode_loop
                             	; next entry
fd4b : c8               [ 2] 	iny
fd4c : c8               [ 2] 	iny
                             	; if current index > num entries then error
fd4d : 98               [ 2] 	tya
fd4e : 38               [ 2] 	sec
fd4f : e182             [ 6] 	sbc (df_symtab,x)
fd51 : b007             [ 3] 	bcs df_rt_asm_find_addr_mode_err
                             	; is symtab addressing mode what we want?
fd53 : b182             [ 5] 	lda (df_symtab),y
fd55 : c538             [ 3] 	cmp tmp_d
fd57 : d0f2             [ 3] 	bne df_rt_asm_find_addr_mode_loop
                             	; done A=mode, y=index in to df_symtab
fd59 : 60               [ 6] 	rts
fd5a :                       df_rt_asm_find_addr_mode_err
fd5a : a900             [ 2] 	lda #AM_NONE
fd5c :                       df_rt_asm_skip_to_sym_done; Used by function belo
fd5c : 60               [ 6] 	rts
                             
                             
                             ; Skip X amount of symbols in table
                             ; A contains how many addr mode and op code bytes
                             ; df_symtab points to offset byte
fd5d :                       df_rt_asm_skip_to_sym
fd5d : e8               [ 2] 	inx				; so done when X=0
                             	; Start at token symbols beginning
fd5e : a9ab             [ 2] 	lda #lo(df_asm_tokensyms)
fd60 : 8582             [ 3] 	sta df_symtab
fd62 : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
fd64 : 8583             [ 3] 	sta df_symtab+1
fd66 : a900             [ 2] 	lda #0
AS65 Assembler for R6502 [1.42].                                     Page  291
-------------------------------- bank\bank0.s --------------------------------

fd68 : 8584             [ 3] 	sta df_symoff
fd6a : a8               [ 2] 	tay
fd6b :                       df_rt_asm_skip_to_sym_next
                             	; Get symtable char
fd6b : b182             [ 5] 	lda (df_symtab),y
                             	; if < ' ' then jumped over symbol chars
fd6d : c920             [ 2] 	cmp #' '
fd6f : 9009             [ 3] 	bcc df_rt_asm_skip_to_sym_end
                             	;else next smy tab char
                             	_incZPWord df_symtab
                             
fd77 : 4c6bfd           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             	; Found end of symbol
fd7a :                       df_rt_asm_skip_to_sym_end
                             	;if done then return
fd7a : ca               [ 2] 	dex
fd7b : f0df             [ 3] 	beq df_rt_asm_skip_to_sym_done
                             	;jump over addr and op code by A bytes
fd7d : 38               [ 2] 	sec
fd7e : 6582             [ 3] 	adc df_symtab
fd80 : 8582             [ 3] 	sta df_symtab
                             	_bcc 2
                             
fd84 : e683             [ 5] 	inc df_symtab+1
fd86 : 4c6bfd           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             
fd89 :                       mod_sz_rtasm_e
                             
                             
                             	include "dflat/asmsymtab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASMSYMTAB.S
                             ;*	Mainly this contains the symbol table for asse
                             ;*	mnemonics but also meta data like what address
                             ;*	and the length of opcodes.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             	;* Length of each addressing mode
                             	;* ORDER significant!
fd89 :                       df_asm_length
fd89 : 00030303020202..      	db	0,3,3,3,2,2,2,2,2,2,3,3,2,1,1,2,0
                             
                             	; Always try for lowest addressing mode, but
                             	; this table maps to alternative
fd9a :                       df_asm_altaddrmode
fd9a : 00                    	db AM_NONE		;AM_NONE	= 0
fd9b : 00                    	db AM_NONE		;AM_ABS	 	= 1
fd9c : 00                    	db AM_NONE		;AM_ABSX	= 2
fd9d : 00                    	db AM_NONE		;AM_ABSY	= 3
fd9e : 01                    	db AM_ABS		;AM_ZP		= 4
fd9f : 02                    	db AM_ABSX		;AM_ZPX		= 5
AS65 Assembler for R6502 [1.42].                                     Page  292
-------------------------------- bank\bank0.s --------------------------------

fda0 : 03                    	db AM_ABSY		;AM_ZPY		= 6
fda1 : 0a                    	db AM_ABSIND	;AM_ZPIND	= 7
fda2 : 0b                    	db AM_ABSINDX	;AM_ZPINDX	= 8
fda3 : 09                    	db AM_ZPINDY	;AM_ZPINDY	= 9
fda4 : 00                    	db AM_NONE		;AM_ABSIND	= 10
fda5 : 00                    	db AM_NONE		;AM_ABSINDX	= 11
fda6 : 00                    	db AM_NONE		;AM_IMM		= 12
fda7 : 00                    	db AM_NONE		;AM_ACC		= 13
fda8 : 00                    	db AM_NONE		;AM_IMP		= AM_ACC
fda9 : 0f                    	db AM_REL		;AM_REL		= 15
fdaa : 00                    	db AM_NONE		;AM_DIR		= 16
                             
                             
                             	;*	Mnemonic/	How many addressing modes /
                             	;* 	Mode		Opcode for mode
fdab :                       df_asm_tokensyms
                             	;* Start with directives
fdab : 2e6f726702            	db	".org",		1*2
fdb0 : 1000                  	db	AM_DIR,		0x00
fdb2 : 2e6f707402            	db	".opt",		1*2
fdb7 : 1000                  	db	AM_DIR,		0x00
fdb9 : 2e646202              	db	".db",		1*2
fdbd : 1000                  	db	AM_DIR,		0x00
fdbf : 2e647702              	db	".dw",		1*2
fdc3 : 1000                  	db	AM_DIR,		0x00
fdc5 : 2e647302              	db	".ds",		1*2
fdc9 : 1000                  	db	AM_DIR,		0x00	
                             
fdcb : 61646310              	db	"adc",		8*2
fdcf : 0c69                  	db	AM_IMM,		0x69
fdd1 : 0465                  	db	AM_ZP,		0x65
fdd3 : 0575                  	db	AM_ZPX,		0x75
fdd5 : 016d                  	db	AM_ABS,		0x6d
fdd7 : 027d                  	db	AM_ABSX,	0x7d
fdd9 : 0379                  	db	AM_ABSY,	0x79
fddb : 0861                  	db	AM_ZPINDX,	0x61
fddd : 0971                  	db	AM_ZPINDY,	0x71
                             	
fddf : 616e6410              	db	"and",		8*2
fde3 : 0c29                  	db	AM_IMM,		0x29
fde5 : 0425                  	db	AM_ZP,		0x25
fde7 : 0535                  	db	AM_ZPX,		0x35
fde9 : 012d                  	db	AM_ABS,		0x2d
fdeb : 023d                  	db	AM_ABSX,	0x3d
fded : 0339                  	db	AM_ABSY,	0x39
fdef : 0821                  	db	AM_ZPINDX,	0x21
fdf1 : 0931                  	db	AM_ZPINDY,	0x31
                             
fdf3 : 636d7010              	db	"cmp",		8*2
fdf7 : 0cc9                  	db	AM_IMM,		0xc9
fdf9 : 04c5                  	db	AM_ZP,		0xc5
fdfb : 05d5                  	db	AM_ZPX,		0xd5
fdfd : 01cd                  	db	AM_ABS,		0xcd
fdff : 02dd                  	db	AM_ABSX,	0xdd
fe01 : 03d9                  	db	AM_ABSY,	0xd9
fe03 : 08c1                  	db	AM_ZPINDX,	0xc1
fe05 : 09d1                  	db	AM_ZPINDY,	0xd1
                             
fe07 : 656f7210              	db	"eor",		8*2
fe0b : 0c49                  	db	AM_IMM,		0x49
fe0d : 0445                  	db	AM_ZP,		0x45
fe0f : 0555                  	db	AM_ZPX,		0x55
AS65 Assembler for R6502 [1.42].                                     Page  293
-------------------------------- bank\bank0.s --------------------------------

fe11 : 014d                  	db	AM_ABS,		0x4d
fe13 : 025d                  	db	AM_ABSX,	0x5d
fe15 : 0359                  	db	AM_ABSY,	0x59
fe17 : 0841                  	db	AM_ZPINDX,	0x41
fe19 : 0951                  	db	AM_ZPINDY,	0x51
                             
fe1b : 6c646110              	db	"lda",		8*2
fe1f : 0ca9                  	db	AM_IMM,		0xa9
fe21 : 04a5                  	db	AM_ZP,		0xa5
fe23 : 05b5                  	db	AM_ZPX,		0xb5
fe25 : 01ad                  	db	AM_ABS,		0xad
fe27 : 02bd                  	db	AM_ABSX,	0xbd
fe29 : 03b9                  	db	AM_ABSY,	0xb9
fe2b : 08a1                  	db	AM_ZPINDX,	0xa1
fe2d : 09b1                  	db	AM_ZPINDY,	0xb1
                             
fe2f : 6f726110              	db	"ora",		8*2
fe33 : 0c09                  	db	AM_IMM,		0x09
fe35 : 0405                  	db	AM_ZP,		0x05
fe37 : 0515                  	db	AM_ZPX,		0x15
fe39 : 010d                  	db	AM_ABS,		0x0d
fe3b : 021d                  	db	AM_ABSX,	0x1d
fe3d : 0319                  	db	AM_ABSY,	0x19
fe3f : 0801                  	db	AM_ZPINDX,	0x01
fe41 : 0911                  	db	AM_ZPINDY,	0x11
                             
fe43 : 73626310              	db	"sbc",		8*2
fe47 : 0ce9                  	db	AM_IMM,		0xe9
fe49 : 04e5                  	db	AM_ZP,		0xe5
fe4b : 05f5                  	db	AM_ZPX,		0xf5
fe4d : 01ed                  	db	AM_ABS,		0xed
fe4f : 02fd                  	db	AM_ABSX,	0xfd
fe51 : 03f9                  	db	AM_ABSY,	0xf9
fe53 : 08e1                  	db	AM_ZPINDX,	0xe1
fe55 : 09f1                  	db	AM_ZPINDY,	0xf1
                             
fe57 : 73746110              	db	"sta",		8*2
fe5b : 0485                  	db	AM_ZP,		0x85
fe5d : 0595                  	db	AM_ZPX,		0x95
fe5f : 018d                  	db	AM_ABS,		0x8d
fe61 : 029d                  	db	AM_ABSX,	0x9d
fe63 : 0399                  	db	AM_ABSY,	0x99
fe65 : 0881                  	db	AM_ZPINDX,	0x81
fe67 : 0991                  	db	AM_ZPINDY,	0x91
fe69 : 0792                  	db	AM_ZPIND,	0x92
                             
fe6b : 61736c0a              	db	"asl",		5*2
fe6f : 0d0a                  	db	AM_IMP,		0x0a
fe71 : 0406                  	db	AM_ZP,		0x06
fe73 : 0516                  	db	AM_ZPX,		0x16
fe75 : 010e                  	db	AM_ABS,		0x0e
fe77 : 021e                  	db	AM_ABSX,	0x1e
fe79 : 64656308              	db	"dec",		4*2
fe7d : 04c6                  	db	AM_ZP,		0xc6
fe7f : 05d6                  	db	AM_ZPX,		0xd6
fe81 : 01ce                  	db	AM_ABS,		0xce
fe83 : 02de                  	db	AM_ABSX,	0xde
fe85 : 696e6308              	db	"inc",		4*2
fe89 : 04e6                  	db	AM_ZP,		0xe6
fe8b : 05f6                  	db	AM_ZPX,		0xf6
fe8d : 01ee                  	db	AM_ABS,		0xee
fe8f : 02fe                  	db	AM_ABSX,	0xfe
AS65 Assembler for R6502 [1.42].                                     Page  294
-------------------------------- bank\bank0.s --------------------------------

fe91 : 6c73720a              	db	"lsr",		5*2
fe95 : 0d4a                  	db	AM_IMP,		0x4a
fe97 : 0446                  	db	AM_ZP,		0x46
fe99 : 0556                  	db	AM_ZPX,		0x56
fe9b : 014e                  	db	AM_ABS,		0x4e
fe9d : 025e                  	db	AM_ABSX,	0x5e
fe9f : 726f6c0a              	db	"rol",		5*2
fea3 : 0d2a                  	db	AM_IMP,		0x2a
fea5 : 0426                  	db	AM_ZP,		0x26
fea7 : 0536                  	db	AM_ZPX,		0x36
fea9 : 012e                  	db	AM_ABS,		0x2e
feab : 023e                  	db	AM_ABSX,	0x3e
fead : 726f720a              	db	"ror",		5*2
feb1 : 0d6a                  	db	AM_IMP,		0x6a
feb3 : 0466                  	db	AM_ZP,		0x66
feb5 : 0576                  	db	AM_ZPX,		0x76
feb7 : 016e                  	db	AM_ABS,		0x6e
feb9 : 027e                  	db	AM_ABSX,	0x7e
                             
febb : 62697404              	db	"bit",		2*2
febf : 0424                  	db	AM_ZP,		0x24
fec1 : 012c                  	db	AM_ABS,		0x2c
                             	
fec3 : 62726b02              	db	"brk",		1*2
fec7 : 0d00                  	db	AM_IMP,		0x00
                             	
fec9 : 636c6302              	db	"clc",		1*2
fecd : 0d18                  	db	AM_IMP,		0x18
fecf : 636c6402              	db	"cld",		1*2
fed3 : 0dd8                  	db	AM_IMP,		0xd8
fed5 : 636c6902              	db	"cli",		1*2
fed9 : 0d58                  	db	AM_IMP,		0x58
fedb : 636c7602              	db	"clv",		1*2
fedf : 0db8                  	db	AM_IMP,		0xb8
fee1 : 73656302              	db	"sec",		1*2
fee5 : 0d38                  	db	AM_IMP,		0x38
fee7 : 73656402              	db	"sed",		1*2
feeb : 0df8                  	db	AM_IMP,		0xf8
feed : 73656902              	db	"sei",		1*2
fef1 : 0d78                  	db	AM_IMP,		0x78
                             	
fef3 : 63707806              	db	"cpx",		3*2
fef7 : 0ce0                  	db	AM_IMM,		0xe0
fef9 : 04e4                  	db	AM_ZP,		0xe4
fefb : 01ec                  	db	AM_ABS,		0xec
fefd : 63707906              	db	"cpy",		3*2
ff01 : 0cc0                  	db	AM_IMM,		0xc0
ff03 : 04c4                  	db	AM_ZP,		0xc4
ff05 : 01cc                  	db	AM_ABS,		0xcc
ff07 : 64657802              	db	"dex",		1*2
ff0b : 0dca                  	db	AM_IMP,		0xca
ff0d : 64657902              	db	"dey",		1*2
ff11 : 0d88                  	db	AM_IMP,		0x88
ff13 : 696e7802              	db	"inx",		1*2
ff17 : 0de8                  	db	AM_IMP,		0xe8
ff19 : 696e7902              	db	"iny",		1*2
ff1d : 0dc8                  	db	AM_IMP,		0xc8
ff1f : 6c64780a              	db	"ldx",		5*2
ff23 : 0ca2                  	db	AM_IMM,		0xa2
ff25 : 04a6                  	db	AM_ZP,		0xa6
ff27 : 06b6                  	db	AM_ZPY,		0xb6
ff29 : 01ae                  	db	AM_ABS,		0xae
AS65 Assembler for R6502 [1.42].                                     Page  295
-------------------------------- bank\bank0.s --------------------------------

ff2b : 03be                  	db	AM_ABSY,	0xbe
ff2d : 6c64790a              	db	"ldy",		5*2
ff31 : 0ca0                  	db	AM_IMM,		0xa0
ff33 : 04a4                  	db	AM_ZP,		0xa4
ff35 : 05b4                  	db	AM_ZPX,		0xb4
ff37 : 01ac                  	db	AM_ABS,		0xac
ff39 : 02bc                  	db	AM_ABSX,	0xbc
ff3b : 73747806              	db	"stx",		3*2
ff3f : 0486                  	db	AM_ZP,		0x86
ff41 : 0696                  	db	AM_ZPY,		0x96
ff43 : 018e                  	db	AM_ABS,		0x8e
ff45 : 73747906              	db	"sty",		3*2
ff49 : 0484                  	db	AM_ZP,		0x84
ff4b : 0594                  	db	AM_ZPX,		0x94
ff4d : 018c                  	db	AM_ABS,		0x8c
                             
ff4f : 62636302              	db	"bcc",		1*2
ff53 : 0f90                  	db	AM_REL,		0x90
ff55 : 62637302              	db	"bcs",		1*2
ff59 : 0fb0                  	db	AM_REL,		0xb0
ff5b : 62657102              	db	"beq",		1*2
ff5f : 0ff0                  	db	AM_REL,		0xf0
ff61 : 626d6902              	db	"bmi",		1*2
ff65 : 0f30                  	db	AM_REL,		0x30
ff67 : 626e6502              	db	"bne",		1*2
ff6b : 0fd0                  	db	AM_REL,		0xd0
ff6d : 62706c02              	db	"bpl",		1*2
ff71 : 0f10                  	db	AM_REL,		0x10
ff73 : 62766302              	db	"bvc",		1*2
ff77 : 0f50                  	db	AM_REL,		0x50
ff79 : 62767302              	db	"bvs",		1*2
ff7d : 0f70                  	db	AM_REL,		0x70
ff7f : 6a6d7004              	db	"jmp",		2*2
ff83 : 014c                  	db	AM_ABS,		0x4c
ff85 : 0a6c                  	db	AM_ABSIND,	0x6c
ff87 : 6a737202              	db	"jsr",		1*2
ff8b : 0120                  	db	AM_ABS,		0x20
                             	
ff8d : 6e6f7002              	db	"nop",		1*2
ff91 : 0dea                  	db	AM_IMP,		0xea
ff93 : 70686102              	db	"pha",		1*2
ff97 : 0d48                  	db	AM_IMP,		0x48
ff99 : 70687002              	db	"php",		1*2
ff9d : 0d08                  	db	AM_IMP,		0x08
ff9f : 706c6102              	db	"pla",		1*2
ffa3 : 0d68                  	db	AM_IMP,		0x68
ffa5 : 706c7002              	db	"plp",		1*2
ffa9 : 0d28                  	db	AM_IMP,		0x28
ffab : 72746902              	db	"rti",		1*2
ffaf : 0d40                  	db	AM_IMP,		0x40
ffb1 : 72747302              	db	"rts",		1*2
ffb5 : 0d60                  	db	AM_IMP,		0x60
ffb7 : 74617802              	db	"tax",		1*2
ffbb : 0daa                  	db	AM_IMP,		0xaa
ffbd : 74617902              	db	"tay",		1*2
ffc1 : 0da8                  	db	AM_IMP,		0xa8
ffc3 : 74737802              	db	"tsx",		1*2
ffc7 : 0dba                  	db	AM_IMP,		0xba
ffc9 : 74786102              	db	"txa",		1*2
ffcd : 0d8a                  	db	AM_IMP,		0x8a
ffcf : 74787302              	db	"txs",		1*2
ffd3 : 0d9a                  	db	AM_IMP,		0x9a
AS65 Assembler for R6502 [1.42].                                     Page  296
-------------------------------- bank\bank0.s --------------------------------

ffd5 : 74796102              	db	"tya",		1*2
ffd9 : 0d98                  	db	AM_IMP,		0x98	
                             	
                             	;* Terminates with a zero
ffdb : 00                    	db	0
                             
                             	include	"dflat/asmjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASMJUMPTAB.S
                             ;*  Runtime token jump table for assembler.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; Only directives needed as all opcodes are handl
                             ; through a single routine
ffdc :                       df_tk_asm_tokenjmp
ffdc : 1de0                  	dw	df_tk_asm_org
ffde : 1de0                  	dw	df_tk_asm_opt
ffe0 : 7fdf                  	dw	df_tk_asm_db
ffe2 : 7fdf                  	dw	df_tk_asm_dw
ffe4 : 1de0                  	dw	df_tk_asm_ds
                             
ffe6 :                       df_rt_asm_tokenjmp
ffe6 : d8fa                  	dw	df_rt_asm_org
ffe8 : eafa                  	dw	df_rt_asm_opt
ffea : f2fa                  	dw	df_rt_asm_db
ffec : f5fa                  	dw	df_rt_asm_dw
ffee : 6efb                  	dw	df_rt_asm_ds
                             
                             
                             ;****************************************
                             ;* as_init
                             ;* Initialise assembler settings
                             ;****************************************
fff0 :                       asm_init
                             	; Zero the PC
fff0 : a900             [ 2] 	lda #0
fff2 : 859a             [ 3] 	sta df_asmpc
fff4 : 859b             [ 3] 	sta df_asmpc+1
                             	; Zero the option
fff6 : 859c             [ 3] 	sta df_asmopt
AS65 Assembler for R6502 [1.42].                                     Page  297
-------------------------------- bank\bank0.s --------------------------------

fff8 : 60               [ 6] 	rts
                             
fff9 :                       mod_sz_asm_e
                             
fff9 :                       mod_sz_language_e
                             	; End of Code
fff9 :                       _code_end
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
