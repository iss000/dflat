AS65 Assembler for R6502 [1.42].                                     Page    1
---------------------------------- bank0.s -----------------------------------

-------------------------------- Symbol Table --------------------------------

              Symbol   Value        Decimal

                 ACR : $000b             11   *
              AM_ABS : $0001              1   *
           AM_ABSIND : $000a             10   *
          AM_ABSINDX : $000b             11   *
             AM_ABSX : $0002              2   *
             AM_ABSY : $0003              3   *
              AM_ACC : $000d             13   *
              AM_DIR : $0010             16   *
              AM_IMM : $000c             12   *
              AM_IMP : $000d             13   *
             AM_NONE : $0000              0   *
              AM_REL : $000f             15   *
               AM_ZP : $0004              4   *
            AM_ZPIND : $0007              7   *
           AM_ZPINDX : $0008              8   *
           AM_ZPINDY : $0009              9   *
              AM_ZPX : $0005              5   *
              AM_ZPY : $0006              6   *
            asm_init : $ffed          65517
               BANK0 : $0001              1
      bin_to_bcd_bit : $c367          50023
              buf_ef : $003c             60
              buf_hi : $003a             58
              buf_lo : $0039             57
              buf_sz : $003b             59
     CMD_ERR_NOERROR : $0000              0   *
    CMD_ERR_NOTFOUND : $0001              1   *
        CMD_ERR_PARM : $0002              2   *
         CMD_ERR_VAL : $0003              3   *
           CRSR_DOWN : $000a             10   *
           CRSR_LEFT : $0008              8   *
          CRSR_RIGHT : $0009              9   *
             CRSR_UP : $000b             11   *
           CTRL_CAPS : $0014             20   *
        call_irq_brk : $c0d6          49366
     call_irq_master : $c0d3          49363
       cmd_check_cmd : $d4d3          54483
         cmd_check_d : $d4e6          54502
         cmd_check_s : $d4ea          54506
         cmd_dumpmem : $d51a          54554
    cmd_dumpmemASCII : $d53e          54590
      cmd_dumpmemFin : $d573          54643
   cmd_dumpmem_ascii : $d550          54608
   cmd_dumpmem_block : $d520          54560
    cmd_dumpmem_byte : $d52f          54575
  cmd_dump_skip_ctrl : $d55a          54618
   cmd_dump_skip_del : $d55f          54623
           cmd_error : $d4db          54491
       cmd_find_parm : $d5be          54718
              cmd_hi : $0096            150   *
          cmd_incmem : $d57a          54650
              cmd_lo : $0095            149   *
   cmd_next_parm_err : $d5c8          54728
       cmd_not_found : $d4ee          54510
           cmd_parse : $d4e5          54501
      cmd_parse_byte : $d58f          54671
  cmd_parse_byte_err : $d5a9          54697
 cmd_parse_byte_errp : $d5a8          54696
AS65 Assembler for R6502 [1.42].                                     Page    2
---------------------------------- bank0.s -----------------------------------

 cmd_parse_next_parm : $d5bd          54717
      cmd_parse_word : $d5ab          54699
            cmd_peek : $d581          54657
            cmd_poke : $d586          54662
           cmd_ready : $d4bf          54463
          cmd_setmem : $d4f4          54516
     cmd_setmem_byte : $d4f9          54521
      cmd_setmem_err : $d518          54552
        cmd_word_err : $d5bb          54715
        command_line : $d4bf          54463
       con_bin_digit : $c24c          49740
        con_bin_done : $c262          49762
         con_bin_err : $c26c          49772
         con_bin_jmp : $c1ea          49642
        con_bin_to_a : $c244          49732
    con_bin_to_a_int : $c248          49736
         con_dec_jmp : $c1de          49630
        con_dec_to_a : $c26e          49774
    con_dec_to_a_int : $c272          49778
       con_hex_digit : $c20d          49677
        con_hex_done : $c23a          49722
         con_hex_err : $c238          49720
         con_hex_jmp : $c1e4          49636
  con_hex_skip_x_f_1 : $c21a          49690
        con_hex_to_a : $c205          49669
    con_hex_to_a_int : $c209          49673
           con_n_err : $c1ed          49645
       con_n_not_dec : $c1e1          49633
       con_n_not_hex : $c1e7          49639
          con_n_to_a : $c1cd          49613
   con_n_to_a_detect : $c1ef          49647
                DDRA : $0003              3   *
                DDRB : $0002              2   *
         DFERR_ABORT : $0012             18   *
         DFERR_BREAK : $000d             13   *
           DFERR_DIM : $0003              3   *
         DFERR_FNAME : $000b             11   *
     DFERR_IMMEDIATE : $0007              7   *
       DFERR_NEXTFOR : $000a             10   *
        DFERR_NODATA : $000e             14   *
          DFERR_NOIF : $0009              9   *
        DFERR_NOLINE : $0010             16   *
         DFERR_NOORG : $0014             20   *
        DFERR_NOPROC : $0005              5   *
            DFERR_OK : $0000              0   *
      DFERR_PROCPARM : $0006              6   *
      DFERR_QUANTITY : $0013             19   *
        DFERR_RETURN : $0011             17   *
       DFERR_STRLONG : $000c             12   *
        DFERR_SYNTAX : $0001              1   *
      DFERR_TYPEMISM : $0002              2   *
    DFERR_UNCLOSEDIF : $0008              8   *
         DFERR_UNTIL : $0004              4   *
          DFERR_WEND : $000f             15   *
          DFRT_ABORT : $0089            137   *
            DFRT_ASM : $0097            151   *
           DFRT_DATA : $0096            150   *
            DFRT_DEF : $0086            134   *
           DFRT_ELSE : $0093            147   *
         DFRT_ELSEIF : $0095            149   *
         DFRT_ENDDEF : $0087            135   *
          DFRT_ENDIF : $0094            148   *
AS65 Assembler for R6502 [1.42].                                     Page    3
---------------------------------- bank0.s -----------------------------------

            DFRT_FOR : $008e            142   *
             DFRT_IF : $0092            146   *
           DFRT_NEXT : $008f            143   *
         DFRT_REPEAT : $008c            140   *
         DFRT_RETURN : $0088            136   *
           DFRT_WEND : $0091            145   *
          DFRT_WHILE : $0090            144   *
            DFST_INT : $0003              3   *
            DFST_PTR : $00ff            255   *
            DFST_STR : $0004              4   *
            DFTK_BYT : $0020             32   *
         DFTK_BYTBIN : $0007              7   *
         DFTK_BYTDEC : $0005              5   *
         DFTK_BYTHEX : $0006              6   *
            DFTK_CHR : $0000              0   *
            DFTK_EOL : $0000              0   *
         DFTK_ESCVAL : $0020             32   *
            DFTK_FLT : $0080            128   *
             DFTK_FN : $0002              2   *
            DFTK_INT : $0010             16   *
         DFTK_INTBIN : $000b             11   *
         DFTK_INTDEC : $0009              9   *
         DFTK_INTHEX : $000a             10   *
             DFTK_KW : $0001              1   *
         DFTK_LINLEN : $0000              0   *
         DFTK_LINNUM : $0001              1   *
             DFTK_OP : $0008              8   *
          DFTK_OPMSK : $0007              7   *
           DFTK_PROC : $0012             18   *
          DFTK_RESVC : $000c             12   *
          DFTK_RESVD : $000d             13   *
          DFTK_RESVE : $000e             14   *
          DFTK_RESVF : $000f             15   *
          DFTK_RESV1 : $0001              1   *
          DFTK_RESV2 : $0002              2   *
          DFTK_RESV3 : $0003              3   *
          DFTK_RESV4 : $0004              4   *
          DFTK_RESV8 : $0008              8   *
          DFTK_RTMSK : $00f8            248   *
          DFTK_STEND : $001f             31   *
            DFTK_STR : $0040             64   *
         DFTK_STRLIT : $0010             16   *
          DFTK_STROP : $0004              4   *
          DFTK_TOKEN : $0080            128   *
            DFTK_VAR : $0011             17   *
        DFTK_VARPARM : $0026             38   *
           DFVVT_BYT : $0002              2   *
          DFVVT_DIM1 : $0003              3   *
          DFVVT_DIM2 : $0004              4   *
           DFVVT_FLT : $0008              8   *
            DFVVT_HI : $0002              2   *
           DFVVT_INT : $0001              1   *
            DFVVT_LO : $0001              1   *
          DFVVT_PROC : $0040             64   *
           DFVVT_PTR : $0080            128   *
           DFVVT_STR : $0004              4   *
            DFVVT_SZ : $0008              8   *
          DFVVT_TYPE : $0000              0   *
           DF_MEMTOP : $9800          38912   *
        DF_PROGSTART : $071f           1823   *
          dflat_zp_e : $00ac            172
          dflat_zp_s : $005c             92
AS65 Assembler for R6502 [1.42].                                     Page    4
---------------------------------- bank0.s -----------------------------------

     dflat_zp_save_e : $00a2            162
     dflat_zp_save_s : $005c             92
          df_asmadmd : $009d            157
           df_asmlen : $00a1            161
         df_asmopcde : $009e            158
         df_asmoprnd : $009f            159
           df_asmopt : $009c            156
            df_asmpc : $009a            154
  df_asm_altaddrmode : $fd97          64919
       df_asm_length : $fd86          64902
    df_asm_tokensyms : $fda8          64936
            df_brkpc : $0063             99
           df_brkval : $0065            101
         df_checkkey : $005c             92
         df_checkmsk : $005d             93
            df_clear : $f7c8          63432
          df_currdat : $0095            149
          df_currlin : $0087            135
         df_curstidx : $0081            129
           df_datoff : $0097            151
           df_eolidx : $007f            127
           df_exeoff : $0089            137
           df_ifnest : $0094            148
            df_immed : $005f             95
             df_init : $f7bb          63419
          df_initrun : $e1b5          57781
       df_lexer_line : $db21          56097
  df_lexer_skip_lnum : $db42          56130
          df_linbuff : $0400           1024
          df_lineidx : $0093            147
          df_lineptr : $0091            145
           df_linoff : $007d            125
           df_memtop : $061d           1565
          df_msg_acc : $f988          63880
           df_msg_pc : $f984          63876
         df_msg_xreg : $f98b          63883
         df_msg_yreg : $f98e          63886
          df_nextlin : $008a            138
         df_nxtstidx : $0080            128
     df_ost_peekType : $f791          63377
       df_ost_popInt : $f797          63383
     df_ost_popParmX : $f77a          63354
       df_ost_popPtr : $f79f          63391
       df_ost_popStr : $f79b          63387
      df_ost_pushInt : $f767          63335
     df_ost_pushIntA : $f76b          63339
    df_ost_pushParmX : $f751          63313
      df_ost_pushPtr : $f776          63350
      df_ost_pushStr : $f772          63346
          df_parmtop : $0078            120
               df_pc : $0061             97
    df_pg_check_line : $e069          57449
df_pg_check_next_line : $e052          57426
df_pg_copyinputtolinbuff : $e104          57604
  df_pg_delete_block : $e0cc          57548
   df_pg_delete_byte : $e0d2          57554
df_pg_delete_next_byte : $e0f3          57587
         df_pg_dflat : $e10e          57614
     df_pg_find_line : $e046          57414
    df_pg_getcommand : $e124          57636
     df_pg_inputline : $e0fc          57596
  df_pg_inputline_ok : $e104          57604
AS65 Assembler for R6502 [1.42].                                     Page    5
---------------------------------- bank0.s -----------------------------------

 df_pg_insertlinbyte : $e1a5          57765
    df_pg_insertline : $e186          57734
  df_pg_insert_block : $e097          57495
   df_pg_insert_byte : $e0a3          57507
df_pg_insert_next_byte : $e0c1          57537
   df_pg_line_number : $e166          57702
       df_pg_nothing : $e165          57701
    df_pg_prompt_msg : $e1ae          57774
    df_pg_runcommand : $e139          57657
 df_pg_skip_del_line : $e17c          57724
      df_pg_tokenise : $e14d          57677
           df_prgend : $0068            104
          df_prgstrt : $0066            102
         df_procargs : $008d            141
          df_procloc : $008e            142
         df_procmode : $008c            140
          df_procptr : $008f            143
df_pr_line_gt_target : $e05e          57438
    df_pr_line_match : $e08c          57484
              df_raw : $0400           1024
              df_rnd : $0098            152
     df_rst_peekByte : $f730          63280
      df_rst_popByte : $f727          63271
      df_rst_popWord : $f744          63300
     df_rst_pushByte : $f71e          63262
     df_rst_pushWord : $f736          63286
          df_rtspace : $0500           1280
           df_rtstck : $0500           1280
           df_rtstop : $0077            119
         df_rt_abort : $f58a          62858
           df_rt_add : $e778          59256
          df_rt_addr : $f473          62579
         df_rt_aequb : $e854          59476
      df_rt_aequbFin : $e85e          59486
           df_rt_and : $e827          59431
  df_rt_array_exists : $e490          58512
     df_rt_arry_parm : $e39b          58267
    df_rt_arry_parm2 : $e3a2          58274
df_rt_arry_parm2_arry2 : $e3ba          58298
df_rt_arry_parm2_skiparry2 : $e3c1          58305
df_rt_arry_parm2_term : $e3aa          58282
           df_rt_asc : $f563          62819
           df_rt_asl : $e801          59393
        df_rt_aslbit : $e807          59399
       df_rt_asldone : $e811          59409
    df_rt_asm_ABSREL : $fcdb          64731
    df_rt_asm_AM_ABS : $fcf2          64754
   df_rt_asm_AM_ABSX : $fcff          64767
   df_rt_asm_AM_ABSY : $fced          64749
    df_rt_asm_AM_IMM : $fd04          64772
    df_rt_asm_AM_IMP : $fcd6          64726
df_rt_asm_AM_INDIRECT : $fd0e          64782
    df_rt_asm_AM_REL : $fcfc          64764
  df_rt_asm_AM_ZPIND : $fd34          64820
df_rt_asm_AM_ZPINDORY : $fd24          64804
  df_rt_asm_addrmode : $fcba          64698
  df_rt_asm_assemble : $fa8b          64139
df_rt_asm_assemble_done : $fa9d          64157
 df_rt_asm_check_alt : $fb97          64407
   df_rt_asm_command : $fa9e          64158
      df_rt_asm_data : $fafc          64252
 df_rt_asm_data_done : $fb3a          64314
AS65 Assembler for R6502 [1.42].                                     Page    6
---------------------------------- bank0.s -----------------------------------

 df_rt_asm_data_next : $fb30          64304
df_rt_asm_data_write : $fb3b          64315
df_rt_asm_data_write_err : $fb69          64361
df_rt_asm_data_write_hi : $fb57          64343
df_rt_asm_data_write_skip1 : $fb3e          64318
df_rt_asm_data_write_skip2 : $fb5b          64347
        df_rt_asm_db : $faef          64239
  df_rt_asm_db_start : $faf4          64244
df_rt_asm_decode_token : $f128          61736
df_rt_asm_decode_token_done : $f175          61813
df_rt_asm_decode_token_keyword : $f13a          61754
       df_rt_asm_dir : $fab0          64176
  df_rt_asm_do_label : $fa9a          64154
        df_rt_asm_ds : $fb6b          64363
        df_rt_asm_dw : $faf2          64242
    df_rt_asm_encode : $fbcf          64463
df_rt_asm_encode_print : $fc2e          64558
df_rt_asm_encode_skiprel : $fc17          64535
df_rt_asm_encode_writebyte : $fc1d          64541
df_rt_asm_encode_writeword : $fc24          64548
df_rt_asm_err_quantity : $fc1b          64539
df_rt_asm_find_addr_mode : $fd42          64834
df_rt_asm_find_addr_mode_err : $fd57          64855
df_rt_asm_find_addr_mode_loop : $fd48          64840
df_rt_asm_get_operand : $fd37          64823
     df_rt_asm_label : $fac2          64194
      df_rt_asm_mnem : $fb88          64392
  df_rt_asm_mnem_chk : $fbab          64427
 df_rt_asm_mnem_done : $fbb9          64441
  df_rt_asm_mnem_err : $fbcd          64461
  df_rt_asm_mnem_try : $fb8e          64398
       df_rt_asm_opt : $fae7          64231
       df_rt_asm_org : $fad5          64213
   df_rt_asm_printCH : $fc95          64661
   df_rt_asm_printCR : $fc8c          64652
 df_rt_asm_printline : $fca2          64674
  df_rt_asm_printOPC : $fc5e          64606
  df_rt_asm_printOPR : $fc72          64626
df_rt_asm_printOPR_1 : $fc87          64647
   df_rt_asm_printPC : $fc4e          64590
  df_rt_asm_printSPC : $fc69          64617
df_rt_asm_print_mmen : $fc3e          64574
 df_rt_asm_print_rts : $fc4d          64589
df_rt_asm_rel_postive : $fc11          64529
df_rt_asm_skip_to_sym : $fd5a          64858
df_rt_asm_skip_to_sym_done : $fd59          64857
df_rt_asm_skip_to_sym_end : $fd77          64887
df_rt_asm_skip_to_sym_next : $fd68          64872
    df_rt_asm_string : $fb13          64275
 df_rt_asm_string_ch : $fb1a          64282
  df_rt_asm_tokenjmp : $ffe3          65507
        df_rt_assign : $ee65          61029
    df_rt_assign_str : $ee72          61042
         df_rt_asubb : $e85f          59487
      df_rt_asubbFin : $e86c          59500
   df_rt_binlen_skip : $f34e          62286
         df_rt_bload : $f2c4          62148
    df_rt_bload_addr : $f2e7          62183
         df_rt_bsave : $f2f7          62199
   df_rt_bsave_parms : $f32c          62252
         df_rt_bsuba : $e86d          59501
      df_rt_bsubaFin : $e87a          59514
AS65 Assembler for R6502 [1.42].                                     Page    7
---------------------------------- bank0.s -----------------------------------

          df_rt_call : $f444          62532
       df_rt_calljsr : $f453          62547
     df_rt_check_pos : $eb00          60160
   df_rt_check_while : $e9a6          59814
           df_rt_chr : $f4bb          62651
        df_rt_circle : $ed9b          60827
           df_rt_cls : $ecfa          60666
         df_rt_comeq : $e8d5          59605
         df_rt_comgt : $e8cc          59596
        df_rt_comgte : $e8e7          59623
         df_rt_comlt : $e8c3          59587
        df_rt_comlte : $e8de          59614
       df_rt_comment : $ee76          61046
         df_rt_comne : $e8f0          59632
       df_rt_copyStr : $e35d          58205
    df_rt_copyStr_ch : $e35f          58207
  df_rt_copyStr_done : $e368          58216
       df_rt_copy_fn : $f239          62009
        df_rt_cursor : $ed6f          60783
          df_rt_data : $ee76          61046
 df_rt_datastatement : $eb67          60263
   df_rt_datlinstart : $eb5f          60255
    df_rt_datnextlin : $eb6d          60269
      df_rt_datumerr : $eb95          60309
           df_rt_dec : $f500          62720
    df_rt_dec_binlen : $f348          62280
          df_rt_deek : $f36a          62314
           df_rt_def : $f668          63080
        df_rt_deferr : $f5c6          62918
  df_rt_def_find_var : $f675          63093
   df_rt_def_got_var : $f687          63111
df_rt_def_got_varparm : $f684          63108
df_rt_def_initialise_parm : $f6c3          63171
  df_rt_def_load_var : $f6a3          63139
df_rt_def_load_var_done : $f6d6          63190
 df_rt_def_parm_done : $f69b          63131
        df_rt_delete : $f246          62022
           df_rt_dim : $ec6f          60527
     df_rt_dim2_mul2 : $ecdc          60636
       df_rt_dim2_nz : $ecc7          60615
     df_rt_dim_alloc : $ecb6          60598
      df_rt_dim_done : $ecf6          60662
       df_rt_dim_err : $ecf8          60664
   df_rt_dim_findesc : $ec74          60532
      df_rt_dim_loop : $ec71          60529
      df_rt_dim_main : $ec70          60528
  df_rt_dim_set_type : $eceb          60651
           df_rt_dir : $f253          62035
           df_rt_div : $e7bf          59327
      df_rt_doassign : $ee68          61032
          df_rt_doke : $f176          61814
        df_rt_doline : $edb4          60852
       df_rt_dosound : $f1bd          61885
       df_rt_do_else : $ea72          60018
      df_rt_do_fname : $f235          62005
       df_rt_elapsed : $f429          62505
          df_rt_else : $ea22          59938
        df_rt_elseif : $ea22          59938
        df_rt_enddef : $f6e0          63200
         df_rt_endif : $ea1d          59933
           df_rt_eor : $e845          59461
           df_rt_eos : $ee78          61048
AS65 Assembler for R6502 [1.42].                                     Page    8
---------------------------------- bank0.s -----------------------------------

      df_rt_eos_true : $ee86          61062
            df_rt_eq : $e8af          59567
        df_rt_escjmp : $e74b          59211
      df_rt_eval_byt : $e4ab          58539
   df_rt_eval_bytbin : $e373          58227
   df_rt_eval_bytdec : $e373          58227
   df_rt_eval_bythex : $e373          58227
      df_rt_eval_chr : $e373          58227
      df_rt_eval_esc : $e2a7          58023
  df_rt_eval_esc_tab : $e2b6          58038
   df_rt_eval_intbin : $e373          58227
   df_rt_eval_intdec : $e373          58227
   df_rt_eval_inthex : $e373          58227
     df_rt_eval_lvar : $e3fc          58364
   df_rt_eval_lvskip : $e3d9          58329
     df_rt_eval_proc : $e4bc          58556
 df_rt_eval_proc_err : $e4c9          58569
      df_rt_eval_ptr : $e4b5          58549
 df_rt_eval_reserved : $e37f          58239
   df_rt_eval_strlit : $e381          58241
df_rt_eval_strlit_ch : $e391          58257
df_rt_eval_strlit_done : $e398          58264
      df_rt_eval_var : $e3c6          58310
df_rt_eval_var_dim2adj : $e444          58436
df_rt_eval_var_dim2adjx : $e450          58448
df_rt_eval_var_dim2adjy : $e44b          58443
df_rt_eval_var_do_arry : $e419          58393
df_rt_eval_var_nomult : $e467          58471
df_rt_eval_var_notarry : $e3ec          58348
 df_rt_eval_var_push : $e47f          58495
df_rt_eval_var_simple : $e409          58377
  df_rt_eval_var_str : $e4b4          58548
df_rt_exec_check_key : $e585          58757
   df_rt_exec_ctrl_c : $e58d          58765
   df_rt_exec_ctrl_z : $e58f          58767
      df_rt_exec_end : $e583          58755
 df_rt_exec_find_tok : $e547          58695
df_rt_exec_found_tok : $e54c          58700
 df_rt_exec_init_ptr : $e540          58688
     df_rt_exec_jump : $e591          58769
   df_rt_exec_no_key : $e560          58720
     df_rt_exec_proc : $f61e          63006
     df_rt_exec_stat : $e53a          58682
         df_rt_false : $e881          59521
  df_rt_file_cleanup : $f286          62086
     df_rt_file_errc : $f270          62064
 df_rt_findelseendif : $e9e5          59877
    df_rt_findescval : $e646          58950
df_rt_findescval_loop : $e649          58953
      df_rt_findproc : $e5fe          58878
  df_rt_findproc_cmd : $e610          58896
  df_rt_findproc_err : $e644          58948
df_rt_findproc_nextstat : $e630          58928
      df_rt_findwend : $e973          59763
    df_rt_fname_case : $f23b          62011
           df_rt_for : $ea75          60021
 df_rt_generate_lvar : $ee42          60994
           df_rt_get : $f3fb          62459
     df_rt_getdatatk : $eb7b          60283
       df_rt_getlvar : $e660          58976
       df_rt_getnval : $e21c          57884
      df_rt_get2Ints : $e4cb          58571
AS65 Assembler for R6502 [1.42].                                     Page    9
---------------------------------- bank0.s -----------------------------------

      df_rt_get2Strs : $e4da          58586
      df_rt_get_push : $f40c          62476
     df_rt_get_pushp : $f40b          62475
      df_rt_get_sync : $f400          62464
            df_rt_gt : $e89b          59547
           df_rt_gte : $e8a5          59557
      df_rt_gte_calc : $e8a8          59560
           df_rt_hex : $f4cf          62671
         df_rt_hires : $ed78          60792
            df_rt_if : $ea34          59956
         df_rt_ifcmd : $e9e8          59880
        df_rt_ifelse : $ea06          59910
        df_rt_ifeval : $ea36          59958
  df_rt_ifskipelseif : $e9fd          59901
       df_rt_if_done : $ea21          59937
      df_rt_if_found : $ea13          59923
      df_rt_if_match : $e9dd          59869
       df_rt_if_stat : $e9c7          59847
   df_rt_if_stat_err : $e9db          59867
     df_rt_init_done : $e21b          57883
 df_rt_init_filename : $f204          61956
 df_rt_init_stat_ptr : $e527          58663
      df_rt_init_vvt : $e1e0          57824
 df_rt_init_vvt_skip : $e20d          57869
df_rt_init_vvt_skip_proc : $e205          57861
 df_rt_init_vvt_slot : $e1ea          57834
df_rt_init_vvt_slot_undim : $e1f6          57846
df_rt_init_vvt_z_loop : $e207          57863
           df_rt_ink : $ed81          60801
         df_rt_input : $ec04          60420
     df_rt_input_err : $ec3e          60478
     df_rt_input_num : $ec27          60455
     df_rt_input_str : $ec1f          60447
    df_rt_ldtokenise : $f2ac          62124
          df_rt_left : $f50d          62733
           df_rt_len : $f557          62807
          df_rt_line : $edbb          60859
        df_rt_lineto : $edad          60845
          df_rt_list : $ef29          61225
  df_rt_listcheckvnt : $ee94          61076
   df_rt_listgotnext : $eec2          61122
   df_rt_listnextvnt : $eebb          61115
   df_rt_listpn_done : $eed2          61138
       df_rt_listprg : $ef50          61264
    df_rt_listprgend : $ef58          61272
      df_rt_listproc : $eed3          61139
    df_rt_listprocch : $eea0          61088
    df_rt_listproccr : $eeab          61099
 df_rt_listprocnames : $ee88          61064
 df_rt_listprocpause : $eeb1          61105
    df_rt_listp_copy : $eeda          61146
    df_rt_listp_done : $ef1d          61213
 df_rt_listp_findcmd : $ef03          61187
 df_rt_listp_findend : $eefc          61180
df_rt_listp_notfound : $ef27          61223
      df_rt_listwait : $eeb8          61112
      df_rt_list_all : $ef3c          61244
 df_rt_list_all_line : $ef9f          61343
   df_rt_list_decode : $efab          61355
df_rt_list_decode_esc : $efdd          61405
df_rt_list_decode_token : $f0ea          61674
df_rt_list_decode_token_normal : $f0f1          61681
AS65 Assembler for R6502 [1.42].                                     Page   10
---------------------------------- bank0.s -----------------------------------

   df_rt_list_donvvt : $f0d8          61656
df_rt_list_do_decode_tkn : $f0f8          61688
   df_rt_list_escval : $efbb          61371
  df_rt_list_findvvt : $f082          61570
df_rt_list_find_asm_sym : $f145          61765
 df_rt_list_find_sym : $f101          61697
   df_rt_list_gotvvt : $f0af          61615
df_rt_list_gotvvtend : $f09b          61595
df_rt_list_got_asm_sym : $f163          61795
df_rt_list_got_last_sym : $f112          61714
  df_rt_list_got_sym : $f116          61718
     df_rt_list_line : $ef5e          61278
df_rt_list_line_cont : $ef78          61304
 df_rt_list_line_fin : $ef9c          61340
df_rt_list_line_only : $efa2          61346
df_rt_list_line_only_fin : $ef9e          61342
    df_rt_list_linno : $ef43          61251
   df_rt_list_linnum : $f0d9          61657
  df_rt_list_nexttok : $efc4          61380
df_rt_list_next_asm_ch : $f14a          61770
  df_rt_list_next_ch : $f106          61702
df_rt_list_next_line : $ef7f          61311
    df_rt_list_pause : $ef6d          61293
  df_rt_list_synckey : $ef69          61289
    df_rt_list_token : $efc1          61377
   df_rt_list_vvtend : $f08e          61582
       df_rt_loadbin : $f318          62232
  df_rt_loadbin_byte : $f31a          62234
   df_rt_loadbin_inc : $f324          62244
      df_rt_loadline : $f294          62100
         df_rt_local : $ec40          60480
    df_rt_local_done : $ec68          60520
 df_rt_local_findesc : $ec47          60487
           df_rt_lsr : $e814          59412
        df_rt_lsrbit : $e81a          59418
       df_rt_lsrdone : $e824          59428
       df_rt_lst_bin : $f048          61512
       df_rt_lst_bit : $f052          61522
 df_rt_lst_bit_skip0 : $f05a          61530
    df_rt_lst_bytbin : $f03e          61502
    df_rt_lst_bythex : $f019          61465
       df_rt_lst_chr : $effc          61436
df_rt_lst_const_done : $f028          61480
   df_rt_lst_hex_pre : $f00f          61455
    df_rt_lst_intbin : $f046          61510
    df_rt_lst_intdec : $f062          61538
    df_rt_lst_inthex : $f02c          61484
    df_rt_lst_lo_hex : $f01c          61468
      df_rt_lst_proc : $f06d          61549
  df_rt_lst_reserved : $effb          61435
    df_rt_lst_strlit : $f0bf          61631
  df_rt_lst_strlitch : $f0c6          61638
 df_rt_lst_strlitdon : $f0d1          61649
       df_rt_lst_var : $f06d          61549
            df_rt_lt : $e887          59527
           df_rt_lte : $e891          59537
      df_rt_lte_calc : $e894          59540
           df_rt_mem : $f3a7          62375
      df_rt_mem_calc : $f3e8          62440
      df_rt_mem_free : $f3b2          62386
       df_rt_mem_prg : $f3c5          62405
       df_rt_mem_var : $f3d8          62424
AS65 Assembler for R6502 [1.42].                                     Page   11
---------------------------------- bank0.s -----------------------------------

           df_rt_mid : $f539          62777
           df_rt_mod : $e7e0          59360
       df_rt_monitor : $e948          59720
          df_rt_mult : $e79e          59294
         df_rt_music : $f1c0          61888
       df_rt_nassign : $ee25          60965
            df_rt_ne : $e8b9          59577
         df_rt_neval : $e222          57890
    df_rt_neval_done : $e26e          57966
   df_rt_neval_donow : $e291          58001
     df_rt_neval_esc : $e24c          57932
df_rt_neval_nextbyte : $e276          57974
    df_rt_neval_optk : $e225          57893
 df_rt_neval_process : $e265          57957
  df_rt_neval_pushOp : $e2a2          58018
      df_rt_neval_tk : $e253          57939
   df_rt_neval_tk_fn : $e26f          57967
   df_rt_neval_tk_op : $e27b          57979
  df_rt_neval_tk_opp : $e27a          57978
           df_rt_new : $e94b          59723
          df_rt_next : $eab3          60083
     df_rt_nextdatum : $eb4f          60239
      df_rt_nextstat : $e5a9          58793
  df_rt_nextstat_err : $e5d5          58837
   df_rt_nextstat_ln : $e5c0          58816
    df_rt_next_check : $eb03          60163
      df_rt_next_err : $eb0c          60172
      df_rt_noif_err : $ea32          59954
     df_rt_not_dimed : $e48e          58510
     df_rt_not_noise : $f1a0          61856
  df_rt_no_autostart : $f2a9          62121
df_rt_openforbinload : $f2bb          62139
df_rt_openforbinsave : $f2b2          62130
            df_rt_or : $e836          59446
         df_rt_paper : $ed87          60807
     df_rt_parm_pop3 : $e501          58625
    df_rt_parm_2ints : $e4e9          58601
    df_rt_parm_3ints : $e4f4          58612
    df_rt_parm_4ints : $e50b          58635
    df_rt_parse_file : $f256          62038
df_rt_parse_file_print : $f263          62051
          df_rt_peek : $f36c          62316
         df_rt_pixel : $f41c          62492
       df_rt_pixmode : $ed7b          60795
          df_rt_play : $f1d5          61909
          df_rt_plot : $ecfd          60669
       df_rt_plotstr : $ed30          60720
     df_rt_plotstrch : $ed41          60737
   df_rt_plotstrdone : $ed6e          60782
    df_rt_plot_h_int : $ed27          60711
    df_rt_plot_h_str : $ed5c          60764
         df_rt_point : $ed91          60817
          df_rt_poke : $f178          61816
     df_rt_poke_done : $f18b          61835
      df_rt_pop_stat : $e5e5          58853
   df_rt_pop_stat_go : $e67c          59004
         df_rt_print : $edec          60908
       df_rt_printat : $ede2          60898
       df_rt_println : $ee1d          60957
    df_rt_print_done : $ee1a          60954
  df_rt_print_gotstr : $ee14          60948
     df_rt_print_num : $eb34          60212
AS65 Assembler for R6502 [1.42].                                     Page   12
---------------------------------- bank0.s -----------------------------------

     df_rt_print_str : $eb3b          60219
  df_rt_print_str_ch : $eb44          60228
df_rt_print_str_done : $eb4e          60238
      df_rt_print_ws : $edef          60911
          df_rt_proc : $f5c8          62920
     df_rt_proc_addr : $f5f2          62962
    df_rt_proc_local : $f70a          63242
df_rt_proc_local_load : $f711          63249
  df_rt_proc_parmerr : $f5c6          62918
df_rt_proc_parm_done : $f611          62993
df_rt_proc_parm_none : $f612          62994
df_rt_proc_push_parm : $f5fd          62973
df_rt_proc_unloadvar : $f6e6          63206
df_rt_proc_unload_done : $f706          63238
     df_rt_push_int1 : $f450          62544
     df_rt_push_stat : $e5d9          58841
     df_rt_putintres : $e771          59249
          df_rt_read : $ebec          60396
      df_rt_readbyte : $f36d          62317
 df_rt_readbyte_skip : $f382          62338
     df_rt_readdatum : $eb97          60311
     df_rt_read_done : $ec01          60417
 df_rt_read_find_var : $ebee          60398
         df_rt_redim : $ec6c          60524
        df_rt_repeat : $eb0e          60174
         df_rt_reset : $f355          62293
        df_rt_return : $f6dd          63197
         df_rt_right : $f51e          62750
           df_rt_rnd : $f385          62341
     df_rt_rnd_noeor : $f399          62361
       df_rt_rnd_set : $f3a0          62368
           df_rt_run : $ee77          61047
     df_rt_run_token : $e59a          58778
          df_rt_sadd : $eb33          60211
       df_rt_sassign : $ee3c          60988
       df_rt_savebin : $f32a          62250
  df_rt_savebin_byte : $f338          62264
   df_rt_savebin_inc : $f342          62274
          df_rt_scrn : $f40f          62479
  df_rt_sd_connected : $f217          61975
           df_rt_seq : $e924          59684
         df_rt_seval : $e2dc          58076
    df_rt_seval_copy : $e336          58166
    df_rt_seval_done : $e359          58201
     df_rt_seval_esc : $e302          58114
df_rt_seval_esc_proc : $e357          58199
df_rt_seval_esc_strlit : $e351          58193
 df_rt_seval_esc_var : $e332          58162
df_rt_seval_nextbyte : $e34c          58188
    df_rt_seval_optk : $e2ea          58090
      df_rt_seval_tk : $e310          58128
   df_rt_seval_tk_fn : $e329          58153
   df_rt_seval_tk_op : $e325          58149
           df_rt_sgn : $f456          62550
         df_rt_sgn_n : $f469          62569
         df_rt_sgn_z : $f46e          62574
           df_rt_sgt : $e91b          59675
          df_rt_sgte : $e906          59654
df_rt_skipinitdataptr : $eb85          60293
 df_rt_skipnestendif : $ea10          59920
    df_rt_skipnestif : $ea03          59907
  df_rt_skip_dim_chk : $ec96          60566
AS65 Assembler for R6502 [1.42].                                     Page   13
---------------------------------- bank0.s -----------------------------------

       df_rt_skip_ws : $e653          58963
  df_rt_skip_ws_loop : $e656          58966
           df_rt_slt : $e914          59668
          df_rt_slte : $e8f9          59641
    df_rt_snd_common : $f18c          61836
           df_rt_sne : $e90d          59661
         df_rt_sound : $f1ba          61882
df_rt_sound_env_skip : $f1b7          61879
       df_rt_sprchar : $f58c          62860
        df_rt_sprhit : $f5b4          62900
df_rt_sprhit_inactive : $f5c0          62912
       df_rt_sprinit : $f5ab          62891
      df_rt_sprmulti : $f5ae          62894
        df_rt_sprpos : $f596          62870
        df_rt_sprupd : $f5a2          62882
         df_rt_stick : $f3f5          62453
 df_rt_strlen_common : $f47b          62587
  df_rt_strlen_count : $f481          62593
      df_rt_str_comp : $e92b          59691
 df_rt_str_comp_byte : $e930          59696
   df_rt_str_comp_eq : $e945          59717
df_rt_str_comp_false : $e900          59648
   df_rt_str_comp_gt : $e942          59714
   df_rt_str_comp_lt : $e93f          59711
 df_rt_str_comp_true : $e903          59651
    df_rt_str_cpy_ch : $f49b          62619
   df_rt_str_extract : $f488          62600
           df_rt_sub : $e78b          59275
          df_rt_sval : $e2e0          58080
          df_rt_text : $ed75          60789
         df_rt_tload : $f28c          62092
      df_rt_tokenjmp : $e685          59013
          df_rt_true : $e87b          59515
      df_rt_try_tape : $f22f          61999
         df_rt_tsave : $f272          62066
         df_rt_until : $eb16          60182
df_rt_untilnext_done : $eb29          60201
     df_rt_until_err : $eb31          60209
           df_rt_val : $f574          62836
       df_rt_val_err : $f588          62856
          df_rt_wait : $edcc          60876
  df_rt_wait_counter : $edd0          60880
     df_rt_wait_done : $ede1          60897
   df_rt_wait_skiphi : $edda          60890
     df_rt_wait_tick : $edd2          60882
          df_rt_wend : $e9b1          59825
      df_rt_wend_end : $e9af          59823
      df_rt_wend_err : $e9c5          59845
         df_rt_while : $e94e          59726
     df_rt_while_cmd : $e984          59780
    df_rt_while_done : $e95e          59742
         df_sevalptr : $007b            123
    df_show_err_done : $f936          63798
     df_show_err_fin : $f915          63765
    df_show_err_find : $f8c9          63689
  df_show_err_linnum : $f8fc          63740
    df_show_err_skip : $f8cd          63693
               df_sp : $0060             96
          df_starend : $0075            117
         df_starstrt : $0073            115
         df_strbuffz : $0079            121
          df_stridxz : $007a            122
AS65 Assembler for R6502 [1.42].                                     Page   14
---------------------------------- bank0.s -----------------------------------

      df_str_src_end : $f4b0          62640
        df_st_malloc : $f7a3          63395
df_st_typemismatcherr : $f78f          63375
          df_syminiz : $0085            133
           df_symoff : $0084            132
           df_symtab : $0082            130
         df_tk_abort : $e01e          57374
           df_tk_add : $e01e          57374
          df_tk_addr : $dffb          57339
           df_tk_and : $e01e          57374
        df_tk_arrvar : $d9de          55774
           df_tk_asc : $dff1          57329
           df_tk_asl : $e01e          57374
 df_tk_asm_addr_mode : $fa2c          64044
df_tk_asm_addr_mode_ok : $fa1b          64027
df_tk_asm_addr_mode_1 : $fa41          64065
df_tk_asm_addr_mode_2 : $fa4b          64075
df_tk_asm_checknexttok : $f9d4          63956
df_tk_asm_checktokch : $f9d6          63958
        df_tk_asm_db : $df85          57221
        df_tk_asm_ds : $e023          57379
        df_tk_asm_dw : $df85          57221
df_tk_asm_exec_parser : $fa1d          64029
df_tk_asm_foundsymend : $f9fc          63996
df_tk_asm_found_command : $f996          63894
     df_tk_asm_label : $f9b3          63923
  df_tk_asm_matchtok : $f9c6          63942
  df_tk_asm_mnemonic : $f9b0          63920
       df_tk_asm_opt : $e023          57379
       df_tk_asm_org : $e023          57379
df_tk_asm_parse_command : $f991          63889
df_tk_asm_parse_command_err : $f9af          63919
  df_tk_asm_symfound : $fa0f          64015
df_tk_asm_symnextentry : $f9ed          63981
df_tk_asm_symnomatch : $f9eb          63979
  df_tk_asm_tokenjmp : $ffd9          65497
        df_tk_assign : $df2e          57134
         df_tk_bload : $e029          57385
          df_tk_body : $db4a          56138
         df_tk_bsave : $e033          57395
          df_tk_call : $e010          57360
      df_tk_callproc : $dfe5          57317
          df_tk_char : $d936          55606
      df_tk_char_err : $d8de          55518
         df_tk_chdir : $e023          57379
  df_tk_checknexttok : $dbdd          56285
    df_tk_checktokch : $dbfa          56314
           df_tk_chr : $dff1          57329
        df_tk_circle : $e033          57395
     df_tk_closebrkt : $dff6          57334
           df_tk_cls : $e01e          57374
        df_tk_colour : $e033          57395
       df_tk_comment : $df37          57143
  df_tk_comment_done : $df42          57154
         df_tk_const : $d974          55668
     df_tk_const_err : $d994          55700
df_tk_const_try_char : $d98d          55693
 df_tk_const_try_num : $d983          55683
 df_tk_const_try_str : $d986          55686
        df_tk_cursor : $e023          57379
          df_tk_data : $df85          57221
     df_tk_data_done : $df83          57219
AS65 Assembler for R6502 [1.42].                                     Page   15
---------------------------------- bank0.s -----------------------------------

           df_tk_dec : $dff1          57329
          df_tk_deek : $dff1          57329
           df_tk_def : $dfc9          57289
           df_tk_del : $e023          57379
        df_tk_delete : $e023          57379
           df_tk_dim : $dfab          57259
           df_tk_dir : $e01e          57374
           df_tk_div : $e01e          57374
          df_tk_doke : $e029          57385
          df_tk_done : $db80          56192
       df_tk_elapsed : $dffb          57339
          df_tk_else : $e01e          57374
        df_tk_elseif : $e023          57379
        df_tk_enddef : $e01e          57374
         df_tk_endif : $e01e          57374
           df_tk_eor : $e01e          57374
            df_tk_eq : $e01e          57374
         df_tk_error : $df2c          57132
      df_tk_errortab : $f7fe          63486
        df_tk_error2 : $dfef          57327
   df_tk_error_atpos : $f8a2          63650
   df_tk_error_error : $f8a8          63656
  df_tk_error_inline : $f898          63640
   df_tk_exec_parser : $dba2          56226
        df_tk_expect : $d8d2          55506
      df_tk_expectok : $d8d0          55504
    df_tk_expect_tok : $d8e0          55520
df_tk_expect_tok_err : $d8eb          55531
df_tk_expect_tok_fatal : $d8f0          55536
    df_tk_expression : $dadd          56029
     df_tk_expre_err : $dae8          56040
     df_tk_expr_more : $df8a          57226
           df_tk_for : $dfce          57294
   df_tk_foundsymend : $dc29          56361
           df_tk_get : $dff1          57329
       df_tk_get_buf : $d860          55392
  df_tk_get_buf_null : $d86a          55402
            df_tk_gt : $e01e          57374
           df_tk_gte : $e01e          57374
         df_tk_hchar : $e033          57395
           df_tk_hex : $dff1          57329
         df_tk_hires : $e01e          57374
            df_tk_if : $e023          57379
           df_tk_imm : $fa61          64097
      df_tk_indirect : $fa64          64100
 df_tk_indirect_done : $fa89          64137
    df_tk_indirect_y : $fa78          64120
           df_tk_ink : $e023          57379
         df_tk_input : $df93          57235
       df_tk_isalpha : $d8a3          55459
    df_tk_isalphanum : $d8b0          55472
 df_tk_isalpha_false : $d8a0          55456
         df_tk_isbin : $d884          55428
    df_tk_isbin_true : $d88d          55437
       df_tk_isdigit : $d879          55417
 df_tk_isdigit_false : $d882          55426
         df_tk_isEOS : $daef          56047
         df_tk_ishex : $d88e          55438
   df_tk_ishex_false : $d8a0          55456
   df_tk_ishex_truep : $d89e          55454
        df_tk_isproc : $d8b6          55478
   df_tk_isproc_true : $d8bb          55483
AS65 Assembler for R6502 [1.42].                                     Page   16
---------------------------------- bank0.s -----------------------------------

          df_tk_isws : $d8cb          55499
    df_tk_isws_false : $d8d0          55504
          df_tk_left : $e004          57348
           df_tk_len : $dff1          57329
          df_tk_line : $e03b          57403
       df_tk_linenum : $dbb1          56241
        df_tk_lineto : $e029          57385
    df_tk_line_empty : $db9e          56222
          df_tk_list : $df67          57191
df_tk_listp_procname : $df44          57156
df_tk_listp_procname_ch : $df53          57171
df_tk_listp_procname_err : $df65          57189
df_tk_listp_procname_ok : $df64          57188
     df_tk_list_done : $df77          57207
     df_tk_list_line : $df73          57203
    df_tk_list_procs : $df6c          57196
         df_tk_local : $dfba          57274
      df_tk_localvar : $d9c8          55752
 df_tk_localvar_cont : $d9ce          55758
           df_tk_lsr : $e01e          57374
            df_tk_lt : $e01e          57374
           df_tk_lte : $e01e          57374
      df_tk_matchtok : $dbd0          56272
df_tk_matchtok_skip_op : $dbf6          56310
           df_tk_mem : $dff1          57329
           df_tk_mid : $e00a          57354
           df_tk_mod : $e01e          57374
       df_tk_monitor : $e01e          57374
          df_tk_mult : $e01e          57374
         df_tk_music : $e03b          57403
         df_tk_narry : $da5d          55901
     df_tk_narry_end : $da6a          55914
         df_tk_nbrkt : $da6f          55919
            df_tk_ne : $e01e          57374
           df_tk_new : $e01e          57374
          df_tk_next : $e01e          57374
     df_tk_next_expr : $df85          57221
           df_tk_nop : $dac8          56008
     df_tk_nop_false : $da87          55943
       df_tk_not_eos : $dae7          56039
         df_tk_nterm : $da7c          55932
    df_tk_nterm_cont : $da89          55945
    df_tk_nterm_done : $da87          55943
     df_tk_nterm_err : $dac6          56006
    df_tk_nterm_proc : $da77          55927
   df_tk_nterm_tryfn : $da96          55958
df_tk_nterm_try_const : $dac0          56000
df_tk_nterm_try_proc : $daac          55980
 df_tk_nterm_try_var : $dab8          55992
           df_tk_num : $d8f2          55538
       df_tk_num_bin : $d921          55585
       df_tk_num_err : $d8de          55518
    df_tk_num_hexbin : $d913          55571
       df_tk_num_put : $d929          55593
            df_tk_or : $e01e          57374
         df_tk_paper : $e023          57379
          df_tk_parm : $d9b6          55734
 df_tk_parm_skip_var : $d9c3          55747
    df_tk_parseerror : $dba0          56224
 df_tk_parse_command : $db09          56073
df_tk_parse_command_done : $db1f          56095
df_tk_parse_command_err : $db20          56096
AS65 Assembler for R6502 [1.42].                                     Page   17
---------------------------------- bank0.s -----------------------------------

df_tk_parse_user_proc : $daff          56063
          df_tk_peek : $dff1          57329
      df_tk_peek_buf : $d85a          55386
         df_tk_pixel : $e004          57348
       df_tk_pixmode : $e023          57379
          df_tk_play : $e03b          57403
          df_tk_plot : $e033          57395
         df_tk_point : $e029          57385
          df_tk_poke : $e029          57385
     df_tk_preassign : $df1c          57116
         df_tk_print : $df7e          57214
       df_tk_printat : $df78          57208
       df_tk_println : $df7e          57214
    df_tk_print_done : $df83          57219
          df_tk_proc : $d9e9          55785
     df_tk_proc_call : $da25          55845
    df_tk_proc_comma : $da3f          55871
      df_tk_proc_err : $da5b          55899
     df_tk_proc_errp : $da5a          55898
   df_tk_proc_noparm : $da48          55880
    df_tk_proc_parms : $da18          55832
df_tk_proc_skip_args : $da58          55896
df_tk_proc_skip_call : $da2e          55854
  df_tk_put_overflow : $d877          55415
       df_tk_put_tok : $d86b          55403
          df_tk_read : $df9c          57244
         df_tk_redim : $dfab          57259
        df_tk_repeat : $e01e          57374
         df_tk_reset : $dfe7          57319
        df_tk_return : $e020          57376
         df_tk_right : $e004          57348
           df_tk_rnd : $dff1          57329
          df_tk_rts1 : $d8b5          55477
           df_tk_run : $e01e          57374
          df_tk_scrn : $e004          57348
           df_tk_sgn : $dff1          57329
       df_tk_skip_ws : $d8bc          55484
    df_tk_skip_1_spc : $db5d          56157
         df_tk_sound : $e033          57395
       df_tk_sprchar : $e029          57385
        df_tk_sprhit : $dff1          57329
       df_tk_sprinit : $e01e          57374
     df_tk_spritepos : $e033          57395
      df_tk_sprmulti : $e029          57385
        df_tk_sprpos : $e033          57395
        df_tk_sprupd : $e01e          57374
         df_tk_stick : $dff6          57334
           df_tk_str : $d952          55634
        df_tk_str_ch : $d95a          55642
       df_tk_str_don : $d96b          55659
       df_tk_str_err : $d972          55666
           df_tk_sub : $e01e          57374
      df_tk_symfound : $dc3a          56378
df_tk_symfound_final : $dc4a          56394
  df_tk_symnextentry : $dc1a          56346
    df_tk_symnomatch : $dc18          56344
   df_tk_symnomatchp : $dc17          56343
          df_tk_text : $e01e          57374
         df_tk_tload : $e023          57379
      df_tk_tokenjmp : $dde5          56805
     df_tk_tokentype : $deab          57003
df_tk_tok_expression : $dae9          56041
AS65 Assembler for R6502 [1.42].                                     Page   18
---------------------------------- bank0.s -----------------------------------

       df_tk_try_asm : $db76          56182
    df_tk_try_assign : $db7b          56187
   df_tk_try_command : $db6f          56175
         df_tk_tsave : $e023          57379
         df_tk_until : $e023          57379
           df_tk_val : $dff1          57329
           df_tk_var : $d996          55702
      df_tk_variable : $df0e          57102
        df_tk_var_ck : $d9ac          55724
      df_tk_var_cont : $d99c          55708
    df_tk_var_noarry : $d970          55664
         df_tk_vpeek : $dff1          57329
          df_tk_wait : $e023          57379
          df_tk_wend : $e01e          57374
         df_tk_while : $e023          57379
      df_tk_ws_loop1 : $d8bc          55484
        df_tk_2parms : $e029          57385
        df_tk_3parms : $e033          57395
        df_tk_4parms : $e03b          57403
          df_tmpptra : $00a2            162
          df_tmpptrb : $00a4            164
          df_tmpptrc : $00a6            166
          df_tmpptrd : $00a8            168
          df_tmpptre : $00aa            170
              df_tok : $0480           1152
          df_tokbuff : $0480           1152
        df_tokensyms : $dc52          56402
           df_tokoff : $007e            126
       df_trap_error : $f8af          63663
  df_trap_go_monitor : $f8c4          63684
     df_trap_monitor : $f93d          63805
      df_trap_normal : $f8c7          63687
           df_varcnt : $0072            114
      df_var_analyse : $d7ac          55212
df_var_analyse_chk_arry : $d7df          55263
df_var_analyse_chk_dollar : $d7d6          55254
df_var_analyse_chk_post : $d7d6          55254
df_var_analyse_fatal_err : $d7ca          55242
   df_var_analyse_ok : $d821          55329
   df_var_check_type : $d70c          55052
     df_var_countlen : $d797          55191
df_var_countlen_alphanum : $d7a6          55206
df_var_countlen_loop : $d7a9          55209
 df_var_finalise_len : $d7ec          55276
         df_var_find : $d6d2          54994
   df_var_findcreate : $d7f5          55285
df_var_findcreate_copy : $d843          55363
df_var_findcreate_create : $d80e          55310
df_var_findcreate_err : $d81f          55327
df_var_findcreate_errp : $d81e          55326
df_var_findcreate_found : $d807          55303
  df_var_find_no_vnt : $d730          55088
    df_var_find_true : $d735          55093
df_var_initialise_var : $d82e          55342
 df_var_insert_space : $d73d          55101
    df_var_match_vnt : $d6e2          55010
 df_var_match_vnt_do : $d6ee          55022
df_var_match_vnt_sym : $d6f2          55026
    df_var_move_byte : $d75f          55135
 df_var_move_byte_do : $d76b          55147
df_var_move_byte_fin : $d77c          55164
     df_var_not_proc : $d7cc          55244
AS65 Assembler for R6502 [1.42].                                     Page   19
---------------------------------- bank0.s -----------------------------------

df_var_vnt_entry_end : $d71d          55069
df_var_vnt_sym_nomatch : $d710          55056
     df_var_zero_vnt : $d83a          55354
           df_vntend : $006c            108
          df_vntstrt : $006a            106
           df_vvtend : $0070            112
          df_vvtstrt : $006e            110
               errno : $005e             94
 fd_cload_getname_pc : $c5c7          50631
 fd_csave_getname_pc : $c625          50725
     fd_getname_addr : $0400           1024
        file_vectors : $c54e          50510
             f_back4 : $c589          50569
         f_block_gap : $c572          50546
     f_block_gap_vec : $0008              8
             f_close : $c600          50688
    f_close_no_flush : $c609          50697
         f_get_block : $c6f0          50928
   f_get_block_bytes : $c701          50945
          f_get_byte : $c6d3          50899
      f_get_byte_buf : $c6e0          50912
         f_get_fname : $c5e6          50662
   f_get_fname_start : $c5d7          50647
        f_get_header : $c5e0          50656
              f_init : $c566          50534
      f_init_default : $c59d          50589
  f_init_default_rts : $c5a7          50599
          f_init_vec : $0000              0
      f_init_vectors : $c5af          50607
          f_no_print : $c59c          50588
        f_open_bread : $c5c7          50631
       f_open_bwrite : $c61b          50715
       f_open_common : $c5a8          50600
          f_open_msg : $c578          50552
         f_open_read : $c5c7          50631
        f_open_write : $c621          50721
  f_open_write_start : $c625          50725
       f_print_block : $c6c2          50882
   f_print_block_num : $c6b8          50872
        f_print_byte : $c595          50581
         f_print_msg : $c58e          50574
         f_put_block : $c695          50837
   f_put_block_bytes : $c6ab          50859
          f_put_byte : $c66b          50795
     f_put_byte_done : $c68e          50830
         f_put_delay : $c56f          50543
     f_put_delay_vec : $0006              6
         f_read_byte : $c569          50537
     f_read_byte_vec : $0002              2
           f_release : $c575          50549
       f_release_vec : $000a             10
          f_save_msg : $c581          50561
          f_skip_dir : $c5fd          50685
           f_skip_sd : $c5ad          50605
     f_storage_table : $000c             12
       f_storage_vec : $0611           1553
        f_write_byte : $c56c          50540
    f_write_byte_vec : $0004              4
       f_write_fname : $c65d          50781
      f_write_header : $c654          50772
               grc_d : $0043             67   *
               grc_r : $003f             63   *
AS65 Assembler for R6502 [1.42].                                     Page   20
---------------------------------- bank0.s -----------------------------------

               grc_x : $0040             64   *
              grc_x0 : $003d             61   *
               grc_y : $0042             66   *
              grc_y0 : $003e             62   *
              grl_dx : $0041             65   *
              grl_dy : $0042             66   *
               grl_p : $004b             75   *
            grl_sinx : $004a             74   *
            grl_siny : $004d             77   *
            grl_xyyx : $0043             67   *
              grl_x0 : $003d             61   *
              grl_x1 : $003f             63   *
              grl_y0 : $003e             62   *
              grl_y1 : $0040             64   *
             grl_2dx : $0044             68   *
            grl_2dxy : $0048             72   *
             grl_2dy : $0046             70   *
             gr_char : $0003              3
  gr_check_font_copy : $ce61          52833
gr_check_font_copy_done : $ce78          52856
           gr_circle : $d252          53842
      gr_circle_done : $d28f          53903
    gr_circle_d_lte0 : $d282          53890
      gr_circle_plot : $d25f          53855
    gr_circle_points : $d290          53904
              gr_cls : $cf4c          53068
          gr_cls_col : $cf6c          53100
          gr_cls_row : $cf58          53080
    gr_cls_skip_marg : $cf68          53096
        gr_copy_byte : $ce38          52792
         gr_copy_mem : $ce2e          52782
         gr_cur_down : $d097          53399
         gr_cur_left : $d079          53369
          gr_cur_ptr : $000c             12
        gr_cur_right : $d067          53351
  gr_cur_skip_at_bot : $d0a3          53411
 gr_cur_skip_at_left : $d088          53384
   gr_cur_skip_at_tl : $d08c          53388
           gr_cur_up : $d08d          53389
            gr_cur_x : $000a             10
            gr_cur_y : $000b             11
              gr_del : $d0a4          53412
       gr_geom_fill1 : $0007              7
         gr_geom_tmp : $0015             21
        gr_geom_tmp2 : $0017             23
              gr_get : $cfb3          53171
       gr_getXY_base : $cf90          53136
          gr_get_key : $d0ac          53420
        gr_get_key_2 : $d0b0          53424
            gr_hchar : $d161          53601
   gr_hchar_copyline : $d1b9          53689
gr_hchar_copyline_eor : $d1cf          53711
gr_hchar_copyline_erase : $d1df          53727
gr_hchar_copyline_nx : $d1f4          53748
    gr_hchar_getfont : $d194          53652
       gr_hchar_mask : $d18c          53644
    gr_hchar_rot1bit : $d19e          53662
gr_hchar_rot1bit_bcc : $d1a9          53673
 gr_hchar_rot1bit_nx : $d1ae          53678
            gr_hcode : $d147          53575
       gr_hcode_loop : $d14d          53581
          gr_hires_x : $0010             16
AS65 Assembler for R6502 [1.42].                                     Page   21
---------------------------------- bank0.s -----------------------------------

          gr_hires_y : $0011             17
         gr_hi_start : $0001              1
             gr_init : $ce48          52808
        gr_init_font : $ce18          52760
        gr_init_geom : $ce79          52857
   gr_init_geom_done : $ce78          52856
       gr_init_hires : $cecf          52943
gr_init_hires_tables : $cf08          53000
  gr_init_screen_txt : $ceb6          52918
     gr_init_tab_col : $cf34          53044
gr_init_tab_col_skip : $cf46          53062
     gr_init_tab_row : $cf12          53010
              gr_ink : $0012             18
    gr_key_check_key : $d0bc          53436
      gr_key_got_key : $d0d3          53459
       gr_key_no_key : $d0de          53470
    gr_key_skip_copy : $d0c4          53444
      gr_key_tidy_up : $d0d5          53461
             gr_line : $d308          54024
        gr_line_done : $d3e2          54242
       gr_line_neg_p : $d3d2          54226
       gr_line_pixel : $d39b          54171
 gr_line_skip_dx_neg : $d326          54054
 gr_line_skip_dy_neg : $d333          54067
   gr_line_skip_left : $d363          54115
gr_line_skip_xy_swap : $d353          54099
   gr_line_skip_y_up : $d36b          54123
     gr_line_yx_skip : $d3a7          54183
           gr_margin : $0014             20
             gr_mode : $0000              0
           gr_new_ln : $d04f          53327
       gr_nl_skip_nl : $d064          53348
       gr_no_special : $d0f3          53491
      gr_offset_40hi : $d3ff          54271
      gr_offset_40lo : $d3e3          54243
            gr_paper : $0013             19
            gr_pitch : $000f             15
            gr_pixel : $d21b          53787
          gr_pixmode : $000e             14
             gr_plot : $cfa0          53152
            gr_point : $d221          53793
       gr_point_done : $d251          53841
        gr_point_eor : $d24d          53837
      gr_point_setup : $d203          53763
  gr_point_skip_attr : $d243          53827
      gr_point_write : $d24f          53839
        gr_printable : $d117          53527
       gr_print_line : $d136          53558
   gr_print_msg_done : $d146          53574
   gr_print_msg_loop : $d13c          53564
  gr_process_special : $d0fc          53500
              gr_put : $cfa8          53160
         gr_put_byte : $d0e2          53474
     gr_put_byte_low : $d0f4          53492
           gr_screen : $0018             24
         gr_scrngeom : $0011             17
    gr_scrngeom_base : $ce88          52872
   gr_scrngeom_hires : $ce9d          52893
    gr_scrngeom_text : $ce8e          52878
      gr_scroll_char : $d011          53265
    gr_scroll_cpy_ln : $d00e          53262
  gr_scroll_erase_ln : $d045          53317
AS65 Assembler for R6502 [1.42].                                     Page   22
---------------------------------- bank0.s -----------------------------------

      gr_scroll_marg : $d041          53313
   gr_scroll_routine : $d058          53336
        gr_scroll_up : $cff2          53234
          gr_set_cur : $cfb9          53177
     gr_set_cur_init : $cfba          53178
     gr_set_cur_skip : $cfd2          53202
    gr_set_hires_cur : $d216          53782
       gr_special_ch : $d11d          53533
    gr_special_fn_hi : $d12e          53550
    gr_special_fn_lo : $d126          53542
     gr_special_loop : $d100          53504
         gr_spr_char : $d48e          54414
         gr_spr_draw : $d46d          54381
    gr_spr_draw_loop : $d46f          54383
    gr_spr_draw_next : $d47b          54395
        gr_spr_erase : $d429          54313
     gr_spr_erase_do : $d431          54321
   gr_spr_erase_loop : $d42b          54315
   gr_spr_erase_next : $d437          54327
          gr_spr_hit : $d494          54420
         gr_spr_init : $d41b          54299
    gr_spr_init_loop : $d41d          54301
   gr_spr_multi_loop : $d4af          54447
    gr_spr_multi_pos : $d4ab          54443
          gr_spr_new : $d43b          54331
     gr_spr_new_loop : $d43d          54333
     gr_spr_new_next : $d469          54377
          gr_spr_pos : $d49e          54430
          gr_spr_put : $d47f          54399
           gr_text_h : $0009              9
       gr_text_start : $0005              5
           gr_text_w : $0008              8
              HICHAR : $9800          38912   *
              HISCRN : $a000          40960   *
              HITEXT : $bf68          49000   *
          hex_to_bcd : $c350          50000
           hires_col : $9d90          40336   *
          hires_mask : $9e80          40576   *
        hires_row_hi : $9cc8          40136   *
       hires_row_low : $9c00          39936   *
                 IER : $000e             14   *
                 IFR : $000d             13   *
             IFR_CA1 : $0002              2   *
             IFR_CA2 : $0001              1   *
             IFR_CB1 : $0010             16   *
                IO_0 : $0300            768   *
       inc_kb_timers : $c152          49490
            infinity : $c07e          49278
                init : $c4b1          50353
            init_irq : $c0ba          49338
       init_keyboard : $c8a8          51368
            init_ram : $c4da          50394
       init_ram_fill : $c4e7          50407
       init_ram_skip : $c4ec          50412
          init_ram_1 : $c4e3          50403
            init_snd : $d5e5          54757
       init_snd_regs : $d5e7          54759
       init_tape_tab : $c523          50467
           init_via0 : $c4f9          50425
      init_via0_done : $c50b          50443
      init_via0_loop : $c4fb          50427
       init_via0_tab : $c50c          50444
AS65 Assembler for R6502 [1.42].                                     Page   23
---------------------------------- bank0.s -----------------------------------

      init_via0_tape : $c4f6          50422
              init_2 : $c4b6          50358
             int_div : $d66f          54895
       int_div_cycle : $d6a1          54945
      int_div_noflip : $d6d1          54993
        int_div_skip : $d6bb          54971
   int_div_skip_negA : $d686          54918
   int_div_skip_negB : $d699          54937
       int_fast_mult : $d61b          54811
 int_fast_mult_cycle : $d62b          54827
  int_fast_mult_next : $d63c          54844
            int_mult : $d644          54852
      int_mult_cycle : $d654          54868
       int_mult_next : $d667          54887
             int_str : $c3b9          50105
          int_to_str : $c39a          50074
       int_to_str_ch : $c385          50053
   int_to_str_ch_fin : $c399          50073
      int_to_str_fin : $c3d8          50136
       int_to_str_nz : $c392          50066
 int_to_str_skip_neg : $c3b4          50100
         int_vdp_fin : $c145          49477
     int_vdp_handler : $c12a          49450
    io_active_device : $c403          50179
          io_address : $0300            768
            io_block : $0601           1537
           io_buf_sz : $c48f          50319
            io_close : $c435          50229
          io_close_f : $0008              8
        io_copy_data : $c410          50192
          io_default : $0600           1536
           io_delete : $c438          50232
            io_del_f : $000a             10
          io_devices : $c491          50321
          io_device0 : $c491          50321
          io_device1 : $c4a1          50337
          io_do_echo : $c458          50264
             io_ext1 : $000c             12
             io_ext2 : $000e             14
         io_get_byte : $0000              0
           io_get_ch : $c429          50217
    io_get_line_byte : $c445          50245
    io_get_line_done : $c472          50290
             io_init : $c3f5          50165
          io_null_op : $c48d          50317
        io_open_ext1 : $c43b          50235
        io_open_ext2 : $c43e          50238
           io_open_r : $0004              4
        io_open_read : $c42f          50223
           io_open_w : $0006              6
       io_open_write : $c432          50226
       io_print_done : $c48b          50315
       io_print_line : $c47a          50298
  io_print_line_byte : $c481          50305
         io_put_byte : $0002              2
           io_put_ch : $c42c          50220
        io_read_line : $c441          50241
      io_set_default : $c400          50176
        io_skip_echo : $c45b          50267
     io_skip_special : $c466          50278
           io_struct : $0010             16
                 irq : $c0db          49371
AS65 Assembler for R6502 [1.42].                                     Page   24
---------------------------------- bank0.s -----------------------------------

             irq_brk : $c0fd          49405
             irq_fin : $c0f7          49399
           KB_CAPSLK : $0001              1   *
         KB_DEBOUNCE : $0001              1   *
              KB_IJK : $0020             32   *
              KB_PRB : $00b0            176   *
          KB_REP_DEL : $0014             20   *
          KB_REP_TIM : $0003              3   *
            KB_SENSE : $0008              8   *
          kb_any_key : $c93a          51514
     kb_any_key_none : $c95a          51546
  kb_any_key_pressed : $c95c          51548
      kb_any_key_row : $c941          51521
              kb_brk : $ca4b          51787
 kb_check_matrix_col : $c976          51574
 kb_check_matrix_row : $c976          51574
      kb_check_skip4 : $c997          51607
             kb_code : $002b             43
         kb_col_mask : $caeb          51947
              kb_deb : $002d             45
          kb_deb_tim : $002e             46
        kb_do_repeat : $ca3b          51771
          kb_get_key : $ca4d          51789
          kb_get_try : $ca51          51793
          kb_ijk_map : $caf8          51960
        kb_in_repeat : $ca47          51783
             kb_last : $002a             42
          kb_no_scan : $c9cc          51660
      kb_process_new : $c9da          51674
              kb_raw : $0029             41
         kb_rdel_tim : $0031             49
         kb_read_got : $c95c          51548
     kb_read_noshift : $ca07          51719
     kb_read_nothing : $c9a2          51618
         kb_read_raw : $c95e          51550
     kb_read_raw_got : $c9a6          51622
              kb_rep : $002f             47
          kb_rep_tim : $0030             48
      kb_scan_decode : $c9d0          51664
     kb_scan_got_key : $ca62          51810
         kb_scan_key : $c9b5          51637
        kb_skip_ctrl : $ca23          51747
             kb_stat : $002c             44
            kb_stick : $c8de          51422
        kb_stick_ijk : $c90c          51468
       kb_stick_mask : $caf3          51955
        kb_stick_pos : $c8f3          51443
       kb_store_last : $ca43          51779
      kb_table_shift : $caab          51883
        kb_table_std : $ca6b          51819
         kernel_init : $c4bf          50367
           lc_fildes : $0059             89   *
                main : $c077          49271
           mem_start : $071f           1823
        mod_sz_asm_e : $fff6          65526
        mod_sz_asm_s : $f991          63889
       mod_sz_bios_e : $d61b          54811
       mod_sz_bios_s : $c000          49152
        mod_sz_cia_e : $c54e          50510
        mod_sz_cia_s : $c4f6          50422
      mod_sz_dflat_e : $f7fe          63486
      mod_sz_dflat_s : $d6d2          54994
AS65 Assembler for R6502 [1.42].                                     Page   25
---------------------------------- bank0.s -----------------------------------

       mod_sz_file_e : $c70f          50959
       mod_sz_file_s : $c54e          50510
      mod_sz_graph_e : $d4bf          54463
      mod_sz_graph_s : $cb18          51992
         mod_sz_io_e : $c4b1          50353
         mod_sz_io_s : $c3f5          50165
     mod_sz_kernel_e : $c4f6          50422
     mod_sz_kernel_s : $c000          49152
   mod_sz_language_e : $fff6          65526
   mod_sz_language_s : $d61b          54811
       mod_sz_proc_e : $f71e          63262
       mod_sz_proc_s : $f5c6          62918
   mod_sz_progedit_e : $e1b5          57781
   mod_sz_progedit_s : $e046          57414
      mod_sz_rtasm_e : $fd86          64902
      mod_sz_rtasm_s : $fa8b          64139
     mod_sz_rtsubs_e : $f5c6          62918
     mod_sz_rtsubs_s : $e771          59249
    mod_sz_runtime_e : $f71e          63262
    mod_sz_runtime_s : $e1b5          57781
         mod_sz_sd_e : $c8a8          51368
         mod_sz_sd_s : $c7ad          51117
      mod_sz_sound_e : $d61b          54811
      mod_sz_sound_s : $d5ce          54734
     mod_sz_sprite_e : $d4bf          54463
     mod_sz_sprite_s : $d41b          54299
       mod_sz_tape_e : $c7ad          51117
       mod_sz_tape_s : $c70f          50959
      mod_sz_tkasm_e : $fa8b          64139
      mod_sz_tkasm_s : $f991          63889
   mod_sz_tokenise_e : $e046          57414
   mod_sz_tokenise_s : $d85a          55386
    mod_sz_toksubs_e : $e046          57414
    mod_sz_toksubs_s : $df0e          57102
        mod_sz_var_e : $d85a          55386
        mod_sz_var_s : $d6d2          54994
          msg_errmsg : $d5cb          54731
     msg_hello_world : $c081          49281
           msg_ready : $d5c9          54729
             NUM_ANY : $0000              0   *
             NUM_BIN : $0003              3   *
             NUM_DEC : $0001              1   *
             NUM_HEX : $0002              2   *
                 nmi : $c4f5          50421
        null_handler : $c0da          49370
            null_irq : $c0d9          49369
               num_a : $003d             61
               num_b : $0041             65
             num_buf : $004d             77
             num_tmp : $0049             73
               num_x : $0045             69
                 PCR : $000c             12   *
                 PRA : $0001              1   *
                PRAH : $000f             15   *
                 PRB : $0000              0   *
        print_a_to_d : $c3e4          50148
     print_a_to_d_ch : $c3e9          50153
    print_a_to_d_fin : $c3f4          50164
        SD_BIT_DELAY : $0002              2   *
           SND_ADBUS : $030f            783   *
        SND_DESELECT : $00dd            221   *
            SND_MODE : $030c            780   *
AS65 Assembler for R6502 [1.42].                                     Page   26
---------------------------------- bank0.s -----------------------------------

       SND_REG_CHAPH : $0001              1   *
       SND_REG_CHAPL : $0000              0   *
      SND_REG_CHAVOL : $0008              8   *
       SND_REG_CHBPH : $0003              3   *
       SND_REG_CHBPL : $0002              2   *
      SND_REG_CHBVOL : $000a             10   *
       SND_REG_CHCPH : $0005              5   *
       SND_REG_CHCPL : $0004              4   *
        SND_REG_CHNP : $0006              6   *
         SND_REG_CTL : $0007              7   *
      SND_REG_ENVCYC : $000d             13   *
       SND_REG_ENVPH : $000c             12   *
       SND_REG_ENVPL : $000b             11   *
         SND_REG_IOA : $000e             14   *
         SND_REG_IOB : $000f             15   *
         SND_SELREAD : $00df            223   *
      SND_SELSETADDR : $00ff            255   *
        SND_SELWRITE : $00fd            253   *
                  SR : $000a             10   *
               SWBRK : <macro>
             scratch : $061f           1567
        sd_block_gap : $c882          51330
     sd_commandfname : $c872          51314
  sd_commandfname_ch : $c877          51319
            sd_delay : $c7e5          51173
       sd_delay_loop : $c7e9          51177
           sd_delete : $c883          51331
              sd_dir : $c88e          51342
         sd_dir_char : $c899          51353
             sd_init : $c86b          51307
           sd_init_a : $c86f          51311
         sd_notready : $c7d6          51158
        sd_put_delay : $c882          51330
            sd_ready : $c7d1          51153
        sd_ready_sec : $c7d0          51152
      sd_ready_skipx : $c7dc          51164
        sd_read_byte : $c83e          51262
      sd_read_nibble : $c829          51241
          sd_release : $c7ad          51117
           sd_select : $c7b9          51129
          sd_timeout : $c7c9          51145
      sd_timeout_brk : $c7ce          51150
       sd_write_byte : $c802          51202
     sd_write_nibble : $c7ef          51183
          skip_a_f_1 : $c190          49552
          skip_a_f_2 : $c19f          49567
         skip_kb_deb : $c158          49496
         skip_kb_rep : $c15e          49502
          skip_x_f_1 : $c1ab          49579
          skip_x_f_2 : $c1c0          49600
        snd_get_note : $d5ce          54734
    snd_get_note_oct : $d5d9          54745
        snd_init_tab : $d5f1          54769
       snd_music_tab : $d601          54785
       snd_note_done : $d5e2          54754
         snd_sel_reg : $c04e          49230
             snd_set : $c06e          49262
         snd_set_reg : $c05e          49246
        spr_baseadrh : $b4e0          46304   *
        spr_baseadrl : $b4c0          46272   *
            spr_bgnd : $b4a0          46240   *
             spr_chr : $b480          46208   *
AS65 Assembler for R6502 [1.42].                                     Page   27
---------------------------------- bank0.s -----------------------------------

            spr_curX : $b400          46080   *
            spr_curY : $b440          46144   *
            spr_newX : $b420          46112   *
            spr_newY : $b460          46176   *
          str_a_to_x : $c184          49540
   str_d_digits_done : $c2c0          49856
         str_d_error : $c26c          49772
      str_d_find_end : $c27b          49787
     str_d_found_end : $c288          49800
        str_d_powers : $c2dd          49885
 str_d_process_digit : $c296          49814
      str_d_skip_neg : $c2d7          49879
          str_x_to_a : $c1a0          49568
      str_x_to_a_err : $c1cb          49611
     str_x_to_a_errl : $c1ca          49610
           TAPE_RATE : $00d0            208   *
            TEXTCHAR : $b400          46080   *
            TEXTSCRN : $bb80          48000   *
         TIMER1_RATE : $4e20          20000   *
                T1CH : $0005              5   *
                T1CL : $0004              4   *
                T1LH : $0007              7   *
                T1LL : $0006              6   *
                T2CH : $0009              9   *
                T2CL : $0008              8   *
             tmp_ahi : $0033             51
             tmp_alo : $0032             50
           tmp_bank1 : $0000              0
           tmp_bank2 : $0001              1
             tmp_bhi : $0035             53
             tmp_blo : $0034             52
             tmp_chi : $0037             55
             tmp_clo : $0036             54
               tmp_d : $0038             56
            tp_block : $0055             85
        tp_block_gap : $c71b          50971
      tp_block_gap_1 : $c71f          50975
              tp_buf : $0200            512
            tp_delay : $0059             89
             tp_flag : $0058             88
              tp_idx : $0057             87
             tp_init : $c70f          50959
         tp_io_error : $c7ab          51115
            tp_print : $005b             91
        tp_put_delay : $c713          50963
         tp_read_bit : $c792          51090
     tp_read_bit_cb1 : $c796          51094
        tp_read_byte : $c77e          51070
   tp_read_byte_bits : $c78a          51082
     tp_read_byte_st : $c77e          51070
          tp_release : $c712          50962
        tp_write_bit : $c749          51017
   tp_write_bit_chk1 : $c75a          51034
   tp_write_bit_chk2 : $c772          51058
     tp_write_bit_t1 : $c769          51049
       tp_write_byte : $c726          50982
   tp_write_byte_bit : $c732          50994
tp_write_byte_nodelay : $c747          51015
     tt_csave_end_pc : $c619          50713
   tt_getsync_end_pc : $c5ff          50687
  tt_getsync_loop_pc : $c796          51094
       tt_getsync_pc : $c5ff          50687
AS65 Assembler for R6502 [1.42].                                     Page   28
---------------------------------- bank0.s -----------------------------------

   tt_putbyte_end_pc : $c748          51016
       tt_putbyte_pc : $c726          50982
  tt_readbyte_end_pc : $c791          51089
      tt_readbyte_pc : $c77e          51070
tt_writeleader_end_pc : $c645          50757
   tt_writeleader_pc : $c645          50757
     twos_complement : $c341          49985
twos_complement_skip_X : $c34f          49999
             UTF_ACK : $0001              1   *
             UTF_BEL : $0007              7   *
             UTF_BRK : $001a             26   *
              UTF_CR : $000d             13   *
             UTF_DEL : $007f            127   *
             UTF_ETX : $0003              3   *
              UTF_FF : $000c             12   *
         UTF_SPECIAL : $0020             32   *
       update_timers : $c148          49480
          utilPrintA : $c16f          49519
       utilPrintCRLF : $c167          49511
        utilPrintSPC : $c15f          49503
           VDP_FLASH : $0010             16   *
           vdp_blank : $0010             16
             vdp_cnt : $0008              8
          vdp_cnt_hi : $0009              9
         vdp_cnt_hi2 : $000a             10
          vdp_curcnt : $000c             12
          vdp_curoff : $000d             13
         vdp_curstat : $000e             14
          vdp_curtim : $000b             11
          vdp_curval : $000f             15
  vdp_fill_vram_loop : $cef0          52976
 vdp_fill_vram_noinc : $cef8          52984
            vdp_font : $cb18          51992
          vdp_font_a : $cc20          52256
             vec_brk : $0004              4
             vec_irq : $0002              2
        vec_user_irq : $0006              6
     via_strobe_init : $c532          50482
      via_strobe_off : $c53e          50494
             zp_tmp1 : $00ac            172
             zp_tmp2 : $00ad            173
             zp_tmp3 : $00ae            174
             zp_tmp4 : $00af            175
             ztmp_24 : $003d             61
          _adcZPByte : <macro>
          _addZPWord : <macro>
                _bcc : <macro>
                _bcs : <macro>
           _code_end : $fff6          65526
         _code_start : $c000          49152
          _cpu_stack : $0100            256
          _cpyZPWord : <macro>
              _debug : <macro>
          _decZPWord : <macro>
         _decZPWordA : <macro>
      _end_zero_page : $00b0            176
          _incZPWord : <macro>
       _mod_sz_cmd_e : $d5ce          54734
       _mod_sz_cmd_s : $d4bf          54463
       _PushFalseJmp : <macro>
        _PushTrueJmp : <macro>
             _printA : <macro>
AS65 Assembler for R6502 [1.42].                                     Page   29
---------------------------------- bank0.s -----------------------------------

             _printC : <macro>
            _printCA : <macro>
          _printCRLF : <macro>
            _println : <macro>
        _println_low : <macro>
          _printmsgA : <macro>
            _pullAXY : <macro>
            _pushAXY : <macro>
         _rom_vec_0a : $c01e          49182
         _rom_vec_0b : $c021          49185
         _rom_vec_0c : $c024          49188
         _rom_vec_0d : $c027          49191
         _rom_vec_0e : $c02a          49194
         _rom_vec_0f : $c02d          49197
         _rom_vec_00 : $c000          49152
         _rom_vec_01 : $c003          49155
         _rom_vec_02 : $c006          49158
         _rom_vec_03 : $c009          49161
         _rom_vec_04 : $c00c          49164
         _rom_vec_05 : $c00f          49167
         _rom_vec_06 : $c012          49170
         _rom_vec_07 : $c015          49173
         _rom_vec_08 : $c018          49176
         _rom_vec_09 : $c01b          49179
         _rom_vec_10 : $c030          49200
         _rom_vec_11 : $c033          49203
         _rom_vec_12 : $c036          49206
         _rom_vec_13 : $c039          49209
         _rom_vec_14 : $c03c          49212
         _rom_vec_15 : $c03f          49215
         _rom_vec_16 : $c042          49218
         _rom_vec_17 : $c045          49221
         _rom_vec_18 : $c048          49224
         _rom_vec_19 : $c04b          49227
          _sbcZPByte : <macro>
            _sendcmd : <macro>
          _subZPWord : <macro>
            __6502__ : $0001              1

1746 labels used

16709 lines read, no errors in pass 1.
AS65 Assembler for R6502 [1.42].                                     Page   30
---------------------------------- bank0.s -----------------------------------

c000 =                       	org 0xc000
c000 :                       mod_sz_bios_s
                             	include "kernel/kernel.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	Lol, I thought this would become more sophisti
                             ;*	hence the name 'kernel'. But no, it just initi
                             ;*	memory, VIA, sound and screen, before passing 
                             ;*	to main.
                             ;*	References to banks etc. are from ported code 
                             ;*	did do more stuff, namely helping with ROM ban
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc/includes.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  and ACIA registers.
                             ;*	Of course the Oric doesn't have a VDP or an AC
                             ;*	so this file could be optimised.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x0300
0300 =                       IO_0		= 0x0300
                             
0010 =                       VDP_FLASH	= 16				;* 32/50 second flash
                             
4e20 =                       TIMER1_RATE	= 1000000 / 50		;* 50 times per secon
00d0 =                       TAPE_RATE	= 0xd0				;* Assumed required FM freque
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
AS65 Assembler for R6502 [1.42].                                     Page   31
---------------------------------- bank0.s -----------------------------------

000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
0010 =                       IFR_CB1		= 0x10
                             
                             ;* AY-3-8912 definitions
                             ;* The sound chip is accessed through VIA Port A
030f =                       SND_ADBUS	= IO_0+PRAH
030c =                       SND_MODE	= IO_0+PCR
                             
                             ; Values for the PCR register - always enable CB1
00df =                       SND_SELREAD			= 0b11011111		; CB2=low, CA2=high
00fd =                       SND_SELWRITE		= 0b11111101		; CB2=high, CA2=low
00ff =                       SND_SELSETADDR		= 0b11111111		; CB2=high, CA2=hig
00dd =                       SND_DESELECT		= 0b11011101		; CB2=low,CA2=low
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             
                             ;* Port B
00b0 =                       KB_PRB		= 0xb0			; Upper nibble of PRB default st
0008 =                       KB_SENSE	= 0x08			; Input - Bit 3 port A
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock
0020 =                       KB_IJK		= 0b00100000	; IJK joystick detect bit
                             
0003 =                       KB_REP_TIM	= 3 			; Number of VB periods for the 
0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0001 =                       KB_DEBOUNCE	= 1				; Number of VB periods before 
                             
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0014 =                       CTRL_CAPS	= 0x14			; CTRL-T to toggle caps
0001 =                       UTF_ACK		= 0x01			; Used for the CTRL-A copy in t
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
AS65 Assembler for R6502 [1.42].                                     Page   32
---------------------------------- bank0.s -----------------------------------

007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	sta tmp_d
                             	txa
                             	pha
                             	tya
                             	pha
                             	lda tmp_d
                             	endm
                             
                             _pullAXY macro
                             	pla
                             	tay
                             	pla
                             	tax
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
                             _printmsgA macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
AS65 Assembler for R6502 [1.42].                                     Page   33
---------------------------------- bank0.s -----------------------------------

                             	jsr io_print_line
                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	_pullAXY
                             	endm
                             
                             _printA macro
                             	_pushAXY
                             	jsr str_a_to_x
                             	jsr io_put_ch
                             	txa
                             	jsr io_put_ch
                             	_pullAXY
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr io_put_ch
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWordA macro wordp
                             	lda wordp
                             	db	0xd0, 0x02
                             	dec wordp+1
                             	dec wordp
                             	endm
                             	
AS65 Assembler for R6502 [1.42].                                     Page   34
---------------------------------- bank0.s -----------------------------------

                             _decZPWord macro wordp
                             	pha
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPByte macro worda, byte
                             	clc
                             	lda worda
                             	adc byte
                             	sta worda
                             	db 0x90, 0x02		; bcc 2
                             	inc worda+1
                             	endm
                             
                             _sbcZPByte macro worda, byte
                             	sec
                             	lda worda
                             	sbc byte
                             	sta worda
                             	db 0xb0, 0x02		; bcs 2
                             	inc worda+1
                             	endm
                             
                             _bcc macro skip
                             	db 0x90, skip
                             	endm
                             
                             _bcs macro skip
AS65 Assembler for R6502 [1.42].                                     Page   35
---------------------------------- bank0.s -----------------------------------

                             	db 0xb0, skip
                             	endm
                             
                             _debug macro ch
                             	pha
                             	lda #ch
                             	sta 48000
                             	pla
                             	endm
                             	
                             
                             
                             	include "inc/graph.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*	This was needed in the previous code due to 32
                             ;*	byte width screens, but Oric only  has 40, so 
                             ;*	could be optimised a little.
                             ;*
                             ;************************************************
                             
                             ; Important screen addresses for the Oric ULA
bb80 =                       TEXTSCRN	=	0xbb80
b400 =                       TEXTCHAR	=	0xb400
a000 =                       HISCRN		=	0xa000
9800 =                       HICHAR		=	0x9800
bf68 =                       HITEXT		=	0xbf68
                             
0000 =                       	struct gr_screen
0000 =                       	db gr_mode					; Text or Hires mode
0001 =                       	dw gr_hi_start				; Address fo hires screen
0003 =                       	dw gr_char					; Start address of charset
0005 =                       	dw gr_text_start			; Start of text memory
0007 =                       	db gr_geom_fill1			; (Not used, maintained for a
0008 =                       	db gr_text_w				; Number of columns
0009 =                       	db gr_text_h				; Number of rows
000a =                       	db gr_cur_x					; Current X position of cursor
000b =                       	db gr_cur_y					; Current Y position of cursor
000c =                       	dw gr_cur_ptr				; VDP address of cursor
000e =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
000f =                       	db gr_pitch					; Pixel pitch for char plotting
0010 =                       	db gr_hires_x				; X pos of hires cursor
0011 =                       	db gr_hires_y				; Y pos of hires cursor
0012 =                       	db gr_ink					; Ink colour
0013 =                       	db gr_paper					; Paper colour
0014 =                       	db gr_margin				; Left margin
0015 =                       	dw gr_geom_tmp				; One word of temp storage for
0017 =                       	db gr_geom_tmp2				; One byte of temp storage fo
                             	end struct
                             	
                             ; Sprite data stored in free 256 in font space
AS65 Assembler for R6502 [1.42].                                     Page   36
---------------------------------- bank0.s -----------------------------------

b400 =                       spr_curX	= TEXTCHAR			; Sprite current X pos
b420 =                       spr_newX	= TEXTCHAR+32		; Sprite new X pos
b440 =                       spr_curY	= TEXTCHAR+64		; Sprite current Y pos
b460 =                       spr_newY	= TEXTCHAR+96		; Sprite new Y pos
b480 =                       spr_chr		= TEXTCHAR+128		; Sprite character
b4a0 =                       spr_bgnd	= TEXTCHAR+160		; Background character u
b4c0 =                       spr_baseadrl= TEXTCHAR+192		; Y low address of sp
b4e0 =                       spr_baseadrh= TEXTCHAR+224		; Y high address of s
                             
                             ; Tables stored in alternate character set area
                             ; only used for high-resolution screen handling
9c00 =                       hires_row_low	=	HICHAR+0x400		; Low byte of row p
9cc8 =                       hires_row_hi	=	hires_row_low+200	; High byte of r
9d90 =                       hires_col		=	hires_row_hi+200	; Pixel to byte col
9e80 =                       hires_mask		=	hires_col+240		; Pixel column to pi
                             
                             
                             	include "io/io.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*	Some over-engineering here for future possibil
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             
                             ;* Structure storage device specific vectors
0000 =                       	struct f_storage_table
0000 =                       	ds	f_init_vec,			2
0002 =                       	ds	f_read_byte_vec,	2
0004 =                       	ds	f_write_byte_vec,	2
0006 =                       	ds	f_put_delay_vec,	2
0008 =                       	ds	f_block_gap_vec,	2
000a =                       	ds	f_release_vec,		2
                             	end struct
                             
                             	include "dflat/dflat.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
AS65 Assembler for R6502 [1.42].                                     Page   37
---------------------------------- bank0.s -----------------------------------

                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
071f =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
9800 =                       DF_MEMTOP	=	0x9800
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
AS65 Assembler for R6502 [1.42].                                     Page   38
---------------------------------- bank0.s -----------------------------------

                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
AS65 Assembler for R6502 [1.42].                                     Page   39
---------------------------------- bank0.s -----------------------------------

0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             	include "kernel/zeropage.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple uses across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
                             ; Interrupt routine addresses
0002 =                       vec_irq		 ds	2		; Master IRQ handler
0004 =                       vec_brk		 ds	2		; Master BRK handler
0006 =                       vec_user_irq ds	2		; Where to jump for user inter
                             
                             ; VDP parameters
0008 =                       vdp_cnt		ds	1		; VDP interrupt counter
0009 =                       vdp_cnt_hi 	ds	1		; VDP counter high
000a =                       vdp_cnt_hi2	ds	1		; VDP counter high 2
000b =                       vdp_curtim	ds	1		; Cursor blink speed
000c =                       vdp_curcnt	ds	1		; Cursor blink countdown
000d =                       vdp_curoff	ds	1		; Cursor off (0 = On)
000e =                       vdp_curstat	ds	1		; Cursor status
000f =                       vdp_curval	ds	1		; Cursor value on screen
0010 =                       vdp_blank	ds	1		; Screen blank value normally 32
AS65 Assembler for R6502 [1.42].                                     Page   40
---------------------------------- bank0.s -----------------------------------

                             
                             ; Screen geometry
0011 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0029 =                       kb_raw  	ds	1		; Raw keyboard code
002a =                       kb_last		ds	1		; Code of last key
002b =                       kb_code 	ds	1		; Converted keyboard code
002c =                       kb_stat		ds	1		; Keyboard status for caps and shi
002d =                       kb_deb		ds	1		; Debounce timer
002e =                       kb_deb_tim  ds	1		; Default debounce delay
002f =                       kb_rep		ds	1		; Keyboard repeat speed timer
0030 =                       kb_rep_tim 	ds	1		; Default repeat speed
0031 =                       kb_rdel_tim	ds	1		; Default repeat delay (until s
                             
0032 =                       tmp_alo 	ds	1		; VDP addresses lo
0033 =                       tmp_ahi 	ds	1		; VDP addresses hi
0034 =                       tmp_blo 	ds	1		; Temp address lo
0035 =                       tmp_bhi		ds	1		; Temp address hi
0036 =                       tmp_clo		ds	1		; Temp address lo
0037 =                       tmp_chi		ds	1		; Temp address hi
0038 =                       tmp_d		ds	1		; Temp storage d
                             
                             ; Raw input/output parameters
0039 =                       buf_lo		ds	1		; Line buffer address low
003a =                       buf_hi		ds	1		; Line buffer address high
003b =                       buf_sz		ds	1		; Buffer size
003c =                       buf_ef		ds	1		; End file / line marker
                             
                             
                             ; ** Integer function storage **
003d =                       ztmp_24					; Start of 24 byte scratch area (all 
003d =                       num_a		ds	4		; 4 byte primary accumulator
0041 =                       num_b		ds	4		; 4 byte secondary accumulator
0045 =                       num_x		ds	4		; 4 byte x register
0049 =                       num_tmp		ds	4		; 4 byte temp space
004d =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ; ** Tape function storage **
0055 =                       tp_block	ds	2		; Block number (int)
0057 =                       tp_idx		ds	1		; Current buffer index
0058 =                       tp_flag		ds	1		; zero = closed, 1=read, 2=write
0059 =                       tp_delay	ds	2		; Interblock delay
005b =                       tp_print	ds  1		; Interactive mode i.e. print? (M
                             ; For LOCI, tp_delay is used for storing FD
0059 =                       lc_fildes	=	tp_delay
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
005c =                       dflat_zp_s
005c =                       dflat_zp_save_s			; ZP save dflat from here
005c =                       df_checkkey	ds	1		; Key check interval counter
005d =                       df_checkmsk	ds	1		; Mask for check key
005e =                       errno		ds	1		; General error condition status
005f =                       df_immed	ds	1		; Immediate mode (0 = not immediat
0060 =                       df_sp		ds	1		; Stack pointer after error to resto
0061 =                       df_pc		ds	2		; PC after error to return to
0063 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
0065 =                       df_brkval	ds	1		; Byte after BRK instruction
0066 =                       df_prgstrt	ds	2		; Start of program code
0068 =                       df_prgend	ds	2		; End of program code
AS65 Assembler for R6502 [1.42].                                     Page   41
---------------------------------- bank0.s -----------------------------------

006a =                       df_vntstrt	ds	2		; Variable name table start
006c =                       df_vntend	ds	2		; Variable name table end
006e =                       df_vvtstrt	ds	2		; Variable value table start
0070 =                       df_vvtend	ds	2		; Variable value table end
0072 =                       df_varcnt	ds	1		; Variable counter
0073 =                       df_starstrt	ds	2		; String and array table start
0075 =                       df_starend	ds	2		; String and array table end
0077 =                       df_rtstop	ds	1		; Runtime stack pointer
0078 =                       df_parmtop	ds	1		; Top of parameter stack (grows 
0079 =                       df_strbuffz	ds	1		; String expression buffer (*un
007a =                       df_stridxz	ds	1		; Top of string buffer (grows do
007b =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
007d =                       df_linoff	ds	1		; Offset in to line buffer
007e =                       df_tokoff	ds	1		; Offset in to tokenised buffer
007f =                       df_eolidx	ds	1		; End of line index (i.e length)
0080 =                       df_nxtstidx	ds	1		; Offset to the next statement 
0081 =                       df_curstidx	ds	1		; Offset to the start of curren
0082 =                       df_symtab	ds	2		; Pointer to next free symtab ent
0084 =                       df_symoff	ds	1		; Offset in to token table
0085 =                       df_syminiz	ds	2		; Start of symtab (*unused*)
0087 =                       df_currlin	ds	2		; Execution current line pointer
0089 =                       df_exeoff	ds	1		; Execution line buffer offset
008a =                       df_nextlin	ds	2		; Next line to execute
008c =                       df_procmode	ds	1		; Only used during tokenisation
008d =                       df_procargs	ds	1		; Only used during tokenisation
008e =                       df_procloc	ds	1		; Counts the number of local par
008f =                       df_procptr	ds	2		; Pointer to proc vvt slot
0091 =                       df_lineptr	ds	2		; Pointer to line during searche
0093 =                       df_lineidx	ds	1		; Pointer to line index during s
0094 =                       df_ifnest	ds	1		; Global nested if counter
0095 =                       df_currdat	ds	2		; Data current line pointer
0097 =                       df_datoff	ds	1		; Data line buffer offset
0098 =                       df_rnd		ds	2		; Random number seed
                             
009a =                       df_asmpc	ds	2		; Assembler program counter
009c =                       df_asmopt	ds	1		; Assembler current option
009d =                       df_asmadmd	ds	1		; Addressing mode
009e =                       df_asmopcde	ds	1		; Current opcode
009f =                       df_asmoprnd	ds	2		; Current operand
00a1 =                       df_asmlen	ds	1		; Instruction length
                             
00a2 =                       dflat_zp_save_e			; Save up to this place
                             
                             ; Temp space for dflat
00a2 =                       df_tmpptra	ds	2		; Temp pointer a
00a4 =                       df_tmpptrb	ds	2		; Temp pointer b
00a6 =                       df_tmpptrc	ds	2		; Temp pointer c
00a8 =                       df_tmpptrd	ds	2		; Temp pointer d
00aa =                       df_tmpptre	ds	2		; Temp pointer e
                             
00ac =                       dflat_zp_e
                             
00ac =                       zp_tmp1		ds	1		; General zero page temporary
00ad =                       zp_tmp2		ds	1		; General zero page temporary
00ae =                       zp_tmp3		ds	1		; General zero page temporary
00af =                       zp_tmp4		ds	1		; General zero page temporary
                             
                             ;***** END OF ZERO PAGE *****
00b0 =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
AS65 Assembler for R6502 [1.42].                                     Page   42
---------------------------------- bank0.s -----------------------------------

0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 is tape buffer *****
0200 =                       	org 0x0200
0200 =                       tp_buf		ds	256		; Serial input / output line buff
                             
                             ;***** 3 is IO *****
0300 =                       	org 0x0300			; IO mapped to Page 3 on Oric
0300 =                       io_address	ds	256
                             
0400 =                       	org 0x0400			; Page 4 = dflat space
0400 =                       fd_getname_addr			; ** FOR ORICUTRON EMULATOR **
0400 =                       df_linbuff
0400 =                       df_raw		ds	128		; untokenised input line
0480 =                       df_tokbuff
0480 =                       df_tok		ds 	128		; tokenised output line
                             
0500 =                       	org 0x0500			; Page 5 = fixed space for interpre
0500 =                       df_rtstck				; operator stack grow up, runtime gr
0500 =                       df_rtspace	ds	256
                             
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
                             ; Active IO device settings
0600 =                       io_default	ds	1		; The default device number
0601 =                       io_block	ds	io_struct
                             
                             ; Jump tables for file devices
0611 =                       f_storage_vec		ds	f_storage_table
                             
                             ; Dflat top of memory+1 - initialised at boot tim
061d =                       df_memtop	ds	2
                             
                             ; Scratch area e.g. string and numeric expression
061f =                       scratch		ds	256
                             
                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
071f =                       mem_start
                             
                             
                             	include "dflat/dflat.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
071f =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
AS65 Assembler for R6502 [1.42].                                     Page   43
---------------------------------- bank0.s -----------------------------------

9800 =                       DF_MEMTOP	=	0x9800
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
AS65 Assembler for R6502 [1.42].                                     Page   44
---------------------------------- bank0.s -----------------------------------

0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_st_pushInt
                             	endm
AS65 Assembler for R6502 [1.42].                                     Page   45
---------------------------------- bank0.s -----------------------------------

                             
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors are at these addresses
fffa : f5c4                  	fcw nmi				; 0xfffa : NMI Vector
fffc : b1c4                  	fcw init			; 0xfffc : Reset Vector
fffe : d3c0                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             
                             	; ROM code
                             	code				;
c000 =                       	org 0xc000			; Start of ROM
AS65 Assembler for R6502 [1.42].                                     Page   46
---------------------------------- bank0.s -----------------------------------

                             
c000 :                       _code_start
                             	; Restore current bank always at address c001 * 
c000 :                       mod_sz_kernel_s
                             	; include OS ROM calls - must be from 0xc000
                             	include "kernel/osromvec.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2021
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  OSROMVEC.I
                             ;*	This include file sets up the OS ROM vectors w
                             ;*	be invoked by user programs to access ROM func
                             ;*	will be maintained across versions of dflat to
                             ;*	backward and forward compatibility.
                             ;*	Make sure these vectors are set up from 0xc000
                             ;*	what user programs will rely on!
                             ;*
                             ;************************************************
                             	
                             	; Common OS ROM calls - user programs should JMP
                             	; through these routines where possible to maint
                             	; compatibility with ROM changes as these calls 
                             	; always be in the same position
c000 : 4cb6ce           [ 3] _rom_vec_00	jmp	gr_init_screen_txt			; Go in to t
c003 : 4c4ccf           [ 3] _rom_vec_01	jmp gr_cls						; Clear text screen
c006 : 4cb9cf           [ 3] _rom_vec_02	jmp	gr_set_cur					; Set text cursor 
c009 : 4ccfce           [ 3] _rom_vec_03	jmp	gr_init_hires				; Go in to hires
c00c : 6c0106           [ 6] _rom_vec_04	jmp (io_block+io_get_byte)		; Get byt
c00f : 6c0306           [ 6] _rom_vec_05	jmp (io_block+io_put_byte)		; Put byt
c012 : 4c41c4           [ 3] _rom_vec_06 jmp io_read_line				; Read a line
c015 : 4c7ac4           [ 3] _rom_vec_07	jmp io_print_line				; Print a line
c018 : 4c6ec0           [ 3] _rom_vec_08	jmp snd_set						; Set sound register
c01b : 4cdec8           [ 3] _rom_vec_09	jmp kb_stick					; Get joystick statu
c01e : 4ca0cf           [ 3] _rom_vec_0a	jmp gr_plot						; Plot a lores chara
c021 : 4c61d1           [ 3] _rom_vec_0b	jmp	gr_hchar					; Plot a hires chara
c024 : 4c03d2           [ 3] _rom_vec_0c	jmp gr_point_setup				; Get address, 
c027 : 4c21d2           [ 3] _rom_vec_0d	jmp gr_point					; Plot a hires pixel
c02a : 4ca2f5           [ 3] _rom_vec_0e	jmp df_rt_sprupd				; Refresh sprites
c02d : 4c90cf           [ 3] _rom_vec_0f	jmp	gr_getXY_base				; Get row addres
c030 : 4c1bd2           [ 3] _rom_vec_10	jmp gr_pixel					; Get a pixel value 
c033 : 4cb3cf           [ 3] _rom_vec_11 jmp gr_get						; Get screen at coord
c036 : 4c03c4           [ 3] _rom_vec_12 jmp io_active_device			; Set the acti
c039 : 6c0506           [ 6] _rom_vec_13	jmp (io_block+io_open_r)		; Open file
c03c : 6c0706           [ 6] _rom_vec_14	jmp (io_block+io_open_w)		; Open file
c03f : 6c0906           [ 6] _rom_vec_15	jmp (io_block+io_close_f)		; Close fi
c042 : 6c0b06           [ 6] _rom_vec_16	jmp (io_block+io_del_f)			; Delete fi
c045 : 6c0d06           [ 6] _rom_vec_17	jmp (io_block+io_ext1)			; Extended o
c048 : 6c0f06           [ 6] _rom_vec_18	jmp (io_block+io_ext2)			; Extended o
c04b : 4cced5           [ 3] _rom_vec_19 jmp snd_get_note				; Get for an octa
                             
                             
                             ;* Include all core code in the right order
                             	include "kernel/snd-low.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
AS65 Assembler for R6502 [1.42].                                     Page   47
---------------------------------- bank0.s -----------------------------------

                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*	Routines to access the AY-3-8912, which is don
                             ;*	lines of the VIA - CB2 and CA2 for chip select
                             ;*	Port A for data interface. This makes accessin
                             ;*	8912 a bit slow..
                             ;*
                             ;* 	CB2		CA2		Function		CB2=BDIR, CA2=BC1
                             ;*	0		0		Not selected
                             ;*	0		1		Read register in to Port A
                             ;*	1		0		Write register from Port A
                             ;*	1		1		Select register # from Port A
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_sel_reg
                             ;* Select AY register from A
                             ;* Input : A = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c04e :                       snd_sel_reg
c04e : 48               [ 3] 	pha
c04f : 8d0f03           [ 4] 	sta SND_ADBUS			; Put reg # on Port A (sound bus
                             
c052 : a9ff             [ 2] 	lda #SND_SELSETADDR		; Get ready to select the r
c054 : 8d0c03           [ 4] 	sta SND_MODE			; Latch the reg # on Port A
                             
c057 : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c059 : 8d0c03           [ 4] 	sta SND_MODE
                             
c05c : 68               [ 4] 	pla
c05d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_set_reg
                             ;* Set previosuly selected AY register
                             ;* Input : A = Value to set
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c05e :                       snd_set_reg
c05e : 48               [ 3] 	pha
                             
c05f : 8d0f03           [ 4] 	sta SND_ADBUS			; Put reg value on Port A (sound
c062 : a9fd             [ 2] 	lda #SND_SELWRITE		; Select mode for writing dat
c064 : 8d0c03           [ 4] 	sta SND_MODE			; Latch reg value on Port A	
c067 : a9dd             [ 2] 	lda #SND_DESELECT		; Deselect AY
c069 : 8d0c03           [ 4] 	sta SND_MODE
                             
c06c : 68               [ 4] 	pla
c06d : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* snd_set
                             ;* Set reg X to value A
                             ;* Input : X=Reg, A = Value to set
                             ;* Output : None
                             ;* Regs affected : None
AS65 Assembler for R6502 [1.42].                                     Page   48
---------------------------------- bank0.s -----------------------------------

                             ;****************************************
c06e :                       snd_set
c06e : 48               [ 3] 	pha
c06f : 8a               [ 2] 	txa
c070 : 204ec0           [ 6] 	jsr snd_sel_reg
c073 : 68               [ 4] 	pla
c074 : 4c5ec0           [ 3] 	jmp snd_set_reg
                             
                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X value
                             ;* Input : X = Reg no
                             ;* Output : A = Value
                             ;* Regs affected : None
                             ;****************************************
                             ;snd_get
                             ;
                             ;	lda #0xff				; Set Port A to output
                             ;	sta IO_0+DDRA
                             ;
                             ;	stx SND_ADBUS			; Put X on the sound bus (X = r
                             ;
                             ;	lda #SND_SELSETADDR		; Get ready to select the 
                             ;	sta SND_MODE			; Latch the reg # on Port A
                             ;
                             ;	lda #SND_DESELECT		; Deselect AY
                             ;	sta SND_MODE
                             ;
                             ;	lda #0x00				; Set Port A to input
                             ;	sta IO_0+DDRA
                             ;
                             ;	lda #SND_SELREAD		; Select mode for reading dat
                             ;	sta SND_MODE			; Set read mode on AY
                             ;
                             ;	lda SND_ADBUS			; Get value in to Y from Port A
                             ;	pha						; Save it to stack
                             ;	
                             ;	lda #SND_DESELECT		; Deselect AY
                             ;	sta SND_MODE
                             ;
                             ;	lda #0xff				; Set Port A back to output
                             ;	sta IO_0+DDRA
                             ;
                             ;	pla						; Get the value off stack
                             ;	
                             ;	rts
                             
                             
                             	include "kernel/main.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
AS65 Assembler for R6502 [1.42].                                     Page   49
---------------------------------- bank0.s -----------------------------------

                             ;*  boot up message, and then passes control to d
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c077 :                       main
c077 : a281             [ 2] 	ldx #lo(msg_hello_world)
c079 : a9c0             [ 2] 	lda #hi(msg_hello_world)
c07b : 207ac4           [ 6] 	jsr io_print_line
                             
c07e :                       infinity
                             
c07e : 4c0ee1           [ 3] 	jmp df_pg_dflat
                             
c081 :                       msg_hello_world
                             	;* build.s is generate by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel/build.s"
c081 : 4f726963206466..       db "Oric dflat\r" 
c08c : 42792040363530..       db "By @6502Nerd\r" 
                              if DFLATLOCI
                              db "Build 0.41 [IJK-LOCI]\r" 
                              else
c099 : 4275696c642030..       db "Build 0.41 [IJK-TPSD]\r" 
                              endif
c0af : 28632920323032..       db "(c) 2025\r\r",0 
                             
                             
                             	include "kernel/irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler
                             ;*	There is only one regular interrupt source whi
                             ;*	T1 timeout on a 50Hz cycle, whose main job is 
                             ;*	flash the cursor and decrement some timers.
                             ;*	But there are handlers for BRK, user and VIA s
                             ;*	By default the user and VIA do nothing, but ca
                             ;*	redirected to user routines.
                             ;*
                             ;************************************************
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
c0ba :                       init_irq
                             	; Core IRQ handler
c0ba : a9db             [ 2] 	lda #lo(irq)
c0bc : 8502             [ 3] 	sta vec_irq
c0be : a9c0             [ 2] 	lda #hi(irq)
c0c0 : 8503             [ 3] 	sta vec_irq+1
                             	
                             	; Core BRK handler
AS65 Assembler for R6502 [1.42].                                     Page   50
---------------------------------- bank0.s -----------------------------------

c0c2 : a9fd             [ 2] 	lda #lo(irq_brk)
c0c4 : 8504             [ 3] 	sta vec_brk
c0c6 : a9c0             [ 2] 	lda #hi(irq_brk)
c0c8 : 8505             [ 3] 	sta vec_brk+1
                             
                             	; User handlers VIA0 interrupts
c0ca : a9da             [ 2] 	lda #lo(null_handler)
c0cc : 8506             [ 3] 	sta vec_user_irq
c0ce : a9c0             [ 2] 	lda #hi(null_handler)
c0d0 : 8507             [ 3] 	sta vec_user_irq+1
                             
c0d2 : 60               [ 6] 	rts
                             
                             
                             ;* Calls the master IRQ handler - from the ROM
c0d3 :                       call_irq_master
c0d3 : 6c0200           [ 6] 	jmp (vec_irq)
                             	
                             ;* Calls the BRK handler
c0d6 :                       call_irq_brk
c0d6 : 6c0400           [ 6] 	jmp (vec_brk)
                             
                             ;* null interrupt
c0d9 :                       null_irq
c0d9 : 40               [ 6] 	rti
                             
                             ;* null handler
c0da :                       null_handler
c0da : 60               [ 6] 	rts
                             	
                             
                             ;* Master IRQ handler
c0db :                       irq
                             	; Don't use _pushAXY as it uses a temp location!
c0db : 48               [ 3] 	pha
c0dc : 8a               [ 2] 	txa
c0dd : 48               [ 3] 	pha
c0de : 98               [ 2] 	tya
c0df : 48               [ 3] 	pha
                             
c0e0 : d8               [ 2] 	cld						; Just in case!
c0e1 : 18               [ 2] 	clc						; Standard behaviour
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c0e2 : ba               [ 2] 	tsx
c0e3 : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c0e6 : 2910             [ 2] 	and #0x10
c0e8 : d0ec             [ 3] 	bne call_irq_brk
                             	
                             	;* Primary interrupt is timer 1
c0ea : ad0d03           [ 4] 	lda IO_0 + IFR
c0ed : 2940             [ 2] 	and #0x40				; Bit 6 = Timer 1 interrupt
c0ef : f006             [ 3] 	beq irq_fin				; If nothing then end
                             
                             	; Service the timer 1 interrupt
c0f1 : 8d0d03           [ 4] 	sta IO_0 + IFR			; Clear the interrupt
c0f4 : 202ac1           [ 6] 	jsr int_vdp_handler		; VDP timer updates plus ca
                             
c0f7 :                       irq_fin
                             	_pullAXY
AS65 Assembler for R6502 [1.42].                                     Page   51
---------------------------------- bank0.s -----------------------------------

                             
c0fc : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c0fd :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c0fd : 38               [ 2] 	sec
c0fe : bd0501           [ 4] 	lda 0x0105,x
c101 : e902             [ 2] 	sbc #2
c103 : 8563             [ 3] 	sta df_brkpc
c105 : bd0601           [ 4] 	lda 0x0106,x
c108 : e900             [ 2] 	sbc #0
c10a : 8564             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c10c : a001             [ 2] 	ldy #1
c10e : b163             [ 5] 	lda (df_brkpc),y
c110 : 8565             [ 3] 	sta df_brkval
c112 : 855e             [ 3] 	sta errno
                             	; now update the return address
c114 : a561             [ 3] 	lda df_pc
c116 : 9d0501           [ 5] 	sta 0x105,x
c119 : a562             [ 3] 	lda df_pc+1
c11b : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c123 : 853d             [ 3] 	sta num_a
c125 : 863e             [ 3] 	stx num_a+1
c127 : 843f             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c129 : 40               [ 6] 	rti
                             	
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c12a :                       int_vdp_handler
c12a : 2048c1           [ 6] 	jsr update_timers	; If it is then update system 
c12d : a50d             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c12f : d014             [ 3] 	bne int_vdp_fin		; Skip if disabled
                             
c131 : c60c             [ 5] 	dec vdp_curcnt		; Decrement countdown
c133 : d010             [ 3] 	bne int_vdp_fin		; If not expired, do nothing
c135 : a50b             [ 3] 	lda vdp_curtim		; Reset cursor countdown
c137 : 850c             [ 3] 	sta vdp_curcnt
c139 : a50e             [ 3] 	lda vdp_curstat		; Get the flash status
c13b : 4980             [ 2] 	eor #0x80			; Invert top bit
c13d : 850e             [ 3] 	sta vdp_curstat
c13f : 450f             [ 3] 	eor vdp_curval		; EOR with whats under cursor
                             	; Use cursor address, write to screen
                             	; ptr is base, offset with X coord in Y register
c141 : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
c143 : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
                             
c145 :                       int_vdp_fin
c145 : 6c0600           [ 6] 	jmp (vec_user_irq)
AS65 Assembler for R6502 [1.42].                                     Page   52
---------------------------------- bank0.s -----------------------------------

                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
                             ;****************************************
c148 :                       update_timers
c148 : e608             [ 5] 	inc vdp_cnt
c14a : d006             [ 3] 	bne inc_kb_timers
c14c : e609             [ 5] 	inc vdp_cnt_hi
c14e : d002             [ 3] 	bne inc_kb_timers
c150 : e60a             [ 5] 	inc vdp_cnt_hi2
c152 :                       inc_kb_timers
c152 : a62d             [ 3] 	ldx kb_deb			; Is debounce 0?
c154 : f002             [ 3] 	beq skip_kb_deb
c156 : c62d             [ 5] 	dec kb_deb
c158 :                       skip_kb_deb
c158 : a62f             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c15a : f002             [ 3] 	beq skip_kb_rep
c15c : c62f             [ 5] 	dec kb_rep
c15e :                       skip_kb_rep
c15e : 60               [ 6] 	rts
                             	
                             
                             	include "utils/utils.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c15f :                       utilPrintSPC
c15f : 48               [ 3] 	pha
c160 : a920             [ 2] 	lda #' '
c162 : 202cc4           [ 6] 	jsr io_put_ch
c165 : 68               [ 4] 	pla
c166 : 60               [ 6] 	rts
                             
c167 :                       utilPrintCRLF
c167 : 48               [ 3] 	pha
c168 : a90d             [ 2] 	lda #UTF_CR
c16a : 202cc4           [ 6] 	jsr io_put_ch
c16d : 68               [ 4] 	pla
c16e : 60               [ 6] 	rts
                             
c16f :                       utilPrintA
c16f : 8538             [ 3] 	sta tmp_d
c171 : 48               [ 3] 	pha
c172 : 8a               [ 2] 	txa
c173 : 48               [ 3] 	pha
AS65 Assembler for R6502 [1.42].                                     Page   53
---------------------------------- bank0.s -----------------------------------

c174 : a538             [ 3] 	lda tmp_d
c176 : 2084c1           [ 6] 	jsr str_a_to_x
c179 : 202cc4           [ 6] 	jsr io_put_ch
c17c : 8a               [ 2] 	txa
c17d : 202cc4           [ 6] 	jsr io_put_ch
c180 : 68               [ 4] 	pla
c181 : aa               [ 2] 	tax
c182 : 68               [ 4] 	pla
c183 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c184 :                       str_a_to_x
c184 : 48               [ 3] 	pha					; Save the byte using later on
c185 : 290f             [ 2] 	and #0x0f			; Mask low nibble
c187 : 18               [ 2] 	clc
c188 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c18a : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c18c : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c18e : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c190 :                       skip_a_f_1
c190 : aa               [ 2] 	tax					; Low char is in X
c191 : 68               [ 4] 	pla					; Get byte back
c192 : 4a               [ 2] 	lsr a				; Make high nibble low
c193 : 4a               [ 2] 	lsr a
c194 : 4a               [ 2] 	lsr a
c195 : 4a               [ 2] 	lsr a
c196 : 18               [ 2] 	clc
c197 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c199 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c19b : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c19d : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c19f :                       skip_a_f_2
c19f : 60               [ 6] 	rts					; A high nibble, C=0
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
                             ;****************************************
c1a0 :                       str_x_to_a
c1a0 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c1a2 : 38               [ 2] 	sec					; Process high char in A
c1a3 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c1a5 : c90a             [ 2] 	cmp #10				; If A < 10 then
c1a7 : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c1a9 : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c1ab :                       skip_x_f_1
c1ab : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c1ad : b01c             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c1af : 0a               [ 2] 	asl a				; This is the high nibble
c1b0 : 0a               [ 2] 	asl a
c1b1 : 0a               [ 2] 	asl a
AS65 Assembler for R6502 [1.42].                                     Page   54
---------------------------------- bank0.s -----------------------------------

c1b2 : 0a               [ 2] 	asl a
c1b3 : 48               [ 3] 	pha					; Save the high nibble
c1b4 : 8a               [ 2] 	txa					; Now process the low char in X
c1b5 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c1b7 : 38               [ 2] 	sec
c1b8 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c1ba : c90a             [ 2] 	cmp #10				; If A < 10 then
c1bc : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c1be : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c1c0 :                       skip_x_f_2
c1c0 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c1c2 : b006             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c1c4 : 853d             [ 3] 	sta num_a			; Store low nibble in temp
c1c6 : 68               [ 4] 	pla					; Get high nibble
c1c7 : 053d             [ 3] 	ora num_a			; OR with low nibble
                             
c1c9 : 60               [ 6] 	rts					; A contains value, C=0
                             
c1ca :                       str_x_to_a_errl
c1ca : 68               [ 4] 	pla
c1cb :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c1cd :                       con_n_to_a
c1cd : 8649             [ 3] 	stx num_tmp
c1cf : 854a             [ 3] 	sta num_tmp+1
c1d1 : a900             [ 2] 	lda #0
c1d3 : 853d             [ 3] 	sta num_a
c1d5 : 853e             [ 3] 	sta num_a+1
c1d7 : c000             [ 2] 	cpy #NUM_ANY
c1d9 : f014             [ 3] 	beq con_n_to_a_detect
c1db : 88               [ 2] 	dey
c1dc : d003             [ 3] 	bne con_n_not_dec
c1de :                       con_dec_jmp
c1de : 4c72c2           [ 3] 	jmp con_dec_to_a_int
c1e1 :                       con_n_not_dec
c1e1 : 88               [ 2] 	dey
c1e2 : d003             [ 3] 	bne con_n_not_hex
c1e4 :                       con_hex_jmp
c1e4 : 4c09c2           [ 3] 	jmp con_hex_to_a_int
c1e7 :                       con_n_not_hex
c1e7 : 88               [ 2] 	dey
c1e8 : d003             [ 3] 	bne con_n_err
c1ea :                       con_bin_jmp
c1ea : 4c48c2           [ 3] 	jmp con_bin_to_a_int
c1ed :                       con_n_err
c1ed : 38               [ 2] 	sec
c1ee : 60               [ 6] 	rts
c1ef :                       con_n_to_a_detect		; Y is zero on entry
c1ef : b149             [ 5] 	lda (num_tmp),y
c1f1 : c930             [ 2] 	cmp #'0'
c1f3 : d0e9             [ 3] 	bne con_dec_jmp
AS65 Assembler for R6502 [1.42].                                     Page   55
---------------------------------- bank0.s -----------------------------------

c1f5 : a001             [ 2] 	ldy #1
c1f7 : b149             [ 5] 	lda (num_tmp),y
c1f9 : 0920             [ 2] 	ora #0x20
c1fb : c978             [ 2] 	cmp #'x'
c1fd : f0e5             [ 3] 	beq con_hex_jmp
c1ff : c962             [ 2] 	cmp #'b'
c201 : f0e7             [ 4] 	beq con_bin_jmp
c203 : d0d9             [ 4] 	bne con_dec_jmp		; Always branches
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c205 :                       con_hex_to_a
c205 : 8649             [ 3] 	stx num_tmp
c207 : 854a             [ 3] 	sta num_tmp+1
c209 :                       con_hex_to_a_int
c209 : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c20b : a002             [ 2] 	ldy #2			; start at first digit
c20d :                       con_hex_digit
c20d : b149             [ 5] 	lda (num_tmp),y
c20f : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c211 : 38               [ 2] 	sec							; Process high char in A
c212 : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c214 : c90a             [ 2] 	cmp #10						; If A < 10 then
c216 : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c218 : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c21a :                       con_hex_skip_x_f_1
c21a : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c21c : b01c             [ 3] 	bcs	con_hex_done			; Potentially done if not
c21e : 48               [ 3] 	pha
c21f : a53d             [ 3] 	lda num_a
                             	; make room for lo nibble
c221 : 0a               [ 2] 	asl a
c222 : 263e             [ 5] 	rol num_a+1
c224 : 0a               [ 2] 	asl a
c225 : 263e             [ 5] 	rol num_a+1
c227 : 0a               [ 2] 	asl a
c228 : 263e             [ 5] 	rol num_a+1
c22a : 0a               [ 2] 	asl a
c22b : 263e             [ 5] 	rol num_a+1
c22d : 853d             [ 3] 	sta num_a
                             	; save in low nibble
c22f : 68               [ 4] 	pla
c230 : 053d             [ 3] 	ora num_a
c232 : 853d             [ 3] 	sta num_a
c234 : c8               [ 2] 	iny
c235 : ca               [ 2] 	dex
c236 : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c238 :                       con_hex_err
c238 : 38               [ 2] 	sec
c239 : 60               [ 6] 	rts
                             	; found a non-hex digit
c23a :                       con_hex_done
                             	; if no digits processed then error
c23a : c002             [ 2] 	cpy #2
c23c : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
AS65 Assembler for R6502 [1.42].                                     Page   56
---------------------------------- bank0.s -----------------------------------

c23e : 98               [ 2] 	tya
c23f : aa               [ 2] 	tax
c240 : a902             [ 2] 	lda #NUM_HEX
c242 : 18               [ 2] 	clc
c243 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert bin string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c244 :                       con_bin_to_a
c244 : 8649             [ 3] 	stx num_tmp
c246 : 854a             [ 3] 	sta num_tmp+1
c248 :                       con_bin_to_a_int
c248 : a002             [ 2] 	ldy #2
c24a : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c24c :                       con_bin_digit
c24c : b149             [ 5] 	lda (num_tmp),y
c24e : c930             [ 2] 	cmp #'0'
c250 : 9010             [ 3] 	bcc con_bin_done
c252 : c932             [ 2] 	cmp #'1'+1
c254 : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c256 : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c258 : 263d             [ 5] 	rol num_a
c25a : 263e             [ 5] 	rol num_a+1
c25c : c8               [ 2] 	iny
c25d : ca               [ 2] 	dex
c25e : d0ec             [ 3] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c260 : f00a             [ 3] 	beq con_bin_err
c262 :                       con_bin_done
                             	; didn't process any digit = error
c262 : c002             [ 2] 	cpy #2
c264 : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c266 : 98               [ 2] 	tya
c267 : aa               [ 2] 	tax
c268 : a903             [ 2] 	lda #NUM_BIN
c26a : 18               [ 2] 	clc
c26b : 60               [ 6] 	rts
c26c :                       con_bin_err
c26c :                       str_d_error
c26c : 38               [ 2] 	sec
c26d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c26e :                       con_dec_to_a
c26e : 8649             [ 3] 	stx num_tmp
c270 : 854a             [ 3] 	sta num_tmp+1
c272 :                       con_dec_to_a_int
c272 : a000             [ 2] 	ldy #0
AS65 Assembler for R6502 [1.42].                                     Page   57
---------------------------------- bank0.s -----------------------------------

                             	; Detect if leading minus sign
c274 : b149             [ 5] 	lda (num_tmp),y
c276 : c92d             [ 2] 	cmp #'-'
c278 : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c27a : c8               [ 2] 	iny
c27b :                       str_d_find_end
c27b : b149             [ 5] 	lda (num_tmp),y
c27d : c930             [ 2] 	cmp #'0'
c27f : 9007             [ 3] 	bcc str_d_found_end
c281 : c93a             [ 2] 	cmp #'9'+1
c283 : b003             [ 3] 	bcs str_d_found_end
c285 : c8               [ 2] 	iny
c286 : d0f3             [ 3] 	bne str_d_find_end	; Possble wraparound but shou
c288 :                       str_d_found_end
c288 : c007             [ 2] 	cpy #7				; Biggest int is 6 chars
c28a : b0e0             [ 3] 	bcs str_d_error		; e.g. -32767
c28c : 844c             [ 3] 	sty num_tmp+3
c28e : a900             [ 2] 	lda #0
c290 : 854b             [ 3] 	sta num_tmp+2
c292 : 853d             [ 3] 	sta num_a
c294 : 853e             [ 3] 	sta num_a+1
c296 :                       str_d_process_digit
c296 : 88               [ 2] 	dey
c297 : 3027             [ 3] 	bmi str_d_digits_done
                             
c299 : b149             [ 5] 	lda (num_tmp),y
                             
c29b : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
c29d : f021             [ 3] 	beq str_d_digits_done ; also done
                             
c29f : 38               [ 2] 	sec
c2a0 : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
c2a2 : 18               [ 2] 	clc
c2a3 : 0a               [ 2] 	asl a
c2a4 : 654b             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
c2a6 : aa               [ 2] 	tax
c2a7 : a53d             [ 3] 	lda num_a
c2a9 : 7dddc2           [ 4] 	adc str_d_powers,x
c2ac : 853d             [ 3] 	sta num_a
c2ae : a53e             [ 3] 	lda num_a+1
c2b0 : 7ddec2           [ 4] 	adc str_d_powers+1,x
c2b3 : 853e             [ 3] 	sta num_a+1
c2b5 : b0b5             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
c2b7 : a54b             [ 3] 	lda num_tmp+2
c2b9 : 6914             [ 2] 	adc #20
c2bb : 854b             [ 3] 	sta num_tmp+2
c2bd : 4c96c2           [ 3] 	jmp str_d_process_digit
c2c0 :                       str_d_digits_done
                             	; check if minus
c2c0 : b149             [ 5] 	lda (num_tmp),y
c2c2 : c92d             [ 2] 	cmp #'-'
c2c4 : d011             [ 3] 	bne str_d_skip_neg
c2c6 : a64c             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
c2c8 : e002             [ 2] 	cpx #2				; else it's an error
c2ca : 90a0             [ 3] 	bcc str_d_error
c2cc : a63d             [ 3] 	ldx num_a
AS65 Assembler for R6502 [1.42].                                     Page   58
---------------------------------- bank0.s -----------------------------------

c2ce : a53e             [ 3] 	lda num_a+1
c2d0 : 2041c3           [ 6] 	jsr twos_complement
c2d3 : 863d             [ 3] 	stx num_a
c2d5 : 853e             [ 3] 	sta num_a+1
c2d7 :                       str_d_skip_neg
c2d7 : a64c             [ 3] 	ldx num_tmp+3
c2d9 : a901             [ 2] 	lda #NUM_DEC
c2db : 18               [ 2] 	clc
c2dc : 60               [ 6] 	rts
                             
c2dd :                       str_d_powers
c2dd : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
c2f1 : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
c305 : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
c319 : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
c32d : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
c341 :                       twos_complement
c341 : 49ff             [ 2] 	eor #0xff
c343 : 48               [ 3] 	pha
c344 : 8a               [ 2] 	txa
c345 : 49ff             [ 2] 	eor #0xff
c347 : aa               [ 2] 	tax
c348 : 68               [ 4] 	pla
c349 : e8               [ 2] 	inx
c34a : d003             [ 3] 	bne twos_complement_skip_X
c34c : 38               [ 2] 	sec			; Add 1 to A
c34d : 6900             [ 2] 	adc #0
c34f :                       twos_complement_skip_X
c34f : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* hex_to_bcd
                             ;* Convert accumulator,X to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : P
                             ;****************************************
c350 :                       hex_to_bcd
c350 : 08               [ 3] 	php
c351 : 48               [ 3] 	pha
c352 : 8538             [ 3] 	sta tmp_d
c354 : 8a               [ 2] 	txa
c355 : 48               [ 3] 	pha
c356 : a538             [ 3] 	lda tmp_d
                             
c358 : 8649             [ 3] 	stx num_tmp
c35a : 854a             [ 3] 	sta num_tmp+1
                             	
                             ;	bmi hex_to_bcd_skip_neg	; A is negative?
                             ;	jsr twos_complement
                             ;hex_to_bcd_skip_neg
c35c : a200             [ 2] 	ldx #0
AS65 Assembler for R6502 [1.42].                                     Page   59
---------------------------------- bank0.s -----------------------------------

c35e : 863d             [ 3] 	stx num_a
c360 : 863e             [ 3] 	stx num_a+1
c362 : 863f             [ 3] 	stx num_a+2
                             ;	stx num_a+3
c364 : a210             [ 2] 	ldx #16
c366 : f8               [ 2] 	sed
c367 :                       bin_to_bcd_bit
c367 : 0649             [ 5] 	asl num_tmp
c369 : 264a             [ 5] 	rol num_tmp+1
c36b : a53d             [ 3] 	lda num_a
c36d : 653d             [ 3] 	adc num_a
c36f : 853d             [ 3] 	sta num_a
c371 : a53e             [ 3] 	lda num_a+1
c373 : 653e             [ 3] 	adc num_a+1
c375 : 853e             [ 3] 	sta num_a+1
c377 : a53f             [ 3] 	lda num_a+2
c379 : 653f             [ 3] 	adc num_a+2
c37b : 853f             [ 3] 	sta num_a+2
c37d : ca               [ 2] 	dex
c37e : d0e7             [ 3] 	bne bin_to_bcd_bit
                             	
c380 : 68               [ 4] 	pla
c381 : aa               [ 2] 	tax
c382 : 68               [ 4] 	pla
c383 : 28               [ 4] 	plp
c384 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_str_ch
                             ;* Helper routine to stuff decimal char in to num
                             ;* Input : A=BCD digit, Y=num_buf index, C=insert
                             ;* Output : num_buf in ASCII, A=ASCII digit
                             ;* Regs affected : C cleared if non-zero
                             ;****************************************
c385 :                       int_to_str_ch
c385 : 290f             [ 2] 	and #0xf
c387 : 0930             [ 2] 	ora #0x30					; Convert to ascii
c389 : 4930             [ 2] 	eor #0x30					; Check if zero digit
c38b : d005             [ 3] 	bne int_to_str_nz			; If not zero definitely sto
c38d : b003             [ 3] 	bcs int_to_str_nz			; Also if C=1
c38f : 4930             [ 2] 	eor #0x30					; Restore A
c391 : 60               [ 6] 	rts							; Return without storing anything
c392 :                       int_to_str_nz
c392 : 4930             [ 2] 	eor #0x30					; Restore A
c394 : 994d00           [ 5] 	sta num_buf,y
c397 : c8               [ 2] 	iny
c398 : 38               [ 2] 	sec							; Set C as a non-zero encountered
c399 :                       int_to_str_ch_fin
c399 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_str
                             ;* Convert int to string
                             ;* Input : in X,A (low,high), C=leading zeros wan
                             ;* Output : num_buf in ASCII 6 digits + zero term
                             ;* Regs affected : P
                             ;****************************************
c39a :                       int_to_str
                             	_pushAXY
                             
AS65 Assembler for R6502 [1.42].                                     Page   60
---------------------------------- bank0.s -----------------------------------

c3a3 : a000             [ 2] 	ldy #0						; first pos of num_buf
c3a5 : 0900             [ 2] 	ora #0						; Test A for sign bit
c3a7 : 08               [ 3] 	php							; Remember C bit of P
c3a8 : 100a             [ 3] 	bpl int_to_str_skip_neg		; Skip if not (postive 
c3aa : 2041c3           [ 6] 	jsr twos_complement			; Flip X,A from 2s complem
c3ad : 48               [ 3] 	pha							; Remember A
c3ae : a92d             [ 2] 	lda #'-'					; Put in negative sign
c3b0 : 854d             [ 3] 	sta num_buf
c3b2 : c8               [ 2] 	iny							; Start at second buffer pos
c3b3 : 68               [ 4] 	pla							; Restore A
c3b4 :                       int_to_str_skip_neg
c3b4 : 2050c3           [ 6]  	jsr hex_to_bcd				; Convert X,A to BCD
c3b7 : a202             [ 2] 	ldx #2						; Start at BCD high byte
c3b9 :                       int_str
c3b9 : 28               [ 4] 	plp							; Get C but immediately
c3ba : 08               [ 3] 	php							; Save C (due to loop check later)
c3bb : b53d             [ 4] 	lda num_a,x					; Get BCD digit
c3bd : 8554             [ 3] 	sta num_buf+7				; Save A it for the units later
c3bf : 4a               [ 2] 	lsr a						; Tens - shift to lower nibble
c3c0 : 4a               [ 2] 	lsr a
c3c1 : 4a               [ 2] 	lsr a
c3c2 : 4a               [ 2] 	lsr a
c3c3 : 28               [ 4] 	plp							; Get C
c3c4 : 2085c3           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
c3c7 : a554             [ 3] 	lda num_buf+7				; Get A for the units
c3c9 : 2085c3           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
c3cc : 08               [ 3] 	php							; Save C
c3cd : ca               [ 2] 	dex
c3ce : 10e9             [ 3] 	bpl int_str
c3d0 : 28               [ 4] 	plp							; Check C
c3d1 : b005             [ 3] 	bcs	int_to_str_fin			; If set then something pri
c3d3 : a930             [ 2] 	lda #'0'					; Stuff a zero
c3d5 : 854d             [ 3] 	sta num_buf					; Must be in first position..
c3d7 : c8               [ 2] 	iny
c3d8 :                       int_to_str_fin
c3d8 : a900             [ 2] 	lda #0						; Terminator
c3da : 994d00           [ 5] 	sta num_buf,y
c3dd : c8               [ 2] 	iny
                             	_pullAXY
                             
c3e3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
                             ;bcd_to_str
                             ;	_pushAXY
                             ;
                             ;	ldx #5						; Index in to string
                             ;	ldy #0						; Current BCD digit
                             ;bcd_str
                             ;	lda num_a,y
                             ;	; Convert 1s digit of byte
                             ;	pha
                             ;	and #0xf
                             ;	clc
                             ;	adc #0x30
AS65 Assembler for R6502 [1.42].                                     Page   61
---------------------------------- bank0.s -----------------------------------

                             ;	sta num_buf,x
                             ;	; Convert 10s digit of byte
                             ;	pla
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	clc
                             ;	adc #0x30					; Convert to ASCII
                             ;	sta num_buf-1,x
                             ;	dex
                             ;	dex
                             ;	iny
                             ;	cpy #3						; 3 BCD digits max
                             ;	bne bcd_str
                             ;
                             ;	_pullAXY
                             ;	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
                             ;out_bcd
                             ;	pha
                             ;	txa
                             ;	pha
                             ;	php
                             ;	ldy #0						; How many digits printed
                             ;	ldx #0						; Index in to string
                             ;out_bcd_digit
                             ;	lda num_buf,x
                             ;	cpy #0						; If not in leading zero mode
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	cmp #'0'					; else check if zero
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	plp
                             ;	php
                             ;	bcc out_bcd_next			; If C=0 go to next digit, e
                             ;out_bcd_print
                             ;	iny
                             ;	jsr io_put_ch
                             ;out_bcd_next
                             ;	inx
                             ;	cpx #6
                             ;	bne out_bcd_digit
                             ;	tya							; If nothing printed
                             ;	bne out_bcd_fin
                             ;	lda #'0'					; Need to put out 1 zero
                             ;	jsr io_put_ch
                             ;	iny
                             ;out_bcd_fin
                             ;	plp
                             ;	pla
                             ;	tax
AS65 Assembler for R6502 [1.42].                                     Page   62
---------------------------------- bank0.s -----------------------------------

                             ;	pla
                             ;	clc
                             ;	rts
                             	
                             	
                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
c3e4 :                       print_a_to_d
c3e4 : 209ac3           [ 6] 	jsr int_to_str
c3e7 : a000             [ 2] 	ldy #0
c3e9 :                       print_a_to_d_ch
c3e9 : b94d00           [ 4] 	lda num_buf,y
c3ec : f006             [ 3] 	beq print_a_to_d_fin
c3ee : 202cc4           [ 6] 	jsr io_put_ch
c3f1 : c8               [ 2] 	iny
c3f2 : d0f5             [ 3] 	bne print_a_to_d_ch
c3f4 :                       print_a_to_d_fin
c3f4 : 60               [ 6] 	rts
                             
                             ;	php
                             ;	cmp #0x80					; Check if sign bit is set
                             ;	bcc print_a_to_d_skip_neg	; Skip if not (postiv
                             ;	jsr twos_complement			; Flip from 2s complement
                             ;	jsr hex_to_bcd				; Convert to BCD
                             ;	jsr bcd_to_str				; Convert BCD to string
                             ;	lda #'-'
                             ;	jsr io_put_ch
                             ;	plp							; Leading zeros preference
                             ;	jsr out_bcd
                             ;	iny							; Account for sign
                             ;	rts
                             ;print_a_to_d_skip_neg
                             ;	jsr hex_to_bcd				; Convert to BCD
                             ;	jsr bcd_to_str				; Convert BCD to string
                             ;	plp							; Leading zeros preference
                             ;	jmp out_bcd					; Print +ve string
                             	
                             	include "io/io.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.
                             ;*	On startup, the kernel defaults to keyboard an
                             ;*  examines the BBC DIP switch to decide whether
AS65 Assembler for R6502 [1.42].                                     Page   63
---------------------------------- bank0.s -----------------------------------

                             ;*	but when saving and loading points to tape rou
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c3f5 :                       mod_sz_io_s
                             
                             ;****************************************
                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c3f5 :                       io_init
                             	if DFLATLOCI
                             	jsr lc_init_path	; Initialise the LOCI sd card p
                             	lda #1				; Default = KB/VDP, no Arduino sd card
                             	else
c3f5 : 209dc5           [ 6] 	jsr f_init_default	; Determine if Arduino sd car
c3f8 : 0901             [ 2] 	ora #1				; Default = KB/VDP, MSB=Arduino card c
                             	endif
c3fa : 8d0006           [ 4] 	sta io_default
c3fd : 4c03c4           [ 3] 	jmp io_active_device; Activate the device
                             
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c400 :                       io_set_default			; Entry point for default
c400 : ad0006           [ 4] 	lda io_default
c403 :                       io_active_device		; Entry point for A set
c403 : aa               [ 2] 	tax					; X=buf size index
c404 : 0a               [ 2] 	asl	a				; x16 the Block number
c405 : 0a               [ 2] 	asl a
c406 : 0a               [ 2] 	asl a
c407 : 0a               [ 2] 	asl a
c408 : a8               [ 2] 	tay					; Y=index in to device table
c409 : bd8fc4           [ 4] 	lda io_buf_sz,x
c40c : 853b             [ 3] 	sta buf_sz
c40e : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c410 :                       io_copy_data
c410 : b991c4           [ 4] 	lda io_devices,y
c413 : 9d0106           [ 5] 	sta io_block,x
c416 : c8               [ 2] 	iny
c417 : e8               [ 2] 	inx
c418 : e010             [ 2] 	cpx #16
c41a : d0f4             [ 3] 	bne io_copy_data
                             	
c41c : a91f             [ 2] 	lda #lo(scratch)	; Initialise IO buffer and size
c41e : 8539             [ 3] 	sta buf_lo
c420 : a906             [ 2] 	lda #hi(scratch)
AS65 Assembler for R6502 [1.42].                                     Page   64
---------------------------------- bank0.s -----------------------------------

c422 : 853a             [ 3] 	sta buf_hi
c424 : a90d             [ 2] 	lda #UTF_CR			; Line terminator is CR
c426 : 853c             [ 3] 	sta buf_ef
c428 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 1 means A is inval
                             ;* Regs affected : P, A
                             ;****************************************
c429 :                       io_get_ch
c429 : 6c0106           [ 6] 	jmp (io_block+io_get_byte)
                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c42c :                       io_put_ch
c42c : 6c0306           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c42f :                       io_open_read
c42f : 6c0506           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c432 :                       io_open_write
c432 : 6c0706           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c435 :                       io_close
c435 : 6c0906           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   65
---------------------------------- bank0.s -----------------------------------

c438 :                       io_delete
c438 : 6c0b06           [ 6] 	jmp (io_block+io_del_f)
                             
                             ;****************************************
                             ;* io_open_ext1
                             ;* Extended function 1
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c43b :                       io_open_ext1
c43b : 6c0d06           [ 6] 	jmp (io_block+io_ext1)
                             	
                             ;****************************************
                             ;* io_open_ext2
                             ;* Extended function 2
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c43e :                       io_open_ext2
c43e : 6c0f06           [ 6] 	jmp (io_block+io_ext2)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(lo/hi/sz/ef) : Address, Max size,
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
                             ;****************************************
c441 :                       io_read_line
c441 : 48               [ 3] 	pha
                             
c442 : 08               [ 3] 	php					; Save echo state
                             	
c443 : a000             [ 2] 	ldy #0x00			; Starting at first byte
c445 :                       io_get_line_byte
c445 : 38               [ 2] 	sec					; Getting bytes synchronously
c446 : 2029c4           [ 6] 	jsr io_get_ch		; Get a byte
c449 : b027             [ 3] 	bcs io_get_line_done; Got nothing then finish
c44b : 28               [ 4] 	plp					; Get echo state
c44c : 08               [ 3] 	php					; Instantly save it back
c44d : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c44f : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c451 : d005             [ 3] 	bne io_do_echo
c453 : c000             [ 2] 	cpy #0				; Already at beginning?
c455 : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
c457 : 88               [ 2] 	dey					; Else decrement length
c458 :                       io_do_echo
c458 : 202cc4           [ 6] 	jsr io_put_ch		; Echo it
c45b :                       io_skip_echo
c45b : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c45d : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c45f : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c461 : f003             [ 3] 	beq io_skip_special
c463 : 9139             [ 5] 	sta (buf_lo),y		; Save it
c465 : c8               [ 2] 	iny					; Increase length
c466 :                       io_skip_special
c466 : c53c             [ 3] 	cmp buf_ef			; Is it the terminating char?
c468 : f008             [ 3] 	beq io_get_line_done	; If yes then done
c46a : c43b             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c46c : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
AS65 Assembler for R6502 [1.42].                                     Page   66
---------------------------------- bank0.s -----------------------------------

c46e : 28               [ 4] 	plp					; Remember to pull echo state off stack
c46f : 38               [ 2] 	sec					; Yes, set carry flag
c470 : 68               [ 4] 	pla
c471 : 60               [ 6] 	rts					; And done
c472 :                       io_get_line_done
c472 : a900             [ 2] 	lda #0
c474 : 9139             [ 5] 	sta (buf_lo),y		; Terminate with 0
c476 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c477 : 18               [ 2] 	clc					; Clear carry flag
c478 : 68               [ 4] 	pla
c479 : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c47a :                       io_print_line
c47a : 48               [ 3] 	pha
                             
c47b : 8636             [ 3] 	stx tmp_clo					; Store the string pointer
c47d : 8537             [ 3] 	sta tmp_chi					; lo and hi
c47f : a000             [ 2] 	ldy #0						; Start at the beginning!
c481 :                       io_print_line_byte
c481 : b136             [ 5] 	lda (tmp_clo),y				; Copy byte to
c483 : f006             [ 3] 	beq io_print_done			; If zero then done - print
c485 : 202cc4           [ 6] 	jsr io_put_ch				; Transmit
c488 : c8               [ 2] 	iny
c489 : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
c48b :                       io_print_done
c48b : 68               [ 4] 	pla
c48c : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c48d :                       io_null_op
c48d : 18               [ 2] 	clc
c48e : 60               [ 6] 	rts
                             	
                             ;* IO buffer sizes
c48f :                       io_buf_sz
c48f : ff                    	db 255					; Device 0 = Tapeoe SDCard
c490 : 7f                    	db 127					; Device 1 = keyboard/screen
                             
                             ;* IO devices defined here
c491 :                       io_devices
                             ;* Device zero is the tape/sdcard system
                             ;* t: is for tape, s: is for sdcard in the filena
                             ;* the file routines parse the filename to fine t
                             ;* at the file protocol level both t: and s: appe
                             ;* hence device0 can handle both
                             ;* This is a block based device
c491 :                       io_device0					; Tape device, input = Tape, outpu
c491 : d3c6                  	dw	f_get_byte			; io_get_ch
c493 : 6bc6                  	dw	f_put_byte			; io_put_ch
c495 : c7c5                  	dw	f_open_read			; io_open_r
c497 : 21c6                  	dw	f_open_write		; io_open_w
c499 : 00c6                  	dw	f_close				; io_close_f
c49b : 8dc4                  	dw	io_null_op			; io_del_f
c49d : c7c5                  	dw	f_open_bread		; io_ext1 - open for binary rea
AS65 Assembler for R6502 [1.42].                                     Page   67
---------------------------------- bank0.s -----------------------------------

c49f : 1bc6                  	dw	f_open_bwrite		; io_ext2 - open for binary wr
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
                             ;* This is a char based device
c4a1 :                       io_device1					; Default device, input = screen e
c4a1 : acd0                  	dw	gr_get_key			; io_get_ch
c4a3 : e2d0                  	dw	gr_put_byte			; io_put_ch
c4a5 : 8dc4                  	dw	io_null_op			; io_open_r
c4a7 : 8dc4                  	dw	io_null_op			; io_open_w
c4a9 : 8dc4                  	dw	io_null_op			; io_close_f
c4ab : 8dc4                  	dw	io_null_op			; io_del_f
c4ad : 8dc4                  	dw	io_null_op			; io_ext1
c4af : 8dc4                  	dw	io_null_op			; io_ext2
c4b1 :                       mod_sz_io_e
                             
                             
                             
                             ;* Reset vector points here - 6502 starts here
c4b1 :                       init
                             ;	jmp init_test
                             	; First clear ram
c4b1 : 78               [ 2] 	sei					; Need this for MOS 6502
c4b2 : d8               [ 2] 	cld					; Need this for MOS 6502
c4b3 : 4cdac4           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
c4b6 :                       init_2					; init_ram will jump back to here
c4b6 : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
c4b8 : 9a               [ 2] 	txs
                             
c4b9 : 20bfc4           [ 6] 	jsr kernel_init
                             
c4bc : 4c77c0           [ 3] 	jmp main
                             
c4bf :                       kernel_init
c4bf : 20bac0           [ 6] 	jsr init_irq		; Initialise IRQ handling
                             
c4c2 : 20f9c4           [ 6] 	jsr init_via0		; initialise cia 0 - tape inactiv
                             ;	jsr tp_init			; Initialise tape handling
                             
c4c5 : 20e5d5           [ 6] 	jsr init_snd		; initialise the sound chip
                             
c4c8 : 2048ce           [ 6] 	jsr gr_init			; Initialise graphics, default is 
                             
c4cb : 20a8c8           [ 6] 	jsr init_keyboard	; initialise keyboard timer se
c4ce : 20f5c3           [ 6] 	jsr io_init			; Set default input/output device
                             
c4d1 : a900             [ 2] 	lda #0
c4d3 : 8508             [ 3] 	sta vdp_cnt
                             
c4d5 : 20bbf7           [ 6] 	jsr df_init			; Initialise interpreter
                             
c4d8 : 58               [ 2] 	cli					; irq interrupts enable
                             
                             ;kernel_test
                             ;	jsr kb_read_raw
                             ;	jsr utilPrintA
                             ;	jsr utilPrintCRLF
                             ;	jmp kernel_test
                             	
c4d9 : 60               [ 6] 	rts
                             
                             
                             ;* Initialises RAM, skipping page 3 which is for 
AS65 Assembler for R6502 [1.42].                                     Page   68
---------------------------------- bank0.s -----------------------------------

                             ;* Zeroes all addressable RAM in the default bank
c4da :                       init_ram
c4da : a900             [ 2] 	lda #0				; Normal RAM filled with zero
c4dc : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
c4de : aa               [ 2] 	tax 				; Page counter starts at zero
c4df : 8600             [ 3] 	stx 0x00			; Start at page 0
c4e1 : 8601             [ 3] 	stx 0x01
c4e3 :                       init_ram_1
c4e3 : e003             [ 2] 	cpx	#3				; Ignore page 3 (IO page)
c4e5 : f005             [ 3] 	beq init_ram_skip
c4e7 :                       init_ram_fill
c4e7 : 9100             [ 5] 	sta (0x00),y		; Write byte to RAM (zero or copy 
c4e9 : c8               [ 2] 	iny
c4ea : d0f7             [ 3] 	bne init_ram_1		; Do a whole page
c4ec :                       init_ram_skip
c4ec : e601             [ 5] 	inc 0x01			; Increase page pointer
c4ee : e8               [ 2] 	inx					; Reduce page count
c4ef : e0c0             [ 2] 	cpx #0xc0			; Do all pages until page until we g
c4f1 : d0f0             [ 3] 	bne init_ram_1
                             
c4f3 : f0c1             [ 3] 	beq init_2			; Carry on initialisation
                             
                             ; 6502 Non-maskable interrupt come here
c4f5 :                       nmi
c4f5 : 40               [ 6] 	rti
                             
c4f6 :                       mod_sz_kernel_e
                             
                             
                             
                             ; Bank specific code goes here
                             	include "cia/cia.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  CIA.S
                             ;*  Code to initialise and utilise the 6522, whic
                             ;*	for various functions on the Oric including;
                             ;*		Port A:
                             ;*			[7..0] 	Printer data bits
                             ;*			[7..0] 	Interface to AY-3-8912
                             ;*		Port B:
                             ;*			[2..0] 	Keyboard matrix row selector
                             ;*			[7]	   	Tape output
                             ;*			[6]    	Tape player motor signal
                             ;*			[4]		Printer strobe
                             ;*		CA1:		Printer ACK
                             ;*		CB1: 		Tape input
                             ;*		CA2,CB2: 	Selecting the AY-3-8912
                             ;*
                             ;*  This file is called cia.s because code was or
                             ;*  for a MOS 6526 from a CMB64, but didn't get a
                             ;*	renaming this file ;-)
                             ;*
                             ;************************************************
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page   69
---------------------------------- bank0.s -----------------------------------

                             	; ROM code
                             	code
                             
c4f6 :                       mod_sz_cia_s
                             
                             
                             ;****************************************
                             ;* init_via0
                             ;* Initialise cia 0
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : A
                             ;****************************************
c4f6 :                       init_via0_tape					; initialisation bytes for tap
c4f6 : a017             [ 2] 	ldy #init_tape_tab-init_via0_tab
c4f8 : 2c                    	db 0x2c						; Ignore next two bytes
c4f9 :                       init_via0
c4f9 : a000             [ 2] 	ldy #0						; Standard initialisation of VIA
c4fb :                       init_via0_loop
c4fb : b90cc5           [ 4] 	lda init_via0_tab,y
c4fe : 300b             [ 4] 	bmi init_via0_done
c500 : aa               [ 2] 	tax
c501 : c8               [ 2] 	iny
c502 : b90cc5           [ 4] 	lda init_via0_tab,y
c505 : 9d0003           [ 5] 	sta IO_0,x
c508 : c8               [ 2] 	iny
c509 : d0f0             [ 4] 	bne init_via0_loop
                             
c50b :                       init_via0_done
c50b : 60               [ 6] 	rts							; return from sub
                             
c50c :                       init_via0_tab
c50c : 0e7f                  	db IER, 	0x7f
c50e : 03ff                  	db DDRA,	0xff			; Port A output by default
c510 : 02f7                  	db DDRB,	0xf7			; Tape motor + KB select
c512 : 00b7                  	db PRB,		KB_PRB+7		; Port B default (cassette mo
c514 : 0cdd                  	db PCR,		SND_DESELECT	; Ensure AY is not selecte
c516 : 0420                  	db T1CL,	lo(TIMER1_RATE)	; 50Hz
c518 : 0620                  	db T1LL,	lo(TIMER1_RATE)	; 50Hz
c51a : 054e                  	db T1CH,	hi(TIMER1_RATE)	; 50Hz
c51c : 074e                  	db T1LH,	hi(TIMER1_RATE)	; 50Hz
c51e : 0b40                  	db ACR,		0x40			; Timer 1 continuous
c520 : 0ec0                  	db IER,		0xc0			; Timer 1 interrupt enabled
c522 : ff                    	db -1
c523 :                       init_tape_tab
c523 : 0e7f                  	db IER,		0x7f			; Disable all interrupts
c525 : 08f4                  	db T2CL,	0xf4			; Timer 2 used for measuring CB1
c527 : 0c10                  	db PCR,		0x10			; Interrupt on CB1 positive edge
c529 : 0bc0                  	db ACR,		0xc0			; T1 continuous and toggle PB7
c52b : 04a0                  	db T1CL,	lo(TAPE_RATE*2)	; Tape rate /2 = 0
c52d : 0501                  	db T1CH,	hi(TAPE_RATE*2)	; Tape rate /2 = 0
c52f : 00f0                  	db PRB,		KB_PRB+0x40		; Tape motor ON
c531 : ff                    	db -1
                             
                             ;****************************************
                             ;* via_strobe_init
                             ;* set strobe low & port A pin directions
                             ;****************************************
c532 :                       via_strobe_init
c532 : 8d0303           [ 4] 	sta   IO_0+DDRA
                             
                             	;set strobe low
AS65 Assembler for R6502 [1.42].                                     Page   70
---------------------------------- bank0.s -----------------------------------

c535 : ad0003           [ 4] 	lda   IO_0+PRB
c538 : 29ef             [ 2] 	and   #0b11101111
c53a : 8d0003           [ 4] 	sta   IO_0+PRB
                             
c53d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* via_strobe_off
                             ;* deselect printer port devices
                             ;****************************************
c53e :                       via_strobe_off
c53e : 48               [ 3] 	pha
                             
                             	;set strobe high
c53f : ad0003           [ 4] 	lda   IO_0+PRB
c542 : 0910             [ 2] 	ora   #0b00010000
c544 : 8d0003           [ 4] 	sta   IO_0+PRB
                             
                             	;set all bits of porta except kb sense to output
c547 : a9f7             [ 2] 	lda   #0xf7
c549 : 8d0303           [ 4] 	sta   IO_0+DDRA
                             
c54c : 68               [ 4] 	pla
c54d : 60               [ 6] 	rts
                             
                             
c54e :                       mod_sz_cia_e
                             
                             	include "file/file.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  FILE.S
                             ;*	These routines allow for input/output and are 
                             ;*	by both the tape and parallel devices.
                             ;*	The format is based on a tape format.
                             ;*	The tape format is not compatible with a regul
                             ;*	but is a block format as follows;
                             ;*	Some zero bits (64) start a block.
                             ;*	Then two bytes of data representing the block 
                             ;*	Then 256 bytes of block data.
                             ;*	Each byte above consists of two '1' start bits
                             ;*	one '0' stop bit.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c54e :                       mod_sz_file_s
                             
                             ;* Vector table for tape or sd card device
c54e :                       file_vectors
                             	if DFLATLOCI
                             
                             ;* LOCI sd vectors
                             	dw	lc_init
AS65 Assembler for R6502 [1.42].                                     Page   71
---------------------------------- bank0.s -----------------------------------

                             	dw	lc_read_byte
                             	dw	lc_write_byte
                             	dw	lc_put_delay
                             	dw	lc_block_gap
                             	dw	lc_release
                             
                             	else
                             
                             ;* Tape vectors
c54e : 0fc7                  	dw	tp_init
c550 : 7ec7                  	dw	tp_read_byte
c552 : 26c7                  	dw	tp_write_byte
c554 : 13c7                  	dw	tp_put_delay
c556 : 1bc7                  	dw	tp_block_gap
c558 : 12c7                  	dw	tp_release
                             ;* SD Card vectors
c55a : 6bc8                  	dw	sd_init
c55c : 3ec8                  	dw	sd_read_byte
c55e : 02c8                  	dw	sd_write_byte
c560 : 82c8                  	dw	sd_put_delay
c562 : 82c8                  	dw	sd_block_gap
c564 : adc7                  	dw	sd_release
                             
                             	endif
                             
                             ;* Jump through vectors for device specific calls
c566 :                       f_init
c566 : 6c1106           [ 6] 	jmp (f_storage_vec+f_init_vec)
c569 :                       f_read_byte
c569 : 6c1306           [ 6] 	jmp (f_storage_vec+f_read_byte_vec)
c56c :                       f_write_byte
c56c : 6c1506           [ 6] 	jmp (f_storage_vec+f_write_byte_vec)
c56f :                       f_put_delay
c56f : 6c1706           [ 6] 	jmp (f_storage_vec+f_put_delay_vec)
c572 :                       f_block_gap
c572 : 6c1906           [ 6] 	jmp (f_storage_vec+f_block_gap_vec)
c575 :                       f_release
c575 : 6c1b06           [ 6] 	jmp (f_storage_vec+f_release_vec)
                             	
c578 :                       f_open_msg
c578 : 4c6f6164696e67..      	db	"Loading:",0
c581 :                       f_save_msg
c581 : 536176696e673a00      	db	"Saving:",0
c589 :                       f_back4
c589 : 0808080800            	db	8,8,8,8,0
                             
c58e :                       f_print_msg
c58e : 245b             [ 3] 	bit tp_print
c590 : 300a             [ 3] 	bmi f_no_print
c592 : 4c36d1           [ 3] 	jmp gr_print_line
                             
c595 :                       f_print_byte
c595 : 245b             [ 3] 	bit tp_print
c597 : 3003             [ 3] 	bmi f_no_print
c599 : 4ce2d0           [ 3] 	jmp gr_put_byte
                             
c59c :                       f_no_print
c59c : 60               [ 6] 	rts
                             
                             ; C=1 means error (A=0)
                             ; C=0 means sd card found (A=0x80)
c59d :                       f_init_default
AS65 Assembler for R6502 [1.42].                                     Page   72
---------------------------------- bank0.s -----------------------------------

c59d : 18               [ 2] 	clc
                             	if !DFLATLOCI
c59e : 20d1c7           [ 6] 	jsr sd_ready
c5a1 : a980             [ 2] 	lda #0x80
c5a3 : 9002             [ 3] 	bcc f_init_default_rts
c5a5 : a900             [ 2] 	lda #0x00
                             	endif
c5a7 :                       f_init_default_rts
c5a7 : 60               [ 6] 	rts
                             
                             
                             ;* Common function to open tape
                             ;* df_linbuff contains the filename without devic
                             ;* A contains device (0=tape, 1=sdcard)
c5a8 :                       f_open_common				; Used by open write also
                             	if !DFLATLOCI
c5a8 : a8               [ 2] 	tay						; Move A to Y
c5a9 : f002             [ 3] 	beq f_skip_sd			; Skip SD card if 0
c5ab : a00c             [ 2] 	ldy #f_storage_table	; Else Y index into sd card
c5ad :                       f_skip_sd	
                             	else
                             	ldy #0					; Ignore device # in LOCI
                             	endif
c5ad : a200             [ 2] 	ldx #0					; Start at beginning of table
c5af :                       f_init_vectors
c5af : b94ec5           [ 4] 	lda file_vectors,y		; Get vector byte
c5b2 : 9d1106           [ 5] 	sta f_storage_vec,x		; Save to ram table
c5b5 : c8               [ 2] 	iny
c5b6 : e8               [ 2] 	inx
c5b7 : e00c             [ 2] 	cpx #f_storage_table	; Keep going until whole ta
c5b9 : d0f4             [ 3] 	bne f_init_vectors
                             
c5bb : 78               [ 2] 	sei						; Interrupts disabled from here..
c5bc : a200             [ 2] 	ldx #0
c5be : 8657             [ 3] 	stx tp_idx				; Initialise block
c5c0 : 8655             [ 3] 	stx tp_block
c5c2 : 8656             [ 3] 	stx tp_block+1
                             	
c5c4 : 4c66c5           [ 3] 	jmp  f_init				; Initialise VIA etc.
                             
                             ;* tp_open_read
                             
c5c7 :                       fd_cload_getname_pc			; ** FOR ORICUTRON EMULATOR
                             
c5c7 :                       f_open_bread
c5c7 :                       f_open_read
c5c7 : 48               [ 3] 	pha						; Don't lose device number
c5c8 : a901             [ 2] 	lda #1					; Read mode
c5ca : 8558             [ 3] 	sta tp_flag
c5cc : a078             [ 2] 	ldy #lo(f_open_msg)
c5ce : a9c5             [ 2] 	lda #hi(f_open_msg)
c5d0 : 208ec5           [ 6] 	jsr f_print_msg
c5d3 : 68               [ 4] 	pla
c5d4 : 20a8c5           [ 6] 	jsr f_open_common
                             	if DFLATLOCI
                             	lda tp_flag				; If zero means directory
                             	beq f_skip_dir
                             	endif
c5d7 :                       f_get_fname_start
c5d7 : 2069c5           [ 6] 	jsr f_read_byte
c5da : c924             [ 2] 	cmp #'$'				; Find the $ symbol
c5dc : d0f9             [ 3] 	bne f_get_fname_start
AS65 Assembler for R6502 [1.42].                                     Page   73
---------------------------------- bank0.s -----------------------------------

                             	
c5de : a209             [ 2] 	ldx #9					; 9 byte header - skip
c5e0 :                       f_get_header
c5e0 : 2069c5           [ 6] 	jsr f_read_byte
c5e3 : ca               [ 2] 	dex
c5e4 : d0fa             [ 3] 	bne f_get_header
                             	
                             	; X= zero here, now get null terminated filename
c5e6 :                       f_get_fname
c5e6 : 2069c5           [ 6] 	jsr f_read_byte
c5e9 : 9d0004           [ 5] 	sta df_linbuff,x
c5ec : e8               [ 2] 	inx
c5ed : c900             [ 2] 	cmp #0
c5ef : d0f5             [ 3] 	bne f_get_fname
                             
c5f1 : a000             [ 2] 	ldy #lo(df_linbuff)
c5f3 : a904             [ 2] 	lda #hi(df_linbuff)
c5f5 : 208ec5           [ 6] 	jsr f_print_msg
c5f8 : a920             [ 2] 	lda #' '
c5fa : 2095c5           [ 6] 	jsr f_print_byte
c5fd :                       f_skip_dir
c5fd : 18               [ 2] 	clc
c5fe : 60               [ 6] 	rts
                             
c5ff :                       tt_getsync_pc				; ** FOR ORICUTRON EMULATOR **
c5ff :                       tt_getsync_end_pc			; ** FOR ORICUTRON EMULATOR *
                             
c5ff : ea               [ 2] 	nop
                             	
                             
                             ;* tp_close
                             ;* Close tape settings
c600 :                       f_close
c600 : a558             [ 3] 	lda tp_flag
c602 : c902             [ 2] 	cmp #2					; Write mode?
c604 : d003             [ 3] 	bne f_close_no_flush	; If not no need to flush
c606 : 2095c6           [ 6] 	jsr f_put_block			; Flush the current block
c609 :                       f_close_no_flush
c609 : a90d             [ 2] 	lda #0x0d				; Line feed
c60b : 2095c5           [ 6] 	jsr f_print_byte
c60e : 2075c5           [ 6] 	jsr f_release			; Device specific resource relea
c611 : 20f9c4           [ 6] 	jsr init_via0			; Back to normal
c614 : 58               [ 2] 	cli
c615 : a900             [ 2] 	lda #0					; Zero tape flag
c617 : 8558             [ 3] 	sta tp_flag
                             
c619 :                       tt_csave_end_pc				; ** FOR ORICUTRON EMULATOR **
                             
c619 : 18               [ 2] 	clc
c61a : 60               [ 6] 	rts
                             
                             ;* tp_open_write
                             ;* Open tape settings
c61b :                       f_open_bwrite
c61b : a001             [ 2] 	ldy #hi(0x101)
c61d : a201             [ 2] 	ldx #lo(0x101)
c61f : d004             [ 3] 	bne f_open_write_start
c621 :                       f_open_write
c621 : a018             [ 2] 	ldy #hi(6000+0x101)
c623 : a271             [ 2] 	ldx #lo(6000+0x101)
                             
c625 :                       fd_csave_getname_pc			; ** FOR ORICUTRON EMULATOR
AS65 Assembler for R6502 [1.42].                                     Page   74
---------------------------------- bank0.s -----------------------------------

                             
c625 :                       f_open_write_start
c625 : 48               [ 3] 	pha						; Don't lose device number
c626 : a902             [ 2] 	lda #2					; Write mode
c628 : 8558             [ 3] 	sta tp_flag
c62a : 845a             [ 3] 	sty tp_delay+1
c62c : 8659             [ 3] 	stx tp_delay
c62e : a081             [ 2] 	ldy #lo(f_save_msg)
c630 : a9c5             [ 2] 	lda #hi(f_save_msg)
c632 : 208ec5           [ 6] 	jsr f_print_msg
c635 : a000             [ 2] 	ldy #lo(df_linbuff)
c637 : a904             [ 2] 	lda #hi(df_linbuff)
c639 : 208ec5           [ 6] 	jsr f_print_msg
c63c : a920             [ 2] 	lda #' '
c63e : 2095c5           [ 6] 	jsr f_print_byte
c641 : 68               [ 4] 	pla	
c642 : 20a8c5           [ 6] 	jsr f_open_common		; Same as reading but tp_mode
                             
c645 :                       tt_writeleader_pc			; ** FOR ORICUTRON EMULATOR *
c645 :                       tt_writeleader_end_pc		; ** FOR ORICUTRON EMULATO
c645 : a280             [ 2] 	ldx #128				; 128 low bits
c647 : 206fc5           [ 6] 	jsr f_put_delay
                             
c64a : a924             [ 2] 	lda #'$'				; Start of header symbol
c64c : 38               [ 2] 	sec
c64d : 206cc5           [ 6] 	jsr f_write_byte
                             	
c650 : a209             [ 2] 	ldx #9					; Header, for future expansion
c652 : a9ff             [ 2] 	lda #0xff
c654 :                       f_write_header	
c654 : 38               [ 2] 	sec
c655 : 206cc5           [ 6] 	jsr f_write_byte
c658 : ca               [ 2] 	dex
c659 : d0f9             [ 3] 	bne f_write_header
                             	
c65b : a200             [ 2] 	ldx #0
c65d :                       f_write_fname
c65d : bd0004           [ 4] 	lda df_linbuff,x		; Put the filename
c660 : 38               [ 2] 	sec
c661 : 206cc5           [ 6] 	jsr f_write_byte
c664 : e8               [ 2] 	inx
c665 : c900             [ 2] 	cmp #0
c667 : d0f4             [ 3] 	bne f_write_fname
                             	
c669 : 18               [ 2] 	clc
c66a : 60               [ 6] 	rts
                             
                             
                             ;* f_put_byte
                             ;* Put to byte to tape - if got a block then save
                             
c66b :                       f_put_byte
c66b : 48               [ 3] 	pha
c66c : 8538             [ 3] 	sta tmp_d
c66e : 8a               [ 2] 	txa
c66f : 48               [ 3] 	pha
c670 : 98               [ 2] 	tya
c671 : 48               [ 3] 	pha
c672 : a538             [ 3] 	lda tmp_d
                             	
c674 : a457             [ 3] 	ldy tp_idx				; Save byte to buffer
c676 : 990002           [ 5] 	sta tp_buf,y
AS65 Assembler for R6502 [1.42].                                     Page   75
---------------------------------- bank0.s -----------------------------------

c679 : c8               [ 2] 	iny
c67a : 8457             [ 3] 	sty tp_idx
c67c : d010             [ 3] 	bne f_put_byte_done
c67e : 2095c6           [ 6] 	jsr f_put_block			; Flush block to tape
c681 : 18               [ 2] 	clc						; Increment block #
c682 : a555             [ 3] 	lda tp_block
c684 : 6901             [ 2] 	adc #1
c686 : 8555             [ 3] 	sta tp_block
c688 : a556             [ 3] 	lda tp_block+1
c68a : 6900             [ 2] 	adc #0
c68c : 8556             [ 3] 	sta tp_block+1
c68e :                       f_put_byte_done
c68e : 68               [ 4] 	pla
c68f : a8               [ 2] 	tay
c690 : 68               [ 4] 	pla
c691 : aa               [ 2] 	tax
c692 : 68               [ 4] 	pla
c693 : 18               [ 2] 	clc
c694 : 60               [ 6] 	rts
                             
                             ;* tp_put_block
                             ;* flush a block to tape
c695 :                       f_put_block
c695 : 20c2c6           [ 6] 	jsr f_print_block
                             		
c698 : a280             [ 2] 	ldx #128				; 128 low bits
c69a : 206fc5           [ 6] 	jsr f_put_delay
                             
c69d : a555             [ 3] 	lda tp_block			; Save block number low then high
c69f : 18               [ 2] 	clc
c6a0 : 206cc5           [ 6] 	jsr f_write_byte
c6a3 : a556             [ 3] 	lda tp_block+1
c6a5 : 38               [ 2] 	sec
c6a6 : 206cc5           [ 6] 	jsr f_write_byte
                             
c6a9 : a200             [ 2] 	ldx #0
c6ab :                       f_put_block_bytes
c6ab : bd0002           [ 4] 	lda tp_buf,x			; Then write out all bytes in blo
c6ae : 18               [ 2] 	clc
c6af : 206cc5           [ 6] 	jsr f_write_byte
c6b2 : e8               [ 2] 	inx
c6b3 : d0f6             [ 3] 	bne f_put_block_bytes	; Always 256 bytes
                             	
c6b5 : 4c72c5           [ 3] 	jmp f_block_gap		; Wait a while, still outputtin
                             
                             ;	rts
                             
c6b8 :                       f_print_block_num
c6b8 : 2084c1           [ 6] 	jsr str_a_to_x
c6bb : 2095c5           [ 6] 	jsr f_print_byte
c6be : 8a               [ 2] 	txa
c6bf : 4c95c5           [ 3] 	jmp f_print_byte
                             
                             ; tp_print_block
c6c2 :                       f_print_block
c6c2 : a556             [ 3] 	lda tp_block+1			; Print block number hi byte
c6c4 : 20b8c6           [ 6] 	jsr f_print_block_num
c6c7 : a555             [ 3] 	lda tp_block			; Print block number lo byte
c6c9 : 20b8c6           [ 6] 	jsr f_print_block_num
c6cc : a9c5             [ 2] 	lda #hi(f_back4)		; Go back 4 characters to prin
c6ce : a089             [ 2] 	ldy #lo(f_back4)
c6d0 : 4c8ec5           [ 3] 	jmp f_print_msg
AS65 Assembler for R6502 [1.42].                                     Page   76
---------------------------------- bank0.s -----------------------------------

                             ;	rts
                             
                             
                             ;* t_get_byte
                             ;* Get a byte from buffer - load blocks as needed
c6d3 :                       f_get_byte
c6d3 : 8a               [ 2] 	txa
c6d4 : 48               [ 3] 	pha
c6d5 : 98               [ 2] 	tya
c6d6 : 48               [ 3] 	pha
                             	
c6d7 : a457             [ 3] 	ldy tp_idx				; Index in to buffer
c6d9 : d005             [ 3] 	bne f_get_byte_buf		; No need to load from tape
c6db : 20f0c6           [ 6] 	jsr f_get_block			; Else load a block from tape
c6de : a000             [ 2] 	ldy #0					; 0 index is now valid
c6e0 :                       f_get_byte_buf
c6e0 : b90002           [ 4] 	lda tp_buf,y			; Get from memory buffer
c6e3 : c8               [ 2] 	iny
c6e4 : 8457             [ 3] 	sty tp_idx				; Never zero on leaving
c6e6 : 8538             [ 3] 	sta tmp_d
c6e8 : 68               [ 4] 	pla
c6e9 : a8               [ 2] 	tay
c6ea : 68               [ 4] 	pla
c6eb : aa               [ 2] 	tax
c6ec : a538             [ 3] 	lda tmp_d
c6ee : 18               [ 2] 	clc
c6ef : 60               [ 6] 	rts						; Except when buffer done
                             
                             ;* f_get_block
                             ;* Load a block in to memory
c6f0 :                       f_get_block
                             
c6f0 : 2069c5           [ 6] 	jsr f_read_byte		; Get block number
c6f3 : 8555             [ 3] 	sta tp_block
c6f5 : 2069c5           [ 6] 	jsr f_read_byte
c6f8 : 8556             [ 3] 	sta tp_block+1
                             	
c6fa : 20c2c6           [ 6] 	jsr f_print_block
                             	
c6fd : a000             [ 2] 	ldy #0
c6ff : 8457             [ 3] 	sty tp_idx
c701 :                       f_get_block_bytes
c701 : 2069c5           [ 6] 	jsr f_read_byte		; Fill buffer
c704 : a457             [ 3] 	ldy tp_idx
c706 : 990002           [ 5] 	sta tp_buf,y
c709 : c8               [ 2] 	iny
c70a : 8457             [ 3] 	sty tp_idx
c70c : d0f3             [ 3] 	bne f_get_block_bytes	; Always 256 bytes
                             
c70e : 60               [ 6] 	rts
                             	
                             
c70f :                       mod_sz_file_e
                             
                             
                             	include "file/tape.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
AS65 Assembler for R6502 [1.42].                                     Page   77
---------------------------------- bank0.s -----------------------------------

                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TAPE.S
                             ;*	These routines allow for tape input/output
                             ;*	The tape format is not compatible with a regul
                             ;*	but is a block format as follows;
                             ;*	Some zero bits (64) start a block.
                             ;*	Then two bytes of data representing the block 
                             ;*	Then 256 bytes of block data.
                             ;*	Each byte above consists of two '1' start bits
                             ;*	one '0' stop bit.
                             ;*	After each block, 1 second of 4800Hz (seen as 
                             ;*	is transmitted to allow the CPU to deal with t
                             ;*	when subsequently loading.
                             ;*	A bit is 4800Hz half cycle then 4800Hz half cy
                             ;*	'1' or 2400Hz half cycle for a '0', except for
                             ;*	block which is one second of 2400Hz.
                             ;*
                             ;************************************************
                             
                             	if !DFLATLOCI
                             
                             	; ROM code
                             	code
                             
c70f :                       mod_sz_tape_s
                             
c70f :                       tp_init
c70f : 4cf6c4           [ 3] 	jmp init_via0_tape
                             
c712 :                       tp_release
c712 : 60               [ 6] 	rts
                             	
                             ; tp_put_delay
                             ;* X = number of zero bits to insert
c713 :                       tp_put_delay
c713 : 18               [ 2] 	clc
c714 : 2049c7           [ 6] 	jsr tp_write_bit
c717 : ca               [ 2] 	dex
c718 : d0f9             [ 3] 	bne tp_put_delay
c71a : 60               [ 6] 	rts
                             
                             ; tp_block_gap
                             ; Send 2400 bits of zero ~ 1.5 seconds
                             ; add 0x101 due to how counters decrement
                             ; For binary mode it is just 1 bit gap
c71b :                       tp_block_gap
c71b : a45a             [ 3] 	ldy tp_delay+1
c71d : a659             [ 3] 	ldx tp_delay
c71f :                       tp_block_gap_1
c71f : 2013c7           [ 6] 	jsr tp_put_delay
c722 : 88               [ 2] 	dey
c723 : d0fa             [ 3] 	bne tp_block_gap_1
c725 : 60               [ 6] 	rts	
                             
                             ;* tp_write_byte
                             ;* Write a byte to tape which looks like this
                             ;* 11xxxxxxxx0
c726 :                       tt_putbyte_pc				; ** FOR ORICUTRON EMULATOR **
c726 :                       tp_write_byte
c726 : 48               [ 3] 	pha
c727 : 08               [ 3] 	php
AS65 Assembler for R6502 [1.42].                                     Page   78
---------------------------------- bank0.s -----------------------------------

c728 : 38               [ 2] 	sec					; 1 for start bit
c729 : 2049c7           [ 6] 	jsr tp_write_bit
c72c : 38               [ 2] 	sec					; 1 for start bit
c72d : 2049c7           [ 6] 	jsr tp_write_bit
c730 : a008             [ 2] 	ldy #8				; 8 bits of data
c732 :                       tp_write_byte_bit
c732 : 6a               [ 2] 	ror a
c733 : 2049c7           [ 6] 	jsr tp_write_bit
c736 : 88               [ 2] 	dey
c737 : d0f9             [ 3] 	bne tp_write_byte_bit
c739 : 18               [ 2] 	clc					; 0 for stop bit
c73a : 2049c7           [ 6] 	jsr tp_write_bit
c73d : 28               [ 4] 	plp
c73e : 9007             [ 3] 	bcc tp_write_byte_nodelay
c740 : 8a               [ 2] 	txa
c741 : a220             [ 2] 	ldx #32					; Delays needed
c743 : 2013c7           [ 6] 	jsr tp_put_delay
c746 : aa               [ 2] 	tax
c747 :                       tp_write_byte_nodelay
c747 : 68               [ 4] 	pla
c748 :                       tt_putbyte_end_pc			; ** FOR ORICUTRON EMULATOR *
c748 : 60               [ 6] 	rts
                             	
                             
                             ;* tp_write_bit
                             ;* Write a bit in C to tape which looks like this
                             ;* Half cycle of 4800Hz, then
                             ;*		half cycle of 4800Hz for a 1
                             ;*		half cycle of 2400Hz for a 0
c749 :                       tp_write_bit
c749 : 48               [ 3] 	pha
c74a : 8a               [ 2] 	txa
c74b : 48               [ 3] 	pha
c74c : 08               [ 3] 	php						; Save the bit to be stored
                             
c74d : a9d0             [ 2] 	lda #TAPE_RATE			; Half cycle first of 4800Hz
c74f : a200             [ 2] 	ldx #0
c751 : 8d0603           [ 4] 	sta IO_0+T1LL
c754 : 8e0703           [ 4] 	stx IO_0+T1LH			; This starts the timer
c757 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear any interrupt flag
c75a :                       tp_write_bit_chk1
c75a : 2c0d03           [ 4] 	bit IO_0+IFR			; Check IRF for bit 6
c75d : 50fb             [ 3] 	bvc tp_write_bit_chk1	; V=0? Keep checking
c75f : ad0403           [ 4] 	lda IO_0+T1CL			; Clear interrupt flag
                             	
c762 : 28               [ 4] 	plp						; Get the bit to be stored
c763 : a9d0             [ 2] 	lda #TAPE_RATE			; Assume putting out a 1 in 2nd
c765 : b002             [ 3] 	bcs tp_write_bit_t1		; A zero is half the rate (
c767 : 0a               [ 2] 	asl	a					; TAPE_RATE * 2 need to inc X
c768 : e8               [ 2] 	inx
c769 :                       tp_write_bit_t1
c769 : 8d0603           [ 4] 	sta IO_0+T1LL
c76c : 8e0703           [ 4] 	stx IO_0+T1LH			; This starts the timer
c76f : ad0403           [ 4] 	lda IO_0+T1CL			; Clear any interrupt flag
c772 :                       tp_write_bit_chk2
c772 : 2c0d03           [ 4] 	bit IO_0+IFR			; Check IRF for bit 6
c775 : 50fb             [ 3] 	bvc tp_write_bit_chk2	; V=0? Keep checking
c777 : ad0403           [ 4] 	lda IO_0+T1CL			; Clear interrupt flag
c77a : 68               [ 4] 	pla
c77b : aa               [ 2] 	tax
c77c : 68               [ 4] 	pla
c77d : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   79
---------------------------------- bank0.s -----------------------------------

                             
                             
                             
                             ;* tp_read_byte
                             ;* Read a byte from tape, always expects one '1' 
c77e :                       tt_readbyte_pc				; ** FOR ORICUTRON EMULATOR **
c77e :                       tp_read_byte
c77e :                       tp_read_byte_st
c77e : 2092c7           [ 6] 	jsr tp_read_bit			; Expecting a 1
c781 : 90fb             [ 3] 	bcc tp_read_byte_st
c783 : 2092c7           [ 6] 	jsr tp_read_bit			; Should be another 1
c786 : 90f6             [ 3] 	bcc tp_read_byte_st
                             	; Ok got 2 start
                             	
c788 : a008             [ 2] 	ldy #8				; Get 8 bits
c78a :                       tp_read_byte_bits
c78a : 2092c7           [ 6] 	jsr tp_read_bit
c78d : 6a               [ 2] 	ror a
c78e : 88               [ 2] 	dey
c78f : d0f9             [ 3] 	bne tp_read_byte_bits
                             	; Byte is in A, stop bit is not waited for..
c791 :                       tt_readbyte_end_pc			; ** FOR ORICUTRON EMULATOR 
c791 : 60               [ 6] 	rts
                             
                             ;* tp_read_bit
                             ;* Get a CB1 transition and measure the time
                             ;* The measurement indicates a 1 or 0 received
c792 :                       tp_read_bit
c792 : 48               [ 3] 	pha
c793 : ad0003           [ 4] 	lda IO_0+PRB			; Clear CB1 interrupt flag by rea
c796 :                       tp_read_bit_cb1
c796 :                       tt_getsync_loop_pc			; ** FOR ORICUTRON EMULATOR 
c796 : ad0d03           [ 4] 	lda IO_0+IFR
c799 : 2910             [ 2] 	and #IFR_CB1
c79b : f0f9             [ 3] 	beq tp_read_bit_cb1		; Keep checking until CB1 a
                             
c79d : ad0903           [ 4] 	lda IO_0+T2CH			; Get the high byte of T2 counte
c7a0 : 48               [ 3] 	pha
c7a1 : a9ff             [ 2] 	lda #0xff				; Reset T2 counter high byte
c7a3 : 8d0903           [ 4] 	sta IO_0+T2CH			; Reset high byte of T2 counter
c7a6 : 68               [ 4] 	pla						; What was previous counter?
                             ;	beq tp_io_error			; If down to zero, then some 
c7a7 : c9fe             [ 2] 	cmp #0xfe				; C=1 if T2 >= 0xfe else C=0
c7a9 : 68               [ 4] 	pla
c7aa : 60               [ 6] 	rts						; Carry contains the bit received
c7ab :                       tp_io_error
                             	SWBRK DFERR_BREAK		; DEFINE A NEW ERROR!
                             
                             
c7ad :                       mod_sz_tape_e
                             
                             	endif
                             	
                             	include "file/sdcard.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page   80
---------------------------------- bank0.s -----------------------------------

                             ;*  SDCARD.S
                             ;*	These routines allow for SD card input/output
                             ;*	The file format is similar to the dflat tape
                             ;*	format but is *NOT* a block format
                             ;*
                             ;*  Controlled through port A (printer port) as f
                             ;*		PA0		Clock			Out		Controlled by Oric
                             ;*		PA1		D0				In/Out	To/from Oric protocol depen
                             ;*		PA2		D1				In/Out	To/from Oric protocol depen
                             ;*		PA3		D2				In/Out	To/from Oric protocol depen
                             ;*		PA4		D3				In/Out	To/from Oric protocol depen
                             ;*		PA5		Ready (ACK)		In		Set by Arduino (1=ACK)
                             ;*		PA6		SD Select		Out		Set low by Oric
                             ;*		PA7		SD Select		Out		Set low by Oric
                             ;*		PB4		Select (STB)	Out		Set low by Oric
                             ;*
                             ;* Protocol is that PB4,6,7 must be low for SD ca
                             ;* to respond. If PB6,7 are non zero, then it sel
                             ;* one of the joysticks.
                             ;* Protocol;
                             ;* Write:
                             ;* 0) Oric: Set PB4,6,7 low - D0-D3 as output
                             ;* 1) Oric: Set D0-D3 as output (to send)
                             ;* 2) Oric: Send write command byte
                             ;* 3) Oric: Send additional bytes (e.g. filename)
                             ;* 4) Oric: Set D0-D3 as output
                             ;* 5) Oric: Send data bytes
                             ;* 6) Oric: Set PB4,6,7 = high, D0-D3 as input
                             ;* Read:
                             ;* 0) Oric: Set PB4,6,7 low - D0-D3 as output
                             ;* 1) Oric: Set D0-D3 as output (to send)
                             ;* 2) Oric: Send write command byte
                             ;* 3) Oric: Send additional bytes (e.g. filename)
                             ;* 4) Oric: Set D0-D3 as input
                             ;* 5) Oric: Receive data bytes
                             ;* 6) Oric: Set PB4,6,7 = high, D0-D3 as input
                             ;*
                             ;* Commands
                             ;* 0x00 : Load <filename><NUL>
                             ;* 0x01 : Save <filename><NUL>
                             ;************************************************
                             
                             	if !DFLATLOCI
                             	; ROM code
                             	code
                             
c7ad :                       mod_sz_sd_s
                             
0002 =                       SD_BIT_DELAY	=	2
                             
                             ; Release the Arduino
                             ; Toggles the clock line a few times with STB hig
                             ; This causes the Arduino to reset
c7ad :                       sd_release
c7ad : 203ec5           [ 6] 	jsr via_strobe_off
                             ;	ldy #10
                             ;	lda IO_0+PRA;
                             ;sd_reset_toggle
                             ;	eor #1
                             ;	sta IO_0+PRA;
                             ;	jsr sd_delay
                             ;	dey
AS65 Assembler for R6502 [1.42].                                     Page   81
---------------------------------- bank0.s -----------------------------------

                             ;	bne sd_reset_toggle
c7b0 : 2002c8           [ 6] 	jsr sd_write_byte
c7b3 : 2002c8           [ 6] 	jsr sd_write_byte
c7b6 : 4cf9c4           [ 3] 	jmp init_via0
                             
                             
                             ;* Select the Arduino
c7b9 :                       sd_select
c7b9 : 48               [ 3] 	pha
                             
                             	;set ddra to output mode initially
c7ba : a9df             [ 2] 	lda #0b11011111
c7bc : 2032c5           [ 6] 	jsr via_strobe_init
                             
                             	;deselect joystick (and zero all other bits)
c7bf : a900             [ 2] 	lda #0b00000000
c7c1 : 8d0103           [ 4] 	sta IO_0+PRA
                             
c7c4 : 20e5c7           [ 6] 	jsr sd_delay
c7c7 : 68               [ 4] 	pla
c7c8 : 60               [ 6] 	rts
                             
                             
                             ; Eerror routine if Arduino does not respond in t
                             ; E.g not connected, or could not find file (for 
                             ; This is only called from sd_ready (not a jsr) a
c7c9 :                       sd_timeout
c7c9 : 28               [ 4] 	plp
c7ca : b002             [ 3] 	bcs sd_timeout_brk
c7cc : 38               [ 2] 	sec							; C=1 means error
c7cd : 60               [ 6] 	rts
c7ce :                       sd_timeout_brk
                             	SWBRK DFERR_FNAME
                             
                             
                             
                             ;* Wait for Arduino to be ready then short delay
                             ;* C=1 means fatal error (BRK) on timeout
                             ;* If returns (i.e. no BRK) then C=1 means timeou
c7d0 :                       sd_ready_sec
c7d0 : 38               [ 2] 	sec
c7d1 :                       sd_ready
c7d1 : 08               [ 3] 	php
c7d2 : a250             [ 2] 	ldx #80
c7d4 : a000             [ 2] 	ldy #0
c7d6 :                       sd_notready
c7d6 : c8               [ 2] 	iny							; Decrement X,Y timeout
c7d7 : d003             [ 3] 	bne sd_ready_skipx
c7d9 : ca               [ 2] 	dex
c7da : f0ed             [ 3] 	beq sd_timeout				; If X is zero then timeout er
c7dc :                       sd_ready_skipx
c7dc : ad0103           [ 4] 	lda IO_0+PRA				; Get port A value
c7df : 2920             [ 2] 	and #0b00100000				; Check bit 5
c7e1 : f0f3             [ 3] 	beq sd_notready
c7e3 : 28               [ 4] 	plp
c7e4 : 18               [ 2] 	clc							; C=0 means ok
                             	; Fall through to delay routine once ready check
                             
                             ;* Delay based on X register - called direct in o
c7e5 :                       sd_delay
c7e5 : 48               [ 3] 	pha
c7e6 : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page   82
---------------------------------- bank0.s -----------------------------------

c7e7 : a202             [ 2] 	ldx #SD_BIT_DELAY
c7e9 :                       sd_delay_loop
c7e9 : ca               [ 2] 	dex
c7ea : d0fd             [ 3] 	bne sd_delay_loop
c7ec : aa               [ 2] 	tax
c7ed : 68               [ 4] 	pla
c7ee : 60               [ 6] 	rts
                             
                             ; Write nibble in bit 1..4 plus clock high
c7ef :                       sd_write_nibble
c7ef : a000             [ 2] 	ldy #0b00000000
c7f1 : 8c0103           [ 4] 	sty IO_0+PRA				; Clock low, data low
c7f4 : 20e5c7           [ 6] 	jsr sd_delay
c7f7 : 0d0103           [ 4] 	ora IO_0+PRA				; Set bits to transfer for nibbl
c7fa : 0901             [ 2] 	ora #1						; Clock high
c7fc : 8d0103           [ 4] 	sta IO_0+PRA				; Send it to Port A
c7ff : 4ce5c7           [ 3] 	jmp sd_delay
                             
                             
                             ;* Write a byte in A to the Arduino
c802 :                       sd_write_byte
c802 : 8538             [ 3] 	sta tmp_d
c804 : 48               [ 3] 	pha
c805 : 8a               [ 2] 	txa
c806 : 48               [ 3] 	pha
c807 : 98               [ 2] 	tya
c808 : 48               [ 3] 	pha
                             
                             	; Make sure arduino is ready, fatal error if not
c809 : 20d0c7           [ 6] 	jsr sd_ready_sec
                             
                             	; Set DDRA to output from Oric
c80c : a9df             [ 2] 	lda #0b11011111
c80e : 8d0303           [ 4] 	sta IO_0+DDRA
                             
                             	; Write low nibble
c811 : a538             [ 3] 	lda tmp_d					; Get the byte to transmit
c813 : 290f             [ 2] 	and #0x0f					; Mask off lower nibble
c815 : 0a               [ 2] 	asl a 						; Shift from bit 0-3 to bit 1-4
c816 : 20efc7           [ 6] 	jsr sd_write_nibble
                             
                             	; Write high nibble
c819 : a538             [ 3] 	lda tmp_d					; Get the byte to transmit
c81b : 29f0             [ 2] 	and #0xf0					; Mask off upper nibble
c81d : 4a               [ 2] 	lsr a						; Shift down to bit 1-4
c81e : 4a               [ 2] 	lsr a
c81f : 4a               [ 2] 	lsr a
c820 : 20efc7           [ 6] 	jsr sd_write_nibble
                             
c823 : 68               [ 4] 	pla
c824 : a8               [ 2] 	tay
c825 : 68               [ 4] 	pla
c826 : aa               [ 2] 	tax
                             
c827 : 68               [ 4] 	pla
c828 : 60               [ 6] 	rts
                             
                             
                             ;* Read nibble from Arduino plus clock high
c829 :                       sd_read_nibble
c829 : a000             [ 2] 	ldy #0b00000000
c82b : 8c0103           [ 4] 	sty IO_0+PRA				; Set clock low, data low
AS65 Assembler for R6502 [1.42].                                     Page   83
---------------------------------- bank0.s -----------------------------------

c82e : 20e5c7           [ 6] 	jsr sd_delay				
                             
c831 : 0901             [ 2] 	ora #1						; Clock bit high
c833 : 8d0103           [ 4] 	sta IO_0+PRA				; Store it
                             
c836 : ad0103           [ 4] 	lda IO_0+PRA				; Get bits 1..4
c839 : 291e             [ 2] 	and #0b00011110				; Mask these bits
                             
c83b : 4ce5c7           [ 3] 	jmp sd_delay
                             
                             
c83e :                       sd_read_byte
c83e : 8a               [ 2] 	txa
c83f : 48               [ 3] 	pha
c840 : 98               [ 2] 	tya
c841 : 48               [ 3] 	pha
                             
                             	; Make sure arduino is ready, fatal error if not
c842 : 20d0c7           [ 6] 	jsr sd_ready_sec
                             
                             	; Set DDRA to input to Oric
c845 : a9c1             [ 2] 	lda #0b11000001
c847 : 8d0303           [ 4] 	sta IO_0+DDRA
                             
c84a : ad0103           [ 4] 	lda IO_0+PRA				; Get port A value
c84d : 29e0             [ 2] 	and #0b11100000				; Ensure clock and data is lo
c84f : a8               [ 2] 	tay							; Y is clock zero and data zero
                             
                             	; Read low nibble
c850 : 2029c8           [ 6] 	jsr sd_read_nibble
c853 : 4a               [ 2] 	lsr a						; Shift from bit 1 to bit 0
c854 : 290f             [ 2] 	and #0x0f					; Mask off lower nibble
c856 : 8538             [ 3] 	sta tmp_d					; Save in temp
                             
                             	; Read high nibble
c858 : 2029c8           [ 6] 	jsr sd_read_nibble
c85b : 0a               [ 2] 	asl a						; Shift from bit 1 to bit 4
c85c : 0a               [ 2] 	asl a
c85d : 0a               [ 2] 	asl a
c85e : 29f0             [ 2] 	and #0xf0					; Mask off upper nibble
c860 : 0538             [ 3] 	ora tmp_d					; Merge with lower nibble
c862 : 8538             [ 3] 	sta tmp_d
                             
c864 : 68               [ 4] 	pla
c865 : a8               [ 2] 	tay
c866 : 68               [ 4] 	pla
c867 : aa               [ 2] 	tax
                             
c868 : a538             [ 3] 	lda tmp_d
c86a : 60               [ 6] 	rts
                             	
                             ;* Initialise SD card
                             ;* Use TP flag to determine the command to send t
                             ;* Send this command (read or write) plus the fil
c86b :                       sd_init
c86b : a458             [ 3] 	ldy tp_flag				; 1=read, 2=write
c86d : 88               [ 2] 	dey
c86e : 98               [ 2] 	tya						; 0=read, 1=write for the Arduino
c86f :                       sd_init_a					; Init with A preset to command byt
c86f : 20b9c7           [ 6] 	jsr sd_select
                             ;* Send command and filename
c872 :                       sd_commandfname
AS65 Assembler for R6502 [1.42].                                     Page   84
---------------------------------- bank0.s -----------------------------------

c872 : 2002c8           [ 6] 	jsr sd_write_byte		; Send command byte (0=read, 
c875 : a000             [ 2] 	ldy #0					; Start of df_linbuff
c877 :                       sd_commandfname_ch
c877 : b90004           [ 4] 	lda df_linbuff,y		; Get filename char
c87a : 2002c8           [ 6] 	jsr sd_write_byte		; Send it as command frame
c87d : c8               [ 2] 	iny						; Next char
c87e : c900             [ 2] 	cmp #0					; Unless zero terminator
c880 : d0f5             [ 3] 	bne sd_commandfname_ch
                             ;* No delay for SD card
                             ;* No block gap for SD card
c882 :                       sd_put_delay
c882 :                       sd_block_gap
c882 : 60               [ 6] 	rts
                             
                             
                             ;* Delete file from SD card
c883 :                       sd_delete
c883 : a903             [ 2] 	lda #3					; Send Delete command
c885 : 206fc8           [ 6] 	jsr sd_init_a			; And send filename to delete
c888 : 20d0c7           [ 6] 	jsr sd_ready_sec		; Check SD card is ready else 
c88b : 4cadc7           [ 3] 	jmp sd_release			; Then done
                             
                             ;* Ouput directory listing
c88e :                       sd_dir
c88e : 20b9c7           [ 6] 	jsr sd_select
c891 : a904             [ 2] 	lda #4					; Send directory command
c893 : 2002c8           [ 6] 	jsr sd_write_byte
c896 : 20e5c7           [ 6] 	jsr sd_delay
c899 :                       sd_dir_char					; Keep getting bytes from Arduino
c899 : 20e5c7           [ 6] 	jsr sd_delay
c89c : 203ec8           [ 6] 	jsr sd_read_byte
c89f : 20e2d0           [ 6] 	jsr gr_put_byte
c8a2 : aa               [ 2] 	tax
c8a3 : d0f4             [ 3] 	bne sd_dir_char			; Until zero terminator found
c8a5 : 4cadc7           [ 3] 	jmp sd_release			; Then done
                             	
                             
                             
c8a8 :                       mod_sz_sd_e
                             
                             	endif
                             
                             	include "file/locisd.s"
                             
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2024
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  LOCISD.S
                             ;*	Routines to use LOCI SD card storage.
                             ;*	The file format is similar to the dflat tape
                             ;************************************************
                             	if DFLATLOCI
                             	; ROM code
                             	code
                             
                             mod_sz_lc_s
                             
AS65 Assembler for R6502 [1.42].                                     Page   85
---------------------------------- bank0.s -----------------------------------

                             ; Using extended RAM to keep current path
                             ; Page aligned
                             XMEM		=	0x4000
                             XMEMDIRPATH	=	(XMEM)
                             
                             	include "file/loci.i"
                             
                             loci_default_path
                             	db	":/dflat/",0
                             loci_dir_str
                             	db	"<DIR>",0
                             
                             ; a=high address, x=low address
                             ; step = 1 default
                             ; y=0 on return
                             lc_init_xmempath
                             	ldy #hi(XMEMDIRPATH)
                             	sty MIA_ADDR0+1
                             	ldy #1
                             	sty MIA_STEP0
                             	dey
                             	sty MIA_ADDR0
                             ; Convenient place for labels with immediate rts
                             lc_block_gap
                             lc_put_delay
                             	rts
                             
                             ; Copy filedes to MIA A,X
                             lc_fd_to_mia_ax
                             	lda lc_fildes
                             	sta MIA_A
                             	lda lc_fildes+1
                             	sta MIA_X
                             	rts
                             
                             ; Starting directory for dflat in LOCI
                             lc_init_path
                             	jsr lc_init_xmempath
                             	ldx #'1'							; Default device=1
                             	clc
                             	jsr gr_get_key
                             	bcs lc_init_path_skip_dev
                             	tax									; Use this key as device number
                             lc_init_path_skip_dev
                             	stx MIA_RW0
                             lc_init_path_ch
                             	iny
                             	lda loci_default_path-1,y
                             	sta MIA_RW0
                             	bne lc_init_path_ch
                             	rts
                             
                             ; Close open file or directory
                             lc_release
                             	jsr lc_fd_to_mia_ax
                             	lda #MIA_OP_CLOSEDIR
                             	ldx tp_flag
                             	beq lc_release_dir
                             	lda #MIA_OP_CLOSE
                             lc_release_dir
                             	sta MIA_OP
                             	jmp lc_op_wait
AS65 Assembler for R6502 [1.42].                                     Page   86
---------------------------------- bank0.s -----------------------------------

                             
                             ; Read byte
                             ; Only saves X (as Y not touched)
                             ; A=byte read from file
                             lc_read_byte
                             	stx tmp_d					; Save X in tmp_d
                             
                             	lda #0xd					; Assume CR (meaning directory)
                             	ldx tp_flag					; If tp_flag zero then this is a
                             	beq lc_read_byte_dir
                             	ldx #0						; Count hi = 0
                             	stx MIA_XSTACK
                             	inx							; Count lo = 1 (inefficient!)
                             	stx MIA_XSTACK
                             	jsr lc_fd_to_mia_ax
                             	lda #MIA_OP_READ_XSTACK		; Ok do a read of just 
                             	jsr lc_op_wait
                             	lda MIA_XSTACK				; Get the byte from the stack
                             lc_read_byte_dir				; If dir then skip all that
                             
                             	ldx tmp_d					; Get X back
                             	rts
                             
                             ; Write byte to file
                             ; only uses A,X (Y not touched)
                             lc_write_byte
                             	pha
                             	stx tmp_d
                             
                             	sta MIA_XSTACK
                             	jsr lc_fd_to_mia_ax
                             	lda #MIA_OP_WRITE_XSTACK	; Ok do a write of just
                             	jsr lc_op_wait
                             
                             	pla
                             	ldx tmp_d
                             	rts
                             
                             ; A = MIA op code
                             ; Waits until MIA ready
                             lc_op_wait
                             	sta MIA_OP
                             	jmp MIA_SPIN
                             
                             ; A = MIA op code
                             ; Waits until MIA ready
                             ; put A,X in filedes
                             lc_op_wait_fd
                             	jsr lc_op_wait
                             	sta lc_fildes				; Save A,X from MIA op call
                             	stx lc_fildes+1
                             	rts
                             
                             lc_push_dir_path
                             	jsr lc_init_xmempath
                             lc_find_dir_path_end
                             	iny
                             	lda MIA_RW0
                             	bne lc_find_dir_path_end
                             	dey							; Go back to the zero
                             	sty MIA_ADDR0				; set addr low
                             	lda #255					; -ve step
AS65 Assembler for R6502 [1.42].                                     Page   87
---------------------------------- bank0.s -----------------------------------

                             	sta MIA_STEP0
                             	lda MIA_RW0					; Step back xmem ptr too
                             lc_dir_path_push_ch
                             	lda MIA_RW0
                             	sta MIA_XSTACK
                             	dey
                             	bne lc_dir_path_push_ch
                             lc_dir_path_done
                             	rts
                             
                             ; Push filename onto MIA XSTACK
                             lc_push_fname
                             	ldy #0
                             lc_init_findend
                             	iny
                             	lda df_linbuff-1,y
                             	bne lc_init_findend
                             lc_push_fnchar					; Push in reverse order
                             	lda df_linbuff-1,y
                             	sta MIA_XSTACK
                             	dey
                             	bne lc_push_fnchar
                             	jsr lc_push_dir_path		; Also push path in revers
                             	rts
                             
                             ; Get a filehandle from MIA
                             ; Could be a file or a directory
                             ; If a directory can only be read mode tp_flag se
                             lc_init
                             	jsr lc_push_fname
                             	lda #0
                             	sta MIA_X					; Zero
                             	lda tp_flag					; 1=Read, 2=Write
                             	cmp #2						; If write
                             	bne lc_init_skip_create
                             	ora #0x10					; Create file if not exists
                             lc_init_skip_create	
                             	sta MIA_A
                             	lda #MIA_OP_OPEN			; Try to open file first
                             	jsr lc_op_wait_fd
                             	cmp #255					; if error try to open dir
                             	bne lc_init_done			; else done
                             	lda tp_flag					; but only if reading
                             	cmp #1
                             	bne lc_init_error
                             	jsr lc_push_fname
                             	lda #MIA_OP_OPENDIR
                             	jsr lc_op_wait_fd
                             	cmp #255					; if error try to open dir
                             	beq lc_init_error
                             	jsr lc_init_xmempath		; dir is valid so add to p
                             	sty tp_flag					; Y already zero from xmem init
                             	lda df_linbuff				; if the dir '/' ?
                             	cmp #'/'
                             	bne lc_init_dir_end
                             	jmp lc_init_path			; Then back to dflat root
                             lc_init_dir_end
                             	iny
                             	lda MIA_RW0
                             	bne lc_init_dir_end
                             	ldx #0
                             	dey							; Overwrite the zero in xmem0
AS65 Assembler for R6502 [1.42].                                     Page   88
---------------------------------- bank0.s -----------------------------------

                             	sty MIA_ADDR0
                             lc_init_dir_append
                             	lda df_linbuff,x
                             	beq lc_init_dir_term
                             	sta MIA_RW0
                             	inx
                             	bne lc_init_dir_append
                             lc_init_dir_term				; Finally add '/' and zero te
                             	lda #'/'
                             	sta MIA_RW0
                             	lda #0
                             	sta MIA_RW0
                             lc_init_done
                             	rts
                             lc_init_error
                             	SWBRK DFERR_FNAME
                             
                             sd_delete
                             	jsr lc_push_fname
                             	lda #MIA_OP_UNLINK
                             	jsr lc_op_wait
                             	cmp #255
                             	beq lc_init_error
                             	rts
                             
                             sd_dir
                             	lda #0								; No filename
                             	sta df_linbuff
                             	sta tp_flag							; Also no file mode
                             	jsr lc_push_fname					; Just push current dir
                             	ldy #0
                             	sta MIA_X							; Zero
                             	iny									; 1=read
                             	sty MIA_A
                             	lda #MIA_OP_OPENDIR
                             	jsr lc_op_wait_fd
                             	cmp #255							; Didn't open?
                             	beq lc_init_error					; Then error
                             sd_dir_read_entry
                             	jsr lc_fd_to_mia_ax
                             	lda #MIA_OP_READDIR					; Try to read entry
                             	jsr lc_op_wait
                             	ldy #0								; Pop entry off stack
                             sd_get_entry
                             	lda MIA_XSTACK						; Get a byte
                             	sta df_linbuff,y					; Save to memory
                             	iny
                             	cpy #dirent							; For size of directory entry
                             	bne sd_get_entry
                             	ldy #lo(df_linbuff+dirent_name)		; ptr to filena
                             	lda #hi(df_linbuff+dirent_name+1)
                             	jsr gr_print_line					; print the filename
                             	cpy #0								; Nothing was printed?
                             	beq sd_dir_end
                             sd_dir_padding
                             	jsr utilPrintSPC
                             	iny
                             	cpy #25
                             	bne sd_dir_padding
                             	ldx df_linbuff+dirent_size			; Low byte of size
                             	lda df_linbuff+dirent_size+1		; High byte of siz
                             	clc
AS65 Assembler for R6502 [1.42].                                     Page   89
---------------------------------- bank0.s -----------------------------------

                             	jsr int_to_str
                             	lda df_linbuff+dirent_attrib		; Directory?
                             	and #0x20							; Attribute bit for file
                             	bne sd_dir_not_folder
                             	tax
                             sd_dir_stuff_ch
                             	inx
                             	lda loci_dir_str-1,x
                             	sta num_buf-1,x
                             	bne sd_dir_stuff_ch
                             sd_dir_not_folder
                             	ldy #lo(num_buf)
                             	lda #hi(num_buf)
                             	jsr gr_print_line
                             	jsr utilPrintCRLF
                             	jmp sd_dir_read_entry
                             sd_dir_end
                             	jmp lc_release
                             
                             mod_sz_lc_e
                             
                             	endif
                             	include "keyboard/keyboard.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  KEYBOARD.S
                             ;*	Keyboard driver code. It is very slow to scan 
                             ;*	routines here do a basic scan for any key befo
                             ;*	the specific key. Still, it has a noticeable i
                             ;*	CPU especially in dflat which checks the key a
                             ;*	keyword is executed.
                             ;*	Rather than working off interrupts these routi
                             ;*	need to be called as needed. The T1 interrupt 
                             ;*	track of keyboard timers for repeat delay and 
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* init_keyboard
                             ;* Initialise the keyboard settings
                             ;****************************************
c8a8 :                       init_keyboard
c8a8 : a914             [ 2] 	lda #KB_REP_DEL
c8aa : 8531             [ 3] 	sta kb_rdel_tim
c8ac : a903             [ 2] 	lda #KB_REP_TIM
c8ae : 8530             [ 3] 	sta kb_rep_tim
c8b0 : a901             [ 2] 	lda #KB_DEBOUNCE
c8b2 : 852e             [ 3] 	sta kb_deb_tim
                             
                             	; ** check if IJK stick connected **
c8b4 : 08               [ 3] 	php
c8b5 : 78               [ 2] 	sei
                             	; Save port A
AS65 Assembler for R6502 [1.42].                                     Page   90
---------------------------------- bank0.s -----------------------------------

c8b6 : ad0303           [ 4] 	lda IO_0+DDRA
c8b9 : 48               [ 3] 	pha
c8ba : ad0103           [ 4] 	lda IO_0+PRA
c8bd : 48               [ 3] 	pha
                             
                             	; Check IJK present
                             	; set top two bits of porta to output and rest a
c8be : a9c0             [ 2] 	lda   #0b11000000
c8c0 : 2032c5           [ 6] 	jsr via_strobe_init
                             	; Select left+right stick
c8c3 : a9c0             [ 2] 	lda #0b11000000
c8c5 : 8d0f03           [ 4] 	sta IO_0+PRAH
                             	; read stick sense line
c8c8 : ad0f03           [ 4] 	lda IO_0+PRAH
c8cb : 2920             [ 2] 	and #KB_IJK
c8cd : 4920             [ 2] 	eor #KB_IJK
c8cf : 852c             [ 3] 	sta kb_stat
c8d1 : 203ec5           [ 6] 	jsr via_strobe_off
                             
                             	; Restore port A
c8d4 : 68               [ 4] 	pla
c8d5 : 8d0103           [ 4] 	sta IO_0+PRA
c8d8 : 68               [ 4] 	pla
c8d9 : 8d0303           [ 4] 	sta IO_0+DDRA
                             
c8dc : 28               [ 4] 	plp
c8dd : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* kb_stick
                             ;* Check for fire | down | up | right | left
                             ;*        bit  4     3      2     1       0
                             ;* A = Returns bit mask of keys pressed
                             ;* Y corrupted
                             ;****************************************
c8de :                       kb_stick
                             	; if IJK connected then read joystick
c8de : a52c             [ 3] 	lda kb_stat
c8e0 : 2920             [ 2] 	and #KB_IJK
c8e2 : d028             [ 4] 	bne kb_stick_ijk
                             
                             	; Select Row 4 only, all keys on this row
c8e4 : a9b4             [ 2] 	lda #4+KB_PRB			; Maintain upper nibble of PRB
c8e6 : 8d0003           [ 4] 	sta IO_0+PRB
c8e9 : a90e             [ 2] 	lda #SND_REG_IOA		; Select AY Port A for columns
c8eb : 204ec0           [ 6] 	jsr snd_sel_reg
c8ee : a900             [ 2] 	lda #0					; Result will be in A
c8f0 : 48               [ 3] 	pha
c8f1 : a004             [ 2] 	ldy #4					; Go through the 5 cols on row 4
c8f3 :                       kb_stick_pos
c8f3 : b9f3ca           [ 4] 	lda kb_stick_mask,y		; Get the column mask
c8f6 : 205ec0           [ 6] 	jsr snd_set_reg			; Activate column
c8f9 : ea               [ 2] 	nop
c8fa : ea               [ 2] 	nop
c8fb : ea               [ 2] 	nop
c8fc : ea               [ 2] 	nop
c8fd : a908             [ 2] 	lda #KB_SENSE			; Something pressed?
c8ff : 2d0003           [ 4] 	and IO_0+PRB			; Read Port B
c902 : c908             [ 2] 	cmp #KB_SENSE			; C=1 if set else 0
c904 : 68               [ 4] 	pla
c905 : 2a               [ 2] 	rol a					; Get C in to A
AS65 Assembler for R6502 [1.42].                                     Page   91
---------------------------------- bank0.s -----------------------------------

c906 : 48               [ 3] 	pha
c907 : 88               [ 2] 	dey
c908 : 10e9             [ 4] 	bpl kb_stick_pos		; Do all 5 positions
c90a : 68               [ 4] 	pla						; Result in A
c90b : 60               [ 6] 	rts
c90c :                       kb_stick_ijk
c90c : 08               [ 3] 	php
c90d : 78               [ 2] 	sei
                             
                             	; Save port A
c90e : ad0303           [ 4] 	lda IO_0+DDRA
c911 : 48               [ 3] 	pha
c912 : ad0103           [ 4] 	lda IO_0+PRA
c915 : 48               [ 3] 	pha
                             
                             	;set top two bits of porta to output and rest as
c916 : a9c0             [ 2] 	lda   #0b11000000
c918 : 2032c5           [ 6] 	jsr via_strobe_init
                             
                             	;Select Left Joystick
c91b : a97f             [ 2] 	lda #0b01111111
c91d : 8d0103           [ 4] 	sta IO_0+PRA
                             	;Read back Left Joystick state into A
c920 : ad0103           [ 4] 	lda IO_0+PRA
                             	; release joystick IO settings
c923 : 203ec5           [ 6] 	jsr via_strobe_off
                             	;Mask out unused bits and invert
c926 : 291f             [ 2] 	and #0b00011111
c928 : 491f             [ 2] 	eor #0b00011111
c92a : a8               [ 2] 	tay
                             	; use this as an index into the mapping
                             	; to get the same bit representation
                             	; as if using cursor and space keys
c92b : b9f8ca           [ 4] 	lda kb_ijk_map,y
c92e : a8               [ 2] 	tay
                             
                             	; Restore port A
c92f : 68               [ 4] 	pla
c930 : 8d0103           [ 4] 	sta IO_0+PRA
c933 : 68               [ 4] 	pla
c934 : 8d0303           [ 4] 	sta IO_0+DDRA
                             
c937 : 28               [ 4] 	plp
                             	; result in A
c938 : 98               [ 2] 	tya
c939 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* kb_any_key
                             ;* Quick check for any key except shifts & ctrl
                             ;* Carry = 1 means key pressed
                             ;****************************************
c93a :                       kb_any_key
c93a : a90e             [ 2] 	lda #SND_REG_IOA		; Select Port A of AY
c93c : 204ec0           [ 6] 	jsr snd_sel_reg
                             
c93f : a0b7             [ 2] 	ldy #7+KB_PRB			; Start from row 7
c941 :                       kb_any_key_row
c941 : 8c0003           [ 4] 	sty IO_0+PRB			; Select row on port B
                             	; Select all columns except 4
c944 : a910             [ 2] 	lda #0b00010000			; Deselect only col 4
AS65 Assembler for R6502 [1.42].                                     Page   92
---------------------------------- bank0.s -----------------------------------

c946 : 205ec0           [ 6] 	jsr snd_set_reg
                             
c949 : ea               [ 2] 	nop
c94a : ea               [ 2] 	nop
c94b : ea               [ 2] 	nop						; New NOP
c94c : ea               [ 2] 	nop
c94d : ea               [ 2] 	nop
                             ;	nop						; New NOP
                             
c94e : a908             [ 2] 	lda #KB_SENSE			; Something pressed?
c950 : 2d0003           [ 4] 	and IO_0+PRB			; Read Port B
c953 : d007             [ 3] 	bne kb_any_key_pressed
c955 : 88               [ 2] 	dey						; If not then next row
c956 : c0af             [ 2] 	cpy #KB_PRB-1			; Done rows 0..8?
c958 : d0e7             [ 3] 	bne kb_any_key_row		; Until all rows done
c95a :                       kb_any_key_none
c95a : 18               [ 2] 	clc						; C=0 means not pressed
c95b : 60               [ 6] 	rts
c95c :                       kb_any_key_pressed
c95c :                       kb_read_got
c95c : 38               [ 2] 	sec						; C=1 means pressed, Y=Row number
c95d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_read_raw
                             ;* Read keyboard
                             ;* Y = Keyboard code
                             ;* Carry = 1 means key found, 0 = no keys found
                             ;****************************************
c95e :                       kb_read_raw
c95e : 203ac9           [ 6] 	jsr kb_any_key			; Quick check is anything down?
c961 : 903f             [ 3] 	bcc kb_read_nothing		; Don't bother if not
                             ;kb_read_raw_force
c963 : a20e             [ 2] 	ldx #SND_REG_IOA		; Select Port A of AY
c965 : 8e0f03           [ 4] 	stx SND_ADBUS			; Put reg # on Port A (sound bus
c968 : a2ff             [ 2] 	ldx #SND_SELSETADDR		; Get ready to select the r
c96a : 8e0c03           [ 4] 	stx SND_MODE			; Latch the reg # on Port A
c96d : a2dd             [ 2] 	ldx #SND_DESELECT		; Deselect AY
c96f : 8e0c03           [ 4] 	stx SND_MODE
c972 : a200             [ 2] 	ldx #0					; Start at column 0
c974 : 86ac             [ 3] 	stx zp_tmp1
c976 :                       kb_check_matrix_col
                             ;	ldy #0+KB_PRB			; Start at row 0 (maintain PRB 
c976 :                       kb_check_matrix_row
c976 : 8c0003           [ 4] 	sty IO_0+PRB			; Select row from Y
                             	; Get the col value for AY port A
c979 : a6ac             [ 3] 	ldx zp_tmp1
c97b : bdebca           [ 4] 	lda kb_col_mask,x
                             	; Write it to AY port A
c97e : 8d0f03           [ 4] 	sta SND_ADBUS			; Put col value on AY bus
c981 : a2fd             [ 2] 	ldx #SND_SELWRITE		; Select mode for writing dat
c983 : 8e0c03           [ 4] 	stx SND_MODE			; Latch reg value on Port A
c986 : a2dd             [ 2] 	ldx #SND_DESELECT		; Deselect AY
c988 : 8e0c03           [ 4] 	stx SND_MODE
                             
c98b : ea               [ 2] 	nop						; Wait 10 cycles before reading sense p
c98c : ea               [ 2] 	nop
c98d : ea               [ 2] 	nop
                             
c98e : a908             [ 2] 	lda #KB_SENSE			; Bit 3 is the sense
c990 : 2d0003           [ 4] 	and IO_0+PRB			; And with Port B
                             
AS65 Assembler for R6502 [1.42].                                     Page   93
---------------------------------- bank0.s -----------------------------------

c993 : d011             [ 3] 	bne kb_read_raw_got
                             	; No key for this row/col, next
                             ;	iny
                             ;	cpy #8+KB_PRB			; Done 8 rows?
                             ;	bne kb_check_matrix_row
                             	; ok check next row
c995 : a6ac             [ 3] 	ldx zp_tmp1
c997 :                       kb_check_skip4
c997 : e8               [ 2] 	inx
c998 : e004             [ 2] 	cpx #4					; Skip 4?
c99a : f0fb             [ 3] 	beq kb_check_skip4
c99c : 86ac             [ 3] 	stx zp_tmp1
c99e : e008             [ 2] 	cpx #8					; Done 8 cols?
c9a0 : d0d4             [ 3] 	bne kb_check_matrix_col
                             	; No key was sensed
c9a2 :                       kb_read_nothing
c9a2 : a000             [ 2] 	ldy #0					; Raw key codes
c9a4 : 18               [ 2] 	clc						; No key sensed flag
c9a5 : 60               [ 6] 	rts
c9a6 :                       kb_read_raw_got
                             	;Y=row, zp_temp1=col
c9a6 : a5ac             [ 3] 	lda zp_tmp1				; Get the column num
c9a8 : 0a               [ 2] 	asl a					; Shift in to bits 5,4,3
c9a9 : 0a               [ 2] 	asl a
c9aa : 0a               [ 2] 	asl a
c9ab : 85ac             [ 3] 	sta zp_tmp1
c9ad : 98               [ 2] 	tya						; Now or with row number
c9ae : 2907             [ 2] 	and #7					; Only bottom 3 bits!
c9b0 : 05ac             [ 3] 	ora zp_tmp1
c9b2 : a8               [ 2] 	tay						; Put in to Y
c9b3 : 38               [ 2] 	sec
c9b4 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_scan_key
                             ;* Scans for a key, returns zero for no key found
                             ;* Processes caps and shift lock but these don't 
                             ;* A = Key code
                             ;****************************************
c9b5 :                       kb_scan_key
c9b5 : a52d             [ 3] 	lda kb_deb				; Do not scan keyboard too often
c9b7 : d013             [ 3] 	bne kb_no_scan
c9b9 : a52e             [ 3] 	lda kb_deb_tim			; Else reset debounce timer
c9bb : 852d             [ 3] 	sta kb_deb
c9bd : 205ec9           [ 6] 	jsr kb_read_raw			; Check if a key is sensed
c9c0 : b00e             [ 3] 	bcs kb_scan_decode		; go ahead and decode
                             	; If pressed nothing then reset timers
c9c2 : a9ff             [ 2] 	lda #255
c9c4 : 8529             [ 3] 	sta kb_raw				; Reset raw key settings
c9c6 : 852a             [ 3] 	sta kb_last				; And last key
c9c8 : a531             [ 3] 	lda kb_rdel_tim			; Reset repeat timer to initia
c9ca : 852f             [ 3] 	sta kb_rep
c9cc :                       kb_no_scan
c9cc : a900             [ 2] 	lda #0
c9ce : 38               [ 2] 	sec						; Code not valid
c9cf : 60               [ 6] 	rts						; And done (A=0)
c9d0 :                       kb_scan_decode
                             	; If got here then raw key is good
c9d0 : a52a             [ 3] 	lda kb_last				; Preload A with last decoded key
c9d2 : c429             [ 3] 	cpy kb_raw				; Same as last raw key?
c9d4 : 8429             [ 3] 	sty kb_raw				; Already save new raw key
c9d6 : d002             [ 3] 	bne kb_process_new		; If is new raw key, look at
AS65 Assembler for R6502 [1.42].                                     Page   94
---------------------------------- bank0.s -----------------------------------

c9d8 : f061             [ 4] 	beq kb_do_repeat		; Else go handle repeating wit
c9da :                       kb_process_new
c9da : a531             [ 3] 	lda kb_rdel_tim			; Reset repeat timer to initia
c9dc : 852f             [ 3] 	sta kb_rep
                             	; Now to get a proper key code translated from r
                             	; Check for shift and ctrl (not debounced!)
c9de : a9ef             [ 2] 	lda #0b11101111			; Select column 4
c9e0 : a20e             [ 2] 	ldx #SND_REG_IOA		; On AY port A
c9e2 : 206ec0           [ 6] 	jsr snd_set
                             
                             	; check shifted keys
c9e5 : a2b4             [ 2] 	ldx #4+KB_PRB			; Row 4 (left shift)
c9e7 : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c9ea : ea               [ 2] 	nop
c9eb : ea               [ 2] 	nop
c9ec : ea               [ 2] 	nop
c9ed : ea               [ 2] 	nop
                             
c9ee : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
                             
c9f1 : a2b7             [ 2] 	ldx #7+KB_PRB			; Row 7 (right shift)
c9f3 : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
c9f6 : ea               [ 2] 	nop
c9f7 : ea               [ 2] 	nop
c9f8 : ea               [ 2] 	nop
c9f9 : ea               [ 2] 	nop
                             
c9fa : 0d0003           [ 4] 	ora IO_0+PRB			; Combine Port B
c9fd : be6bca           [ 4] 	ldx kb_table_std,y		; Pre-load standard key code
ca00 : 2908             [ 2] 	and #KB_SENSE			; Bit 3 is the sense
ca02 : f003             [ 3] 	beq kb_read_noshift		; Skip over if no shift
ca04 : beabca           [ 4] 	ldx kb_table_shift,y	; Load up standard key code
ca07 :                       kb_read_noshift
ca07 : 862b             [ 3] 	stx kb_code				; Save the mapped keycode
                             	; check ctrl key
ca09 : a2b2             [ 2] 	ldx #2+KB_PRB			; Row 2 (ctrl key)
ca0b : 8e0003           [ 4] 	stx IO_0+PRB			; Select row on port B
ca0e : ea               [ 2] 	nop
ca0f : ea               [ 2] 	nop
ca10 : ea               [ 2] 	nop
ca11 : ea               [ 2] 	nop
                             
ca12 : ad0003           [ 4] 	lda IO_0+PRB			; Read Port B
ca15 : 2908             [ 2] 	and #KB_SENSE
ca17 : f00a             [ 3] 	beq kb_skip_ctrl
ca19 : a52b             [ 3] 	lda kb_code
ca1b : 291f             [ 2] 	and #0x1f				; Ctrl will result in codes 0 to 31
ca1d : 852b             [ 3] 	sta kb_code				; Override the keycode
ca1f : f02a             [ 3] 	beq kb_brk
ca21 : 1020             [ 3] 	bpl	kb_store_last		; Check repeat (bpl is always
ca23 :                       kb_skip_ctrl
ca23 : a52c             [ 3] 	lda kb_stat				; Check caps lock
ca25 : 2901             [ 2] 	and #KB_CAPSLK
ca27 : f01a             [ 3] 	beq kb_store_last
ca29 : a52b             [ 3] 	lda kb_code
ca2b : c961             [ 2] 	cmp #'a'				; If < 'a' then skip
ca2d : 9014             [ 3] 	bcc kb_store_last
ca2f : c97b             [ 2] 	cmp #'z'+1				; If > 'z' then skip
ca31 : b010             [ 3] 	bcs kb_store_last
ca33 : a52b             [ 3] 	lda kb_code				; Get the actual code
ca35 : 4920             [ 2] 	eor #0x20				; Switch off bit 0x20
ca37 : 852b             [ 3] 	sta kb_code				; Save the capitalised code
AS65 Assembler for R6502 [1.42].                                     Page   95
---------------------------------- bank0.s -----------------------------------

ca39 : d008             [ 3] 	bne kb_store_last		; always
ca3b :                       kb_do_repeat
ca3b : a62f             [ 3] 	ldx kb_rep				; Has repeat expired?
ca3d : d008             [ 3] 	bne	kb_in_repeat		; If not then still in repeat
ca3f : a630             [ 3] 	ldx kb_rep_tim			; Set repeat speed
ca41 : 862f             [ 3] 	stx kb_rep
ca43 :                       kb_store_last
ca43 : 852a             [ 3] 	sta kb_last				; Make last code same as this
ca45 : 18               [ 2] 	clc						; Code valid
ca46 : 60               [ 6] 	rts
ca47 :                       kb_in_repeat
ca47 : a900             [ 2] 	lda #0					; Don't emit a keycode
ca49 : 38               [ 2] 	sec
ca4a : 60               [ 6] 	rts
ca4b :                       kb_brk
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* kb_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code, C=1 means valid
                             ;****************************************
ca4d :                       kb_get_key
ca4d : 8a               [ 2] 	txa
ca4e : 48               [ 3] 	pha
ca4f : 98               [ 2] 	tya
ca50 : 48               [ 3] 	pha
                             
ca51 :                       kb_get_try
ca51 : 08               [ 3] 	php
ca52 : 20b5c9           [ 6] 	jsr kb_scan_key
ca55 : 900b             [ 3] 	bcc kb_scan_got_key
ca57 : 28               [ 4] 	plp						; No key, so check C
ca58 : b0f7             [ 3] 	bcs kb_get_try			; Keep looking if C
ca5a : 38               [ 2] 	sec						; Indicate key not valid
                             
ca5b : 68               [ 4] 	pla
ca5c : a8               [ 2] 	tay
ca5d : 68               [ 4] 	pla
ca5e : aa               [ 2] 	tax
ca5f : a900             [ 2] 	lda #0
                             
ca61 : 60               [ 6] 	rts
ca62 :                       kb_scan_got_key
ca62 : 28               [ 4] 	plp						; Pull stack
ca63 : 18               [ 2] 	clc						; Indicate key valid
                             
ca64 : 68               [ 4] 	pla
ca65 : a8               [ 2] 	tay
ca66 : 68               [ 4] 	pla
ca67 : aa               [ 2] 	tax
                             
ca68 : a52b             [ 3] 	lda kb_code
                             
ca6a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* kb_table_std (no shift)
                             ;* Each line is one column
                             ;****************************************
ca6b :                       kb_table_std
AS65 Assembler for R6502 [1.42].                                     Page   96
---------------------------------- bank0.s -----------------------------------

ca6b : 376a6d6b20757938      	db '7' ,'j' ,'m' ,'k' ,' ' ,'u' ,'y' ,'8'
ca73 : 6e7436392c69686c      	db 'n' ,'t' ,'6' ,'9' ,',' ,'i' ,'h' ,'l'
ca7b : 3572623b2e6f6730      	db '5' ,'r' ,'b' ,';' ,'.' ,'o' ,'g' ,'0'
ca83 : 7666342d0b70652f      	db 'v' ,'f' ,'4' ,'-' ,0x0b,'p' ,'e' ,'/'
ca8b : 0000000000000000      	db 0,0,0,0,0,0,0,0 ; Column 4 is shift and ctrl 
ca93 : 311b7a00087f610d      	db '1' ,0x1b,'z' ,0   ,0x08,0x7f,'a' ,0x0d
ca9b : 7871325c0a5d7300      	db 'x' ,'q' ,'2' ,0x5c,0x0a,']' ,'s' ,0
caa3 : 33646327095b773d      	db '3' ,'d' ,'c' ,0x27,0x09,'[' ,'w' ,'='
                             
                             ;* kb_table_shift (with shift)
caab :                       kb_table_shift
caab : 264a4d4b2055592a      	db '&' ,'J' ,'M' ,'K' ,' ' ,'U' ,'Y' ,'*'
cab3 : 4e545e283c49484c      	db 'N' ,'T' ,'^' ,'(' ,'<' ,'I' ,'H' ,'L'
cabb : 2552423a3e4f4729      	db '%' ,'R' ,'B' ,':' ,'>' ,'O' ,'G' ,')'
cac3 : 5646245f0b50453f      	db 'V' ,'F' ,'$' ,'_' ,0x0b,'P' ,'E' ,'?'
cacb : 0000000000000000      	db 0,0,0,0,0,0,0,0 ; Column 4 is shift and ctrl 
cad3 : 211b5a00087f410d      	db '!' ,0x1b,'Z' ,0   ,0x08,0x7f,'A' ,0x0d
cadb : 5851407c0a7d5300      	db 'X' ,'Q' ,'@' ,'|' ,0x0a,'}' ,'S' ,0
cae3 : 23444322097b572b      	db '#' ,'D' ,'C' ,0x22,0x09,'{' ,'W' ,'+'
                             
caeb :                       kb_col_mask
caeb : fe                    	db 0b11111110
caec : fd                    	db 0b11111101
caed : fb                    	db 0b11111011
caee : f7                    	db 0b11110111
caef : ef                    	db 0b11101111
caf0 : df                    	db 0b11011111
caf1 : bf                    	db 0b10111111
caf2 : 7f                    	db 0b01111111
                             
caf3 :                       kb_stick_mask
caf3 : df                    	db 0b11011111		; Left 	= Bit 0
caf4 : 7f                    	db 0b01111111		; Right = Bit 1
caf5 : f7                    	db 0b11110111		; Up	= Bit 2
caf6 : bf                    	db 0b10111111		; Down	= Bit 3
caf7 : fe                    	db 0b11111110		; Space	= Bit 4
                             
caf8 :                       kb_ijk_map
caf8 : 00                    	db 0b00000000		; 00000 = nothing
caf9 : 02                    	db 0b00000010		; 00001 = right
cafa : 01                    	db 0b00000001		; 00010 = left
cafb : 03                    	db 0b00000011		; 00011 = left+right
cafc : 10                    	db 0b00010000		; 00100 = fire
cafd : 12                    	db 0b00010010		; 00101 = fire+right
cafe : 11                    	db 0b00010001		; 00110 = fire+left
caff : 13                    	db 0b00010011		; 00111 = fire+left+right
cb00 : 08                    	db 0b00001000		; 01000 = down
cb01 : 0a                    	db 0b00001010		; 01001 = down+right
cb02 : 09                    	db 0b00001001		; 01010 = down+left
cb03 : 0b                    	db 0b00001011		; 01011 = down+left+right
cb04 : 18                    	db 0b00011000		; 01100 = down+fire
cb05 : 1a                    	db 0b00011010		; 01101 = down+fire+right
cb06 : 19                    	db 0b00011001		; 01110 = down+fire+left
cb07 : 1b                    	db 0b00011011		; 01111 = down+fire+left+right
cb08 : 04                    	db 0b00000100		; 10000 = up
cb09 : 06                    	db 0b00000110		; 10001 = up+right
cb0a : 05                    	db 0b00000101		; 10010 = up+left
cb0b : 07                    	db 0b00000111		; 10011 = up+left+right
cb0c : 14                    	db 0b00010100		; 10100 = up+fire
cb0d : 16                    	db 0b00010110		; 10101 = up+fire+right
cb0e : 15                    	db 0b00010101		; 10110 = up+fire+left
cb0f : 17                    	db 0b00010111		; 10111 = up+fire+left+right
AS65 Assembler for R6502 [1.42].                                     Page   97
---------------------------------- bank0.s -----------------------------------

cb10 : 0c                    	db 0b00001100		; 11000 = up+down
cb11 : 0e                    	db 0b00001110		; 11001 = up+down+right
cb12 : 0d                    	db 0b00001101		; 11010 = up+down+left
cb13 : 0f                    	db 0b00001111		; 11011 = up+down+left+right
cb14 : 1c                    	db 0b00011100		; 11100 = up+down+fire
cb15 : 1e                    	db 0b00011110		; 11101 = up+down+fire+right
cb16 : 1d                    	db 0b00011101		; 11110 = up+down+fire+left
cb17 : 1f                    	db 0b00011111		; 11111 = up+down+fire+left+right
                             	
                             	include "vdp/graph.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  GRAPH.S
                             ;*  This is the graphics module, to handle text a
                             ;*  graphics.
                             ;*  For text modes, this module keeps track of wh
                             ;*  next put a character, and also takes care of 
                             ;*  to the next line as well as scrolling the con
                             ;*  when the cursor has reached the bottom right.
                             ;*  module also enables text input which is echoe
                             ;*  screen, to allow interactive input and editin
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
cb18 :                       mod_sz_graph_s
                             
                             
                             	include "vdp/font.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  FONT.S
                             ;*  This is the font definition, used to initiali
                             ;*  character set.  This is the standard Oric-1 f
                             ;*	Still called vdp as this code was ported from 
                             ;*	machine using the TMS9918a.
                             ;*
                             ;************************************************
                             
cb18 :                       vdp_font
                             ; char 32
cb18 : 00                    	db %000000
cb19 : 00                    	db %000000
cb1a : 00                    	db %000000
cb1b : 00                    	db %000000
cb1c : 00                    	db %000000
cb1d : 00                    	db %000000
cb1e : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   98
---------------------------------- bank0.s -----------------------------------

cb1f : 00                    	db %000000
                             ; char 33
cb20 : 0c                    	db %001100
cb21 : 0c                    	db %001100
cb22 : 0c                    	db %001100
cb23 : 08                    	db %001000
cb24 : 08                    	db %001000
cb25 : 00                    	db %000000
cb26 : 08                    	db %001000
cb27 : 00                    	db %000000
                             ; char 34
cb28 : 36                    	db %110110
cb29 : 36                    	db %110110
cb2a : 12                    	db %010010
cb2b : 00                    	db %000000
cb2c : 00                    	db %000000
cb2d : 00                    	db %000000
cb2e : 00                    	db %000000
cb2f : 00                    	db %000000
                             ; char 35
cb30 : 14                    	db %010100
cb31 : 14                    	db %010100
cb32 : 3e                    	db %111110
cb33 : 14                    	db %010100
cb34 : 3e                    	db %111110
cb35 : 14                    	db %010100
cb36 : 14                    	db %010100
cb37 : 00                    	db %000000
                             ; char 36
cb38 : 08                    	db %001000
cb39 : 1e                    	db %011110
cb3a : 28                    	db %101000
cb3b : 1c                    	db %011100
cb3c : 0a                    	db %001010
cb3d : 3c                    	db %111100
cb3e : 08                    	db %001000
cb3f : 00                    	db %000000
                             ; char 37
cb40 : 30                    	db %110000
cb41 : 32                    	db %110010
cb42 : 04                    	db %000100
cb43 : 08                    	db %001000
cb44 : 10                    	db %010000
cb45 : 26                    	db %100110
cb46 : 06                    	db %000110
cb47 : 00                    	db %000000
                             ; char 38
cb48 : 10                    	db %010000
cb49 : 28                    	db %101000
cb4a : 28                    	db %101000
cb4b : 10                    	db %010000
cb4c : 2a                    	db %101010
cb4d : 24                    	db %100100
cb4e : 1a                    	db %011010
cb4f : 00                    	db %000000
                             ; char 39
cb50 : 0c                    	db %001100
cb51 : 0c                    	db %001100
cb52 : 04                    	db %000100
cb53 : 00                    	db %000000
cb54 : 00                    	db %000000
cb55 : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page   99
---------------------------------- bank0.s -----------------------------------

cb56 : 00                    	db %000000
cb57 : 00                    	db %000000
                             ; char 40
cb58 : 04                    	db %000100
cb59 : 08                    	db %001000
cb5a : 10                    	db %010000
cb5b : 10                    	db %010000
cb5c : 10                    	db %010000
cb5d : 08                    	db %001000
cb5e : 04                    	db %000100
cb5f : 00                    	db %000000
                             ; char 41
cb60 : 10                    	db %010000
cb61 : 08                    	db %001000
cb62 : 04                    	db %000100
cb63 : 04                    	db %000100
cb64 : 04                    	db %000100
cb65 : 08                    	db %001000
cb66 : 10                    	db %010000
cb67 : 00                    	db %000000
                             ; char 42
cb68 : 08                    	db %001000
cb69 : 2a                    	db %101010
cb6a : 1c                    	db %011100
cb6b : 08                    	db %001000
cb6c : 1c                    	db %011100
cb6d : 2a                    	db %101010
cb6e : 08                    	db %001000
cb6f : 00                    	db %000000
                             ; char 43
cb70 : 00                    	db %000000
cb71 : 08                    	db %001000
cb72 : 08                    	db %001000
cb73 : 3e                    	db %111110
cb74 : 08                    	db %001000
cb75 : 08                    	db %001000
cb76 : 00                    	db %000000
cb77 : 00                    	db %000000
                             ; char 44
cb78 : 00                    	db %000000
cb79 : 00                    	db %000000
cb7a : 00                    	db %000000
cb7b : 00                    	db %000000
cb7c : 00                    	db %000000
cb7d : 08                    	db %001000
cb7e : 08                    	db %001000
cb7f : 10                    	db %010000
                             ; char 45
cb80 : 00                    	db %000000
cb81 : 00                    	db %000000
cb82 : 00                    	db %000000
cb83 : 3e                    	db %111110
cb84 : 00                    	db %000000
cb85 : 00                    	db %000000
cb86 : 00                    	db %000000
cb87 : 00                    	db %000000
                             ; char 46
cb88 : 00                    	db %000000
cb89 : 00                    	db %000000
cb8a : 00                    	db %000000
cb8b : 00                    	db %000000
cb8c : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page  100
---------------------------------- bank0.s -----------------------------------

cb8d : 04                    	db %000100
cb8e : 00                    	db %000000
cb8f : 00                    	db %000000
                             ; char 47
cb90 : 00                    	db %000000
cb91 : 02                    	db %000010
cb92 : 04                    	db %000100
cb93 : 08                    	db %001000
cb94 : 10                    	db %010000
cb95 : 20                    	db %100000
cb96 : 00                    	db %000000
cb97 : 00                    	db %000000
                             ; char 48
cb98 : 1c                    	db %011100
cb99 : 22                    	db %100010
cb9a : 26                    	db %100110
cb9b : 2a                    	db %101010
cb9c : 32                    	db %110010
cb9d : 22                    	db %100010
cb9e : 1c                    	db %011100
cb9f : 00                    	db %000000
                             ; char 49
cba0 : 08                    	db %001000
cba1 : 18                    	db %011000
cba2 : 08                    	db %001000
cba3 : 08                    	db %001000
cba4 : 08                    	db %001000
cba5 : 08                    	db %001000
cba6 : 1c                    	db %011100
cba7 : 00                    	db %000000
                             ; char 50
cba8 : 1c                    	db %011100
cba9 : 22                    	db %100010
cbaa : 02                    	db %000010
cbab : 04                    	db %000100
cbac : 08                    	db %001000
cbad : 10                    	db %010000
cbae : 3e                    	db %111110
cbaf : 00                    	db %000000
                             ; char 51
cbb0 : 3e                    	db %111110
cbb1 : 02                    	db %000010
cbb2 : 04                    	db %000100
cbb3 : 0c                    	db %001100
cbb4 : 02                    	db %000010
cbb5 : 22                    	db %100010
cbb6 : 1c                    	db %011100
cbb7 : 00                    	db %000000
                             ; char 52
cbb8 : 04                    	db %000100
cbb9 : 0c                    	db %001100
cbba : 14                    	db %010100
cbbb : 24                    	db %100100
cbbc : 3e                    	db %111110
cbbd : 04                    	db %000100
cbbe : 04                    	db %000100
cbbf : 00                    	db %000000
                             ; char 53
cbc0 : 3e                    	db %111110
cbc1 : 20                    	db %100000
cbc2 : 3c                    	db %111100
cbc3 : 02                    	db %000010
AS65 Assembler for R6502 [1.42].                                     Page  101
---------------------------------- bank0.s -----------------------------------

cbc4 : 02                    	db %000010
cbc5 : 22                    	db %100010
cbc6 : 1c                    	db %011100
cbc7 : 00                    	db %000000
                             ; char 54
cbc8 : 0c                    	db %001100
cbc9 : 10                    	db %010000
cbca : 20                    	db %100000
cbcb : 3c                    	db %111100
cbcc : 22                    	db %100010
cbcd : 22                    	db %100010
cbce : 1c                    	db %011100
cbcf : 00                    	db %000000
                             ; char 55
cbd0 : 3e                    	db %111110
cbd1 : 02                    	db %000010
cbd2 : 04                    	db %000100
cbd3 : 08                    	db %001000
cbd4 : 10                    	db %010000
cbd5 : 10                    	db %010000
cbd6 : 10                    	db %010000
cbd7 : 00                    	db %000000
                             ; char 56
cbd8 : 1c                    	db %011100
cbd9 : 22                    	db %100010
cbda : 22                    	db %100010
cbdb : 1c                    	db %011100
cbdc : 22                    	db %100010
cbdd : 22                    	db %100010
cbde : 1c                    	db %011100
cbdf : 00                    	db %000000
                             ; char 57
cbe0 : 1c                    	db %011100
cbe1 : 22                    	db %100010
cbe2 : 22                    	db %100010
cbe3 : 1e                    	db %011110
cbe4 : 02                    	db %000010
cbe5 : 04                    	db %000100
cbe6 : 18                    	db %011000
cbe7 : 00                    	db %000000
                             ; char 58
cbe8 : 00                    	db %000000
cbe9 : 00                    	db %000000
cbea : 08                    	db %001000
cbeb : 00                    	db %000000
cbec : 00                    	db %000000
cbed : 08                    	db %001000
cbee : 00                    	db %000000
cbef : 00                    	db %000000
                             ; char 59
cbf0 : 00                    	db %000000
cbf1 : 00                    	db %000000
cbf2 : 08                    	db %001000
cbf3 : 00                    	db %000000
cbf4 : 00                    	db %000000
cbf5 : 08                    	db %001000
cbf6 : 08                    	db %001000
cbf7 : 10                    	db %010000
                             ; char 60
cbf8 : 04                    	db %000100
cbf9 : 08                    	db %001000
cbfa : 10                    	db %010000
AS65 Assembler for R6502 [1.42].                                     Page  102
---------------------------------- bank0.s -----------------------------------

cbfb : 20                    	db %100000
cbfc : 10                    	db %010000
cbfd : 08                    	db %001000
cbfe : 04                    	db %000100
cbff : 00                    	db %000000
                             ; char 61
cc00 : 00                    	db %000000
cc01 : 00                    	db %000000
cc02 : 3e                    	db %111110
cc03 : 00                    	db %000000
cc04 : 3e                    	db %111110
cc05 : 00                    	db %000000
cc06 : 00                    	db %000000
cc07 : 00                    	db %000000
                             ; char 62
cc08 : 10                    	db %010000
cc09 : 08                    	db %001000
cc0a : 04                    	db %000100
cc0b : 02                    	db %000010
cc0c : 04                    	db %000100
cc0d : 08                    	db %001000
cc0e : 10                    	db %010000
cc0f : 00                    	db %000000
                             ; char 63
cc10 : 1c                    	db %011100
cc11 : 22                    	db %100010
cc12 : 04                    	db %000100
cc13 : 08                    	db %001000
cc14 : 08                    	db %001000
cc15 : 00                    	db %000000
cc16 : 08                    	db %001000
cc17 : 00                    	db %000000
                             ; char 64
cc18 : 1c                    	db %011100
cc19 : 22                    	db %100010
cc1a : 2a                    	db %101010
cc1b : 2e                    	db %101110
cc1c : 2c                    	db %101100
cc1d : 20                    	db %100000
cc1e : 1e                    	db %011110
cc1f : 00                    	db %000000
cc20 :                       vdp_font_a
                             ; char 65
cc20 : 1c                    	db %011100
cc21 : 22                    	db %100010
cc22 : 22                    	db %100010
cc23 : 3e                    	db %111110
cc24 : 22                    	db %100010
cc25 : 22                    	db %100010
cc26 : 22                    	db %100010
cc27 : 00                    	db %000000
                             ; char 66
cc28 : 3c                    	db %111100
cc29 : 22                    	db %100010
cc2a : 22                    	db %100010
cc2b : 3c                    	db %111100
cc2c : 22                    	db %100010
cc2d : 22                    	db %100010
cc2e : 3c                    	db %111100
cc2f : 00                    	db %000000
                             ; char 67
cc30 : 1c                    	db %011100
AS65 Assembler for R6502 [1.42].                                     Page  103
---------------------------------- bank0.s -----------------------------------

cc31 : 22                    	db %100010
cc32 : 20                    	db %100000
cc33 : 20                    	db %100000
cc34 : 20                    	db %100000
cc35 : 22                    	db %100010
cc36 : 1c                    	db %011100
cc37 : 00                    	db %000000
                             ; char 68
cc38 : 3c                    	db %111100
cc39 : 22                    	db %100010
cc3a : 22                    	db %100010
cc3b : 22                    	db %100010
cc3c : 22                    	db %100010
cc3d : 22                    	db %100010
cc3e : 3c                    	db %111100
cc3f : 00                    	db %000000
                             ; char 69
cc40 : 3e                    	db %111110
cc41 : 20                    	db %100000
cc42 : 20                    	db %100000
cc43 : 3c                    	db %111100
cc44 : 20                    	db %100000
cc45 : 20                    	db %100000
cc46 : 3e                    	db %111110
cc47 : 00                    	db %000000
                             ; char 70
cc48 : 3e                    	db %111110
cc49 : 20                    	db %100000
cc4a : 20                    	db %100000
cc4b : 3c                    	db %111100
cc4c : 20                    	db %100000
cc4d : 20                    	db %100000
cc4e : 20                    	db %100000
cc4f : 00                    	db %000000
                             ; char 71
cc50 : 1e                    	db %011110
cc51 : 20                    	db %100000
cc52 : 20                    	db %100000
cc53 : 20                    	db %100000
cc54 : 26                    	db %100110
cc55 : 22                    	db %100010
cc56 : 1e                    	db %011110
cc57 : 00                    	db %000000
                             ; char 72
cc58 : 22                    	db %100010
cc59 : 22                    	db %100010
cc5a : 22                    	db %100010
cc5b : 3e                    	db %111110
cc5c : 22                    	db %100010
cc5d : 22                    	db %100010
cc5e : 22                    	db %100010
cc5f : 00                    	db %000000
                             ; char 73
cc60 : 1c                    	db %011100
cc61 : 08                    	db %001000
cc62 : 08                    	db %001000
cc63 : 08                    	db %001000
cc64 : 08                    	db %001000
cc65 : 08                    	db %001000
cc66 : 1c                    	db %011100
cc67 : 00                    	db %000000
                             ; char 74
AS65 Assembler for R6502 [1.42].                                     Page  104
---------------------------------- bank0.s -----------------------------------

cc68 : 02                    	db %000010
cc69 : 02                    	db %000010
cc6a : 02                    	db %000010
cc6b : 02                    	db %000010
cc6c : 02                    	db %000010
cc6d : 22                    	db %100010
cc6e : 1c                    	db %011100
cc6f : 00                    	db %000000
                             ; char 75
cc70 : 22                    	db %100010
cc71 : 24                    	db %100100
cc72 : 28                    	db %101000
cc73 : 30                    	db %110000
cc74 : 28                    	db %101000
cc75 : 24                    	db %100100
cc76 : 22                    	db %100010
cc77 : 00                    	db %000000
                             ; char 76
cc78 : 20                    	db %100000
cc79 : 20                    	db %100000
cc7a : 20                    	db %100000
cc7b : 20                    	db %100000
cc7c : 20                    	db %100000
cc7d : 20                    	db %100000
cc7e : 3e                    	db %111110
cc7f : 00                    	db %000000
                             ; char 77
cc80 : 22                    	db %100010
cc81 : 36                    	db %110110
cc82 : 2a                    	db %101010
cc83 : 2a                    	db %101010
cc84 : 22                    	db %100010
cc85 : 22                    	db %100010
cc86 : 22                    	db %100010
cc87 : 00                    	db %000000
                             ; char 78
cc88 : 22                    	db %100010
cc89 : 22                    	db %100010
cc8a : 32                    	db %110010
cc8b : 2a                    	db %101010
cc8c : 26                    	db %100110
cc8d : 22                    	db %100010
cc8e : 22                    	db %100010
cc8f : 00                    	db %000000
                             ; char 79
cc90 : 1c                    	db %011100
cc91 : 22                    	db %100010
cc92 : 22                    	db %100010
cc93 : 22                    	db %100010
cc94 : 22                    	db %100010
cc95 : 22                    	db %100010
cc96 : 1c                    	db %011100
cc97 : 00                    	db %000000
                             ; char 80
cc98 : 3c                    	db %111100
cc99 : 22                    	db %100010
cc9a : 22                    	db %100010
cc9b : 3c                    	db %111100
cc9c : 20                    	db %100000
cc9d : 20                    	db %100000
cc9e : 20                    	db %100000
cc9f : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page  105
---------------------------------- bank0.s -----------------------------------

                             ; char 81
cca0 : 1c                    	db %011100
cca1 : 22                    	db %100010
cca2 : 22                    	db %100010
cca3 : 22                    	db %100010
cca4 : 2a                    	db %101010
cca5 : 24                    	db %100100
cca6 : 1a                    	db %011010
cca7 : 00                    	db %000000
                             ; char 82
cca8 : 3c                    	db %111100
cca9 : 22                    	db %100010
ccaa : 22                    	db %100010
ccab : 3c                    	db %111100
ccac : 28                    	db %101000
ccad : 24                    	db %100100
ccae : 22                    	db %100010
ccaf : 00                    	db %000000
                             ; char 83
ccb0 : 1c                    	db %011100
ccb1 : 22                    	db %100010
ccb2 : 20                    	db %100000
ccb3 : 1c                    	db %011100
ccb4 : 02                    	db %000010
ccb5 : 22                    	db %100010
ccb6 : 1c                    	db %011100
ccb7 : 00                    	db %000000
                             ; char 84
ccb8 : 3e                    	db %111110
ccb9 : 08                    	db %001000
ccba : 08                    	db %001000
ccbb : 08                    	db %001000
ccbc : 08                    	db %001000
ccbd : 08                    	db %001000
ccbe : 08                    	db %001000
ccbf : 00                    	db %000000
                             ; char 85
ccc0 : 22                    	db %100010
ccc1 : 22                    	db %100010
ccc2 : 22                    	db %100010
ccc3 : 22                    	db %100010
ccc4 : 22                    	db %100010
ccc5 : 22                    	db %100010
ccc6 : 1c                    	db %011100
ccc7 : 00                    	db %000000
                             ; char 86
ccc8 : 22                    	db %100010
ccc9 : 22                    	db %100010
ccca : 22                    	db %100010
cccb : 22                    	db %100010
cccc : 22                    	db %100010
cccd : 14                    	db %010100
ccce : 08                    	db %001000
cccf : 00                    	db %000000
                             ; char 87
ccd0 : 22                    	db %100010
ccd1 : 22                    	db %100010
ccd2 : 22                    	db %100010
ccd3 : 2a                    	db %101010
ccd4 : 2a                    	db %101010
ccd5 : 36                    	db %110110
ccd6 : 22                    	db %100010
AS65 Assembler for R6502 [1.42].                                     Page  106
---------------------------------- bank0.s -----------------------------------

ccd7 : 00                    	db %000000
                             ; char 88
ccd8 : 22                    	db %100010
ccd9 : 22                    	db %100010
ccda : 14                    	db %010100
ccdb : 08                    	db %001000
ccdc : 14                    	db %010100
ccdd : 22                    	db %100010
ccde : 22                    	db %100010
ccdf : 00                    	db %000000
                             ; char 89
cce0 : 22                    	db %100010
cce1 : 22                    	db %100010
cce2 : 14                    	db %010100
cce3 : 08                    	db %001000
cce4 : 08                    	db %001000
cce5 : 08                    	db %001000
cce6 : 08                    	db %001000
cce7 : 00                    	db %000000
                             ; char 90
cce8 : 3e                    	db %111110
cce9 : 02                    	db %000010
ccea : 04                    	db %000100
cceb : 08                    	db %001000
ccec : 10                    	db %010000
cced : 20                    	db %100000
ccee : 3e                    	db %111110
ccef : 00                    	db %000000
                             ; char 91
ccf0 : 1c                    	db %011100
ccf1 : 10                    	db %010000
ccf2 : 10                    	db %010000
ccf3 : 10                    	db %010000
ccf4 : 10                    	db %010000
ccf5 : 10                    	db %010000
ccf6 : 1c                    	db %011100
ccf7 : 00                    	db %000000
                             ; char 92
ccf8 : 00                    	db %000000
ccf9 : 20                    	db %100000
ccfa : 10                    	db %010000
ccfb : 08                    	db %001000
ccfc : 04                    	db %000100
ccfd : 02                    	db %000010
ccfe : 00                    	db %000000
ccff : 00                    	db %000000
                             ; char 93
cd00 : 1c                    	db %011100
cd01 : 04                    	db %000100
cd02 : 04                    	db %000100
cd03 : 04                    	db %000100
cd04 : 04                    	db %000100
cd05 : 04                    	db %000100
cd06 : 1c                    	db %011100
cd07 : 00                    	db %000000
                             ; char 94
cd08 : 08                    	db %001000
cd09 : 1c                    	db %011100
cd0a : 3e                    	db %111110
cd0b : 08                    	db %001000
cd0c : 08                    	db %001000
cd0d : 08                    	db %001000
AS65 Assembler for R6502 [1.42].                                     Page  107
---------------------------------- bank0.s -----------------------------------

cd0e : 08                    	db %001000
cd0f : 00                    	db %000000
                             ; char 95
cd10 : 00                    	db %000000
cd11 : 00                    	db %000000
cd12 : 00                    	db %000000
cd13 : 00                    	db %000000
cd14 : 00                    	db %000000
cd15 : 00                    	db %000000
cd16 : 3e                    	db %111110
cd17 : 00                    	db %000000
                             ; char 96
cd18 : 0e                    	db %001110
cd19 : 10                    	db %010000
cd1a : 10                    	db %010000
cd1b : 3c                    	db %111100
cd1c : 10                    	db %010000
cd1d : 10                    	db %010000
cd1e : 3e                    	db %111110
cd1f : 00                    	db %000000
                             ; char 97
cd20 : 00                    	db %000000
cd21 : 00                    	db %000000
cd22 : 1c                    	db %011100
cd23 : 02                    	db %000010
cd24 : 1e                    	db %011110
cd25 : 22                    	db %100010
cd26 : 1e                    	db %011110
cd27 : 00                    	db %000000
                             ; char 98
cd28 : 20                    	db %100000
cd29 : 20                    	db %100000
cd2a : 3c                    	db %111100
cd2b : 22                    	db %100010
cd2c : 22                    	db %100010
cd2d : 22                    	db %100010
cd2e : 3c                    	db %111100
cd2f : 00                    	db %000000
                             ; char 99
cd30 : 00                    	db %000000
cd31 : 00                    	db %000000
cd32 : 1e                    	db %011110
cd33 : 20                    	db %100000
cd34 : 20                    	db %100000
cd35 : 20                    	db %100000
cd36 : 1e                    	db %011110
cd37 : 00                    	db %000000
                             ; char 100
cd38 : 02                    	db %000010
cd39 : 02                    	db %000010
cd3a : 1e                    	db %011110
cd3b : 22                    	db %100010
cd3c : 22                    	db %100010
cd3d : 22                    	db %100010
cd3e : 1e                    	db %011110
cd3f : 00                    	db %000000
                             ; char 101
cd40 : 00                    	db %000000
cd41 : 00                    	db %000000
cd42 : 1c                    	db %011100
cd43 : 22                    	db %100010
cd44 : 3e                    	db %111110
AS65 Assembler for R6502 [1.42].                                     Page  108
---------------------------------- bank0.s -----------------------------------

cd45 : 20                    	db %100000
cd46 : 1e                    	db %011110
cd47 : 00                    	db %000000
                             ; char 102
cd48 : 0c                    	db %001100
cd49 : 12                    	db %010010
cd4a : 10                    	db %010000
cd4b : 3c                    	db %111100
cd4c : 10                    	db %010000
cd4d : 10                    	db %010000
cd4e : 10                    	db %010000
cd4f : 00                    	db %000000
                             ; char 103
cd50 : 00                    	db %000000
cd51 : 00                    	db %000000
cd52 : 1c                    	db %011100
cd53 : 22                    	db %100010
cd54 : 22                    	db %100010
cd55 : 1e                    	db %011110
cd56 : 02                    	db %000010
cd57 : 1c                    	db %011100
                             ; char 104
cd58 : 20                    	db %100000
cd59 : 20                    	db %100000
cd5a : 3c                    	db %111100
cd5b : 22                    	db %100010
cd5c : 22                    	db %100010
cd5d : 22                    	db %100010
cd5e : 22                    	db %100010
cd5f : 00                    	db %000000
                             ; char 105
cd60 : 08                    	db %001000
cd61 : 00                    	db %000000
cd62 : 18                    	db %011000
cd63 : 08                    	db %001000
cd64 : 08                    	db %001000
cd65 : 08                    	db %001000
cd66 : 1c                    	db %011100
cd67 : 00                    	db %000000
                             ; char 106
cd68 : 04                    	db %000100
cd69 : 00                    	db %000000
cd6a : 0c                    	db %001100
cd6b : 04                    	db %000100
cd6c : 04                    	db %000100
cd6d : 04                    	db %000100
cd6e : 24                    	db %100100
cd6f : 18                    	db %011000
                             ; char 107
cd70 : 20                    	db %100000
cd71 : 20                    	db %100000
cd72 : 22                    	db %100010
cd73 : 24                    	db %100100
cd74 : 38                    	db %111000
cd75 : 24                    	db %100100
cd76 : 22                    	db %100010
cd77 : 00                    	db %000000
                             ; char 108
cd78 : 18                    	db %011000
cd79 : 08                    	db %001000
cd7a : 08                    	db %001000
cd7b : 08                    	db %001000
AS65 Assembler for R6502 [1.42].                                     Page  109
---------------------------------- bank0.s -----------------------------------

cd7c : 08                    	db %001000
cd7d : 08                    	db %001000
cd7e : 1c                    	db %011100
cd7f : 00                    	db %000000
                             ; char 109
cd80 : 00                    	db %000000
cd81 : 00                    	db %000000
cd82 : 36                    	db %110110
cd83 : 2a                    	db %101010
cd84 : 2a                    	db %101010
cd85 : 2a                    	db %101010
cd86 : 22                    	db %100010
cd87 : 00                    	db %000000
                             ; char 110
cd88 : 00                    	db %000000
cd89 : 00                    	db %000000
cd8a : 3c                    	db %111100
cd8b : 22                    	db %100010
cd8c : 22                    	db %100010
cd8d : 22                    	db %100010
cd8e : 22                    	db %100010
cd8f : 00                    	db %000000
                             ; char 111
cd90 : 00                    	db %000000
cd91 : 00                    	db %000000
cd92 : 1c                    	db %011100
cd93 : 22                    	db %100010
cd94 : 22                    	db %100010
cd95 : 22                    	db %100010
cd96 : 1c                    	db %011100
cd97 : 00                    	db %000000
                             ; char 112
cd98 : 00                    	db %000000
cd99 : 00                    	db %000000
cd9a : 3c                    	db %111100
cd9b : 22                    	db %100010
cd9c : 22                    	db %100010
cd9d : 3c                    	db %111100
cd9e : 20                    	db %100000
cd9f : 20                    	db %100000
                             ; char 113
cda0 : 00                    	db %000000
cda1 : 00                    	db %000000
cda2 : 1e                    	db %011110
cda3 : 22                    	db %100010
cda4 : 22                    	db %100010
cda5 : 1e                    	db %011110
cda6 : 02                    	db %000010
cda7 : 02                    	db %000010
                             ; char 114
cda8 : 00                    	db %000000
cda9 : 00                    	db %000000
cdaa : 2e                    	db %101110
cdab : 30                    	db %110000
cdac : 20                    	db %100000
cdad : 20                    	db %100000
cdae : 20                    	db %100000
cdaf : 00                    	db %000000
                             ; char 115
cdb0 : 00                    	db %000000
cdb1 : 00                    	db %000000
cdb2 : 1e                    	db %011110
AS65 Assembler for R6502 [1.42].                                     Page  110
---------------------------------- bank0.s -----------------------------------

cdb3 : 20                    	db %100000
cdb4 : 1c                    	db %011100
cdb5 : 02                    	db %000010
cdb6 : 3c                    	db %111100
cdb7 : 00                    	db %000000
                             ; char 116
cdb8 : 10                    	db %010000
cdb9 : 10                    	db %010000
cdba : 3c                    	db %111100
cdbb : 10                    	db %010000
cdbc : 10                    	db %010000
cdbd : 12                    	db %010010
cdbe : 0c                    	db %001100
cdbf : 00                    	db %000000
                             ; char 117
cdc0 : 00                    	db %000000
cdc1 : 00                    	db %000000
cdc2 : 22                    	db %100010
cdc3 : 22                    	db %100010
cdc4 : 22                    	db %100010
cdc5 : 26                    	db %100110
cdc6 : 1a                    	db %011010
cdc7 : 00                    	db %000000
                             ; char 118
cdc8 : 00                    	db %000000
cdc9 : 00                    	db %000000
cdca : 22                    	db %100010
cdcb : 22                    	db %100010
cdcc : 22                    	db %100010
cdcd : 14                    	db %010100
cdce : 08                    	db %001000
cdcf : 00                    	db %000000
                             ; char 119
cdd0 : 00                    	db %000000
cdd1 : 00                    	db %000000
cdd2 : 22                    	db %100010
cdd3 : 22                    	db %100010
cdd4 : 2a                    	db %101010
cdd5 : 2a                    	db %101010
cdd6 : 36                    	db %110110
cdd7 : 00                    	db %000000
                             ; char 120
cdd8 : 00                    	db %000000
cdd9 : 00                    	db %000000
cdda : 22                    	db %100010
cddb : 14                    	db %010100
cddc : 08                    	db %001000
cddd : 14                    	db %010100
cdde : 22                    	db %100010
cddf : 00                    	db %000000
                             ; char 121
cde0 : 00                    	db %000000
cde1 : 00                    	db %000000
cde2 : 22                    	db %100010
cde3 : 22                    	db %100010
cde4 : 22                    	db %100010
cde5 : 1e                    	db %011110
cde6 : 02                    	db %000010
cde7 : 1c                    	db %011100
                             ; char 122
cde8 : 00                    	db %000000
cde9 : 00                    	db %000000
AS65 Assembler for R6502 [1.42].                                     Page  111
---------------------------------- bank0.s -----------------------------------

cdea : 3e                    	db %111110
cdeb : 04                    	db %000100
cdec : 08                    	db %001000
cded : 10                    	db %010000
cdee : 3e                    	db %111110
cdef : 00                    	db %000000
                             ; char 123
cdf0 : 0e                    	db %001110
cdf1 : 18                    	db %011000
cdf2 : 18                    	db %011000
cdf3 : 30                    	db %110000
cdf4 : 18                    	db %011000
cdf5 : 18                    	db %011000
cdf6 : 0e                    	db %001110
cdf7 : 00                    	db %000000
                             ; char 124
cdf8 : 08                    	db %001000
cdf9 : 08                    	db %001000
cdfa : 08                    	db %001000
cdfb : 08                    	db %001000
cdfc : 08                    	db %001000
cdfd : 08                    	db %001000
cdfe : 08                    	db %001000
cdff : 00                    	db %000000
                             ; char 125
ce00 : 38                    	db %111000
ce01 : 0c                    	db %001100
ce02 : 0c                    	db %001100
ce03 : 06                    	db %000110
ce04 : 0c                    	db %001100
ce05 : 0c                    	db %001100
ce06 : 38                    	db %111000
ce07 : 00                    	db %000000
                             ; char 126
ce08 : 00                    	db %000000
ce09 : 00                    	db %000000
ce0a : 10                    	db %010000
ce0b : 2a                    	db %101010
ce0c : 04                    	db %000100
ce0d : 00                    	db %000000
ce0e : 00                    	db %000000
ce0f : 00                    	db %000000
                             ; char 127
ce10 : 2a                    	db %101010
ce11 : 15                    	db %010101
ce12 : 2a                    	db %101010
ce13 : 15                    	db %010101
ce14 : 2a                    	db %101010
ce15 : 15                    	db %010101
ce16 : 2a                    	db %101010
ce17 : 15                    	db %010101
                             	
                             	
                             
                             ;****************************************
                             ;* vdp_init_font
                             ;* Initialise fonts from ROM
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
ce18 :                       gr_init_font
AS65 Assembler for R6502 [1.42].                                     Page  112
---------------------------------- bank0.s -----------------------------------

                             	; Get char base from vdp structure
ce18 : a614             [ 3] 	ldx gr_scrngeom+gr_char
ce1a : 8634             [ 3] 	stx tmp_blo
ce1c : a615             [ 3] 	ldx gr_scrngeom+gr_char+1
ce1e : e8               [ 2] 	inx						; ASCII patterns start 1 page later
ce1f : 8635             [ 3] 	stx tmp_bhi
                             
ce21 : a918             [ 2] 	lda #lo(vdp_font)		; Low byte of fonts source
ce23 : 8536             [ 3] 	sta tmp_clo
ce25 : a9cb             [ 2] 	lda #hi(vdp_font)		; High byte of fonts source
ce27 : 8537             [ 3] 	sta tmp_chi
ce29 : a203             [ 2] 	ldx #3					; Copy 3 pages
ce2b : 4c2ece           [ 3] 	jmp gr_copy_mem
                             
                             
                             ;****************************************
                             ;* vdp_copy_mem
                             ;* Copy memory pages at a time
                             ;* Input :	clo/hi	=	source
                             ;*			blo/hi	=	dest
                             ;*			X		=	pages to copy
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
ce2e :                       gr_copy_mem
ce2e : a000             [ 2] 	ldy #0					; byte within page
ce30 : a536             [ 3] 	lda tmp_clo				; Low byte of source
ce32 : 8532             [ 3] 	sta tmp_alo
ce34 : a537             [ 3] 	lda tmp_chi				; High byte of source
ce36 : 8533             [ 3] 	sta tmp_ahi
ce38 :                       gr_copy_byte
ce38 : 98               [ 2] 	tya
ce39 : b132             [ 5] 	lda (tmp_alo),y			; Get byte from font table
ce3b : 9134             [ 5] 	sta (tmp_blo),y			; Put it to the memory
ce3d : c8               [ 2] 	iny
ce3e : d0f8             [ 3] 	bne gr_copy_byte		; keep going for 1 page
ce40 : e633             [ 5] 	inc tmp_ahi				; only need to increment high byt
ce42 : e635             [ 5] 	inc tmp_bhi				; source and destination ptr
ce44 : ca               [ 2] 	dex						; page counter
ce45 : d0f1             [ 3] 	bne gr_copy_byte		; keep going for X pages
ce47 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_init
                             ;* First initialisation of screen
                             ;****************************************
ce48 :                       gr_init
ce48 : a210             [ 2] 	ldx #VDP_FLASH			; Default cursor flash rate
ce4a : 860b             [ 3] 	stx vdp_curtim
ce4c : 860c             [ 3] 	stx vdp_curcnt
ce4e : a200             [ 2] 	ldx #0
ce50 : 860e             [ 3] 	stx vdp_curstat
                             
                             	; Hard reset initial geom values (X=0)
ce52 : 2079ce           [ 6] 	jsr gr_init_geom
                             
                             	; Copy font from ROM to char base
ce55 : 2018ce           [ 6] 	jsr gr_init_font
                             
                             	; Go in to hires mode to generate tables
ce58 : 20cfce           [ 6] 	jsr gr_init_hires
AS65 Assembler for R6502 [1.42].                                     Page  113
---------------------------------- bank0.s -----------------------------------

ce5b : 2008cf           [ 6] 	jsr gr_init_hires_tables
                             
                             	; But start in text mode
ce5e : 4cb6ce           [ 3] 	jmp gr_init_screen_txt
                             
                             
                             ;****************************************
                             ;* gr_check_font_copy
                             ;* check font needs to be copied from
                             ;* current location to another
                             ;* A=high byte of page aligned font addr
                             ;* that the font needs to be at
                             ;****************************************
ce61 :                       gr_check_font_copy
                             	; Compare with current high byte
ce61 : c515             [ 3] 	cmp gr_scrngeom+gr_char+1
ce63 : f013             [ 3] 	beq gr_check_font_copy_done
                             	; save A as high byte of destination
ce65 : 8535             [ 3] 	sta tmp_blo+1
                             	; destination low is 0
ce67 : a900             [ 2] 	lda #0
ce69 : 8534             [ 3] 	sta tmp_blo
                             
                             	; Get source from current vdp structure
ce6b : a515             [ 3] 	lda gr_scrngeom+gr_char+1
ce6d : 8537             [ 3] 	sta tmp_clo+1
ce6f : a514             [ 3] 	lda gr_scrngeom+gr_char
ce71 : 8536             [ 3] 	sta tmp_clo
                             
                             	; Copy all 8 pages of font (std + alt) data
ce73 : a208             [ 2] 	ldx #8
ce75 : 202ece           [ 6] 	jsr gr_copy_mem
ce78 :                       gr_check_font_copy_done
ce78 :                       gr_init_geom_done
ce78 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_init_geom
                             ;* initialise geometry entries from X
                             ;* position from base until -1
                             ;****************************************
ce79 :                       gr_init_geom
                             	; Which geom entry to init = Y
ce79 : bc88ce           [ 4] 	ldy gr_scrngeom_base,x
ce7c : 30fa             [ 3] 	bmi gr_init_geom_done		; Just somewhere with an 
                             	; skip to data and put in A
ce7e : e8               [ 2] 	inx
ce7f : bd88ce           [ 4] 	lda gr_scrngeom_base,x
                             	; save it in Y
ce82 : 991100           [ 5] 	sta gr_scrngeom,y
                             	; next entry
ce85 : e8               [ 2] 	inx
ce86 : d0f1             [ 3] 	bne gr_init_geom	; Always
                             	; Hope we don't get here - will crash!
                             
                             ; Geometry initialisation tables
ce88 :                       gr_scrngeom_base
ce88 : 1204                  	db gr_ink, 4				; Blue ink
ce8a : 1313                  	db gr_paper, 16+3			; Yellow paper
ce8c : 1402                  	db gr_margin, 2
                             	; Not terminated by -1 : continues in to _txt va
AS65 Assembler for R6502 [1.42].                                     Page  114
---------------------------------- bank0.s -----------------------------------

                             ;* Geometry for text/lores
ce8e :                       gr_scrngeom_text
ce8e : 0000                  	db gr_mode, 0
                             
ce90 : 0300                  	db gr_char,   lo(TEXTCHAR)
ce92 : 04b4                  	db gr_char+1, hi(TEXTCHAR)
                             
ce94 : 0580                  	db gr_text_start,   lo(TEXTSCRN)
ce96 : 06bb                  	db gr_text_start+1, hi(TEXTSCRN)
                             
ce98 : 0828                  	db gr_text_w, 40
ce9a : 091c                  	db gr_text_h, 28
ce9c : ff                    	db -1
                             ;* Geometry for hires
ce9d :                       gr_scrngeom_hires
ce9d : 0001                  	db gr_mode, 1
                             
ce9f : 0100                  	db gr_hi_start,   lo(HISCRN)
cea1 : 02a0                  	db gr_hi_start+1, hi(HISCRN)
cea3 : 0300                  	db gr_char,   lo(HICHAR)
cea5 : 0498                  	db gr_char+1, hi(HICHAR)
                             
cea7 : 0568                  	db gr_text_start,   lo(HITEXT)
cea9 : 06bf                  	db gr_text_start+1, hi(HITEXT)
                             
ceab : 1000                  	db gr_hires_x, 0
cead : 1100                  	db gr_hires_y, 0
                             
                             	; Only need to initialise text height, width is 
ceaf : 0903                  	db gr_text_h, 3
                             
ceb1 : 0e01                  	db gr_pixmode, 1
ceb3 : 0f06                  	db gr_pitch, 6
ceb5 : ff                    	db -1
                             
                             
                             
                             ;****************************************
                             ;* gr_init_screen_txt
                             ;* initialise the screen in text mode
                             ;****************************************
ceb6 :                       gr_init_screen_txt
ceb6 : e60d             [ 5] 	inc vdp_curoff
                             
                             	; Check if font copy needed to 0xb400
ceb8 : a9b4             [ 2] 	lda #hi(TEXTCHAR)
ceba : 2061ce           [ 6] 	jsr gr_check_font_copy
                             
                             	; Initialise geom for text
cebd : a206             [ 2] 	ldx #gr_scrngeom_text-gr_scrngeom_base
cebf : 2079ce           [ 6] 	jsr gr_init_geom
                             
cec2 : 201bd4           [ 6] 	jsr gr_spr_init					; SW Sprites are reset
                             
cec5 : a920             [ 2] 	lda #' '						; Blank is SPACE
cec7 : 8510             [ 3] 	sta vdp_blank
cec9 : 204ccf           [ 6] 	jsr gr_cls
                             
cecc : c60d             [ 5] 	dec vdp_curoff
                             
cece : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  115
---------------------------------- bank0.s -----------------------------------

                             ;****************************************
                             ;* gr_init_hires
                             ;* Input : X = Colour table fill value
                             ;* initialise the screen in hires mode
                             ;****************************************
cecf :                       gr_init_hires
cecf : e60d             [ 5] 	inc vdp_curoff
                             	; Check if font copy needed to 0x9800
ced1 : a998             [ 2] 	lda #hi(HICHAR)
ced3 : 2061ce           [ 6] 	jsr gr_check_font_copy
                             
                             	; Initialise geom for hires
ced6 : a215             [ 2] 	ldx #gr_scrngeom_hires-gr_scrngeom_base
ced8 : 2079ce           [ 6] 	jsr gr_init_geom
                             
cedb : a920             [ 2] 	lda #' '						; Blank is SPACE
cedd : 8510             [ 3] 	sta vdp_blank
cedf : 204ccf           [ 6] 	jsr gr_cls
                             
                             	; Zero out hires area 0xa000 for 8000 (0x1f40) b
cee2 : a900             [ 2] 	lda #lo(HISCRN)
cee4 : 8532             [ 3] 	sta tmp_alo
cee6 : a9a0             [ 2] 	lda #hi(HISCRN)
cee8 : 8533             [ 3] 	sta tmp_ahi
ceea : a940             [ 2] 	lda #0x40						; Set bit 6
ceec : a000             [ 2] 	ldy #0
ceee : a200             [ 2] 	ldx #0
cef0 :                       vdp_fill_vram_loop
cef0 : 9132             [ 5] 	sta (tmp_alo),y
cef2 : c8               [ 2] 	iny
cef3 : d003             [ 3] 	bne vdp_fill_vram_noinc
cef5 : e633             [ 5] 	inc tmp_ahi
cef7 : e8               [ 2] 	inx
cef8 :                       vdp_fill_vram_noinc
cef8 : e01f             [ 2] 	cpx #hi(0x1f40)			; Reached page count?
cefa : d0f4             [ 3] 	bne vdp_fill_vram_loop
cefc : c040             [ 2] 	cpy #lo(0x1f40)			; Reached byte in page?
cefe : d0f0             [ 3] 	bne vdp_fill_vram_loop
                             
                             	; Set hires attribute in the magic location
cf00 : a91e             [ 2] 	lda #30			; Hires attribute
cf02 : 8ddfbf           [ 4] 	sta 0xbfdf		; Last pos of screen memory
                             
cf05 : c60d             [ 5] 	dec vdp_curoff
cf07 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_hires_tables
                             ;* Generate the hires tables
                             ;* Do this whilst in hires mode
                             ;****************************************
cf08 :                       gr_init_hires_tables
                             	; Initialise address pointer to start of high re
cf08 : a900             [ 2] 	lda #lo(HISCRN)
cf0a : 8532             [ 3] 	sta tmp_alo
cf0c : a9a0             [ 2] 	lda #hi(HISCRN)
cf0e : 8533             [ 3] 	sta tmp_ahi
                             	; Starting from row zero, do 200 rows
cf10 : a000             [ 2] 	ldy #0
cf12 :                       gr_init_tab_row
                             	; Save low and high bytes of screen address in t
cf12 : a532             [ 3] 	lda tmp_alo
AS65 Assembler for R6502 [1.42].                                     Page  116
---------------------------------- bank0.s -----------------------------------

cf14 : 99009c           [ 5] 	sta hires_row_low,y
cf17 : a533             [ 3] 	lda tmp_ahi
cf19 : 99c89c           [ 5] 	sta hires_row_hi,y
                             	; add 40 ready for next row
cf1c : 18               [ 2] 	clc
cf1d : a532             [ 3] 	lda tmp_alo
cf1f : 6928             [ 2] 	adc #40
cf21 : 8532             [ 3] 	sta tmp_alo
                             	_bcc 2
                             
cf25 : e633             [ 5] 	inc tmp_ahi
                             	; Max 200 rows
cf27 : c8               [ 2] 	iny
cf28 : c0c8             [ 2] 	cpy #200
cf2a : d0e6             [ 3] 	bne gr_init_tab_row
                             	; From column 0, do 240 columns
                             	; Mask starts at 0x20, when shifts to 0 then
                             	; the column increments
cf2c : a920             [ 2] 	lda #0x20
cf2e : 8534             [ 3] 	sta tmp_blo			; Pixel mask
cf30 : a200             [ 2] 	ldx #0				; Pixel column
cf32 : a000             [ 2] 	ldy #0				; Byte column
cf34 :                       gr_init_tab_col
                             	; Save current mask and column
cf34 : a534             [ 3] 	lda tmp_blo
cf36 : 9d809e           [ 5] 	sta hires_mask,x
cf39 : 98               [ 2] 	tya
cf3a : 9d909d           [ 5] 	sta hires_col,x
                             	; shift mask, if zero then increment col and res
cf3d : 4634             [ 5] 	lsr tmp_blo
cf3f : d005             [ 3] 	bne gr_init_tab_col_skip
cf41 : a920             [ 2] 	lda #0x20
cf43 : 8534             [ 3] 	sta tmp_blo
cf45 : c8               [ 2] 	iny
cf46 :                       gr_init_tab_col_skip
cf46 : e8               [ 2] 	inx
cf47 : e0f0             [ 2] 	cpx #240
cf49 : d0e9             [ 3] 	bne gr_init_tab_col
cf4b : 60               [ 6] 	rts
                             
                             
                             
                             ;****************************************
                             ;* gr_cls
                             ;* Clear the text screen
                             ;****************************************
cf4c :                       gr_cls
cf4c : e60d             [ 5] 	inc vdp_curoff
                             	; Set screen address for text mode
cf4e : a516             [ 3] 	lda gr_scrngeom+gr_text_start
cf50 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
cf52 : a517             [ 3] 	lda gr_scrngeom+gr_text_start+1
cf54 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             
cf56 : a61a             [ 3] 	ldx gr_scrngeom+gr_text_h		; Count of rows to cl
                             
                             	; X and Y count bytes to fill
cf58 :                       gr_cls_row
cf58 : a000             [ 2] 	ldy #0							; Count of columns
cf5a : a525             [ 3] 	lda gr_scrngeom+gr_margin		; Is there a margin?
cf5c : f00a             [ 3] 	beq gr_cls_skip_marg
cf5e : a524             [ 3] 	lda gr_scrngeom+gr_paper		; Set Paper
AS65 Assembler for R6502 [1.42].                                     Page  117
---------------------------------- bank0.s -----------------------------------

cf60 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cf62 : c8               [ 2] 	iny
cf63 : a523             [ 3] 	lda gr_scrngeom+gr_ink			; Set Ink
cf65 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cf67 : c8               [ 2] 	iny
cf68 :                       gr_cls_skip_marg
cf68 : a510             [ 3] 	lda vdp_blank
cf6a : 850f             [ 3] 	sta vdp_curval					; Under cursor is also blank
cf6c :                       gr_cls_col
cf6c : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cf6e : c8               [ 2] 	iny
cf6f : c419             [ 3] 	cpy gr_scrngeom+gr_text_w		; Done all columns?
cf71 : d0f9             [ 3] 	bne gr_cls_col
                             	; Update pointer
cf73 : 18               [ 2] 	clc
cf74 : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp
cf76 : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
cf78 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
cf7c : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
cf7e : ca               [ 2] 	dex								; 1 row done
cf7f : d0d7             [ 3] 	bne gr_cls_row					; Done all rows?
                             
                             	; set cursror position to top left
cf81 : a510             [ 3] 	lda vdp_blank
cf83 : 850f             [ 3] 	sta vdp_curval
cf85 : a625             [ 3] 	ldx gr_scrngeom+gr_margin
cf87 : a000             [ 2] 	ldy #0
cf89 : 38               [ 2] 	sec								; Init mode
cf8a : 20bacf           [ 6] 	jsr gr_set_cur_init
                             
cf8d : c60d             [ 5] 	dec vdp_curoff
                             
cf8f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_getXY_base
                             ;* Get base screen address using Y coord only
                             ;* Input : X = y coord
                             ;* Output :	gr_geom_tmp updated with base
                             ;* Regs affected : A
                             ;****************************************
cf90 :                       gr_getXY_base
                             	; Find y offset using **X register**
cf90 : 18               [ 2] 	clc
cf91 : bde3d3           [ 4] 	lda gr_offset_40lo,x
cf94 : 6516             [ 3] 	adc gr_scrngeom+gr_text_start
cf96 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
cf98 : bdffd3           [ 4] 	lda gr_offset_40hi,x
cf9b : 6517             [ 3] 	adc gr_scrngeom+gr_text_start+1
cf9d : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             
                             	; A = high byte of base address
cf9f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_plot
                             ;* Write a byte in the screen pos
                             ;* Input :	Y,X = coord, A = Byte to put
                             ;*			X = Y COORDINATE
                             ;*			Y = X COORDINATE!!
AS65 Assembler for R6502 [1.42].                                     Page  118
---------------------------------- bank0.s -----------------------------------

                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cfa0 :                       gr_plot
cfa0 : 48               [ 3] 	pha					; Save byte to put
cfa1 : 2090cf           [ 6] 	jsr gr_getXY_base	; base addre
cfa4 : 68               [ 4] 	pla					; Get byte to put
cfa5 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
cfa7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_put
                             ;* Write a byte in the current cursor position
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
cfa8 :                       gr_put
cfa8 : e60d             [ 5] 	inc vdp_curoff		; Disable cusror
cfaa : 850f             [ 3] 	sta vdp_curval		; Update cursor value
                             	; Base address plus X offset
cfac : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
cfae : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
cfb0 : c60d             [ 5] 	dec vdp_curoff		; Allow cursor flashing
cfb2 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_get
                             ;* Get the byte in the screen pos
                             ;* Input : Y,X = coord (**Y = X coordinate!!)
                             ;* Output : X,Y = address, A = peeked byte
                             ;* Regs affected : All
                             ;****************************************
cfb3 :                       gr_get
cfb3 : 2090cf           [ 6] 	jsr gr_getXY_base	; Base address
cfb6 : b126             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y
cfb8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_set_cur
                             ;* Set the cursor position
                             ;* Input : X, Y = position
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cfb9 :                       gr_set_cur
cfb9 : 18               [ 2] 	clc
cfba :                       gr_set_cur_init
cfba : a50d             [ 3] 	lda vdp_curoff
cfbc : e60d             [ 5] 	inc vdp_curoff				; Disable cursor
cfbe : b012             [ 3] 	bcs gr_set_cur_skip			; Skip restore if C=1
cfc0 : c900             [ 2] 	cmp #0						; Was cursor anyway disabled?
cfc2 : d00e             [ 3] 	bne gr_set_cur_skip			; if so then skip restore
cfc4 : 8632             [ 3] 	stx tmp_alo
cfc6 : 8433             [ 3] 	sty tmp_ahi
                             	; First restore what is under the cursor
                             	; in case cursor is ON
cfc8 : 8426             [ 3] 	sty gr_scrngeom+gr_geom_tmp
cfca : a50f             [ 3] 	lda vdp_curval
cfcc : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
cfce : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
AS65 Assembler for R6502 [1.42].                                     Page  119
---------------------------------- bank0.s -----------------------------------

cfd0 : a426             [ 3] 	ldy gr_scrngeom+gr_geom_tmp
cfd2 :                       gr_set_cur_skip
                             	; Save new cursor position
cfd2 : 861b             [ 3] 	stx gr_scrngeom+gr_cur_x
cfd4 : 841c             [ 3] 	sty gr_scrngeom+gr_cur_y
                             
                             	; Now calculate the new cursor vram address
cfd6 : a61c             [ 3] 	ldx gr_scrngeom+gr_cur_y
cfd8 : 2090cf           [ 6] 	jsr gr_getXY_base
                             	; Update pointer in tmp, A already has high byte
cfdb : 851e             [ 3] 	sta gr_scrngeom+gr_cur_ptr+1
cfdd : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp
cfdf : 851d             [ 3] 	sta gr_scrngeom+gr_cur_ptr
                             	; Read screen at this position, offset with X co
cfe1 : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
cfe3 : b11d             [ 5] 	lda (gr_scrngeom+gr_cur_ptr),y
cfe5 : 850f             [ 3] 	sta vdp_curval
                             	; Reset cursor so it's visible
cfe7 : a900             [ 2] 	lda #0
cfe9 : 850e             [ 3] 	sta vdp_curstat
cfeb : a901             [ 2] 	lda #1
cfed : 850c             [ 3] 	sta vdp_curcnt
                             
cfef : c60d             [ 5] 	dec vdp_curoff
                             
cff1 : 60               [ 6] 	rts
                             
                             
                             
                             ;****************************************
                             ;* gr_scroll_up
                             ;* Scroll screen one line up
                             ;****************************************
cff2 :                       gr_scroll_up
cff2 : e60d             [ 5] 	inc vdp_curoff
                             
                             	; Set source in a and dest in b
                             	; b is first line, source is second
cff4 : 18               [ 2] 	clc
cff5 : a516             [ 3] 	lda gr_scrngeom+gr_text_start
cff7 : 8534             [ 3] 	sta tmp_blo
cff9 : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
cffb : 8532             [ 3] 	sta tmp_alo
cffd : a517             [ 3] 	lda gr_scrngeom+gr_text_start+1
cfff : 8535             [ 3] 	sta tmp_bhi
d001 : 6900             [ 2] 	adc #0
d003 : 8533             [ 3] 	sta tmp_ahi
                             
                             	; Restore what was underneath cursor
d005 : a50f             [ 3] 	lda vdp_curval
d007 : a41b             [ 3] 	ldy gr_scrngeom+gr_cur_x
d009 : 911d             [ 5] 	sta (gr_scrngeom+gr_cur_ptr),y
                             
                             	; x = lines to scroll (1 less than screen height
d00b : a61a             [ 3] 	ldx gr_scrngeom+gr_text_h
d00d : ca               [ 2] 	dex
                             
d00e :                       gr_scroll_cpy_ln
                             	; Start from right hand edge (easier)
d00e : a419             [ 3] 	ldy gr_scrngeom+gr_text_w
d010 : 88               [ 2] 	dey
d011 :                       gr_scroll_char
AS65 Assembler for R6502 [1.42].                                     Page  120
---------------------------------- bank0.s -----------------------------------

                             	; get char from source and copy to dest
d011 : b132             [ 5] 	lda (tmp_alo),y
d013 : 9134             [ 5] 	sta (tmp_blo),y
d015 : 88               [ 2] 	dey
d016 : 10f9             [ 3] 	bpl gr_scroll_char
                             
                             	; Update source address
d018 : 18               [ 2] 	clc
d019 : a532             [ 3] 	lda tmp_alo
d01b : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
d01d : 8532             [ 3] 	sta tmp_alo
                             	_bcc 2
                             
d021 : e633             [ 5] 	inc tmp_ahi
                             	; Update destination address
d023 : 18               [ 2] 	clc
d024 : a534             [ 3] 	lda tmp_blo
d026 : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
d028 : 8534             [ 3] 	sta tmp_blo
                             	_bcc 2
                             
d02c : e635             [ 5] 	inc tmp_bhi
                             
                             	; One line complete
d02e : ca               [ 2] 	dex
d02f : d0dd             [ 3] 	bne gr_scroll_cpy_ln
                             
                             	; Source is pointing at last line
                             	; Last line needs filling
d031 : a000             [ 2] 	ldy #0							; Start from left
d033 : a525             [ 3] 	lda gr_scrngeom+gr_margin		; Margin?
d035 : f00a             [ 3] 	beq gr_scroll_marg				; Skip if not
d037 : a524             [ 3] 	lda gr_scrngeom+gr_paper		; Set Paper
d039 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d03b : c8               [ 2] 	iny
d03c : a523             [ 3] 	lda gr_scrngeom+gr_ink			; Set Ink
d03e : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d040 : c8               [ 2] 	iny
d041 :                       gr_scroll_marg
                             	; Needs to be filled with blank
d041 : a510             [ 3] 	lda vdp_blank
d043 : 850f             [ 3] 	sta vdp_curval			; Also this is the cursor value
d045 :                       gr_scroll_erase_ln
d045 : 9134             [ 5] 	sta (tmp_blo),y
d047 : c8               [ 2] 	iny
d048 : c419             [ 3] 	cpy gr_scrngeom+gr_text_w
d04a : d0f9             [ 3] 	bne gr_scroll_erase_ln
                             
d04c : c60d             [ 5] 	dec vdp_curoff
                             
d04e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_new_ln
                             ;* Carry out a new line
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d04f :                       gr_new_ln
                             	; X pos is zero, Y needs to increment
d04f : a625             [ 3] 	ldx gr_scrngeom+gr_margin
AS65 Assembler for R6502 [1.42].                                     Page  121
---------------------------------- bank0.s -----------------------------------

d051 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
d053 : c8               [ 2] 	iny
d054 : c41a             [ 3] 	cpy gr_scrngeom+gr_text_h
d056 : d00c             [ 3] 	bne gr_nl_skip_nl
                             	; If got here then screen needs to scroll
                             	; Common routine also used by cursor right
d058 :                       gr_scroll_routine
d058 : 88               [ 2] 	dey
d059 : 8a               [ 2] 	txa
d05a : 48               [ 3] 	pha
d05b : 98               [ 2] 	tya
d05c : 48               [ 3] 	pha
d05d : 20f2cf           [ 6] 	jsr gr_scroll_up
d060 : 68               [ 4] 	pla
d061 : a8               [ 2] 	tay
d062 : 68               [ 4] 	pla
d063 : aa               [ 2] 	tax
d064 :                       gr_nl_skip_nl
d064 : 4cb9cf           [ 3] 	jmp gr_set_cur
                             
                             
                             ;****************************************
                             ;* gr_cur_right
                             ;* Advance cursor position
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d067 :                       gr_cur_right
                             	; Load cursor x,y position
d067 : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
d069 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             
                             	; Move cursor right
d06b : e8               [ 2] 	inx
                             	; Check if reached past edge of line
d06c : e419             [ 3] 	cpx gr_scrngeom+gr_text_w
d06e : d0f4             [ 3] 	bne gr_nl_skip_nl
                             	; If got here then wrap to next line
d070 : a625             [ 3] 	ldx gr_scrngeom+gr_margin
d072 : c8               [ 2] 	iny
d073 : c41a             [ 3] 	cpy gr_scrngeom+gr_text_h
d075 : f0e1             [ 3] 	beq gr_scroll_routine		; Common scroll routine
d077 : d0eb             [ 3] 	bne gr_nl_skip_nl			; Common set cursor
                             
                             ;****************************************
                             ;* gr_cur_left
                             ;* Advance cursor left
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d079 :                       gr_cur_left
                             	; Load cursor x,y position, load X last to check
d079 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
d07b : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
                             
                             	; Decrement screen pointer
                             	; Move cursor left
d07d : e425             [ 3] 	cpx gr_scrngeom+gr_margin	; Already at left marg
d07f : d007             [ 3] 	bne gr_cur_skip_at_left		; No, then just go left
d081 : c000             [ 2] 	cpy #0						; Else check if can wrap up
AS65 Assembler for R6502 [1.42].                                     Page  122
---------------------------------- bank0.s -----------------------------------

d083 : f007             [ 3] 	beq gr_cur_skip_at_tl
d085 : 88               [ 2] 	dey
d086 : a619             [ 3] 	ldx gr_scrngeom+gr_text_w
d088 :                       gr_cur_skip_at_left
d088 : ca               [ 2] 	dex
d089 : 4cb9cf           [ 3] 	jmp gr_set_cur
                             
d08c :                       gr_cur_skip_at_tl
d08c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_cur_up
                             ;* Advance cursor up
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d08d :                       gr_cur_up
                             	; Load cursor x,y position, load Y last to check
d08d : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
d08f : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             	; if y==0 then don't do anything
d091 : f0f9             [ 3] 	beq gr_cur_skip_at_tl	; Just somewhere with an r
d093 : 88               [ 2] 	dey
d094 : 4cb9cf           [ 3] 	jmp gr_set_cur
                             
                             ;****************************************
                             ;* gr_cur_down
                             ;* Advance cursor down
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d097 :                       gr_cur_down
                             	; Load cursor x,y position
d097 : a61b             [ 3] 	ldx gr_scrngeom+gr_cur_x
d099 : a41c             [ 3] 	ldy gr_scrngeom+gr_cur_y
d09b : c8               [ 2] 	iny
                             	; If already at  bottom then don't do anything
d09c : c41a             [ 3] 	cpy gr_scrngeom+gr_text_h			
d09e : f0ec             [ 3] 	beq gr_cur_skip_at_tl				; Just somewhere with a
d0a0 : 20b9cf           [ 6] 	jsr gr_set_cur
                             
d0a3 :                       gr_cur_skip_at_bot
d0a3 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_del
                             ;* Action del
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d0a4 :                       gr_del
d0a4 : 2079d0           [ 6] 	jsr gr_cur_left
d0a7 : a920             [ 2] 	lda #' '							; Put a space
d0a9 : 4ca8cf           [ 3] 	jmp gr_put
                             
                             ;****************************************
                             ;* gr_get_key
                             ;* Waits for a key press, C=1 synchronous
AS65 Assembler for R6502 [1.42].                                     Page  123
---------------------------------- bank0.s -----------------------------------

                             ;* A = Key code, C=0 means valid code
                             ;****************************************
d0ac :                       gr_get_key
                             	; save X,Y but A is ok to trample
d0ac : 8a               [ 2] 	txa
d0ad : 48               [ 3] 	pha
d0ae : 98               [ 2] 	tya
d0af : 48               [ 3] 	pha
d0b0 :                       gr_get_key_2
d0b0 : 08               [ 3] 	php
d0b1 : 204dca           [ 6] 	jsr kb_get_key
d0b4 : 9006             [ 3] 	bcc gr_key_check_key
d0b6 : 28               [ 4] 	plp									; Get async pref
d0b7 : b0f7             [ 3] 	bcs	gr_get_key_2					; Keep checking if sync
d0b9 : 38               [ 2] 	sec
d0ba : b019             [ 3] 	bcs gr_key_tidy_up					; Finish if not
d0bc :                       gr_key_check_key						; Check the key pressed
d0bc : c901             [ 2] 	cmp #UTF_ACK						; Copy key pressed?
d0be : d004             [ 3] 	bne gr_key_skip_copy
d0c0 : a50f             [ 3] 	lda vdp_curval						; If yes the get char under 
d0c2 : b00f             [ 3] 	bcs gr_key_got_key					; Always branches (n=1, c
d0c4 :                       gr_key_skip_copy
d0c4 : c914             [ 2] 	cmp #CTRL_CAPS
d0c6 : d00b             [ 3] 	bne gr_key_got_key
d0c8 : a52c             [ 3] 	lda kb_stat							; Toggle caps bit
d0ca : 4901             [ 2] 	eor #KB_CAPSLK
d0cc : 852c             [ 3] 	sta kb_stat
d0ce : 28               [ 4] 	plp									; Get back synchronous pref
d0cf : b0df             [ 3] 	bcs gr_get_key_2					; And check again for sync
d0d1 : 900b             [ 3] 	bcc gr_key_no_key					; Else no key
d0d3 :                       gr_key_got_key
d0d3 : 28               [ 4] 	plp
d0d4 : 18               [ 2] 	clc									; Ensure C=0 for valid key
d0d5 :                       gr_key_tidy_up
                             	; restore X,Y but don't lose A
d0d5 : 8538             [ 3] 	sta tmp_d
d0d7 : 68               [ 4] 	pla
d0d8 : a8               [ 2] 	tay
d0d9 : 68               [ 4] 	pla
d0da : aa               [ 2] 	tax
d0db : a538             [ 3] 	lda tmp_d
d0dd : 60               [ 6] 	rts
d0de :                       gr_key_no_key
d0de : 28               [ 4] 	plp
d0df : 38               [ 2] 	sec									; Ensure C=1 for invalid key
d0e0 : b0f3             [ 3] 	bcs gr_key_tidy_up					; Always branches
                             
                             ;****************************************
                             ;* gr_put_byte
                             ;* Put a byte out
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d0e2 :                       gr_put_byte
                             	_pushAXY
                             
d0eb : 20f4d0           [ 6] 	jsr gr_put_byte_low
                             	_pullAXY
                             
d0f3 :                       gr_no_special
d0f3 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  124
---------------------------------- bank0.s -----------------------------------

                             
d0f4 :                       gr_put_byte_low
d0f4 : c97f             [ 2] 	cmp #UTF_DEL			; Del key
d0f6 : f004             [ 3] 	beq gr_process_special
d0f8 : c920             [ 2] 	cmp #32					; Special char?
d0fa : b01b             [ 4] 	bcs gr_printable		; >=32 == carry clear
d0fc :                       gr_process_special
                             	; Else find special behaviour to do
d0fc : a2ff             [ 2] 	ldx #-1
d0fe : 8532             [ 3] 	sta tmp_alo
d100 :                       gr_special_loop
d100 : e8               [ 2] 	inx
d101 : bd1dd1           [ 4] 	lda gr_special_ch,x
d104 : f0ed             [ 4] 	beq gr_no_special		; Somewhere with an rts!
d106 : c532             [ 3] 	cmp tmp_alo
d108 : d0f6             [ 3] 	bne gr_special_loop
d10a : bd26d1           [ 4] 	lda gr_special_fn_lo,x
d10d : 8532             [ 3] 	sta tmp_alo
d10f : bd2ed1           [ 4] 	lda gr_special_fn_hi,x
d112 : 8533             [ 3] 	sta tmp_ahi
d114 : 6c3200           [ 6] 	jmp (tmp_alo)
                             
                             	;	Normal caracter processing here.
d117 :                       gr_printable
                             	; Place in current position and move right
d117 : 20a8cf           [ 6] 	jsr gr_put
d11a : 4c67d0           [ 3] 	jmp gr_cur_right
                             
d11d :                       gr_special_ch
d11d : 0d                    	db UTF_CR
d11e : 7f                    	db UTF_DEL
d11f : 08                    	db CRSR_LEFT
d120 : 09                    	db CRSR_RIGHT
d121 : 0b                    	db CRSR_UP
d122 : 0a                    	db CRSR_DOWN
d123 : 0c                    	db UTF_FF
d124 : 07                    	db UTF_BEL
d125 : 00                    	db 0
                             
d126 :                       gr_special_fn_lo
d126 : 4f                    	db lo(gr_new_ln)
d127 : a4                    	db lo(gr_del)
d128 : 79                    	db lo(gr_cur_left)
d129 : 67                    	db lo(gr_cur_right)
d12a : 8d                    	db lo(gr_cur_up)
d12b : 97                    	db lo(gr_cur_down)
d12c : 4c                    	db lo(gr_cls)
d12d : e5                    	db lo(init_snd)
                             
d12e :                       gr_special_fn_hi
d12e : d0                    	db hi(gr_new_ln)
d12f : d0                    	db hi(gr_del)
d130 : d0                    	db hi(gr_cur_left)
d131 : d0                    	db hi(gr_cur_right)
d132 : d0                    	db hi(gr_cur_up)
d133 : d0                    	db hi(gr_cur_down)
d134 : cf                    	db hi(gr_cls)
d135 : d5                    	db hi(init_snd)
                             
                             ; Special command to print to the screen
                             ; Y,A=Message, zero terminated
                             ; Y=number of chars printed
AS65 Assembler for R6502 [1.42].                                     Page  125
---------------------------------- bank0.s -----------------------------------

d136 :                       gr_print_line
d136 : 8449             [ 3] 	sty num_tmp
d138 : 854a             [ 3] 	sta num_tmp+1
d13a : a000             [ 2] 	ldy #0
d13c :                       gr_print_msg_loop
d13c : b149             [ 5] 	lda (num_tmp),y
d13e : f006             [ 3] 	beq gr_print_msg_done
d140 : 20e2d0           [ 6] 	jsr gr_put_byte
d143 : c8               [ 2] 	iny
d144 : d0f6             [ 3] 	bne gr_print_msg_loop
d146 :                       gr_print_msg_done
d146 : 60               [ 6] 	rts
                             
                             ;******* HIRES STUFF *****
                             
                             
                             ;****************************************
                             ;* gr_hcode
                             ;* Plot bytecode at hires X,Y coordinates with co
                             ;* Input : X,Y = coord, A = Char code
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d147 :                       gr_hcode
d147 : 48               [ 3] 	pha
                             	; Set up destination position tmpalo,hi and Y
d148 : 2003d2           [ 6] 	jsr gr_point_setup
d14b : a208             [ 2] 	ldx #8				; Always do 8 rows like a character
d14d :                       gr_hcode_loop
d14d : 68               [ 4] 	pla 				; Get the code to place
d14e : 48               [ 3] 	pha					; Need to save it back
d14f : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y		; Store it in d
d151 : 18               [ 2] 	clc
d152 : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp			; Update base poin
d154 : 6519             [ 3] 	adc gr_scrngeom+gr_text_w
d156 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
d15a : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
d15c : ca               [ 2] 	dex
d15d : d0ee             [ 3] 	bne gr_hcode_loop
d15f : 68               [ 4] 	pla
d160 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_hchar
                             ;* Plot character to hires X,Y coordinates with c
                             ;* Input : X,Y = coord, A = Char code
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d161 :                       gr_hchar
                             	; If char code < 32 then plot attribute
d161 : c91f             [ 2] 	cmp #31
d163 : 90e2             [ 3] 	bcc gr_hcode
                             	; Multiply char code by 8
                             	; and add to char font base
                             	; tmp_clo contains base address
d165 : 0a               [ 2] 	asl a
d166 : 2637             [ 5] 	rol tmp_chi
d168 : 0a               [ 2] 	asl a
d169 : 2637             [ 5] 	rol tmp_chi
AS65 Assembler for R6502 [1.42].                                     Page  126
---------------------------------- bank0.s -----------------------------------

d16b : 0a               [ 2] 	asl a
d16c : 2637             [ 5] 	rol tmp_chi
d16e : 18               [ 2] 	clc
d16f : 6514             [ 3] 	adc gr_scrngeom+gr_char
d171 : 8536             [ 3] 	sta tmp_clo
d173 : a537             [ 3] 	lda tmp_chi
d175 : 2907             [ 2] 	and #7
d177 : 6515             [ 3] 	adc gr_scrngeom+gr_char+1
d179 : 8537             [ 3] 	sta tmp_chi
                             
                             	; Set up destination position
d17b : 2003d2           [ 6] 	jsr gr_point_setup
                             	; tmp needs to contains address including column
d17e : 18               [ 2] 	clc
d17f : 98               [ 2] 	tya
d180 : 6526             [ 3] 	adc gr_scrngeom+gr_geom_tmp
d182 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
d186 : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
                             
d188 : a528             [ 3] 	lda gr_scrngeom+gr_geom_tmp2		; Get the mask
d18a : a207             [ 2] 	ldx #7
d18c :                       gr_hchar_mask							; Calculate how many shifts t
d18c : ca               [ 2] 	dex
d18d : 4a               [ 2] 	lsr a
d18e : d0fc             [ 3] 	bne gr_hchar_mask
d190 : 8628             [ 3] 	stx gr_scrngeom+gr_geom_tmp2		; number between 1
                             
                             	; copy font bytes and shift the required number 
                             	; go from bottom to top as data gets stored on t
d192 : a007             [ 2] 	ldy #7
d194 :                       gr_hchar_getfont
d194 : b136             [ 5] 	lda (tmp_clo),y
d196 : 853d             [ 3] 	sta ztmp_24
d198 : a900             [ 2] 	lda #0
d19a : 853e             [ 3] 	sta ztmp_24+1
                             
                             	; shift the right number of times
d19c : a628             [ 3] 	ldx gr_scrngeom+gr_geom_tmp2
d19e :                       gr_hchar_rot1bit
d19e : ca               [ 2] 	dex
d19f : f00d             [ 3] 	beq gr_hchar_rot1bit_nx
d1a1 : 463d             [ 5] 	lsr ztmp_24					; Rotate left hand side
d1a3 : a53e             [ 3] 	lda ztmp_24+1				; Rotate right hand side
d1a5 : 9002             [ 3] 	bcc gr_hchar_rot1bit_bcc
d1a7 : 0940             [ 2] 	ora #0x40					; account for 6 bits per byte
d1a9 :                       gr_hchar_rot1bit_bcc
d1a9 : 4a               [ 2] 	lsr a
d1aa : 853e             [ 3] 	sta ztmp_24+1
d1ac : 10f0             [ 3] 	bpl gr_hchar_rot1bit		; Always as lsr sets N=0
d1ae :                       gr_hchar_rot1bit_nx
d1ae : a53e             [ 3] 	lda ztmp_24+1				; Get RHS
d1b0 : 48               [ 3] 	pha							; Push RHS on to stack
d1b1 : a53d             [ 3] 	lda ztmp_24					; Get LHS
d1b3 : 48               [ 3] 	pha							; Push that too - LH gets pulled first
d1b4 : 88               [ 2] 	dey							; Bottom to to lines
d1b5 : 10dd             [ 3] 	bpl gr_hchar_getfont
                             
                             	; Now copy shift source to destination, accounti
d1b7 : a208             [ 2] 	ldx #8
d1b9 :                       gr_hchar_copyline
AS65 Assembler for R6502 [1.42].                                     Page  127
---------------------------------- bank0.s -----------------------------------

d1b9 : a41f             [ 3] 	ldy gr_scrngeom+gr_pixmode	; Mode determines how
d1bb : f022             [ 3] 	beq gr_hchar_copyline_erase
d1bd : 3010             [ 3] 	bmi gr_hchar_copyline_eor
                             
                             	; Mode = ~Z : OR
d1bf : a000             [ 2] 	ldy #0						; Get lh side source
d1c1 : 68               [ 4] 	pla
d1c2 : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
d1c4 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d1c6 : c8               [ 2] 	iny							; Get rh side source
d1c7 : 68               [ 4] 	pla
d1c8 : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
d1ca : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d1cc : 4cf4d1           [ 3] 	jmp gr_hchar_copyline_nx
d1cf :                       gr_hchar_copyline_eor
                             	; Mode = N : EOR
d1cf : a000             [ 2] 	ldy #0						; Get lh side source
d1d1 : 68               [ 4] 	pla
d1d2 : 5126             [ 5] 	eor (gr_scrngeom+gr_geom_tmp),y
d1d4 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d1d6 : c8               [ 2] 	iny							; Get rh side source
d1d7 : 68               [ 4] 	pla
d1d8 : 5126             [ 5] 	eor (gr_scrngeom+gr_geom_tmp),y
d1da : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d1dc : 4cf4d1           [ 3] 	jmp gr_hchar_copyline_nx
d1df :                       gr_hchar_copyline_erase
                             	; Mode = Z : erase
d1df : a000             [ 2] 	ldy #0						; Get lh side source
d1e1 : 68               [ 4] 	pla
d1e2 : 853d             [ 3] 	sta ztmp_24
d1e4 : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
d1e6 : 453d             [ 3] 	eor ztmp_24
d1e8 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d1ea : c8               [ 2] 	iny							; Get rh side source
d1eb : 68               [ 4] 	pla
d1ec : 853d             [ 3] 	sta ztmp_24
d1ee : 1126             [ 5] 	ora (gr_scrngeom+gr_geom_tmp),y
d1f0 : 453d             [ 3] 	eor ztmp_24
d1f2 : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d1f4 :                       gr_hchar_copyline_nx
d1f4 : 18               [ 2] 	clc							; Next address
d1f5 : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp
d1f7 : 6928             [ 2] 	adc #40
d1f9 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
                             	_bcc 2
                             
d1fd : e627             [ 5] 	inc gr_scrngeom+gr_geom_tmp+1
d1ff : ca               [ 2] 	dex
d200 : d0b7             [ 4] 	bne gr_hchar_copyline
d202 : 60               [ 6] 	rts							; Done after 8 lines
                             
                             ;****************************************
                             ;* gr_point_setup
                             ;* Calculate information about a pixel location
                             ;* Input : X,Y = coord
                             ;* Output : None
                             ;* Regs affected :
                             ;* gr_geom_tmp contains the row base address
                             ;* gr_geom_tmp2 contains the mask
                             ;* A contains the mask
                             ;* X untouched
                             ;* Y contains column offet from base address
AS65 Assembler for R6502 [1.42].                                     Page  128
---------------------------------- bank0.s -----------------------------------

                             ;****************************************
d203 :                       gr_point_setup
                             	; Get row address
d203 : b9009c           [ 4] 	lda hires_row_low,y
d206 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d208 : b9c89c           [ 4] 	lda hires_row_hi,y
d20b : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             	; Get the pixel mask
d20d : bd809e           [ 4] 	lda hires_mask,x
d210 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp2
                             	; Get the column offset to Y
d212 : bc909d           [ 4] 	ldy hires_col,x
d215 : 60               [ 6] 	rts
                             
d216 :                       gr_set_hires_cur
d216 : 8621             [ 3] 	stx gr_scrngeom+gr_hires_x
d218 : 8422             [ 3] 	sty gr_scrngeom+gr_hires_y
d21a : 60               [ 6] 	rts
                             
                             ;* Get pixel value at X,Y in to A
d21b :                       gr_pixel
d21b : 2003d2           [ 6] 	jsr gr_point_setup				; Set up mask and addresse
d21e : 3126             [ 5] 	and (gr_scrngeom+gr_geom_tmp),y	; And with scree
d220 : 60               [ 6] 	rts
                             
                             ;* Plot a point based on X,Y coordinates
d221 :                       gr_point
d221 : e0f0             [ 2] 	cpx #240						; Check bounds
d223 : b02c             [ 3] 	bcs gr_point_done
d225 : c0c8             [ 2] 	cpy #200
d227 : b028             [ 3] 	bcs gr_point_done
                             
                             	;** FOR SPEED COPYING THE POINT SETUP ROUTINE **
                             	;** OBVS MAKE SURE THIS REFLECTS ANY POINT SETUP
                             	; Get row address
d229 : b9009c           [ 4] 	lda hires_row_low,y
d22c : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d22e : b9c89c           [ 4] 	lda hires_row_hi,y
d231 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             	; Get the pixel mask
d233 : bd809e           [ 4] 	lda hires_mask,x
d236 : 8528             [ 3] 	sta gr_scrngeom+gr_geom_tmp2
                             	; Get the column offset to Y
d238 : bc909d           [ 4] 	ldy hires_col,x
                             
                             ;* Plot a point based on gr_geom_tmp base, Y offs
d23b : b126             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y	; Get screen byt
d23d : c920             [ 2] 	cmp #32							; If less than 32 (i.e. an attribu
d23f : b002             [ 3] 	bcs gr_point_skip_attr
d241 : a940             [ 2] 	lda #64							; then make it a normal cell (else
d243 :                       gr_point_skip_attr
d243 : a61f             [ 3] 	ldx gr_scrngeom+gr_pixmode		; Look at the mode
d245 : 3006             [ 3] 	bmi gr_point_eor				; If eor mode then go and wr
d247 : 0528             [ 3] 	ora gr_scrngeom+gr_geom_tmp2	; Or with MASK
d249 : e000             [ 2] 	cpx #0							; But if zero mode then eor
d24b : d002             [ 3] 	bne gr_point_write
d24d :                       gr_point_eor
d24d : 4528             [ 3] 	eor gr_scrngeom+gr_geom_tmp2	; EOR with MASK
d24f :                       gr_point_write
d24f : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y
d251 :                       gr_point_done
d251 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  129
---------------------------------- bank0.s -----------------------------------

                             
                             ;****************************************
                             ;* gr_circle
                             ;* Draw a circle centre x0,y0, radius r
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = r
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d252 :                       gr_circle
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
003d =                       grc_x0 	= (num_a)
003e =                       grc_y0 	= (num_a+1)
003f =                       grc_r 	= (num_a+2)
0040 =                       grc_x 	= (num_a+3)
0042 =                       grc_y	= (num_b+1)
0043 =                       grc_d	= (num_b+2)
                             
                             	;x = radius
d252 : a53f             [ 3] 	lda grc_r
d254 : 8540             [ 3] 	sta grc_x
                             	;decision = 1 - x
d256 : a900             [ 2] 	lda #0
                             	;y = 0
d258 : 8542             [ 3] 	sta grc_y
d25a : 18               [ 2] 	clc			; A=0 so CLC subtracts 1 :-)
d25b : e540             [ 3] 	sbc grc_x
d25d : 8543             [ 3] 	sta grc_d
d25f :                       gr_circle_plot
                             	;while(x >= y)
d25f : a540             [ 3] 	lda grc_x
d261 : c542             [ 3] 	cmp grc_y
d263 : 902a             [ 3] 	bcc gr_circle_done
                             	;plot 8 points on current x,y
d265 : 2090d2           [ 6] 	jsr gr_circle_points
                             	;y++
d268 : e642             [ 5] 	inc grc_y
                             	;if d<=0
d26a : a543             [ 3] 	lda grc_d
d26c : f014             [ 3] 	beq gr_circle_d_lte0
d26e : 3012             [ 3] 	bmi gr_circle_d_lte0
                             	;else
                             	;x--
d270 : c640             [ 5] 	dec grc_x
                             	;decision += 2 * (y - x) + 1
d272 : a542             [ 3] 	lda grc_y
d274 : 38               [ 2] 	sec
d275 : e540             [ 3] 	sbc grc_x
d277 : 0a               [ 2] 	asl a
d278 : 18               [ 2] 	clc
d279 : 6901             [ 2] 	adc #1
d27b : 6543             [ 3] 	adc grc_d
d27d : 8543             [ 3] 	sta grc_d
d27f : 4c5fd2           [ 3] 	jmp gr_circle_plot
d282 :                       gr_circle_d_lte0
                             	;decision += 2 * y + 1
d282 : a542             [ 3] 	lda grc_y
d284 : 0a               [ 2] 	asl a
d285 : 18               [ 2] 	clc
d286 : 6901             [ 2] 	adc #1
AS65 Assembler for R6502 [1.42].                                     Page  130
---------------------------------- bank0.s -----------------------------------

d288 : 6543             [ 3] 	adc grc_d
d28a : 8543             [ 3] 	sta grc_d
d28c : 4c5fd2           [ 3] 	jmp gr_circle_plot
d28f :                       gr_circle_done
d28f : 60               [ 6] 	rts
d290 :                       gr_circle_points
                             ; Local names of temp storage
                             ; to make code easier to read
                             	;DrawPixel( x + x0,  yh + y0);
d290 : a540             [ 3] 	lda grc_x
d292 : 18               [ 2] 	clc
d293 : 653d             [ 3] 	adc grc_x0
d295 : aa               [ 2] 	tax
d296 : a542             [ 3] 	lda grc_y
d298 : 18               [ 2] 	clc
d299 : 653e             [ 3] 	adc grc_y0
d29b : a8               [ 2] 	tay
d29c : 2021d2           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0,  xh + y0);
d29f : a542             [ 3] 	lda grc_y
d2a1 : 18               [ 2] 	clc
d2a2 : 653d             [ 3] 	adc grc_x0
d2a4 : aa               [ 2] 	tax
d2a5 : a540             [ 3] 	lda grc_x
d2a7 : 18               [ 2] 	clc
d2a8 : 653e             [ 3] 	adc grc_y0
d2aa : a8               [ 2] 	tay
d2ab : 2021d2           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0,  yh + y0);
d2ae : a53d             [ 3] 	lda grc_x0
d2b0 : 38               [ 2] 	sec
d2b1 : e540             [ 3] 	sbc grc_x
d2b3 : aa               [ 2] 	tax
d2b4 : a542             [ 3] 	lda grc_y
d2b6 : 18               [ 2] 	clc
d2b7 : 653e             [ 3] 	adc grc_y0
d2b9 : a8               [ 2] 	tay
d2ba : 2021d2           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0,  xh + y0);
d2bd : a53d             [ 3] 	lda grc_x0
d2bf : 38               [ 2] 	sec
d2c0 : e542             [ 3] 	sbc grc_y
d2c2 : aa               [ 2] 	tax
d2c3 : a540             [ 3] 	lda grc_x
d2c5 : 18               [ 2] 	clc
d2c6 : 653e             [ 3] 	adc grc_y0
d2c8 : a8               [ 2] 	tay
d2c9 : 2021d2           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0, -yh + y0);
d2cc : a53d             [ 3] 	lda grc_x0
d2ce : 38               [ 2] 	sec
d2cf : e540             [ 3] 	sbc grc_x
d2d1 : aa               [ 2] 	tax
d2d2 : a53e             [ 3] 	lda grc_y0
d2d4 : 38               [ 2] 	sec
d2d5 : e542             [ 3] 	sbc grc_y
d2d7 : a8               [ 2] 	tay
d2d8 : 2021d2           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0, -xh + y0);
d2db : a53d             [ 3] 	lda grc_x0
d2dd : 38               [ 2] 	sec
d2de : e542             [ 3] 	sbc grc_y
AS65 Assembler for R6502 [1.42].                                     Page  131
---------------------------------- bank0.s -----------------------------------

d2e0 : aa               [ 2] 	tax
d2e1 : a53e             [ 3] 	lda grc_y0
d2e3 : 38               [ 2] 	sec
d2e4 : e540             [ 3] 	sbc grc_x
d2e6 : a8               [ 2] 	tay
d2e7 : 2021d2           [ 6] 	jsr gr_point
                             	;DrawPixel( x + x0, -yh + y0);
d2ea : a540             [ 3] 	lda grc_x
d2ec : 18               [ 2] 	clc
d2ed : 653d             [ 3] 	adc grc_x0
d2ef : aa               [ 2] 	tax
d2f0 : a53e             [ 3] 	lda grc_y0
d2f2 : 38               [ 2] 	sec
d2f3 : e542             [ 3] 	sbc grc_y
d2f5 : a8               [ 2] 	tay
d2f6 : 2021d2           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0, -xh + y0);
d2f9 : a542             [ 3] 	lda grc_y
d2fb : 18               [ 2] 	clc
d2fc : 653d             [ 3] 	adc grc_x0
d2fe : aa               [ 2] 	tax
d2ff : a53e             [ 3] 	lda grc_y0
d301 : 38               [ 2] 	sec
d302 : e540             [ 3] 	sbc grc_x
d304 : a8               [ 2] 	tay
d305 : 4c21d2           [ 3] 	jmp gr_point
                             
                             
                             
                             ;****************************************
                             ;* gr_line
                             ;* Draw a line from x0,y0 -> x1,y1
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = x1
                             ;*			num_a+3 = y1
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d308 :                       gr_line
                             
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
003d =                       grl_x0 	= (num_a)
003e =                       grl_y0 	= (num_a+1)
003f =                       grl_x1 	= (num_a+2)
0040 =                       grl_y1 	= (num_a+3)
0041 =                       grl_dx	= (ztmp_24+4)
0042 =                       grl_dy	= (ztmp_24+5)
0043 =                       grl_xyyx= (ztmp_24+6)
0044 =                       grl_2dx	= (ztmp_24+7)			; Word
0046 =                       grl_2dy	= (ztmp_24+9)			; Word
0048 =                       grl_2dxy= (ztmp_24+11)			; Word
004a =                       grl_sinx= (ztmp_24+13)
004b =                       grl_p	= (ztmp_24+14)			; Word
004d =                       grl_siny= (ztmp_24+16)
                             
                             	; Start from hires cursor position
                             	; New cursor pos = end of line pos
d308 : a521             [ 3] 	lda gr_scrngeom+gr_hires_x
d30a : 853d             [ 3] 	sta grl_x0
d30c : a522             [ 3] 	lda gr_scrngeom+gr_hires_y
AS65 Assembler for R6502 [1.42].                                     Page  132
---------------------------------- bank0.s -----------------------------------

d30e : 853e             [ 3] 	sta grl_y0
d310 : a63f             [ 3] 	ldx grl_x1
d312 : a440             [ 3] 	ldy grl_y1
d314 : 2016d2           [ 6] 	jsr gr_set_hires_cur
                             	
d317 : a900             [ 2] 	lda #0
d319 : 8543             [ 3] 	sta grl_xyyx				; Assume normal xy axis
                             
                             	; check if abs(dy)>abs(dx) if so need to swap xy
                             	; num_b = abs(x), num_b+1 = abs(dy)
d31b : 38               [ 2] 	sec
d31c : a53f             [ 3] 	lda grl_x1
d31e : e53d             [ 3] 	sbc grl_x0
d320 : b004             [ 3] 	bcs gr_line_skip_dx_neg
d322 : 49ff             [ 2] 	eor #0xff
d324 : 6901             [ 2] 	adc #1
d326 :                       gr_line_skip_dx_neg
d326 : 8541             [ 3] 	sta grl_dx
d328 : 38               [ 2] 	sec
d329 : a540             [ 3] 	lda grl_y1
d32b : e53e             [ 3] 	sbc grl_y0
d32d : b004             [ 3] 	bcs gr_line_skip_dy_neg
d32f : 49ff             [ 2] 	eor #0xff
d331 : 6901             [ 2] 	adc #1
d333 :                       gr_line_skip_dy_neg
d333 : 8542             [ 3] 	sta grl_dy
d335 : c541             [ 3] 	cmp grl_dx
d337 : 901a             [ 3] 	bcc gr_line_skip_xy_swap
                             	; swap xy axes and also dx and dy
d339 : a53d             [ 3] 	lda grl_x0					; swap x0 and y0
d33b : a63e             [ 3] 	ldx grl_y0
d33d : 853e             [ 3] 	sta grl_y0
d33f : 863d             [ 3] 	stx grl_x0
d341 : a53f             [ 3] 	lda grl_x1					; swap x1 and y1
d343 : a640             [ 3] 	ldx grl_y1
d345 : 8540             [ 3] 	sta grl_y1
d347 : 863f             [ 3] 	stx grl_x1
d349 : a541             [ 3] 	lda grl_dx					; swap dy and dx
d34b : a642             [ 3] 	ldx grl_dy
d34d : 8542             [ 3] 	sta grl_dy
d34f : 8641             [ 3] 	stx grl_dx
d351 : e643             [ 5] 	inc grl_xyyx				; set flag to Not Z to know abou
                             
d353 :                       gr_line_skip_xy_swap
                             	; assume going from left to right and top to bot
d353 : a901             [ 2] 	lda #1
d355 : a0ff             [ 2] 	ldy #255					; -1
d357 : 854a             [ 3] 	sta grl_sinx
d359 : 854d             [ 3] 	sta grl_siny
                             
                             	; check going right to left
d35b : a53d             [ 3] 	lda grl_x0
d35d : c53f             [ 3] 	cmp grl_x1
d35f : 9002             [ 3] 	bcc gr_line_skip_left
d361 : 844a             [ 3] 	sty grl_sinx				; make -1
d363 :                       gr_line_skip_left
                             	; check going bottom to top
d363 : a53e             [ 3] 	lda grl_y0
d365 : c540             [ 3] 	cmp grl_y1
d367 : 9002             [ 3] 	bcc gr_line_skip_y_up
d369 : 844d             [ 3] 	sty grl_siny				; make -1
                             
AS65 Assembler for R6502 [1.42].                                     Page  133
---------------------------------- bank0.s -----------------------------------

d36b :                       gr_line_skip_y_up
d36b : a541             [ 3] 	lda grl_dx
d36d : 0a               [ 2] 	asl a
d36e : 8544             [ 3] 	sta grl_2dx					; 2*dx (word)
d370 : a900             [ 2] 	lda #0
d372 : 8545             [ 3] 	sta grl_2dx+1
d374 : 2645             [ 5] 	rol grl_2dx+1
                             
d376 : a542             [ 3] 	lda grl_dy
d378 : 0a               [ 2] 	asl a
d379 : 8546             [ 3] 	sta grl_2dy					; 2*dy (word)
d37b : a900             [ 2] 	lda #0
d37d : 8547             [ 3] 	sta grl_2dy+1
d37f : 2647             [ 5] 	rol grl_2dy+1
                             
                             ;    p=2*dy-dx;					; p (word)
d381 : 38               [ 2] 	sec
d382 : a546             [ 3] 	lda grl_2dy
d384 : e541             [ 3] 	sbc grl_dx
d386 : 854b             [ 3] 	sta grl_p
d388 : a547             [ 3] 	lda grl_2dy+1
d38a : e900             [ 2] 	sbc #0
d38c : 854c             [ 3] 	sta grl_p+1
                             
                             ;   2*(dy-dx)					; num_tmp+2 = 2*(dy-dx)
d38e : 38               [ 2] 	sec
d38f : a546             [ 3] 	lda grl_2dy
d391 : e544             [ 3] 	sbc grl_2dx
d393 : 8548             [ 3] 	sta grl_2dxy
d395 : a547             [ 3] 	lda grl_2dy+1
d397 : e545             [ 3] 	sbc grl_2dx+1
d399 : 8549             [ 3] 	sta grl_2dxy+1
                             
d39b :                       gr_line_pixel
d39b : a63d             [ 3] 	ldx grl_x0
d39d : a43e             [ 3] 	ldy grl_y0
d39f : a543             [ 3] 	lda grl_xyyx				; Swapped?
d3a1 : f004             [ 3] 	beq gr_line_yx_skip
d3a3 : a63e             [ 3] 	ldx grl_y0
d3a5 : a43d             [ 3] 	ldy grl_x0
d3a7 :                       gr_line_yx_skip
d3a7 : 2021d2           [ 6] 	jsr gr_point				; Plot point x,y
                             
d3aa : a53d             [ 3] 	lda grl_x0					; Check if done
d3ac : c53f             [ 3] 	cmp grl_x1
d3ae : f032             [ 3] 	beq gr_line_done
                             
                             	; Increment x always
d3b0 : 18               [ 2] 	clc
d3b1 : a53d             [ 3] 	lda grl_x0
d3b3 : 654a             [ 3] 	adc grl_sinx
d3b5 : 853d             [ 3] 	sta grl_x0
                             
                             	; check sign of p
d3b7 : a54c             [ 3] 	lda grl_p+1
d3b9 : 3017             [ 3] 	bmi gr_line_neg_p
                             
                             	; if p >=0
                             
                             	; y=y+increment
d3bb : 18               [ 2] 	clc
d3bc : a53e             [ 3] 	lda grl_y0
AS65 Assembler for R6502 [1.42].                                     Page  134
---------------------------------- bank0.s -----------------------------------

d3be : 654d             [ 3] 	adc grl_siny
d3c0 : 853e             [ 3] 	sta grl_y0
                             
                             	; p=p+2*dy-2*dx
                             	_addZPWord grl_p,grl_2dxy
                             
d3cf : 4c9bd3           [ 3] 	jmp gr_line_pixel
                             
d3d2 :                       gr_line_neg_p
                             	; if p < 0
                             	; p=p+2*dy
                             	_addZPWord grl_p,grl_2dy
                             
                             
d3df : 4c9bd3           [ 3] 	jmp gr_line_pixel
d3e2 :                       gr_line_done
d3e2 : 60               [ 6] 	rts
                             
                             
                             ; Line drawing pseudo code
                             ;    while(x<x1)
                             ;    {
                             ;        putpixel(x,y);
                             ;        if(p>=0)
                             ;        {
                             ;            y=y+1;
                             ;            p=p+2*dy-2*dx;
                             ;        }
                             ;        else
                             ;        {
                             ;            p=p+2*dy;
                             ;        }
                             ;        x=x+1;
                             ;    }
                             
                             
                             ;* These tables are to speed up calculating the
                             ;* offset for plot commands
d3e3 :                       gr_offset_40lo
d3e3 : 00285078a0            	db lo(000*40), lo(001*40), lo(002*40), lo(003*40
d3e8 : c8f0184068            	db lo(005*40), lo(006*40), lo(007*40), lo(008*40
d3ed : 90b8e00830            	db lo(010*40), lo(011*40), lo(012*40), lo(013*40
d3f2 : 5880a8d0f8            	db lo(015*40), lo(016*40), lo(017*40), lo(018*40
d3f7 : 20487098c0            	db lo(020*40), lo(021*40), lo(022*40), lo(023*40
d3fc : e81038                	db lo(025*40), lo(026*40), lo(027*40)
d3ff :                       gr_offset_40hi
d3ff : 0000000000            	db hi(000*40), hi(001*40), hi(002*40), hi(003*40
d404 : 0000010101            	db hi(005*40), hi(006*40), hi(007*40), hi(008*40
d409 : 0101010202            	db hi(010*40), hi(011*40), hi(012*40), hi(013*40
d40e : 0202020202            	db hi(015*40), hi(016*40), hi(017*40), hi(018*40
d413 : 0303030303            	db hi(020*40), hi(021*40), hi(022*40), hi(023*40
d418 : 030404                	db hi(025*40), hi(026*40), hi(027*40)
                             
                             
                             ;* Character based sprites for text mode only
d41b :                       mod_sz_sprite_s
                             ;* Initialisation
d41b :                       gr_spr_init
d41b : a21f             [ 2] 	ldx #31							; Start at last sprite
d41d :                       gr_spr_init_loop
d41d : a9ff             [ 2] 	lda #-1							; Put -1 in the x coords
d41f : 9d00b4           [ 5] 	sta spr_curX,x
AS65 Assembler for R6502 [1.42].                                     Page  135
---------------------------------- bank0.s -----------------------------------

d422 : 9d20b4           [ 5] 	sta spr_newX,x
d425 : ca               [ 2] 	dex								; Next sprite
d426 : 10f5             [ 3] 	bpl gr_spr_init_loop			; Until all 32 sprites in
d428 : 60               [ 6] 	rts
                             
                             
                             ;* Erase all active sprites
d429 :                       gr_spr_erase
                             	; First restore background from sprites
                             	; that are active and new pos is different from 
d429 : a21f             [ 2] 	ldx #31							; Start at last sprite
d42b :                       gr_spr_erase_loop
d42b : bd00b4           [ 4] 	lda spr_curX,x					; Is sprite active?
d42e : 3007             [ 3] 	bmi gr_spr_erase_next
d430 : a8               [ 2] 	tay								; x pos in to Y
d431 :                       gr_spr_erase_do
d431 : bda0b4           [ 4] 	lda spr_bgnd,x					; Get the background
d434 : 207fd4           [ 6] 	jsr gr_spr_put					; And restore it
d437 :                       gr_spr_erase_next
d437 : ca               [ 2] 	dex
d438 : 10f1             [ 3] 	bpl gr_spr_erase_loop
d43a : 60               [ 6] 	rts
                             
                             ;* Get ready for new position
d43b :                       gr_spr_new
d43b : a21f             [ 2] 	ldx #31							; Start at last sprite
d43d :                       gr_spr_new_loop
d43d : bd60b4           [ 4] 	lda spr_newY,x					; Get new Y
d440 : 9d40b4           [ 5] 	sta spr_curY,x					; Update new->cur Y
d443 : a8               [ 2] 	tay								; Used for address calc.
d444 : bd20b4           [ 4] 	lda spr_newX,x					; Get new X
d447 : 9d00b4           [ 5] 	sta spr_curX,x					; Update new->cur X
d44a : 301d             [ 3] 	bmi gr_spr_new_next				; Is the new position act
d44c : 48               [ 3] 	pha 							; x pos saved for later
                             	; Calculate screen address
                             	; save as part of sprite data and in zp area
d44d : 18               [ 2] 	clc
d44e : b9e3d3           [ 4] 	lda gr_offset_40lo,y
d451 : 6980             [ 2] 	adc #lo(TEXTSCRN)
d453 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d455 : 9dc0b4           [ 5] 	sta spr_baseadrl,x
d458 : b9ffd3           [ 4] 	lda gr_offset_40hi,y
d45b : 69bb             [ 2] 	adc #hi(TEXTSCRN)
d45d : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
d45f : 9de0b4           [ 5] 	sta spr_baseadrh,x
d462 : 68               [ 4] 	pla								; Get x pos back in to Y reg
d463 : a8               [ 2] 	tay
d464 : b126             [ 5] 	lda (gr_scrngeom+gr_geom_tmp),y	; Get background
d466 : 9da0b4           [ 5] 	sta spr_bgnd,x					; And save this
d469 :                       gr_spr_new_next
d469 : ca               [ 2] 	dex
d46a : 10d1             [ 3] 	bpl gr_spr_new_loop
d46c : 60               [ 6] 	rts
                             
                             
                             ; Draw all active sprites
                             ; Active sprites are always drawn - 0 = highest p
d46d :                       gr_spr_draw
d46d : a21f             [ 2] 	ldx #31							; Start at last sprite
d46f :                       gr_spr_draw_loop
d46f : bd20b4           [ 4] 	lda spr_newX,x					; Is sprite active?
d472 : 3007             [ 3] 	bmi gr_spr_draw_next
AS65 Assembler for R6502 [1.42].                                     Page  136
---------------------------------- bank0.s -----------------------------------

d474 : a8               [ 2] 	tay								; X pos in to Y
d475 : bd80b4           [ 4] 	lda spr_chr,x					; Get the sprite char
d478 : 207fd4           [ 6] 	jsr gr_spr_put
d47b :                       gr_spr_draw_next
d47b : ca               [ 2] 	dex
d47c : 10f1             [ 3] 	bpl gr_spr_draw_loop
d47e : 60               [ 6] 	rts
                             
                             
                             ;* Common routine to put A to screen address
                             ;* Used for erase and draw of sprites
                             ;* X=index in to sprite table
                             ;* Y=X offset from screen pointer
d47f :                       gr_spr_put
d47f : 48               [ 3] 	pha
d480 : bdc0b4           [ 4] 	lda spr_baseadrl,x		; Get the screen pointer
d483 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp
d485 : bde0b4           [ 4] 	lda spr_baseadrh,x
d488 : 8527             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
d48a : 68               [ 4] 	pla								; Get back the char to
d48b : 9126             [ 5] 	sta (gr_scrngeom+gr_geom_tmp),y	; put on to scre
d48d : 60               [ 6] 	rts
                             
                             
                             ;* Update spr A with char X
d48e :                       gr_spr_char
d48e : a8               [ 2] 	tay
d48f : 8a               [ 2] 	txa
d490 : 9980b4           [ 5] 	sta spr_chr,y
d493 : 60               [ 6] 	rts
                             
                             ;* Locate what is at the location of sprite A, re
                             ;* C=1 if sprite it not active
d494 :                       gr_spr_hit
d494 : aa               [ 2] 	tax
d495 : bd00b4           [ 4] 	lda spr_curX,x
d498 : c980             [ 2] 	cmp #0x80						; If A>=0x80 then C=1
d49a : bda0b4           [ 4] 	lda spr_bgnd,x
d49d : 60               [ 6] 	rts
                             
                             ;* Update spr A with coords X,Y
d49e :                       gr_spr_pos
d49e : 8432             [ 3] 	sty tmp_alo
d4a0 : a8               [ 2] 	tay
d4a1 : 8a               [ 2] 	txa								; X coord still in X reg
d4a2 : 9920b4           [ 5] 	sta spr_newX,y
d4a5 : a532             [ 3] 	lda tmp_alo						; Y coord from temp
d4a7 : 9960b4           [ 5] 	sta spr_newY,y
d4aa : 60               [ 6] 	rts
                             
                             ;* Update all sprite positions from df_tmpptra, d
d4ab :                       gr_spr_multi_pos
d4ab : a03e             [ 2] 	ldy #62
d4ad : a21f             [ 2] 	ldx #31
d4af :                       gr_spr_multi_loop
d4af : b1a2             [ 5] 	lda (df_tmpptra),y
d4b1 : 9d20b4           [ 5] 	sta spr_newX,x
d4b4 : b1a4             [ 5] 	lda (df_tmpptrb),y
d4b6 : 9d60b4           [ 5] 	sta spr_newY,x
d4b9 : 88               [ 2] 	dey
d4ba : 88               [ 2] 	dey
d4bb : ca               [ 2] 	dex
AS65 Assembler for R6502 [1.42].                                     Page  137
---------------------------------- bank0.s -----------------------------------

d4bc : 10f1             [ 3] 	bpl gr_spr_multi_loop
d4be : 60               [ 6] 	rts
                             
d4bf :                       mod_sz_sprite_e
d4bf :                       mod_sz_graph_e
                             
                             ; Old version of point calculator - in case I nee
                             ;	; Calculate destination address
                             ;	lda #0
                             ;	sta tmp_ahi
                             ;
                             ;	tya				; Row number in A
                             ;	; Multiply 8
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	asl a
                             ;	rol tmp_ahi
                             ;	sta tmp_alo
                             ;
                             ;	; Multiply 32
                             ;	; Use partial result from m8
                             ;	lda tmp_ahi
                             ;	sta tmp_bhi
                             ;	lda tmp_alo
                             ;	; Just two more rotates to get m32
                             ;	asl a
                             ;	rol tmp_bhi
                             ;	asl a
                             ;	rol tmp_bhi
                             ;	sta tmp_blo
                             ;	; Add m8 and m32 for m40
                             ;	clc
                             ;	lda tmp_alo
                             ;	adc tmp_blo
                             ;	sta tmp_alo
                             ;	lda tmp_ahi
                             ;	adc tmp_bhi
                             ;	; Add high byte of screen address
                             ;	adc gr_scrngeom+vdp_scrn+1
                             ;	sta tmp_ahi
                             ;	; Dest offset in tmp_alo
                             ;
                             ;	; pixel x coord in to A
                             ;	; We dvide by 48 doing trial subtracts
                             ;	; This leaves Y with a number 0..5
                             ;	; And A has the remainder 0..47
                             ;	; Use these to look up byte column and mask
                             ;	; We don't do more than 5 trial subtracts
                             ;	; plus the table size is much smaller
                             ;	; Comprimise of space vs speed
                             ;	txa
                             ;	ldy #0				; Start at segment 0
                             ;	sec
                             ;gr_point_d48
                             ;	sbc #48
                             ;	iny
                             ;	bcs gr_point_d48				; Keep going until underflo
                             ;
                             ;	dey								; Adjust segment count
                             ;	adc #48							; Get remainder in A
AS65 Assembler for R6502 [1.42].                                     Page  138
---------------------------------- bank0.s -----------------------------------

                             ;	tax								; Put remainder in to X (0..47)
                             ;	lda gr_col_seg,y				; Get the start column of s
                             ;	clc
                             ;	adc gr_col_offset,x				; Add segment offset usi
                             ;	tay								; We have the byte column in Y
                             ;	sty tmp_bhi						; Save in tmp, also still in Y
                             ;	stx tmp_blo						; Save remainder 0..47
                             ;	rts
                             
                             ;gr_point_mask
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;	db 0x20,0x10,0x08,0x04,0x02,0x01
                             ;gr_col_offset
                             ;	db 0,0,0,0,0,0
                             ;	db 1,1,1,1,1,1
                             ;	db 2,2,2,2,2,2
                             ;	db 3,3,3,3,3,3
                             ;	db 4,4,4,4,4,4
                             ;	db 5,5,5,5,5,5
                             ;	db 6,6,6,6,6,6
                             ;	db 7,7,7,7,7,7
                             ;gr_col_seg
                             ;	db 0,8,16,24,32
                             
                             	include "monitor/cmd.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  CMD.S
                             ;*	A really simple monitor that needs to be impro
                             ;*	optimised.  Only has these commands;
                             ;*		dxxxx			Dump memory location xxxx
                             ;*						Press enter for more else stop
                             ;*		sxxxx [yy]		Set memory location xxxx with hex
                             ;*						bytes, respond with next location
                             ;*		q				Quit
                             ;*	Now you see why this needs optimising!
                             ;*
                             ;************************************************
                             
0095 =                       cmd_lo					= df_currdat
0096 =                       cmd_hi					= (df_currdat+1)
                             
                             	; ROM code
                             	code  
                             
d4bf :                       _mod_sz_cmd_s
                             
d4bf :                       command_line
                             
d4bf :                       cmd_ready
AS65 Assembler for R6502 [1.42].                                     Page  139
---------------------------------- bank0.s -----------------------------------

                             	_println_low msg_ready
                             
                             
d4c6 : 38               [ 2] 	sec							; Set carry flag = echo characters
d4c7 : 2041c4           [ 6] 	jsr io_read_line			; Get a command line
d4ca : a000             [ 2] 	ldy #0
d4cc : b139             [ 5] 	lda (buf_lo),y
d4ce : c971             [ 2] 	cmp #'q'
d4d0 : d001             [ 3] 	bne cmd_check_cmd
d4d2 : 60               [ 6] 	rts
d4d3 :                       cmd_check_cmd
d4d3 : 20e5d4           [ 6] 	jsr cmd_parse				; Find command and execute
d4d6 : b003             [ 3] 	bcs cmd_error				; Carry set = error condition
d4d8 : 4cbfd4           [ 3] 	jmp cmd_ready
                             
d4db :                       cmd_error
                             	_println_low msg_errmsg
                             
d4e2 : 4cbfd4           [ 3] 	jmp cmd_ready
                             
                             
                             ;****************************************
                             ;* cmd_parse
                             ;* Parse the command line in the io buffer
                             ;* Regs affected : 
                             ;****************************************
d4e5 :                       cmd_parse
d4e5 : c8               [ 2] 	iny						; Ready for next char
                             	
d4e6 :                       cmd_check_d
d4e6 : c964             [ 2] 	cmp #'d'				; Check for d
d4e8 : f030             [ 4] 	beq cmd_dumpmem
d4ea :                       cmd_check_s
d4ea : c973             [ 2] 	cmp #'s'				; Check for s
d4ec : f006             [ 3] 	beq cmd_setmem
                             
d4ee :                       cmd_not_found
d4ee : a901             [ 2] 	lda #CMD_ERR_NOTFOUND
d4f0 : 855e             [ 3] 	sta errno
d4f2 : 38               [ 2] 	sec
d4f3 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_setmem
                             ;* Set the memory at address AAAA to byte string
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;*          x = index to routine pointer
                             ;* Regs affected : A
                             ;****************************************
d4f4 :                       cmd_setmem
d4f4 : 20abd5           [ 6] 	jsr cmd_parse_word
d4f7 : b01f             [ 4] 	bcs cmd_setmem_err
d4f9 :                       cmd_setmem_byte
d4f9 : 208fd5           [ 6] 	jsr cmd_parse_byte
d4fc : b01a             [ 4] 	bcs cmd_setmem_err
d4fe : 2086d5           [ 6] 	jsr cmd_poke				; Poke A in to cmd_lo, hi
d501 : 207ad5           [ 6] 	jsr cmd_incmem
d504 : 20bdd5           [ 6] 	jsr cmd_parse_next_parm		; Try and find another 
d507 : 90f0             [ 4] 	bcc cmd_setmem_byte			; Process if found, else f
d509 : a596             [ 3] 	lda cmd_hi
d50b : 206fc1           [ 6] 	jsr utilPrintA
AS65 Assembler for R6502 [1.42].                                     Page  140
---------------------------------- bank0.s -----------------------------------

d50e : a595             [ 3] 	lda cmd_lo
d510 : 206fc1           [ 6] 	jsr utilPrintA
d513 : 2067c1           [ 6] 	jsr utilPrintCRLF
d516 : 18               [ 2] 	clc
d517 : 60               [ 6] 	rts
d518 :                       cmd_setmem_err
d518 : 38               [ 2] 	sec
d519 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* cmd_dumpmem
                             ;* Dump memory at address AAAA
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
d51a :                       cmd_dumpmem
d51a : 20abd5           [ 6] 	jsr cmd_parse_word			; Get address to dump
d51d : 9001             [ 3] 	bcc cmd_dumpmem_block
d51f : 60               [ 6] 	rts							; C is set
d520 :                       cmd_dumpmem_block
d520 : a596             [ 3] 	lda cmd_hi					; Show the address
d522 : 206fc1           [ 6] 	jsr utilPrintA
d525 : a595             [ 3] 	lda cmd_lo
d527 : 206fc1           [ 6] 	jsr utilPrintA
d52a : 205fc1           [ 6] 	jsr utilPrintSPC
                             	
d52d : a008             [ 2] 	ldy #8						; 8 Bytes per line
d52f :                       cmd_dumpmem_byte
d52f : 2081d5           [ 6] 	jsr cmd_peek
d532 : 206fc1           [ 6] 	jsr utilPrintA
d535 : 205fc1           [ 6] 	jsr utilPrintSPC
d538 : 207ad5           [ 6] 	jsr cmd_incmem
d53b : 88               [ 2] 	dey
d53c : d0f1             [ 3] 	bne cmd_dumpmem_byte
d53e :                       cmd_dumpmemASCII
d53e : 38               [ 2] 	sec							; Move pointer back to start
d53f : a595             [ 3] 	lda cmd_lo
d541 : e908             [ 2] 	sbc #8
d543 : 8595             [ 3] 	sta cmd_lo
d545 : a596             [ 3] 	lda cmd_hi
d547 : e900             [ 2] 	sbc #0
d549 : 8596             [ 3] 	sta cmd_hi
                             	
d54b : 205fc1           [ 6] 	jsr utilPrintSPC
d54e : a008             [ 2] 	ldy #8						; 8 Bytes per line
d550 :                       cmd_dumpmem_ascii
d550 : 2081d5           [ 6] 	jsr cmd_peek
d553 : a22e             [ 2] 	ldx #'.'					; Non-printable char
d555 : c920             [ 2] 	cmp #' '					; A<32 is unprintable
d557 : b001             [ 3] 	bcs cmd_dump_skip_ctrl
d559 : 8a               [ 2] 	txa							; Replace with dot
d55a :                       cmd_dump_skip_ctrl
d55a : c97f             [ 2] 	cmp #UTF_DEL				; >= DEL is unprintable
d55c : 9001             [ 3] 	bcc cmd_dump_skip_del
d55e : 8a               [ 2] 	txa							; Replace with dot
d55f :                       cmd_dump_skip_del	
d55f : 202cc4           [ 6] 	jsr io_put_ch
d562 : 207ad5           [ 6] 	jsr cmd_incmem
d565 : 88               [ 2] 	dey		
d566 : d0e8             [ 3] 	bne cmd_dumpmem_ascii		; Show 8 bytes
AS65 Assembler for R6502 [1.42].                                     Page  141
---------------------------------- bank0.s -----------------------------------

d568 : 38               [ 2] 	sec
d569 : 2029c4           [ 6] 	jsr io_get_ch				; Wait for key press
d56c : c90d             [ 2] 	cmp #UTF_CR		
d56e : d003             [ 3] 	bne cmd_dumpmemFin			; Any key but enter finishe
                             ;	jsr io_put_ch				; Do new line
d570 : 4c20d5           [ 3] 	jmp cmd_dumpmem_block
d573 :                       cmd_dumpmemFin
d573 : a90d             [ 2] 	lda #UTF_CR
d575 : 202cc4           [ 6] 	jsr io_put_ch
d578 : 18               [ 2] 	clc
d579 : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* cmd_incmem
                             ;* Increment pointer
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : cmd_lo, cmd_hi
                             ;* Regs affected : 
                             ;****************************************
d57a :                       cmd_incmem
                             	_incZPWord cmd_lo
                             
d580 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_peek
                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
d581 :                       cmd_peek
d581 : a200             [ 2] 	ldx #0
d583 : a195             [ 6] 	lda (cmd_lo,x)
d585 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_poke
                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi, A
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
d586 :                       cmd_poke
d586 : 8638             [ 3] 	stx tmp_d
d588 : a200             [ 2] 	ldx #0
d58a : 8195             [ 6] 	sta (cmd_lo,x)
d58c : a638             [ 3] 	ldx tmp_d
d58e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_byte
                             ;* Find 2 char hex byte
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = value
                             ;* Regs affected : A,Y
                             ;****************************************
d58f :                       cmd_parse_byte
d58f : 20bdd5           [ 6] 	jsr cmd_parse_next_parm	; Find the next paramete
d592 : b015             [ 3] 	bcs cmd_parse_byte_err
d594 : b139             [ 5] 	lda (buf_lo),y			; Get hi nibble of high byte
AS65 Assembler for R6502 [1.42].                                     Page  142
---------------------------------- bank0.s -----------------------------------

d596 : f011             [ 3] 	beq cmd_parse_byte_err	; If no char then error w
d598 : 48               [ 3] 	pha						; Save on stack
d599 : c8               [ 2] 	iny
d59a : b139             [ 5] 	lda (buf_lo),y			; Get lo nibble of high byte
d59c : f00a             [ 3] 	beq cmd_parse_byte_errp	; If no char then error 
d59e : aa               [ 2] 	tax						; Lo nibble goes to X
d59f : 68               [ 4] 	pla						; Restore hi nibble
d5a0 : 20a0c1           [ 6] 	jsr str_x_to_a			; Convert from hex to A
d5a3 : b004             [ 3] 	bcs cmd_parse_byte_err	; If error then stop
d5a5 : c8               [ 2] 	iny						; Point to next char
d5a6 : 18               [ 2] 	clc
d5a7 : 60               [ 6] 	rts						; A contains the byte
d5a8 :                       cmd_parse_byte_errp
d5a8 : 68               [ 4] 	pla
d5a9 :                       cmd_parse_byte_err
d5a9 : aa               [ 2] 	tax
d5aa : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_word
                             ;* Find 4 char hex word
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = hi, X = 
                             ;* Regs affected : A,X,Y
                             ;****************************************
d5ab :                       cmd_parse_word
d5ab : 208fd5           [ 6] 	jsr cmd_parse_byte			; Get hi byte of word
d5ae : b00b             [ 3] 	bcs cmd_word_err
d5b0 : 8596             [ 3] 	sta cmd_hi					; Save hi byte of word
d5b2 : 208fd5           [ 6] 	jsr cmd_parse_byte			; Get lo byte of word
d5b5 : b004             [ 3] 	bcs cmd_word_err
d5b7 : 8595             [ 3] 	sta cmd_lo
d5b9 : 18               [ 2] 	clc
d5ba : 60               [ 6] 	rts
d5bb :                       cmd_word_err
d5bb : 38               [ 2] 	sec
d5bc : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_next_parm
                             ;* Find next non-white space
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
d5bd :                       cmd_parse_next_parm
d5bd : 88               [ 2] 	dey
d5be :                       cmd_find_parm
d5be : c8               [ 2] 	iny
d5bf : b139             [ 5] 	lda (buf_lo),y
d5c1 : f005             [ 3] 	beq cmd_next_parm_err	; If z then no parms, fin 
d5c3 : c921             [ 2] 	cmp #' '+1				; Ignore space or less
d5c5 : f0f7             [ 3] 	beq cmd_find_parm
d5c7 : 18               [ 2] 	clc						; else ok, C is cleared
d5c8 :                       cmd_next_parm_err
d5c8 : 60               [ 6] 	rts
                             
                             	
d5c9 : 3e00                  msg_ready				db ">\x0"
d5cb : 3f0d00                msg_errmsg				db "?\xd\x0"
d5ce :                       _mod_sz_cmd_e
                             
AS65 Assembler for R6502 [1.42].                                     Page  143
---------------------------------- bank0.s -----------------------------------

                             	include "sound/sound.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  SOUND.S
                             ;*  Sound driver module - routines to access the 
                             ;*  This sound chip was found in a number of popu
                             ;*  in the early to mid 80s, including my first c
                             ;*  the Oric-1, as well as the MSX range.
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
d5ce :                       mod_sz_sound_s
                             
                             
                             ;****************************************
                             ;* snd_get_note
                             ;* Get a note from the music scale table
                             ;* Input : Octave in X, note in Y
                             ;*         Octave between 1 and 6
                             ;* Output : A,X = Value hi,lo
                             ;* Regs affected : X
                             ;****************************************
d5ce :                       snd_get_note
d5ce : 98               [ 2] 	tya
d5cf : 0a               [ 2] 	asl a
d5d0 : a8               [ 2] 	tay
                             	; Get note for octave 1
d5d1 : b901d6           [ 4] 	lda snd_music_tab,y
d5d4 : 8532             [ 3] 	sta tmp_alo
d5d6 : b902d6           [ 4] 	lda snd_music_tab+1,y
                             	
d5d9 :                       snd_get_note_oct
d5d9 : ca               [ 2] 	dex
d5da : f006             [ 3] 	beq snd_note_done
                             	; Divide freq by 2 each octave
d5dc : 4a               [ 2] 	lsr a
d5dd : 6632             [ 5] 	ror tmp_alo
d5df : 4cd9d5           [ 3] 	jmp snd_get_note_oct
d5e2 :                       snd_note_done
d5e2 : a632             [ 3] 	ldx tmp_alo
d5e4 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* init_snd
                             ;* Initialise sound - after cia 1 has been initia
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d5e5 :                       init_snd
d5e5 : a20f             [ 2] 	ldx #15
AS65 Assembler for R6502 [1.42].                                     Page  144
---------------------------------- bank0.s -----------------------------------

d5e7 :                       init_snd_regs
d5e7 : bdf1d5           [ 4] 	lda snd_init_tab,x
d5ea : 206ec0           [ 6] 	jsr snd_set				; Set X to A
d5ed : ca               [ 2] 	dex
d5ee : 10f7             [ 3] 	bpl init_snd_regs		; 16 regs
                             	
d5f0 : 60               [ 6] 	rts						; return from sub
                             
                             	; Register array initialisation values
                             	; Assuming 1Mhz input clock
d5f1 :                       snd_init_tab
d5f1 : 40                    	db 0x40				; R0 = Channel A Tone Low
d5f2 : 00                    	db 0x00				; R1 = Channel A Tone High
d5f3 : 00                    	db 0x00				; R2 = Channel B Tone Low
d5f4 : 01                    	db 0x01				; R3 = Channel B Tone High
d5f5 : 00                    	db 0x00				; R4 = Channel C Tone Low
d5f6 : 02                    	db 0x02				; R5 = Channel C Tone High
d5f7 : 00                    	db 0x00				; R6 = Noise period
d5f8 : 7e                    	db 0b01111110		; R7 = Control : IOB input, IOA o
d5f9 : 1f                    	db 0x1f				; R8 = Channel A Vol
d5fa : 1f                    	db 0x1f				; R9 = Channel B Vol
d5fb : 1f                    	db 0x1f				; R10 = Channel C Vol
d5fc : 00                    	db 0x00				; R11 = Envelope Period Low
d5fd : 03                    	db 0x03				; R12 = Envelope Period High
d5fe : 00                    	db 0b00000000		; R13 = Envelope Shape : 0000
d5ff : ff                    	db 0xff				; R14 = IO Port A - KB lines disabled
d600 : 00                    	db 0x00				; R15 = IO Port B ; Initialise to 0 (
                             
d601 :                       snd_music_tab
d601 : f20b                  	dw 3058				; C		0 (Octave 1 3058Hz)
d603 : 460b                  	dw 2886				; C#	1
d605 : a40a                  	dw 2724				; D		2
d607 : 0b0a                  	dw 2571				; D#	3
d609 : 7b09                  	dw 2427				; E		4
d60b : f308                  	dw 2291				; F		5
d60d : 7208                  	dw 2162				; F#	6
d60f : f907                  	dw 2041				; G		7
d611 : 8607                  	dw 1926				; G#	8
d613 : 1a07                  	dw 1818				; A		9
d615 : b406                  	dw 1716				; A#	10
d617 : 5406                  	dw 1620				; B		11
d619 : 0000                  	dw 0				; Null  12
                             
d61b :                       mod_sz_sound_e
                             
d61b :                       mod_sz_bios_e
d61b :                       mod_sz_language_s
                             	include "utils/intmath.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  INTMATH.S
                             ;*  Core module for integer maths supported by df
                             ;*  Now supports signed integers in 2s complement
                             ;*  Uses the intmath registers: num_a, num_b, num
                             ;*  Most inputs are through num_a and num_b, with
                             ;*  num_a
AS65 Assembler for R6502 [1.42].                                     Page  145
---------------------------------- bank0.s -----------------------------------

                             ;*  Operations: add, sub, swap, 8 bit mult, mult,
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* Add : A + B result in A
                             ;****************************************
                             ;int_add
                             ;	clc
                             ;	lda num_a
                             ;	adc num_b
                             ;	sta num_a
                             ;	lda num_a+1
                             ;	adc num_b+1
                             ;	sta num_a+1
                             ;	rts
                             	
                             ;****************************************
                             ;* Sub : A - B result in A
                             ;****************************************
                             ;int_sub
                             ;	sec
                             ;	lda num_a
                             ;	sbc num_b
                             ;	sta num_a
                             ;	lda num_a+1
                             ;	sbc num_b+1
                             ;	sta num_a+1
                             ;	rts
                             	
                             ;****************************************
                             ;* Swp : A <-> B 
                             ;****************************************
                             ;int_swp
                             ;	lda num_a
                             ;	ldx num_b
                             ;	sta num_b
                             ;	stx num_a
                             ;	lda num_a+1
                             ;	ldx num_b+1
                             ;	sta num_b+1
                             ;	stx num_a+1
                             ;	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;* B assumed to be an 8 bit quantity 
                             ;****************************************
d61b :                       int_fast_mult
                             	_cpyZPWord num_a,num_tmp
                             
d623 : a900             [ 2] 	lda #0
d625 : 853d             [ 3] 	sta num_a
d627 : 853e             [ 3] 	sta num_a+1
d629 : a008             [ 2] 	ldy #8
d62b :                       int_fast_mult_cycle
d62b : 4641             [ 5] 	lsr num_b
d62d : 900d             [ 3] 	bcc int_fast_mult_next
d62f : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page  146
---------------------------------- bank0.s -----------------------------------

d630 : a53d             [ 3] 	lda num_a
d632 : 6549             [ 3] 	adc num_tmp
d634 : 853d             [ 3] 	sta num_a
d636 : a53e             [ 3] 	lda num_a+1
d638 : 654a             [ 3] 	adc num_tmp+1
d63a : 853e             [ 3] 	sta num_a+1
d63c :                       int_fast_mult_next
d63c : 0649             [ 5] 	asl num_tmp
d63e : 264a             [ 5] 	rol num_tmp+1
d640 : 88               [ 2] 	dey
d641 : d0e8             [ 3] 	bne int_fast_mult_cycle
d643 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;****************************************
d644 :                       int_mult
                             	_cpyZPWord num_a,num_tmp
                             
d64c : a900             [ 2] 	lda #0
d64e : 853d             [ 3] 	sta num_a
d650 : 853e             [ 3] 	sta num_a+1
d652 : a010             [ 2] 	ldy #16
d654 :                       int_mult_cycle
d654 : 4642             [ 5] 	lsr num_b+1
d656 : 6641             [ 5] 	ror num_b
d658 : 900d             [ 3] 	bcc int_mult_next
d65a : 18               [ 2] 	clc
d65b : a53d             [ 3] 	lda num_a
d65d : 6549             [ 3] 	adc num_tmp
d65f : 853d             [ 3] 	sta num_a
d661 : a53e             [ 3] 	lda num_a+1
d663 : 654a             [ 3] 	adc num_tmp+1
d665 : 853e             [ 3] 	sta num_a+1
d667 :                       int_mult_next
d667 : 0649             [ 5] 	asl num_tmp
d669 : 264a             [ 5] 	rol num_tmp+1
d66b : 88               [ 2] 	dey
d66c : d0e6             [ 3] 	bne int_mult_cycle
d66e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Div : A / B result in A, remainder X
                             ;****************************************
d66f :                       int_div
                             	; adjust signs
d66f : a900             [ 2] 	lda #0
d671 : 8549             [ 3] 	sta num_tmp				; Assume all +ve
d673 : a53e             [ 3] 	lda num_a+1				; Check A hi
d675 : 100f             [ 3] 	bpl int_div_skip_negA
d677 : e649             [ 5] 	inc num_tmp				; Record sign flip
d679 : 38               [ 2] 	sec						; 2's complement A
d67a : a900             [ 2] 	lda #0					; by 0-A
d67c : e53d             [ 3] 	sbc num_a				; A is now +ve
d67e : 853d             [ 3] 	sta num_a
d680 : a900             [ 2] 	lda #0
d682 : e53e             [ 3] 	sbc num_a+1
d684 : 853e             [ 3] 	sta num_a+1	
d686 :                       int_div_skip_negA
d686 : a542             [ 3] 	lda num_b+1				; Check B hi
d688 : 100f             [ 3] 	bpl int_div_skip_negB
d68a : e649             [ 5] 	inc num_tmp				; Record sign flip
AS65 Assembler for R6502 [1.42].                                     Page  147
---------------------------------- bank0.s -----------------------------------

d68c : 38               [ 2] 	sec						; 2's complement B
d68d : a900             [ 2] 	lda #0					; by 0-B
d68f : e541             [ 3] 	sbc num_b				; B is now +ve
d691 : 8541             [ 3] 	sta num_b
d693 : a900             [ 2] 	lda #0
d695 : e542             [ 3] 	sbc num_b+1
d697 : 8542             [ 3] 	sta num_b+1
d699 :                       int_div_skip_negB			; num_tmp bit 0=1 for result 
                             	; x is the remainder
d699 : a900             [ 2] 	lda #0
d69b : 8545             [ 3] 	sta num_x
d69d : 8546             [ 3] 	sta num_x+1
                             	; 16 bit division
d69f : a010             [ 2] 	ldy #16
d6a1 :                       int_div_cycle
                             	; shift a left 1 bit
d6a1 : 063d             [ 5] 	asl num_a
d6a3 : 263e             [ 5] 	rol num_a+1
                             	; shift in to remainder
d6a5 : 2645             [ 5] 	rol num_x
d6a7 : 2646             [ 5] 	rol num_x+1
                             	; try and subtract b from remainder
d6a9 : 38               [ 2] 	sec
d6aa : a545             [ 3] 	lda num_x
d6ac : e541             [ 3] 	sbc num_b
d6ae : aa               [ 2] 	tax
d6af : a546             [ 3] 	lda num_x+1
d6b1 : e542             [ 3] 	sbc num_b+1
d6b3 : 9006             [ 3] 	bcc int_div_skip
                             	; so b did fit in to remainder, save it
d6b5 : 8645             [ 3] 	stx num_x
d6b7 : 8546             [ 3] 	sta num_x+1
d6b9 : e63d             [ 5] 	inc num_a
d6bb :                       int_div_skip
                             	; carry on for 16 bits
d6bb : 88               [ 2] 	dey
d6bc : d0e3             [ 3] 	bne int_div_cycle
                             	; result in a, remainder in x
                             	; check num_tmp bit 0
d6be : a549             [ 3] 	lda num_tmp
d6c0 : 2901             [ 2] 	and #1
d6c2 : f00d             [ 3] 	beq int_div_noflip
d6c4 : 38               [ 2] 	sec						; 2's complement A
d6c5 : a900             [ 2] 	lda #0					; by 0-A
d6c7 : e53d             [ 3] 	sbc num_a				; A is now +ve
d6c9 : 853d             [ 3] 	sta num_a
d6cb : a900             [ 2] 	lda #0
d6cd : e53e             [ 3] 	sbc num_a+1
d6cf : 853e             [ 3] 	sta num_a+1	
d6d1 :                       int_div_noflip
d6d1 : 60               [ 6] 	rts
                             	
                             
                             	include "dflat/dflat.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page  148
---------------------------------- bank0.s -----------------------------------

                             ;*  DFLAT.S
                             ;*  This is the main controller code file for dfl
                             ;*  This file includes all the required dflat sou
                             ;*  needed:
                             ;*  - error.s is the error handling module
                             ;*  - var.s is the variable handling module
                             ;*  - tokenise.s is the tokenisation module
                             ;*  - progedit.s is the program editing module
                             ;*  - runtime.s is the runtime module
                             ;*  - stack.s is the stack handling module
                             ;*  The above modules include further source file
                             ;*  needed.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d6d2 :                       mod_sz_dflat_s
                             
                             ;	include "dflat/error.s"  ** included in the mai
                             	include "dflat/var.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  VAR.S
                             ;*  This module handles all the variable manageme
                             ;*  When a new variable is detected during tokeni
                             ;*  is added to the variable tables.  Any subsequ
                             ;*  that variable is tokenised as an index in to 
                             ;*  table.  There are two variable tables:
                             ;*  Variable name table (VNT) keeps track of vari
                             ;*  Variable value table (VVT) maintains variable
                             ;*  including type, dimension (if array) and of c
                             ;*  actual values.  For an array, the value is a 
                             ;*  memory grabbed using the 'malloc' function (s
                             ;*  This approach to variable managemet is direct
                             ;*  Atari 8 bit.  The disadvantage is that during
                             ;*  session you may end up having a much larger v
                             ;*  table than you need.  Why?  Well because say 
                             ;*  a as a new variable, but then later change it
                             ;*  In this case a remains in the variable tables
                             ;*  only ever adds to the table!  However it is e
                             ;*  solved - when you save and then reload from n
                             ;*  program, the variable table is built up as th
                             ;*  is loaded.
                             ;*  The VNT grows DOWN from the top of free memor
                             ;*  the VVT growing UP from just below the VNT.
                             ;*	This means that the VVT for a variable will al
                             ;*	found in a fixed place in the VVT table and me
                             ;*	For the VNT (names) it grows from vvstart at l
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code  
AS65 Assembler for R6502 [1.42].                                     Page  149
---------------------------------- bank0.s -----------------------------------

                             
d6d2 :                       mod_sz_var_s
                             
                             
                             ;****************************************
                             ;* Find a variable
                             ;* CC if found, A has index
                             ;****************************************
d6d2 :                       df_var_find
                             	; start at the beginning of the vnt table
                             	; vars are stored in reverse order
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
                             	; start at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
d6e2 :                       df_var_match_vnt
                             	; If reached top of VVT then not found
d6e2 : a5a2             [ 3] 	lda df_tmpptra
d6e4 : c56e             [ 3] 	cmp df_vvtstrt
d6e6 : d006             [ 3] 	bne df_var_match_vnt_do
d6e8 : a5a3             [ 3] 	lda df_tmpptra+1
d6ea : c56f             [ 3] 	cmp df_vvtstrt+1
d6ec : f042             [ 4] 	beq df_var_find_no_vnt
d6ee :                       df_var_match_vnt_do
                             	; match each char in buffer with vnt
d6ee : a47d             [ 3] 	ldy df_linoff
d6f0 : a200             [ 2] 	ldx #0
d6f2 :                       df_var_match_vnt_sym
d6f2 : b90004           [ 4] 	lda df_linbuff,y
d6f5 : c1a4             [ 6] 	cmp (df_tmpptrb,x)
d6f7 : d017             [ 4] 	bne df_var_vnt_sym_nomatch
                             	; if single char match then increment
                             	; source and search
d6f9 : c8               [ 2] 	iny
                             	_incZPWord df_tmpptrb
                             
                             	; if more chars in vnt entry then continue
d700 : a1a4             [ 6] 	lda (df_tmpptrb,x)
d702 : d0ee             [ 4] 	bne df_var_match_vnt_sym
                             	; if no more chars in vnt entry but
                             	; but chars in buffer then try next vnt
d704 : b90004           [ 4] 	lda df_linbuff,y
                             	; check for valid alpha-numeric
d707 : 20b0d8           [ 6] 	jsr df_tk_isalphanum
                             	; if there is a valid alpha-num then no match
d70a : b004             [ 3] 	bcs df_var_vnt_sym_nomatch
                             	; else check type
d70c :                       df_var_check_type
                             	; if not alpha-num then check for type
                             	; string or int postfix didn't match with VNT
                             ;	cmp #'%'
                             ;	beq df_var_vnt_sym_nomatch
d70c : c924             [ 2] 	cmp #'$'
                             	; ok, all good got a match
d70e : d025             [ 3] 	bne df_var_find_true
d710 :                       df_var_vnt_sym_nomatch
                             	; find the zero terminator
d710 : a1a4             [ 6] 	lda (df_tmpptrb,x)
d712 : f009             [ 3] 	beq	df_var_vnt_entry_end
                             	_incZPWord df_tmpptrb
                             
AS65 Assembler for R6502 [1.42].                                     Page  150
---------------------------------- bank0.s -----------------------------------

d71a : 4c10d7           [ 3] 	jmp df_var_vnt_sym_nomatch
d71d :                       df_var_vnt_entry_end
                             	; skip over zero terminator
                             	_incZPWord df_tmpptrb
                             
                             	; update vvt address pointer
d723 : 18               [ 2] 	clc
d724 : a5a2             [ 3] 	lda df_tmpptra
d726 : 6908             [ 2] 	adc #8
d728 : 85a2             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
d72c : e6a3             [ 5] 	inc df_tmpptra+1
d72e : d0b2             [ 4] 	bne df_var_match_vnt		; Always - high byte is no
                             
                             	; if at end of vnt then no matches found
d730 :                       df_var_find_no_vnt
d730 : a900             [ 2] 	lda #0
d732 : aa               [ 2] 	tax
d733 : 38               [ 2] 	sec
d734 : 60               [ 6] 	rts
                             
d735 :                       df_var_find_true
                             	; Get slot address into x,a
d735 : a6a2             [ 3] 	ldx df_tmpptra
d737 : a5a3             [ 3] 	lda df_tmpptra+1
                             	
                             	; Consume characters found in source
d739 : 847d             [ 3] 	sty df_linoff
d73b : 18               [ 2] 	clc
d73c : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Insert a variable name in to vnt
                             ;* X = number of bytes to make room
                             ;* Space allocated is;
                             ;*	8 bytes for the new VVT entry
                             ;*  X bytes for the new VNT entry
                             ;* df_vntstrt is new var name entry
                             ;* df_vvtend is new vvt entry
                             ;****************************************
d73d :                       df_var_insert_space
                             	; *** REMEMBER TO DO A SPACE CHECK EVENTUALLY! *
                             
                             	; adjust down the VNT start by VVT size (for ext
                             	; put it in tmpptrb
d73d : 38               [ 2] 	sec
d73e : a56a             [ 3] 	lda df_vntstrt
d740 : e908             [ 2] 	sbc #DFVVT_SZ
d742 : 856a             [ 3] 	sta df_vntstrt
d744 : a56b             [ 3] 	lda df_vntstrt+1
d746 : e900             [ 2] 	sbc #0
d748 : 856b             [ 3] 	sta df_vntstrt+1
                             	
                             	; adjust VNT end by VVT size (for extra VVT entr
                             	; and put it in tmpptrc
d74a : 38               [ 2] 	sec
d74b : a56c             [ 3] 	lda df_vntend
d74d : e908             [ 2] 	sbc #DFVVT_SZ
d74f : 856c             [ 3] 	sta df_vntend
d751 : a56d             [ 3] 	lda df_vntend+1
AS65 Assembler for R6502 [1.42].                                     Page  151
---------------------------------- bank0.s -----------------------------------

d753 : e900             [ 2] 	sbc #0
d755 : 856d             [ 3] 	sta df_vntend+1
                             
                             	; Set copy point to new start of VNT
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             
                             	; Now move all bytes from old VNT (higher up) to
d75f :                       df_var_move_byte
                             	; When pointer = vntend then done
d75f : a5a2             [ 3] 	lda df_tmpptra
d761 : c56c             [ 3] 	cmp df_vntend
d763 : d006             [ 3] 	bne df_var_move_byte_do
d765 : a5a3             [ 3] 	lda df_tmpptra+1
d767 : c56d             [ 3] 	cmp df_vntend+1
d769 : f011             [ 3] 	beq df_var_move_byte_fin
d76b :                       df_var_move_byte_do
                             	; First the source byte VVT size higher in memor
d76b : a008             [ 2] 	ldy #DFVVT_SZ
d76d : b1a2             [ 5] 	lda (df_tmpptra),y
                             	; And copy to new position lower in memory
d76f : a000             [ 2] 	ldy #0
d771 : 91a2             [ 5] 	sta (df_tmpptra),y
                             	; Increment memory pointer
                             	_incZPWord df_tmpptra
                             
d779 : 4c5fd7           [ 3] 	jmp df_var_move_byte		; Always as C is not touch
d77c :                       df_var_move_byte_fin
                             	
                             	; Now subtract X bytes from VNT start to accommo
d77c : 8638             [ 3] 	stx tmp_d
d77e : 38               [ 2] 	sec
d77f : a56a             [ 3] 	lda df_vntstrt
d781 : e538             [ 3] 	sbc tmp_d
d783 : 856a             [ 3] 	sta df_vntstrt
d785 : a56b             [ 3] 	lda df_vntstrt+1
d787 : e900             [ 2] 	sbc #0
d789 : 856b             [ 3] 	sta df_vntstrt+1
                             
                             	; VVT end is the same as VNT end
                             	_cpyZPWord df_vntend,df_vvtend
                             
                             
                             	; Copy done increment variable count
d793 : e672             [ 5] 	inc df_varcnt
d795 : 18               [ 2] 	clc
d796 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* Iterate through a valid variable name
                             ;* starts with alpha, then any number of
                             ;* alphanums.
                             ;****************************************
d797 :                       df_var_countlen
                             	; count alpha nums
d797 : c8               [ 2] 	iny
d798 : e8               [ 2] 	inx
d799 : b90004           [ 4] 	lda df_linbuff,y
                             	; first char has to be alpha, rest can be alpha-
d79c : e000             [ 2] 	cpx #0
d79e : d006             [ 3] 	bne df_var_countlen_alphanum
AS65 Assembler for R6502 [1.42].                                     Page  152
---------------------------------- bank0.s -----------------------------------

d7a0 : 20a3d8           [ 6] 	jsr df_tk_isalpha
d7a3 : 4ca9d7           [ 3] 	jmp df_var_countlen_loop
d7a6 :                       df_var_countlen_alphanum
d7a6 : 20b0d8           [ 6] 	jsr df_tk_isalphanum
d7a9 :                       df_var_countlen_loop
d7a9 : b0ec             [ 3] 	bcs df_var_countlen
d7ab : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Analyse variable name
                             ;* Return type in A
                             ;* NOT C = It is a variable
                             ;* C = It is not a variable
                             ;* X = Length including pre-fixes
                             ;* Y = Offset to next char after var name
                             ;****************************************
d7ac :                       df_var_analyse
                             	; start at the current buffer position
d7ac : a47d             [ 3] 	ldy df_linoff
                             	
                             	; actual number of alpha nums = -1 to start
d7ae : a2ff             [ 2] 	ldx #-1
                             
                             	; Default type is INT
d7b0 : a901             [ 2] 	lda #DFVVT_INT
d7b2 : 85a2             [ 3] 	sta df_tmpptra
                             	
                             	; check for PROC prefix
d7b4 : b90004           [ 4] 	lda df_linbuff,y
d7b7 : c95f             [ 2] 	cmp #'_'
                             	; if it is not proc then get the name
d7b9 : d011             [ 3] 	bne df_var_not_proc
                             	; analyse for proc variable names
                             	; else set type to PROC
d7bb : a940             [ 2] 	lda #DFVVT_PROC
d7bd : 85a2             [ 3] 	sta df_tmpptra
d7bf : 2097d7           [ 6] 	jsr df_var_countlen
                             	; Length must be >=1
d7c2 : e001             [ 2] 	cpx #1
d7c4 : 9004             [ 3] 	bcc df_var_analyse_fatal_err
                             	; Next char has to be '('
d7c6 : c928             [ 2] 	cmp #'('
d7c8 : f022             [ 3] 	beq df_var_finalise_len
d7ca :                       df_var_analyse_fatal_err
                             	SWBRK DFERR_SYNTAX
                             
                             	; Analyse for non-proc variable names
d7cc :                       df_var_not_proc
                             	; go back on pos on index as loop always does in
d7cc : 88               [ 2] 	dey
d7cd : 2097d7           [ 6] 	jsr df_var_countlen
d7d0 : e000             [ 2] 	cpx #0
d7d2 : d002             [ 3] 	bne df_var_analyse_chk_post
                             	; if zero alphanums error but not fatal
d7d4 : 38               [ 2] 	sec
d7d5 : 60               [ 6] 	rts
                             	; check for post qualifiers e.g. $
d7d6 :                       df_var_analyse_chk_post
                             	; first see if the char is $
                             	; but cannot already have PROC prefix
                             ;	cmp #'%'
                             ;	bne df_var_analyse_chk_dollar
AS65 Assembler for R6502 [1.42].                                     Page  153
---------------------------------- bank0.s -----------------------------------

                             ; Set to INT type although it is the default alre
                             ;	lda #DFVVT_INT
                             ;	sta df_tmpptra
                             	; advance the buffer index
                             ;	iny
                             ;	bne df_var_analyse_chk_arry
d7d6 :                       df_var_analyse_chk_dollar
                             	; now see if the char is $
                             	; but cannot already have PROC prefix
d7d6 : c924             [ 2] 	cmp #'$'
d7d8 : d005             [ 3] 	bne df_var_analyse_chk_arry
                             	; Set to STRING type
d7da : a904             [ 2] 	lda #DFVVT_STR
d7dc : 85a2             [ 3] 	sta df_tmpptra
                             	; advance the buffer index
d7de : c8               [ 2] 	iny
d7df :                       df_var_analyse_chk_arry
                             	; Check for array type vs PROC
d7df : b90004           [ 4] 	lda df_linbuff,y
d7e2 : c95b             [ 2] 	cmp #'['
d7e4 : d006             [ 3] 	bne df_var_finalise_len
d7e6 : a5a2             [ 3] 	lda df_tmpptra
d7e8 : 0980             [ 2] 	ora #DFVVT_PTR
d7ea : 85a2             [ 3] 	sta df_tmpptra
d7ec :                       df_var_finalise_len
                             	; Ok got everything
                             	; calculate length from y
                             	; y is next char after var name
d7ec : 98               [ 2] 	tya
d7ed : 38               [ 2] 	sec
d7ee : e57d             [ 3] 	sbc df_linoff			; where we started
                             	; put len in X
d7f0 : aa               [ 2] 	tax
                             	; put type in A
d7f1 : a5a2             [ 3] 	lda df_tmpptra
d7f3 : 18               [ 2] 	clc
d7f4 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find or create a variable
                             ;* If found then type needs to match mask
                             ;* Not a fatal error because could be part
                             ;* of a trial of different parsing options
                             ;****************************************
d7f5 :                       df_var_findcreate
                             	; save mask
d7f5 : 48               [ 3] 	pha
d7f6 : 20d2d6           [ 6] 	jsr df_var_find
d7f9 : b013             [ 4] 	bcs df_var_findcreate_create
                             	; restore mask to check for 0 then push
d7fb : 68               [ 4] 	pla
d7fc : 48               [ 3] 	pha
                             	; don't check mask if zero
d7fd : f008             [ 4] 	beq df_var_findcreate_found
                             	; restore mask
d7ff : 68               [ 4] 	pla
d800 : a000             [ 2] 	ldy #DFVVT_TYPE
d802 : 31a2             [ 5] 	and (df_tmpptra),y
                             	; but if mask is non zero then this must be non 
d804 : f019             [ 3] 	beq df_var_findcreate_err
d806 : 48               [ 3] 	pha		; Dummy push to match the pla
d807 :                       df_var_findcreate_found
AS65 Assembler for R6502 [1.42].                                     Page  154
---------------------------------- bank0.s -----------------------------------

                             	; discard mask
d807 : 68               [ 4] 	pla	
                             	; put slot address in x,a
d808 : a6a2             [ 3] 	ldx df_tmpptra
d80a : a5a3             [ 3] 	lda df_tmpptra+1
d80c : 18               [ 2] 	clc
d80d : 60               [ 6] 	rts
                             	
                             	;* If no existing variable found, add one to VNT
d80e :                       df_var_findcreate_create
                             	; find type (A) and length (X)
d80e : 20acd7           [ 6] 	jsr df_var_analyse
                             	; keep A temporarily
d811 : 85a2             [ 3] 	sta df_tmpptra
                             	; if not a variable then return with C=1
d813 : b009             [ 3] 	bcs df_var_findcreate_errp
                             	; check if mask needs to be applied
d815 : 68               [ 4] 	pla
d816 : f009             [ 3] 	beq df_var_analyse_ok
                             	; else mask and check
d818 : 25a2             [ 3] 	and df_tmpptra
                             	; mask match is ok
d81a : d005             [ 3] 	bne df_var_analyse_ok
                             	; else return not found
d81c : f001             [ 3] 	beq df_var_findcreate_err
d81e :                       df_var_findcreate_errp
d81e : 68               [ 4] 	pla
d81f :                       df_var_findcreate_err
d81f : 38               [ 2] 	sec
d820 : 60               [ 6] 	rts
                             
d821 :                       df_var_analyse_ok
                             	; extra space for zero terminator
d821 : e8               [ 2] 	inx
                             	; save data in reverse order to when needed
                             	; by the initialise section x,a (var name sz, ty
                             	; insert space of X bytes
d822 : a5a2             [ 3] 	lda df_tmpptra
d824 : 48               [ 3] 	pha
d825 : 8a               [ 2] 	txa
d826 : 48               [ 3] 	pha
                             	
d827 : 203dd7           [ 6] 	jsr df_var_insert_space
d82a : 9002             [ 3] 	bcc df_var_initialise_var
                             	; error inserting space
                             	SWBRK DFERR_OK
                             
                             	
d82e :                       df_var_initialise_var
d82e : 68               [ 4] 	pla
d82f : 85a6             [ 3] 	sta df_tmpptrc				; var name size + 1
                             
d831 : 68               [ 4] 	pla							; type
d832 : a000             [ 2] 	ldy #DFVVT_TYPE
d834 : 9170             [ 5] 	sta (df_vvtend),y			; put type in vvt slot
d836 : a900             [ 2] 	lda #0						; zero the rest
d838 : a007             [ 2] 	ldy #7
d83a :                       df_var_zero_vnt
d83a : 9170             [ 5] 	sta (df_vvtend),y
d83c : 88               [ 2] 	dey
d83d : d0fb             [ 3] 	bne df_var_zero_vnt			; Don't zero out the type
                             
AS65 Assembler for R6502 [1.42].                                     Page  155
---------------------------------- bank0.s -----------------------------------

d83f : c6a6             [ 5] 	dec df_tmpptrc				; 1 less to copy variable name
                             
d841 : a67d             [ 3] 	ldx df_linoff				; Start at var name beginning, 
                             	; copy variable name to vnt slot
d843 :                       df_var_findcreate_copy
d843 : bd0004           [ 4] 	lda df_linbuff,x
d846 : 916a             [ 5] 	sta (df_vntstrt),y
d848 : e8               [ 2] 	inx
d849 : c8               [ 2] 	iny
d84a : c6a6             [ 5] 	dec df_tmpptrc
d84c : d0f5             [ 3] 	bne df_var_findcreate_copy
                             	; put in zero terminator
d84e : a900             [ 2] 	lda #0
d850 : 916a             [ 5] 	sta (df_vntstrt),y
                             
d852 : 867d             [ 3] 	stx df_linoff				; Update line pointer
                             
                             	; Return address of slot in X,A
d854 : a670             [ 3] 	ldx df_vvtend
d856 : a571             [ 3] 	lda df_vvtend+1
                             	
d858 : 18               [ 2] 	clc
d859 : 60               [ 6] 	rts
                             	
d85a :                       mod_sz_var_e
                             
                             	include "dflat/tokenise.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKENISE.S
                             ;*  Controlling module for tokenisation.  Basical
                             ;*  module is given a raw input buffer, which it 
                             ;*  attempt to tokenise fully.  Any syntax errors
                             ;*  thrown at the first point of detection.  If a
                             ;*  well, the parsed input will be in a tokenised
                             ;*  which can be executed in immediate mode or sa
                             ;*  line number order to memory.
                             ;*  dflat syntax is very simple - every statement
                             ;*  with a keyword.  The only exception is assign
                             ;*  procedure invocation - but even these scenari
                             ;*  tokenised so during runtime we just execute t
                             ;*  The raw buffer is consumed one byte at a time
                             ;*  tokenised buffer is written one byte at a tim
                             ;*  syntax means there is no need to undo reads o
                             ;*  or tokenised buffer.  The only refinement is 
                             ;*  allowed to peek a character in the raw buffer
                             ;*  consuming it.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d85a :                       mod_sz_tokenise_s
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  156
---------------------------------- bank0.s -----------------------------------

                             ;****************************************
                             ;* df_tk_peek_buf
                             ;* Return next char in A but no change to pointer
                             ;****************************************
d85a :                       df_tk_peek_buf
d85a : a47d             [ 3] 	ldy df_linoff
d85c : b90004           [ 4] 	lda df_linbuff,y
d85f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_get_buf
                             ;* Return next char in A and inc pointer
                             ;* Don't advance if null char found and Z=1
                             ;****************************************
d860 :                       df_tk_get_buf
d860 : a47d             [ 3] 	ldy df_linoff
d862 : b90004           [ 4] 	lda df_linbuff,y
d865 : f003             [ 3] 	beq df_tk_get_buf_null
d867 : c8               [ 2] 	iny
d868 : 847d             [ 3] 	sty df_linoff
d86a :                       df_tk_get_buf_null
d86a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_put_tok
                             ;* Put A in token buffer and inc pointer
                             ;* C=Clear on exit
                             ;****************************************
d86b :                       df_tk_put_tok
d86b : a47e             [ 3] 	ldy df_tokoff
d86d : 998004           [ 5] 	sta df_tokbuff,y
d870 : c8               [ 2] 	iny
d871 : 3004             [ 3] 	bmi df_tk_put_overflow
d873 : 847e             [ 3] 	sty df_tokoff
d875 : 18               [ 2] 	clc
d876 : 60               [ 6] 	rts
d877 :                       df_tk_put_overflow
                             	SWBRK DFERR_STRLONG
                             
                             
                             ;****************************************
                             ;* df_tk_isdigit
                             ;* Check char in A for number 0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
d879 :                       df_tk_isdigit
d879 : c93a             [ 2] 	cmp #'9'+1
d87b : b005             [ 3] 	bcs df_tk_isdigit_false
d87d : c930             [ 2] 	cmp #'0'
d87f : 9001             [ 3] 	bcc df_tk_isdigit_false
d881 : 60               [ 6] 	rts						; C must be 1
d882 :                       df_tk_isdigit_false
d882 : 18               [ 2] 	clc
d883 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isbin
                             ;* Check char in A for binary digit
                             ;* Return: CC = False, CS = True
                             ;****************************************
d884 :                       df_tk_isbin
d884 : c930             [ 2] 	cmp #'0'
AS65 Assembler for R6502 [1.42].                                     Page  157
---------------------------------- bank0.s -----------------------------------

d886 : f005             [ 3] 	beq df_tk_isbin_true	; C=1
d888 : c931             [ 2] 	cmp #'1'
d88a : f001             [ 3] 	beq df_tk_isbin_true	; C=1
d88c : 18               [ 2] 	clc
d88d :                       df_tk_isbin_true
d88d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_ishex
                             ;* Check char in A for number 0-9, A-F, a-f
                             ;* Return: CC = False, CS = True
                             ;****************************************
d88e :                       df_tk_ishex
d88e : 48               [ 3] 	pha
d88f : 2079d8           [ 6] 	jsr df_tk_isdigit
d892 : b00a             [ 3] 	bcs df_tk_ishex_truep
d894 : 0920             [ 2] 	ora #0x20
d896 : c967             [ 2] 	cmp #'f'+1
d898 : b006             [ 3] 	bcs df_tk_ishex_false
d89a : c961             [ 2] 	cmp #'a'
d89c : 9002             [ 3] 	bcc df_tk_ishex_false
                             	; C must be 1 here
d89e :                       df_tk_ishex_truep
d89e : 68               [ 4] 	pla
d89f : 60               [ 6] 	rts
d8a0 :                       df_tk_ishex_false
d8a0 :                       df_tk_isalpha_false
d8a0 : 18               [ 2] 	clc
d8a1 : 68               [ 4] 	pla
d8a2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalpha
                             ;* Check next char in A alpha a-z, A-Z
                             ;* Return: CC = False, CS = True
                             ;****************************************
d8a3 :                       df_tk_isalpha
d8a3 : 48               [ 3] 	pha
d8a4 : 0920             [ 2] 	ora #0x20					; Convert to lower case for checki
d8a6 : c97b             [ 2] 	cmp #'z'+1
d8a8 : b0f6             [ 3] 	bcs df_tk_isalpha_false
d8aa : c961             [ 2] 	cmp #'a'
d8ac : 90f2             [ 3] 	bcc df_tk_isalpha_false
                             	; C must be 1 here
d8ae : 68               [ 4] 	pla
d8af : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalphanum
                             ;* Check next char A for a-z,A-Z,0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
d8b0 :                       df_tk_isalphanum
d8b0 : 20a3d8           [ 6] 	jsr df_tk_isalpha
d8b3 : 90c4             [ 3] 	bcc df_tk_isdigit
d8b5 :                       df_tk_rts1				; branch to this RTS where possible
d8b5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isproc
                             ;* Check next char A for _
                             ;* Return: CC = False, CS = True
AS65 Assembler for R6502 [1.42].                                     Page  158
---------------------------------- bank0.s -----------------------------------

                             ;****************************************
d8b6 :                       df_tk_isproc
d8b6 : c95f             [ 2] 	cmp #'_'
d8b8 : f001             [ 3] 	beq df_tk_isproc_true	; C=1
d8ba : 18               [ 2] 	clc
d8bb :                       df_tk_isproc_true
d8bb : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
d8bc :                       df_tk_skip_ws
d8bc :                       df_tk_ws_loop1
d8bc : 205ad8           [ 6] 	jsr df_tk_peek_buf
d8bf : 20cbd8           [ 6] 	jsr df_tk_isws
d8c2 : 90f1             [ 3] 	bcc df_tk_rts1
d8c4 : e67d             [ 5] 	inc df_linoff
d8c6 : 206bd8           [ 6] 	jsr df_tk_put_tok
d8c9 : 90f1             [ 3] 	bcc df_tk_ws_loop1		; Always as put_tok clears C
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
                             ;df_tk_strip_ws
                             ;df_tk_sws_loop1
                             ;	jsr df_tk_peek_buf
                             ;	jsr df_tk_isws
                             ;	bcc df_tk_rts1
                             ;	inc df_linoff
                             ;	bcs df_tk_sws_loop1		; Always as C is not touch
                             
                             ;****************************************
                             ;* df_tk_isws
                             ;* Check char is ws (only space is counted)
                             ;* Return: CC = False, CS = True
                             ;****************************************
d8cb :                       df_tk_isws
d8cb : c920             [ 2] 	cmp #' '
d8cd : d001             [ 3] 	bne df_tk_isws_false
                             	; C must be 1 here
d8cf : 60               [ 6] 	rts
d8d0 :                       df_tk_isws_false
d8d0 :                       df_tk_expectok
d8d0 : 18               [ 2] 	clc
d8d1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* CC = found, CS = Error
                             ;****************************************
d8d2 :                       df_tk_expect
d8d2 : 48               [ 3] 	pha
                             	; skip ws
d8d3 : 20bcd8           [ 6] 	jsr df_tk_skip_ws
                             	; peek the buffer
d8d6 : 68               [ 4] 	pla
d8d7 : a47d             [ 3] 	ldy df_linoff
AS65 Assembler for R6502 [1.42].                                     Page  159
---------------------------------- bank0.s -----------------------------------

d8d9 : d90004           [ 4] 	cmp df_linbuff,y
                             	; if expected char then ok
d8dc : f0f2             [ 3] 	beq df_tk_expectok
                             	; else error
d8de :                       df_tk_num_err
d8de :                       df_tk_char_err
d8de : 38               [ 2] 	sec
d8df : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* CC = found, CS = Error
                             ;****************************************
d8e0 :                       df_tk_expect_tok
d8e0 : 20d2d8           [ 6] 	jsr df_tk_expect
d8e3 : b0d0             [ 3] 	bcs df_tk_rts1
d8e5 : 2060d8           [ 6] 	jsr df_tk_get_buf
d8e8 : 4c6bd8           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* FATAL IF NOT FOUND
                             ;****************************************
d8eb :                       df_tk_expect_tok_err
d8eb : 20e0d8           [ 6] 	jsr df_tk_expect_tok
d8ee : 90c5             [ 3] 	bcc df_tk_rts1
d8f0 :                       df_tk_expect_tok_fatal
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant number
                             ;****************************************
d8f2 :                       df_tk_num
                             	; X,A = address, linbuff must be on page boundar
d8f2 : 18               [ 2] 	clc
d8f3 : a900             [ 2] 	lda #lo(df_linbuff)
d8f5 : 657d             [ 3] 	adc df_linoff
d8f7 : aa               [ 2] 	tax
d8f8 : a904             [ 2] 	lda #hi(df_linbuff)
d8fa : 6900             [ 2] 	adc #0
d8fc : a000             [ 2] 	ldy #0				; any numeric format
d8fe : 20cdc1           [ 6] 	jsr con_n_to_a
d901 : b0db             [ 4] 	bcs df_tk_num_err
                             	; A = format
                             	; X = how many digits processed
                             	; Jump over that many chars
d903 : a8               [ 2] 	tay
d904 : 18               [ 2] 	clc
d905 : 8a               [ 2] 	txa
d906 : 657d             [ 3] 	adc df_linoff
d908 : 857d             [ 3] 	sta df_linoff
                             	; Now tokenise an integer (always 2 bytes, but t
d90a : 98               [ 2] 	tya
d90b : c901             [ 2] 	cmp #NUM_DEC
d90d : d004             [ 3] 	bne df_tk_num_hexbin
d90f : a909             [ 2] 	lda #DFTK_INTDEC	; decimal always an int
d911 : d016             [ 3] 	bne df_tk_num_put
AS65 Assembler for R6502 [1.42].                                     Page  160
---------------------------------- bank0.s -----------------------------------

d913 :                       df_tk_num_hexbin
d913 : c902             [ 2] 	cmp #NUM_HEX
d915 : d00a             [ 3] 	bne df_tk_num_bin
d917 : a906             [ 2] 	lda #DFTK_BYTHEX	; Assume BYT
d919 : e005             [ 2] 	cpx #5				; If >4 chars then INT
d91b : 900c             [ 3] 	bcc df_tk_num_put
d91d : a90a             [ 2] 	lda #DFTK_INTHEX
d91f : d008             [ 3] 	bne df_tk_num_put
d921 :                       df_tk_num_bin
d921 : a907             [ 2] 	lda #DFTK_BYTBIN	; Assume BYT
d923 : e00b             [ 2] 	cpx #11				; If >10 chars then INT
d925 : 9002             [ 3] 	bcc df_tk_num_put
d927 : a90b             [ 2] 	lda #DFTK_INTBIN
d929 :                       df_tk_num_put
d929 : 206bd8           [ 6] 	jsr df_tk_put_tok	; Save number type (DEC,HEX,BI
d92c : a53d             [ 3] 	lda num_a
d92e : 206bd8           [ 6] 	jsr df_tk_put_tok
d931 : a53e             [ 3] 	lda num_a+1
d933 : 4c6bd8           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise a constant char
                             ;****************************************
d936 :                       df_tk_char
                             	; skip the first quote
d936 : 2060d8           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
d939 : a900             [ 2] 	lda #DFTK_CHR
d93b : 206bd8           [ 6] 	jsr df_tk_put_tok
                             	; get the char value and save
d93e : 2060d8           [ 6] 	jsr df_tk_get_buf
d941 : 206bd8           [ 6] 	jsr df_tk_put_tok
                             	; always put two bytes in, even for a BYTE type
d944 : a900             [ 2] 	lda #0
d946 : 206bd8           [ 6] 	jsr df_tk_put_tok
                             	; next byte must be single quote
d949 : 2060d8           [ 6] 	jsr df_tk_get_buf
d94c : c927             [ 2] 	cmp #0x27
d94e : d08e             [ 4] 	bne df_tk_char_err
d950 : 18               [ 2] 	clc
d951 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Tokenise a constant string
                             ;****************************************
d952 :                       df_tk_str
                             	; skip the first quote
d952 : 2060d8           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
d955 : a910             [ 2] 	lda #DFTK_STRLIT
d957 : 206bd8           [ 6] 	jsr df_tk_put_tok
d95a :                       df_tk_str_ch
                             	; copy string chars in to token buffer
                             	; until another quote or end of line
d95a : 2060d8           [ 6] 	jsr df_tk_get_buf
d95d : c900             [ 2] 	cmp #0
d95f : f011             [ 3] 	beq df_tk_str_err
d961 : c922             [ 2] 	cmp #0x22
d963 : f006             [ 3] 	beq df_tk_str_don
d965 : 206bd8           [ 6] 	jsr df_tk_put_tok
d968 : 4c5ad9           [ 3] 	jmp df_tk_str_ch
d96b :                       df_tk_str_don
AS65 Assembler for R6502 [1.42].                                     Page  161
---------------------------------- bank0.s -----------------------------------

                             	; zero terminated strings
d96b : a900             [ 2] 	lda #0
d96d : 4c6bd8           [ 3] 	jmp df_tk_put_tok
d970 :                       df_tk_var_noarry
d970 : 18               [ 2] 	clc
d971 : 60               [ 6] 	rts
d972 :                       df_tk_str_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant (num, string, char)
                             ;****************************************
d974 :                       df_tk_const
d974 : 20bcd8           [ 6] 	jsr df_tk_skip_ws
                             	; Check what constant it is
d977 : 205ad8           [ 6] 	jsr df_tk_peek_buf
                             	; Minus symbol could be start of a number
d97a : c92d             [ 2] 	cmp #'-'
d97c : f005             [ 3] 	beq df_tk_const_try_num
d97e : 2079d8           [ 6] 	jsr df_tk_isdigit
d981 : 9003             [ 3] 	bcc df_tk_const_try_str
d983 :                       df_tk_const_try_num
d983 : 4cf2d8           [ 3] 	jmp df_tk_num
d986 :                       df_tk_const_try_str
                             	; check for double quote
d986 : c922             [ 2] 	cmp #0x22
d988 : d003             [ 3] 	bne df_tk_const_try_char
d98a : 4c52d9           [ 3] 	jmp df_tk_str
d98d :                       df_tk_const_try_char
                             	; check for single apostrophe
d98d : c927             [ 2] 	cmp #0x27
d98f : d003             [ 3] 	bne df_tk_const_err
d991 : 4c36d9           [ 3] 	jmp df_tk_char
d994 :                       df_tk_const_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a variable - A = mask
                             ;* Return : A = variable index
                             ;****************************************
d996 :                       df_tk_var
                             	; Find or create variable, address in X,A
d996 : 20f5d7           [ 6] 	jsr df_var_findcreate
d999 : 9001             [ 3] 	bcc df_tk_var_cont
d99b : 60               [ 6] 	rts
d99c :                       df_tk_var_cont
                             	; Save X,A for later
d99c : 48               [ 3] 	pha
d99d : 8a               [ 2] 	txa
d99e : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
d99f : a911             [ 2] 	lda #DFTK_VAR
d9a1 : 206bd8           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
d9a4 : 68               [ 4] 	pla
d9a5 : 206bd8           [ 6] 	jsr df_tk_put_tok
d9a8 : 68               [ 4] 	pla
d9a9 : 206bd8           [ 6] 	jsr df_tk_put_tok
                             	; count of any array indices
d9ac :                       df_tk_var_ck
AS65 Assembler for R6502 [1.42].                                     Page  162
---------------------------------- bank0.s -----------------------------------

                             	; check if array procesing needed
d9ac : a95b             [ 2] 	lda #'['
d9ae : 20e0d8           [ 6] 	jsr df_tk_expect_tok
d9b1 : b0bd             [ 3] 	bcs df_tk_var_noarry
                             	; process numeric expression in bracket
d9b3 : 4c5dda           [ 3] 	jmp df_tk_narry
                             
                             
                             ;****************************************
                             ;* Tokenise a parameter in proc definition
                             ;* Return : A = variable index
                             ;****************************************
d9b6 :                       df_tk_parm
                             	; if preceeding with non-local qualifier DFTK_VA
d9b6 : 205ad8           [ 6] 	jsr df_tk_peek_buf
d9b9 : c926             [ 2] 	cmp #DFTK_VARPARM
d9bb : d006             [ 3] 	bne df_tk_parm_skip_var
                             	; get the qualifier and put in token buffer
d9bd : 2060d8           [ 6] 	jsr df_tk_get_buf
d9c0 : 206bd8           [ 6] 	jsr df_tk_put_tok
d9c3 :                       df_tk_parm_skip_var
                             	; don't have a certain type of var
d9c3 : a900             [ 2] 	lda #0
d9c5 : 4c96d9           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* Tokenise a variable to localise
                             ;* Return : A,X = variable index
                             ;****************************************
d9c8 :                       df_tk_localvar
                             	; Find or create variable, index in A
d9c8 : 20f5d7           [ 6] 	jsr df_var_findcreate
d9cb : 9001             [ 3] 	bcc df_tk_localvar_cont
d9cd : 60               [ 6] 	rts
d9ce :                       df_tk_localvar_cont
                             	; Save variable address for later
d9ce : 48               [ 3] 	pha
d9cf : 8a               [ 2] 	txa
d9d0 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
d9d1 : a911             [ 2] 	lda #DFTK_VAR
d9d3 : 206bd8           [ 6] 	jsr df_tk_put_tok
                             	; Get variable index and put in token buffer
d9d6 : 68               [ 4] 	pla
d9d7 : 206bd8           [ 6] 	jsr df_tk_put_tok
d9da : 68               [ 4] 	pla
d9db : 4c6bd8           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise array variable
                             ;* Return : A = variable index
                             ;****************************************
d9de :                       df_tk_arrvar
                             	; Like a local var at first
d9de : 20c8d9           [ 6] 	jsr df_tk_localvar
                             	; but must be array
d9e1 : a95b             [ 2] 	lda #'['
d9e3 : 20ebd8           [ 6] 	jsr df_tk_expect_tok_err
                             	; process numeric expression in bracket
d9e6 : 4c5dda           [ 3] 	jmp df_tk_narry
                             
AS65 Assembler for R6502 [1.42].                                     Page  163
---------------------------------- bank0.s -----------------------------------

                             ;****************************************
                             ;* Tokenise call or def of proc
                             ;* Mode : A = 0 means def, else call
                             ;****************************************
d9e9 :                       df_tk_proc
d9e9 : 858c             [ 3] 	sta df_procmode
d9eb : 20bcd8           [ 6] 	jsr df_tk_skip_ws
                             	; Find or create proc, index in A
d9ee : a940             [ 2] 	lda #DFVVT_PROC
d9f0 : 20f5d7           [ 6] 	jsr df_var_findcreate
d9f3 : b066             [ 4] 	bcs df_tk_proc_err
                             
                             	; Save variable address for later
d9f5 : 868f             [ 3] 	stx df_procptr
d9f7 : 8590             [ 3] 	sta df_procptr+1
                             
                             	; Put PROC escape in token buffer
d9f9 : a912             [ 2] 	lda #DFTK_PROC
d9fb : 206bd8           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
d9fe : a58f             [ 3] 	lda df_procptr
da00 : 206bd8           [ 6] 	jsr df_tk_put_tok
da03 : a590             [ 3] 	lda df_procptr+1
da05 : 206bd8           [ 6] 	jsr df_tk_put_tok
                             
                             	; initially assume no args
da08 : a900             [ 2] 	lda #0
da0a : 858d             [ 3] 	sta df_procargs
                             
                             	; Must have an open bracket
da0c : a928             [ 2] 	lda #'('
da0e : 20ebd8           [ 6] 	jsr df_tk_expect_tok_err
                             	; if immediately followed by close bracket then 
da11 : 205ad8           [ 6] 	jsr df_tk_peek_buf
da14 : c929             [ 2] 	cmp #')'
da16 : f030             [ 3] 	beq df_tk_proc_noparm
                             	; else tokenise parm variables
da18 :                       df_tk_proc_parms
da18 : 20bcd8           [ 6] 	jsr df_tk_skip_ws
                             	; call appropriate routine for mode
da1b : a58c             [ 3] 	lda df_procmode
da1d : d006             [ 3] 	bne df_tk_proc_call
                             	; tokenise parameter variable in def mode
da1f : 20b6d9           [ 6] 	jsr df_tk_parm
da22 : 4c2eda           [ 3] 	jmp df_tk_proc_skip_call
da25 :                       df_tk_proc_call
                             	; tokenise expression in call mode
                             	;**CHECK**
da25 : a58d             [ 3] 	lda df_procargs	; procargs could be impacted ins
da27 : 48               [ 3] 	pha
da28 : 20ddda           [ 6] 	jsr df_tk_expression
da2b : 68               [ 4] 	pla
da2c : 858d             [ 3] 	sta df_procargs
da2e :                       df_tk_proc_skip_call
da2e : b02a             [ 3] 	bcs df_tk_proc_errp
                             	; increment number of args
da30 : e68d             [ 5] 	inc df_procargs
                             	; what is next non ws char
da32 : 20bcd8           [ 6] 	jsr df_tk_skip_ws
da35 : c92c             [ 2] 	cmp #','
da37 : f006             [ 3] 	beq df_tk_proc_comma
da39 : c929             [ 2] 	cmp #')'
AS65 Assembler for R6502 [1.42].                                     Page  164
---------------------------------- bank0.s -----------------------------------

da3b : d01d             [ 3] 	bne df_tk_proc_errp
da3d : f009             [ 3] 	beq df_tk_proc_noparm
                             	; comma found, more parms to process
da3f :                       df_tk_proc_comma
da3f : 2060d8           [ 6] 	jsr df_tk_get_buf
da42 : 206bd8           [ 6] 	jsr df_tk_put_tok
da45 : 4c18da           [ 3] 	jmp df_tk_proc_parms
da48 :                       df_tk_proc_noparm
                             	; consume the close bracket
da48 : 2060d8           [ 6] 	jsr df_tk_get_buf
da4b : 206bd8           [ 6] 	jsr df_tk_put_tok
                             
                             	; update arg count if def mode
da4e : a68c             [ 3] 	ldx df_procmode
da50 : d006             [ 3] 	bne df_tk_proc_skip_args
                             	; use address of proc
                             	; put arg count in dim2
da52 : a004             [ 2] 	ldy #DFVVT_DIM2
da54 : a58d             [ 3] 	lda df_procargs
da56 : 918f             [ 5] 	sta (df_procptr),y
da58 :                       df_tk_proc_skip_args
da58 : 18               [ 2] 	clc
da59 : 60               [ 6] 	rts
da5a :                       df_tk_proc_errp
da5a : 68               [ 4] 	pla
da5b :                       df_tk_proc_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse array index
                             ;****************************************
da5d :                       df_tk_narry
                             	; if array open bracket encountered
                             	; then tokenise a numeric expression
da5d : 20ddda           [ 6] 	jsr df_tk_expression
                             	; If a comma is next, then another expression
da60 : a92c             [ 2] 	lda #','
da62 : 20e0d8           [ 6] 	jsr df_tk_expect_tok
da65 : b003             [ 3] 	bcs df_tk_narry_end
da67 : 20ddda           [ 6] 	jsr df_tk_expression
da6a :                       df_tk_narry_end
                             	; after the second dimension, must be close sq b
da6a : a95d             [ 2] 	lda #']'
da6c : 4cebd8           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse bracket
                             ;****************************************
da6f :                       df_tk_nbrkt
                             	; if  open bracket encountered
                             	; then tokenise a numeric expression
da6f : 20ddda           [ 6] 	jsr df_tk_expression
da72 : a929             [ 2] 	lda #')'
da74 : 4cebd8           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse call to numeric proc
                             ;****************************************
da77 :                       df_tk_nterm_proc
                             	; call mode
da77 : a901             [ 2] 	lda #1
AS65 Assembler for R6502 [1.42].                                     Page  165
---------------------------------- bank0.s -----------------------------------

da79 : 4ce9d9           [ 3] 	jmp df_tk_proc
                             
                             ;****************************************
                             ;* Parse numeric term
                             ;****************************************
da7c :                       df_tk_nterm
                             	; skip any ws first, copying in to tokbuff
                             	; A containts the non-ws char
da7c : 20bcd8           [ 6] 	jsr df_tk_skip_ws
da7f : c900             [ 2] 	cmp #0
da81 : f004             [ 3] 	beq df_tk_nterm_done
da83 : c93a             [ 2] 	cmp #':'
da85 : d002             [ 3] 	bne df_tk_nterm_cont
da87 :                       df_tk_nterm_done
da87 :                       df_tk_nop_false
da87 : 38               [ 2] 	sec
da88 : 60               [ 6] 	rts
da89 :                       df_tk_nterm_cont
                             	; if open bracket then process it
da89 : c928             [ 2] 	cmp #'('
da8b : d009             [ 3] 	bne df_tk_nterm_tryfn
                             	; get the bracket and put in token buffer
da8d : 2060d8           [ 6] 	jsr df_tk_get_buf
da90 : 206bd8           [ 6] 	jsr df_tk_put_tok
                             	; go process the open bracket
da93 : 4c6fda           [ 3] 	jmp df_tk_nbrkt
da96 :                       df_tk_nterm_tryfn
da96 : 48               [ 3] 	pha
                             	; try decoding a built-in function
da97 : a902             [ 2] 	lda #DFTK_FN
da99 : 20d0db           [ 6] 	jsr df_tk_matchtok
da9c : b00e             [ 3] 	bcs df_tk_nterm_try_proc
                             	; pull old A in to Y but don't use
da9e : 68               [ 4] 	pla
da9f : a8               [ 2] 	tay
                             	; restore A and put the token with MSB set
daa0 : 8a               [ 2] 	txa
daa1 : 0980             [ 2] 	ora #0x80
daa3 : 206bd8           [ 6] 	jsr df_tk_put_tok
daa6 : 20a2db           [ 6] 	jsr df_tk_exec_parser
daa9 : b01b             [ 3] 	bcs df_tk_nterm_err
daab : 60               [ 6] 	rts
daac :                       df_tk_nterm_try_proc
daac : 68               [ 4] 	pla
                             	; if it's not a func then try proc
daad : 20b6d8           [ 6] 	jsr df_tk_isproc
dab0 : 9006             [ 3] 	bcc df_tk_nterm_try_var
dab2 : 2077da           [ 6] 	jsr df_tk_nterm_proc
dab5 : b00f             [ 3] 	bcs df_tk_nterm_err
dab7 : 60               [ 6] 	rts
dab8 :                       df_tk_nterm_try_var
                             	; Non-zero mask means var must be this type
dab8 : a900             [ 2] 	lda #0
daba : 2096d9           [ 6] 	jsr df_tk_var
dabd : b001             [ 3] 	bcs df_tk_nterm_try_const
dabf : 60               [ 6] 	rts
dac0 :                       df_tk_nterm_try_const
                             	; Try decoding a constant
dac0 : 2074d9           [ 6] 	jsr df_tk_const
dac3 : b001             [ 3] 	bcs df_tk_nterm_err
dac5 : 60               [ 6] 	rts
dac6 :                       df_tk_nterm_err
AS65 Assembler for R6502 [1.42].                                     Page  166
---------------------------------- bank0.s -----------------------------------

                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric operator
                             ;****************************************
dac8 :                       df_tk_nop
dac8 : 20bcd8           [ 6] 	jsr df_tk_skip_ws
dacb : c900             [ 2] 	cmp #0
dacd : f0b8             [ 3] 	beq df_tk_nop_false
                             	; must be an operator token for numeric
dacf : a90c             [ 2] 	lda #DFTK_OP | DFTK_STROP
dad1 : 20d0db           [ 6] 	jsr df_tk_matchtok
dad4 : b0b1             [ 3] 	bcs df_tk_nop_false
                             	; got a token
dad6 : 0980             [ 2] 	ora #DFTK_TOKEN
dad8 : 206bd8           [ 6] 	jsr df_tk_put_tok
dadb : 18               [ 2] 	clc
dadc : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Parse numeric expression
                             ;****************************************
dadd :                       df_tk_expression
                             	; Tokenise a numeric term
dadd : 207cda           [ 6] 	jsr df_tk_nterm
dae0 : b006             [ 3] 	bcs df_tk_expre_err
                             	; Try and tokenise a numeric operator
dae2 : 20c8da           [ 6] 	jsr df_tk_nop
                             	; If an operator was tokenised
                             	; then loop back for another term
dae5 : 90f6             [ 3] 	bcc df_tk_expression
                             	; If no operator was found then
                             	; expression is done
dae7 :                       df_tk_not_eos
dae7 : 18               [ 2] 	clc
dae8 :                       df_tk_expre_err
dae8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find expected token and parse expression
                             ;****************************************
dae9 :                       df_tk_tok_expression
dae9 : 20ebd8           [ 6] 	jsr df_tk_expect_tok_err
daec : 4cddda           [ 3] 	jmp df_tk_expression
                             
                             
                             ;****************************************
                             ;* Check end of statement
                             ;****************************************
daef :                       df_tk_isEOS
daef : a93a             [ 2] 	lda #':'
daf1 : 20e0d8           [ 6] 	jsr df_tk_expect_tok
daf4 : b0f1             [ 3] 	bcs df_tk_not_eos
                             	; this is the position of the next statement
daf6 : a57e             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
daf8 : a480             [ 3] 	ldy df_nxtstidx
dafa : 998004           [ 5] 	sta df_tokbuff,y
dafd : 38               [ 2] 	sec
dafe : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  167
---------------------------------- bank0.s -----------------------------------

                             
                             
                             ;****************************************
                             ;* Parse user defined proc
                             ;****************************************
daff :                       df_tk_parse_user_proc
                             	; put proc token in as a call
daff : a981             [ 2] 	lda #0x81
db01 : 206bd8           [ 6] 	jsr df_tk_put_tok
db04 : a901             [ 2] 	lda #1
db06 : 4ce9d9           [ 3] 	jmp df_tk_proc
                             
                             
                             ;****************************************
                             ;* Parse a command
                             ;* Do not fatal error if this fails
                             ;****************************************
db09 :                       df_tk_parse_command
                             	; only looking for keywords
db09 : a901             [ 2] 	lda #DFTK_KW
db0b : 20d0db           [ 6] 	jsr df_tk_matchtok
                             	; if didn't find regular keywords then try non f
db0e : b010             [ 3] 	bcs df_tk_parse_command_err
                             	; if match then store token in the line buffer
                             	; Set MSB
db10 : 0980             [ 2] 	ora #0x80
db12 : 206bd8           [ 6] 	jsr df_tk_put_tok
                             	; call the parser to do tokenise based on the st
db15 : a584             [ 3] 	lda df_symoff
db17 : 20a2db           [ 6] 	jsr df_tk_exec_parser
db1a : b004             [ 3] 	bcs df_tk_parse_command_err
                             	; [1] ignore white space but keep it
db1c : 20bcd8           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
db1f :                       df_tk_parse_command_done
db1f : 18               [ 2] 	clc
db20 :                       df_tk_parse_command_err
db20 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* lexer
                             ;****************************************
db21 :                       df_lexer_line
db21 : a900             [ 2] 	lda #0
                             	; start at the beginning of the line buffer
db23 : 857d             [ 3] 	sta df_linoff
                             	; start at the beginning of the tokenised buffer
db25 : 857e             [ 3] 	sta df_tokoff
                             	; set current line to the token buffer
db27 : a980             [ 2] 	lda #lo(df_tokbuff)
db29 : 8587             [ 3] 	sta df_currlin
db2b : a904             [ 2] 	lda #hi(df_tokbuff)
db2d : 8588             [ 3] 	sta df_currlin+1
                             	; Set the line length to 0
db2f : a900             [ 2] 	lda #0
db31 : 206bd8           [ 6] 	jsr df_tk_put_tok
                             
                             	; any leading white space, ignore and discard
                             ;	jsr df_tk_strip_ws
                             
                             	; if peek next character is a number then assume
AS65 Assembler for R6502 [1.42].                                     Page  168
---------------------------------- bank0.s -----------------------------------

                             	; else assume a statement
db34 : 205ad8           [ 6] 	jsr df_tk_peek_buf
db37 : 2079d8           [ 6] 	jsr df_tk_isdigit
db3a : 9006             [ 3] 	bcc df_lexer_skip_lnum
                             	; if line number then capture the line number an
db3c : 20b1db           [ 6] 	jsr df_tk_linenum
db3f : 4c4adb           [ 3] 	jmp df_tk_body
db42 :                       df_lexer_skip_lnum
                             	; if no line number then zero out the line numbe
                             	; line zero will indicate an immediate mode comm
db42 : a900             [ 2] 	lda #0
db44 : 206bd8           [ 6] 	jsr df_tk_put_tok				; Line num low byte
db47 : 206bd8           [ 6] 	jsr df_tk_put_tok				; Line num high byte
db4a :                       df_tk_body
                             	; Offset for next statement
db4a : a57e             [ 3] 	lda df_tokoff
db4c : 8580             [ 3] 	sta df_nxtstidx
db4e : a900             [ 2] 	lda #0
db50 : 206bd8           [ 6] 	jsr df_tk_put_tok				; Offset to next statement
db53 : 205ad8           [ 6] 	jsr df_tk_peek_buf				; Check for a single space
db56 : 20cbd8           [ 6] 	jsr df_tk_isws					; and first character
db59 : 9002             [ 3] 	bcc df_tk_skip_1_spc
db5b : e67d             [ 5] 	inc df_linoff					; Don't tokenise this single s
db5d :                       df_tk_skip_1_spc
                             	; [1] capture white space from line buffer in to
db5d : 20bcd8           [ 6] 	jsr df_tk_skip_ws
                             	; If next non ws is zero then this is an empty l
                             	; so return with length zero but line number fil
                             	; token buffer
db60 : c900             [ 2] 	cmp #0
db62 : f03a             [ 3] 	beq df_tk_line_empty
                             	; if next char is _ then parse a user defined pr
db64 : 20b6d8           [ 6] 	jsr df_tk_isproc
db67 : 9006             [ 3] 	bcc df_tk_try_command
db69 : 20ffda           [ 6] 	jsr df_tk_parse_user_proc
db6c : 4c80db           [ 3] 	jmp df_tk_done
db6f :                       df_tk_try_command
                             	; try a keyword
db6f : 2009db           [ 6] 	jsr df_tk_parse_command
db72 : b002             [ 3] 	bcs	df_tk_try_asm
db74 : 900a             [ 3] 	bcc df_tk_done
db76 :                       df_tk_try_asm
                             	; try an asm keyword
db76 : 2091f9           [ 6] 	jsr df_tk_asm_parse_command
db79 : 9005             [ 3] 	bcc df_tk_done
db7b :                       df_tk_try_assign
                             	; nothing but to try an assignment operation
db7b : 202edf           [ 6] 	jsr df_tk_assign
db7e : b020             [ 3] 	bcs	df_tk_parseerror
db80 :                       df_tk_done
                             	; put statement index stuff here in case of mult
                             	; check for : and if present tokenise plus updat
                             	; then go back to try and process another statem
db80 : 20efda           [ 6] 	jsr df_tk_isEOS
db83 : b0c5             [ 3] 	bcs df_tk_body
                             	; if not at end of line, then must be error
db85 : 205ad8           [ 6] 	jsr df_tk_peek_buf
db88 : c900             [ 2] 	cmp #0
db8a : d014             [ 3] 	bne df_tk_parseerror
                             	; this is the position of the next line
db8c : a57e             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
AS65 Assembler for R6502 [1.42].                                     Page  169
---------------------------------- bank0.s -----------------------------------

db8e : a480             [ 3] 	ldy df_nxtstidx
db90 : 998004           [ 5] 	sta df_tokbuff,y
                             	; Get line length
db93 : a47e             [ 3] 	ldy df_tokoff
                             	; ensure there is always a zero after the last t
                             	; A is already zero
db95 : a900             [ 2] 	lda #0
db97 : 998004           [ 5] 	sta df_tokbuff,y
                             	; save the line length
db9a : 98               [ 2] 	tya
db9b : 8d8004           [ 4] 	sta df_tokbuff
db9e :                       df_tk_line_empty
db9e : 18               [ 2] 	clc
db9f : 60               [ 6] 	rts
dba0 :                       df_tk_parseerror
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* df_tk_parsestatement
                             ;* Execute parse routine for this statement
                             ;* Input: df_tokoff is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
dba2 :                       df_tk_exec_parser
dba2 : 0a               [ 2] 	asl a
dba3 : aa               [ 2] 	tax
dba4 : bde5dd           [ 4] 	lda df_tk_tokenjmp,x
dba7 : 85a2             [ 3] 	sta df_tmpptra
dba9 : bde6dd           [ 4] 	lda df_tk_tokenjmp+1,x
dbac : 85a3             [ 3] 	sta df_tmpptra+1
dbae : 6ca200           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_linenum
                             ;* Tokenise line number
                             ;****************************************
dbb1 :                       df_tk_linenum
                             	; Convert line number to 16 bit number
                             	; Save the line number
                             	; Increment the buffer pointer
dbb1 : 18               [ 2] 	clc
dbb2 : a900             [ 2] 	lda #lo(df_linbuff)
dbb4 : 657d             [ 3] 	adc df_linoff
dbb6 : aa               [ 2] 	tax
dbb7 : a904             [ 2] 	lda #hi(df_linbuff)
dbb9 : 6900             [ 2] 	adc #0
dbbb : a001             [ 2] 	ldy #1			; Decimal format only
dbbd : 20cdc1           [ 6] 	jsr con_n_to_a
dbc0 : 18               [ 2] 	clc
dbc1 : 8a               [ 2] 	txa
dbc2 : 657d             [ 3] 	adc df_linoff
dbc4 : 857d             [ 3] 	sta df_linoff
                             	; Now save line number
dbc6 : a53d             [ 3] 	lda num_a
dbc8 : 206bd8           [ 6] 	jsr df_tk_put_tok
dbcb : a53e             [ 3] 	lda num_a+1
dbcd : 4c6bd8           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* df_tk_matchtok
AS65 Assembler for R6502 [1.42].                                     Page  170
---------------------------------- bank0.s -----------------------------------

                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;*			df_symoff is the symbol table index
                             ;****************************************
dbd0 :                       df_tk_matchtok
                             	; save the mask to check types against
dbd0 : 48               [ 3] 	pha
                             	; Start at token symbols beginning
dbd1 : a952             [ 2] 	lda #lo(df_tokensyms)
dbd3 : 8582             [ 3] 	sta df_symtab
dbd5 : a9dc             [ 2] 	lda #hi(df_tokensyms)
dbd7 : 8583             [ 3] 	sta df_symtab+1
dbd9 : a900             [ 2] 	lda #0
dbdb : 8584             [ 3] 	sta df_symoff
dbdd :                       df_tk_checknexttok
                             	; check this token type first
dbdd : 68               [ 4] 	pla
dbde : 48               [ 3] 	pha
dbdf : a684             [ 3] 	ldx df_symoff
dbe1 : 3dabde           [ 4] 	and df_tk_tokentype,x
dbe4 : f032             [ 4] 	beq df_tk_symnomatch
                             	; Special check for operator token
                             	; because of order of precedence fudge
                             	; ******FIX THIS ONE DAY!!!!!!******
                             	; if parm and token type = DFTK_OP then ok
                             	; if parm and token type <> DFTK_OP then not ok
dbe6 : bdabde           [ 4] 	lda df_tk_tokentype,x
dbe9 : 2908             [ 2] 	and #DFTK_OP
dbeb : f009             [ 3] 	beq df_tk_matchtok_skip_op
dbed : 68               [ 4] 	pla
dbee : 48               [ 3] 	pha
dbef : 2908             [ 2] 	and #DFTK_OP
dbf1 : 3dabde           [ 4] 	and df_tk_tokentype,x
dbf4 : f022             [ 4] 	beq df_tk_symnomatch
dbf6 :                       df_tk_matchtok_skip_op
                             	; From the line buffer current pointer
                             	; Check for a token match
dbf6 : a47d             [ 3] 	ldy df_linoff
dbf8 : a200             [ 2] 	ldx #0
dbfa :                       df_tk_checktokch
                             	; Get symtable char
                             	; and mask off MSB
dbfa : a182             [ 6] 	lda (df_symtab,x)
                             	; Save the value and mask off MSB
dbfc : 48               [ 3] 	pha
dbfd : 297f             [ 2] 	and #0x7f
                             	; Compare with current line buffer char
dbff : d90004           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
dc02 : d013             [ 3] 	bne df_tk_symnomatchp
                             	; If match and symbol has MSB then
                             	; all of the symbol matched
dc04 : 68               [ 4] 	pla
dc05 : 3033             [ 3] 	bmi df_tk_symfound
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
dc0d : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  171
---------------------------------- bank0.s -----------------------------------

                             	; If buffer is '.' then let this be a match
dc0e : b90004           [ 4] 	lda df_linbuff,y
dc11 : c92e             [ 2] 	cmp #'.'
dc13 : f025             [ 3] 	beq df_tk_symfound
dc15 : d0e3             [ 4] 	bne df_tk_checktokch	; branch always
dc17 :                       df_tk_symnomatchp
dc17 : 68               [ 4] 	pla
dc18 :                       df_tk_symnomatch
                             	; Increment symbol counter to next symbol
dc18 : e684             [ 5] 	inc df_symoff
dc1a :                       df_tk_symnextentry
dc1a : a200             [ 2] 	ldx #0
dc1c : a182             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is MSB
dc1e : 3009             [ 3] 	bmi  df_tk_foundsymend
                             	_incZPWord df_symtab
                             
dc26 : 4c1adc           [ 3] 	jmp df_tk_symnextentry
dc29 :                       df_tk_foundsymend
                             	; Increment char to point to new symbol
                             	; for matching with line buffer
                             	_incZPWord df_symtab
                             
                             	; If next char is not zero then
                             	; try and match with line buffer
dc2f : a182             [ 6] 	lda (df_symtab,x)
dc31 : d0aa             [ 4] 	bne df_tk_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; pop mask off stack
dc33 : 68               [ 4] 	pla
                             	; Zero symbol counter
dc34 : a900             [ 2] 	lda #0
dc36 : 8584             [ 3] 	sta df_symoff
                             	; Set C to indicate error (no match)
dc38 : 38               [ 2] 	sec
dc39 : 60               [ 6] 	rts
dc3a :                       df_tk_symfound
                             	; Full match with keyword in symtable but
                             	; if matching with something that ended in alpha
                             	; then check the next buffer char is not alphanu
                             	; as this could be part of a variable name
                             	; Point to next buffer char in any case
dc3a : c8               [ 2] 	iny
                             	; First mask off MSB
dc3b : 297f             [ 2] 	and #0x7f
                             	; Then check if alpha
dc3d : 20a3d8           [ 6] 	jsr df_tk_isalpha
                             	; if not alpha then we're definitely done
dc40 : 9008             [ 3] 	bcc df_tk_symfound_final
                             	; else check buffer
dc42 : b90004           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
dc45 : 20b0d8           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
dc48 : b0ce             [ 3] 	bcs df_tk_symnomatch
dc4a :                       df_tk_symfound_final
                             	; pop mask off stack
dc4a : 68               [ 4] 	pla
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
dc4b : 847d             [ 3] 	sty df_linoff
AS65 Assembler for R6502 [1.42].                                     Page  172
---------------------------------- bank0.s -----------------------------------

dc4d : a584             [ 3] 	lda df_symoff
dc4f : aa               [ 2] 	tax
dc50 : 18               [ 2] 	clc
dc51 : 60               [ 6] 	rts
                             
                             	include "dflat/tksymtab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TKSYMTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Statement Token table
                             ; keywords
dc52 :                       df_tokensyms
dc52 : 80                    	db	0x80						; Implicit numeric assign
dc53 : 80                    	db	0x80						; Implicit call procedure
dc54 : bb                    	db	";"+0x80					; Comment
dc55 : 7072696e746cee        	db	"printl",'n'+0x80			; println exprlist
dc5c : 7072696e7461f4        	db	"printa",'t'+0x80			; printat x,y,exprlist
dc63 : 7072696ef4            	db	"prin",'t'+0x80				; print exprlist
dc68 : 6465e6                	db	"de",'f'+0x80				; def_subname
dc6b : 656e646465e6          	db	"endde",'f'+0x80			; enddef
dc71 : 7265747572ee          	db	"retur",'n'+0x80			; return
dc77 : 61626f72f4            	db	"abor",'t'+0x80				; abort
dc7c : 6c6f6361ec            	db	"loca",'l'+0x80				; local varlist
dc81 : 6469ed                	db	"di",'m'+0x80				; dim varlist
dc84 : 7265706561f4          	db	"repea",'t'+0x80			; repeat
dc8a : 756e7469ec            	db	"unti", 'l'+0x80			; until condition
dc8f : 666ff2                	db	"fo",'r'+0x80				; for var=start,end,incremen
dc92 : 6e6578f4              	db	"nex",'t'+0x80				; next
dc96 : 7768696ce5            	db	"whil",'e'+0x80				; while condition
dc9b : 77656ee4              	db	"wen",'d'+0x80				; wend
dc9f : 69e6                  	db	"i",'f'+0x80				; if condition
dca1 : 656c73e5              	db	"els",'e'+0x80				; else
dca5 : 656e6469e6            	db	"endi",'f'+0x80				; endif
dcaa : 656c69e6              	db	"eli",'f'+0x80				; elif condition
dcae : 646174e1              	db	"dat",'a'+0x80				; data
dcb2 : ff                    	db	0xff						; assembler command (non standard p
dcb3 : 7275ee                	db	"ru",'n'+0x80				; run
dcb6 : 6c6973f4              	db	"lis",'t'+0x80				; list _proc-|*|line,line
dcba : 696e7075f4            	db	"inpu",'t'+0x80				; input var
AS65 Assembler for R6502 [1.42].                                     Page  173
---------------------------------- bank0.s -----------------------------------

dcbf : 746578f4              	db	"tex",'t'+0x80				; text
dcc3 : 706c6ff4              	db	"plo",'t'+0x80				; plot x,y,char|string
dcc7 : 637572736ff2          	db	"curso",'r'+0x80			; cursor n
dccd : 636cf3                	db	"cl",'s'+0x80				; cls
dcd0 : 706f6be5              	db	"pok",'e'+0x80				; poke a,v
dcd4 : 646f6be5              	db	"dok",'e'+0x80				; doke a,v
dcd8 : 736f756ee4            	db	"soun",'d'+0x80				; sound
dcdd : 6d757369e3            	db	"musi",'c'+0x80				; music
dce2 : 706c61f9              	db	"pla",'y'+0x80				; play
dce6 : 726561e4              	db	"rea",'d'+0x80				; read
dcea : 6e65f7                	db	"ne",'w'+0x80				; new
                             ;	db	"renu",'m'+0x80				; renum start,offset,incr
dced : 776169f4              	db	"wai",'t'+0x80				; wait delay
dcf1 : 72657365f4            	db	"rese",'t'+0x80				; reset var
dcf6 : 68697265f3            	db	"hire",'s'+0x80				; hires col
dcfb : 706f696ef4            	db	"poin",'t'+0x80				; point x,y
dd00 : 6c696ee5              	db	"lin",'e'+0x80				; line x0,y0,x1,y1
dd04 : 6c696e6574ef          	db	"linet",'o'+0x80			; lineto x1,y1
dd0a : 7069786d6f64e5        	db	"pixmod",'e'+0x80			; pixmode n
dd11 : 696eeb                	db	"in",'k'+0x80				; ink n
dd14 : 70617065f2            	db	"pape",'r'+0x80				; paper n
dd19 : 636972636ce5          	db	"circl",'e'+0x80			; circle x,y,r
                             ;	db	"hime",'m'+0x80				; himem addr
dd1f : 636de4                	db	"cm",'d'+0x80				; cmd [the monitor]
dd22 : 737072636861f2        	db	"sprcha",'r'+0x80			; sprchar sp,ch
dd29 : 737072706ff3          	db	"sprpo",'s'+0x80			; sprpos sp,x,y
dd2f : 7370727570e4          	db	"sprup",'d'+0x80			; sprupd
dd35 : 737072696e69f4        	db	"sprini",'t'+0x80			; sprinit
dd3c : 7370726d756c74e9      	db	"sprmult",'i'+0x80			; sprmulti x[],y[]
                             ;	db	"sav",'e'+0x80				; save "fname"
                             ;	db	"loa",'d'+0x80				; load "fname"
dd44 : 62736176e5            	db	"bsav",'e'+0x80				; bsave addr,len,"fname"
dd49 : 626c6f61e4            	db	"bloa",'d'+0x80				; bload addr,"fname"
dd4e : 74736176e5            	db	"tsav",'e'+0x80				; tsave "fname"
dd53 : 746c6f61e4            	db	"tloa",'d'+0x80				; tload "fname"
dd58 : 6465ec                	db 	"de",'l'+0x80				; del "fname"
dd5b : 6469f2                	db	"di",'r'+0x80				; dir
dd5e : 72656469ed            	db	"redi",'m'+0x80				; redim varlist
                             ; Functions
dd63 : 7065656ba8            	db	"peek",'('+0x80				; peek(x)
dd68 : 6465656ba8            	db	"deek",'('+0x80				; peek(x)
dd6d : 737469636ba8          	db	"stick",'('+0x80			; stick(x)
dd73 : 676574a8              	db	"get",'('+0x80				; get(x)
dd77 : 636872a8              	db	"chr",'('+0x80				; chr(x)
dd7b : 6c656674a8            	db	"left",'('+0x80				; left(x$,y)
dd80 : 7269676874a8          	db	"right",'('+0x80			; right(x$,y)
dd86 : 6d6964a8              	db	"mid",'('+0x80				; mid(x$,y)
dd8a : 6c656ea8              	db	"len",'('+0x80				; len(x$)
dd8e : 6d656da8              	db	"mem",'('+0x80				; mem(x)
dd92 : 7363726ea8            	db	"scrn",'('+0x80				; scrn(x,y)
dd97 : 726e64a8              	db	"rnd",'('+0x80				; rnd(x)
dd9b : 656c6170736564a8      	db	"elapsed",'('+0x80			; elapsed(var)
dda3 : 63616c6ca8            	db	"call",'('+0x80				; call(addr,A,X,Y)
dda8 : 686578a8              	db	"hex",'('+0x80				; hex(x)
ddac : 646563a8              	db	"dec",'('+0x80				; dec(x)
ddb0 : 617363a8              	db	"asc",'('+0x80				; asc(x$)
ddb4 : 76616ca8              	db	"val",'('+0x80				; val(x$)
ddb8 : 706978656ca8          	db	"pixel",'('+0x80			; pixel(x,y)
ddbe : 737072686974a8        	db	"sprhit",'('+0x80			; sprhit(sp)
ddc5 : 73676ea8              	db	"sgn",'('+0x80				; sgn(x)
ddc9 : 61646472a8            	db	"addr",'('+0x80				; addr(var)
                             ; Numeric operators, in priority
AS65 Assembler for R6502 [1.42].                                     Page  174
---------------------------------- bank0.s -----------------------------------

ddce : aa                    	db	'*'+0x80					; Multiply
ddcf : af                    	db 	'/'+0x80					; Divide
ddd0 : dc                    	db 	'\\'+0x80					; Modulus
ddd1 : 3cbc                  	db	'<','<'+0x80				; Shift left
ddd3 : 3ebe                  	db	'>','>'+0x80				; Shift right
ddd5 : ab                    	db 	'+'+0x80					; Add
ddd6 : ad                    	db	'-'+0x80					; Subtract
                             ; Bool and conditional operators, in priority
ddd7 : a6                    	db '&'+0x80						; AND
ddd8 : fc                    	db '|'+0x80						; OR
ddd9 : de                    	db '^'+0x80						; EOR
ddda : 3cbd                  	db "<",'='+0x80					; Less than or equal
dddc : 3ebd                  	db ">",'='+0x80					; Greater than or equal
ddde : 3cbe                  	db "<",'>'+0x80					; Not equal
dde0 : bc                    	db '<'+0x80						; Less than
dde1 : be                    	db '>'+0x80						; Greater than
dde2 : 3dbd                  	db "=",'='+0x80					; Equality (always last)
                             
dde4 : 00                    	db  0
                             
                             
                             	
                             	
                             	include "dflat/tkjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TKJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
dde5 :                       df_tk_tokenjmp
dde5 : 2edf                  	dw	df_tk_assign
dde7 : e5df                  	dw	df_tk_callproc
dde9 : 37df                  	dw	df_tk_comment
ddeb : 7edf                  	dw	df_tk_println
dded : 78df                  	dw	df_tk_printat
ddef : 7edf                  	dw	df_tk_print
ddf1 : c9df                  	dw	df_tk_def
ddf3 : 1ee0                  	dw	df_tk_enddef
ddf5 : 20e0                  	dw	df_tk_return
AS65 Assembler for R6502 [1.42].                                     Page  175
---------------------------------- bank0.s -----------------------------------

ddf7 : 1ee0                  	dw	df_tk_abort
ddf9 : badf                  	dw	df_tk_local
ddfb : abdf                  	dw	df_tk_dim
ddfd : 1ee0                  	dw	df_tk_repeat
ddff : 23e0                  	dw	df_tk_until
de01 : cedf                  	dw	df_tk_for
de03 : 1ee0                  	dw	df_tk_next
de05 : 23e0                  	dw	df_tk_while
de07 : 1ee0                  	dw	df_tk_wend
de09 : 23e0                  	dw	df_tk_if
de0b : 1ee0                  	dw	df_tk_else
de0d : 1ee0                  	dw	df_tk_endif
de0f : 23e0                  	dw	df_tk_elseif
de11 : 85df                  	dw	df_tk_data
de13 : 3df9                  	dw	df_trap_monitor
de15 : 1ee0                  	dw	df_tk_run
de17 : 67df                  	dw	df_tk_list
de19 : 93df                  	dw	df_tk_input
de1b : 1ee0                  	dw	df_tk_text
de1d : 33e0                  	dw	df_tk_plot
de1f : 23e0                  	dw	df_tk_cursor
de21 : 1ee0                  	dw	df_tk_cls
de23 : 29e0                  	dw	df_tk_poke
de25 : 29e0                  	dw	df_tk_doke
de27 : 33e0                  	dw	df_tk_sound
de29 : 3be0                  	dw	df_tk_music
de2b : 3be0                  	dw	df_tk_play
de2d : 9cdf                  	dw	df_tk_read
de2f : 1ee0                  	dw	df_tk_new
                             ;	dw	df_tk_renum
de31 : 23e0                  	dw	df_tk_wait
de33 : e7df                  	dw	df_tk_reset
de35 : 1ee0                  	dw	df_tk_hires
de37 : 29e0                  	dw	df_tk_point
de39 : 3be0                  	dw	df_tk_line
de3b : 29e0                  	dw	df_tk_lineto
de3d : 23e0                  	dw	df_tk_pixmode
de3f : 23e0                  	dw	df_tk_ink
de41 : 23e0                  	dw	df_tk_paper
de43 : 33e0                  	dw	df_tk_circle
                             ;	dw	df_tk_himem
de45 : 1ee0                  	dw	df_tk_monitor
de47 : 29e0                  	dw	df_tk_sprchar
de49 : 33e0                  	dw	df_tk_sprpos
de4b : 1ee0                  	dw	df_tk_sprupd
de4d : 1ee0                  	dw	df_tk_sprinit
de4f : 29e0                  	dw	df_tk_sprmulti
                             ;	dw	df_tk_save
                             ;	dw	df_tk_load
de51 : 33e0                  	dw	df_tk_bsave
de53 : 29e0                  	dw	df_tk_bload
de55 : 23e0                  	dw	df_tk_tsave
de57 : 23e0                  	dw	df_tk_tload
de59 : 23e0                  	dw	df_tk_delete
de5b : 1ee0                  	dw	df_tk_dir
de5d : abdf                  	dw	df_tk_redim
                             	
de5f : f1df                  	dw	df_tk_peek
de61 : f1df                  	dw	df_tk_deek
de63 : f6df                  	dw	df_tk_stick
de65 : f1df                  	dw	df_tk_get
de67 : f1df                  	dw	df_tk_chr
AS65 Assembler for R6502 [1.42].                                     Page  176
---------------------------------- bank0.s -----------------------------------

de69 : 04e0                  	dw	df_tk_left
de6b : 04e0                  	dw	df_tk_right
de6d : 0ae0                  	dw	df_tk_mid
de6f : f1df                  	dw	df_tk_len
de71 : f1df                  	dw	df_tk_mem
de73 : 04e0                  	dw	df_tk_scrn
de75 : f1df                  	dw	df_tk_rnd
de77 : fbdf                  	dw	df_tk_elapsed
de79 : 10e0                  	dw	df_tk_call
de7b : f1df                  	dw	df_tk_hex
de7d : f1df                  	dw	df_tk_dec
de7f : f1df                  	dw	df_tk_asc
de81 : f1df                  	dw	df_tk_val
de83 : 04e0                  	dw	df_tk_pixel
de85 : f1df                  	dw	df_tk_sprhit
de87 : f1df                  	dw	df_tk_sgn
de89 : fbdf                  	dw	df_tk_addr
                             	
de8b : 1ee0                  	dw	df_tk_mult
de8d : 1ee0                  	dw	df_tk_div
de8f : 1ee0                  	dw	df_tk_mod
de91 : 1ee0                  	dw	df_tk_asl
de93 : 1ee0                  	dw	df_tk_lsr
de95 : 1ee0                  	dw	df_tk_add
de97 : 1ee0                  	dw	df_tk_sub
                             	
de99 : 1ee0                  	dw	df_tk_and
de9b : 1ee0                  	dw	df_tk_or
de9d : 1ee0                  	dw	df_tk_eor
de9f : 1ee0                  	dw	df_tk_lte
dea1 : 1ee0                  	dw	df_tk_gte
dea3 : 1ee0                  	dw	df_tk_ne
dea5 : 1ee0                  	dw	df_tk_lt
dea7 : 1ee0                  	dw	df_tk_gt
dea9 : 1ee0                  	dw	df_tk_eq
                             
                             
                             	
                             	
                             	
                             	
                             	
                             	include "dflat/tktyptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
AS65 Assembler for R6502 [1.42].                                     Page  177
---------------------------------- bank0.s -----------------------------------

                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser type table (is it a keyword, function
                             ; In token order of df_tokensyms
deab :                       df_tk_tokentype
deab : 01                    	db	DFTK_KW
deac : 01                    	db	DFTK_KW
dead : 01                    	db	DFTK_KW
deae : 01                    	db	DFTK_KW
deaf : 01                    	db	DFTK_KW
deb0 : 01                    	db	DFTK_KW
deb1 : 01                    	db	DFTK_KW
deb2 : 01                    	db	DFTK_KW
deb3 : 01                    	db	DFTK_KW
deb4 : 01                    	db	DFTK_KW
deb5 : 01                    	db	DFTK_KW
deb6 : 01                    	db	DFTK_KW
deb7 : 01                    	db	DFTK_KW
deb8 : 01                    	db	DFTK_KW
deb9 : 01                    	db	DFTK_KW
deba : 01                    	db	DFTK_KW
debb : 01                    	db	DFTK_KW
debc : 01                    	db	DFTK_KW
debd : 01                    	db	DFTK_KW
debe : 01                    	db	DFTK_KW
debf : 01                    	db	DFTK_KW
dec0 : 01                    	db	DFTK_KW
dec1 : 01                    	db	DFTK_KW
dec2 : 01                    	db	DFTK_KW
dec3 : 01                    	db	DFTK_KW
dec4 : 01                    	db	DFTK_KW
dec5 : 01                    	db	DFTK_KW
dec6 : 01                    	db	DFTK_KW
dec7 : 01                    	db	DFTK_KW
dec8 : 01                    	db	DFTK_KW
dec9 : 01                    	db	DFTK_KW
deca : 01                    	db	DFTK_KW
decb : 01                    	db	DFTK_KW
decc : 01                    	db	DFTK_KW
decd : 01                    	db	DFTK_KW
dece : 01                    	db	DFTK_KW
decf : 01                    	db	DFTK_KW
ded0 : 01                    	db	DFTK_KW
                             ;	db	DFTK_KW
ded1 : 01                    	db	DFTK_KW
ded2 : 01                    	db	DFTK_KW
ded3 : 01                    	db	DFTK_KW
ded4 : 01                    	db	DFTK_KW
ded5 : 01                    	db	DFTK_KW
ded6 : 01                    	db	DFTK_KW
ded7 : 01                    	db	DFTK_KW
ded8 : 01                    	db	DFTK_KW
ded9 : 01                    	db	DFTK_KW
deda : 01                    	db	DFTK_KW
                             ;	db	DFTK_KW
dedb : 01                    	db	DFTK_KW
dedc : 01                    	db	DFTK_KW
AS65 Assembler for R6502 [1.42].                                     Page  178
---------------------------------- bank0.s -----------------------------------

dedd : 01                    	db	DFTK_KW
dede : 01                    	db	DFTK_KW
dedf : 01                    	db	DFTK_KW
dee0 : 01                    	db	DFTK_KW
                             ;	db	DFTK_KW
                             ;	db	DFTK_KW
dee1 : 01                    	db	DFTK_KW
dee2 : 01                    	db	DFTK_KW
dee3 : 01                    	db	DFTK_KW
dee4 : 01                    	db	DFTK_KW
dee5 : 01                    	db	DFTK_KW
dee6 : 01                    	db	DFTK_KW
dee7 : 01                    	db	DFTK_KW
                             
dee8 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
dee9 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
deea : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
deeb : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
deec : 42                    	db 	DFTK_FN | DFTK_STR
deed : 42                    	db 	DFTK_FN | DFTK_STR
deee : 42                    	db 	DFTK_FN | DFTK_STR
deef : 42                    	db 	DFTK_FN | DFTK_STR
def0 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
def1 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
def2 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
def3 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
def4 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
def5 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
def6 : 42                    	db 	DFTK_FN | DFTK_STR
def7 : 42                    	db 	DFTK_FN | DFTK_STR
def8 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
def9 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
defa : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
defb : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
defc : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
defd : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
                             	;* Operators add the order of precedence (0=high
defe : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
deff : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
df00 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
df01 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
df02 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
df03 : 3e                    	db 	DFTK_OP | DFTK_STROP | DFTK_INT | DFTK_BYT +
df04 : 3a                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 2
                             
df05 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
df06 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
df07 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
df08 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
df09 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
df0a : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
df0b : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
df0c : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
df0d : 3f                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 7
                             
                             
                             	
                             	
                             	
                             	
                             
                             	include "dflat/toksubs.s"
AS65 Assembler for R6502 [1.42].                                     Page  179
---------------------------------- bank0.s -----------------------------------

                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKSUBS.S
                             ;*  Module that implements the tokenisation of ke
                             ;*  When a line is being parsed, the index of the
                             ;*  found in the symbol table is used to call a r
                             ;*  here.  The job of a routine here is then to f
                             ;*  parse the raw input e.g. a command that takes
                             ;*  parameters, need to do what it needs to ident
                             ;*  Despite the number of keywords in dflat, this
                             ;*  anywhere near the size of rtsubs.s (the runti
                             ;*  equivalent of this) because there is so much 
                             ;*  synactically.
                             ;*  The tokenised output is put in to its own buf
                             ;*  if the whole input was tokenised successfully
                             ;*  dflat will either try and execute (if in imme
                             ;*  mode), or save it to program memory in line n
                             ;*  order.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
df0e :                       mod_sz_toksubs_s
                             
                             ;* General routine to tokenise a mandatory variab
df0e :                       df_tk_variable
df0e : 20bcd8           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
df11 : 205ad8           [ 6] 	jsr df_tk_peek_buf
df14 : 20a3d8           [ 6] 	jsr df_tk_isalpha
df17 : 9013             [ 3] 	bcc df_tk_error
df19 : a900             [ 2] 	lda #0
df1b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Parse assignment preamble
                             ;****************************************
df1c :                       df_tk_preassign
                             	; Put assignment token
                             	; assume its a numeric int for now
df1c : a980             [ 2] 	lda #0x80
df1e : 206bd8           [ 6] 	jsr df_tk_put_tok
                             	
                             	; first find or create a variable
df21 : 200edf           [ 6] 	jsr df_tk_variable
df24 : 2096d9           [ 6] 	jsr df_tk_var
                             	; next char should be '='
df27 : a93d             [ 2] 	lda #'='
df29 : 4cebd8           [ 3] 	jmp df_tk_expect_tok_err
                             
df2c :                       df_tk_error
                             	SWBRK DFERR_SYNTAX
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  180
---------------------------------- bank0.s -----------------------------------

                             ;****************************************
                             ;* Parse numeric assignment
                             ;****************************************
df2e :                       df_tk_assign
df2e : 201cdf           [ 6] 	jsr df_tk_preassign
                             	; tokenise an expression (int or byte)
df31 : 20ddda           [ 6] 	jsr df_tk_expression
df34 : b0f6             [ 3] 	bcs df_tk_error
df36 : 60               [ 6] 	rts
                             
df37 :                       df_tk_comment
                             	; copy all subsequent chars to token
df37 : 2060d8           [ 6] 	jsr df_tk_get_buf
df3a : f006             [ 3] 	beq df_tk_comment_done
df3c : 206bd8           [ 6] 	jsr df_tk_put_tok
df3f : 4c37df           [ 3] 	jmp df_tk_comment
df42 :                       df_tk_comment_done
df42 : 18               [ 2] 	clc
df43 : 60               [ 6] 	rts
                             
                             ; Utility to get procedure name with _
df44 :                       df_tk_listp_procname
                             	; try and find the first proc
df44 : a95f             [ 2] 	lda #'_'
df46 : 20e0d8           [ 6] 	jsr df_tk_expect_tok
df49 : b01a             [ 3] 	bcs df_tk_listp_procname_err
                             	; now get first alpha then all alphanum
df4b : 205ad8           [ 6] 	jsr df_tk_peek_buf
df4e : 20a3d8           [ 6] 	jsr df_tk_isalpha
df51 : 9012             [ 3] 	bcc df_tk_listp_procname_err
df53 :                       df_tk_listp_procname_ch
df53 : 205ad8           [ 6] 	jsr df_tk_peek_buf
df56 : 20b0d8           [ 6] 	jsr df_tk_isalphanum
df59 : 9009             [ 3] 	bcc df_tk_listp_procname_ok
df5b : 2060d8           [ 6] 	jsr df_tk_get_buf
df5e : 206bd8           [ 6] 	jsr df_tk_put_tok
df61 : 4c53df           [ 3] 	jmp df_tk_listp_procname_ch
df64 :                       df_tk_listp_procname_ok
df64 : 60               [ 6] 	rts		; C=0
df65 :                       df_tk_listp_procname_err
df65 : 38               [ 2] 	sec
df66 : 60               [ 6] 	rts
                             
                             ; list		: list whole program
                             ; list n	: list line n to end
                             ; list *	: list all procedures
                             ; list _proc: list _proc lines
df67 :                       df_tk_list
df67 : 2044df           [ 6] 	jsr df_tk_listp_procname
df6a : 900b             [ 3] 	bcc df_tk_list_done
                             	; if not found try '*' or normal list
df6c :                       df_tk_list_procs
                             	; first try for list symbol
df6c : a92a             [ 2] 	lda #'*'
df6e : 20e0d8           [ 6] 	jsr df_tk_expect_tok
df71 : 9004             [ 3] 	bcc df_tk_list_done
                             	; else normal line number or nothing
df73 :                       df_tk_list_line
                             	; tokenise an expression, nothing is ok
df73 : 20ddda           [ 6] 	jsr df_tk_expression
df76 : 18               [ 2] 	clc
df77 :                       df_tk_list_done
AS65 Assembler for R6502 [1.42].                                     Page  181
---------------------------------- bank0.s -----------------------------------

df77 : 60               [ 6] 	rts
                             
                             ; printat,print,println can have 0,1 or many expr
df78 :                       df_tk_printat
                             	; Must get 2 parms for x,y
df78 : 2029e0           [ 6] 	jsr df_tk_2parms
                             	; try getting more parms
df7b : 4c8adf           [ 3] 	jmp df_tk_expr_more
df7e :                       df_tk_println
df7e :                       df_tk_print
                             	; tokenise an expression ok if null
df7e : 20ddda           [ 6] 	jsr df_tk_expression
df81 : 9007             [ 3] 	bcc df_tk_expr_more
df83 :                       df_tk_print_done
df83 :                       df_tk_data_done
df83 : 18               [ 2] 	clc
df84 : 60               [ 6] 	rts
                             
                             ; these must have 1 or more expressions
df85 :                       df_tk_data
df85 :                       df_tk_asm_db
df85 :                       df_tk_asm_dw
df85 :                       df_tk_next_expr
                             	; tokenise an expression
df85 : 20ddda           [ 6] 	jsr df_tk_expression
df88 : b065             [ 3] 	bcs df_tk_error2
                             ; this loop keeps processing comma seprated exore
df8a :                       df_tk_expr_more
                             	; is there more to come?
df8a : a92c             [ 2] 	lda #','
df8c : 20e0d8           [ 6] 	jsr df_tk_expect_tok
df8f : b0f2             [ 3] 	bcs df_tk_data_done
df91 : 90f2             [ 3] 	bcc df_tk_next_expr
                             
df93 :                       df_tk_input
df93 : 20bcd8           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
df96 : 200edf           [ 6] 	jsr df_tk_variable
df99 : 4c96d9           [ 3] 	jmp df_tk_var
                             	
df9c :                       df_tk_read
                             	; tokenise a variable
df9c : 200edf           [ 6] 	jsr df_tk_variable
df9f : 2096d9           [ 6] 	jsr df_tk_var
                             	; if not at the end then keep going
dfa2 : a92c             [ 2] 	lda #','
dfa4 : 20e0d8           [ 6] 	jsr df_tk_expect_tok
dfa7 : 90f3             [ 3] 	bcc df_tk_read
dfa9 : 18               [ 2] 	clc
dfaa : 60               [ 6] 	rts
                             
dfab :                       df_tk_dim
dfab :                       df_tk_redim
                             	; tokenise a variable
dfab : 200edf           [ 6] 	jsr df_tk_variable
dfae : 20ded9           [ 6] 	jsr df_tk_arrvar
                             	; if not at the end then keep going
dfb1 : a92c             [ 2] 	lda #','
dfb3 : 20e0d8           [ 6] 	jsr df_tk_expect_tok
dfb6 : 90f3             [ 3] 	bcc df_tk_dim
dfb8 : 18               [ 2] 	clc
dfb9 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  182
---------------------------------- bank0.s -----------------------------------

                             
dfba :                       df_tk_local
                             	; tokenise a variable
dfba : 200edf           [ 6] 	jsr df_tk_variable
dfbd : 20c8d9           [ 6] 	jsr df_tk_localvar
                             	; if not at the end then keep going
dfc0 : a92c             [ 2] 	lda #','
dfc2 : 20e0d8           [ 6] 	jsr df_tk_expect_tok
dfc5 : 90f3             [ 3] 	bcc df_tk_local
dfc7 : 18               [ 2] 	clc
dfc8 : 60               [ 6] 	rts
                             
                             ; A = 0 : Def
                             ; A = 1 : Call
dfc9 :                       df_tk_def
dfc9 : a900             [ 2] 	lda #0
dfcb : 4ce9d9           [ 3] 	jmp df_tk_proc
                             
                             ; syntax : for a=1,10,1
dfce :                       df_tk_for
dfce : 20bcd8           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise the for variable
dfd1 : a901             [ 2] 	lda #DFVVT_INT
dfd3 : 2096d9           [ 6] 	jsr df_tk_var
                             
                             	; always expect '='
                             	; then starting value
dfd6 : a93d             [ 2] 	lda #'='
dfd8 : 20e9da           [ 6] 	jsr df_tk_tok_expression
                             	
                             	; always expect ',' separator
                             	; then ending value
dfdb : a92c             [ 2] 	lda #','
dfdd : 20e9da           [ 6] 	jsr df_tk_tok_expression
                             
                             	; always expect ',' separator
                             	; then step value
dfe0 : a92c             [ 2] 	lda #','
dfe2 : 4ce9da           [ 3] 	jmp df_tk_tok_expression
                             
                             	
                             ; call to proc should not occur by itself
dfe5 :                       df_tk_callproc
dfe5 : 38               [ 2] 	sec
dfe6 : 60               [ 6] 	rts
                             
                             ; timer reset expects an int variable only
dfe7 :                       df_tk_reset
dfe7 : 20bcd8           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
dfea : a901             [ 2] 	lda #DFVVT_INT
dfec : 4c96d9           [ 3] 	jmp df_tk_var
                             
dfef :                       df_tk_error2
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ; These functions expect 1 parmeter
dff1 :                       df_tk_len
dff1 :                       df_tk_chr
AS65 Assembler for R6502 [1.42].                                     Page  183
---------------------------------- bank0.s -----------------------------------

dff1 :                       df_tk_get
dff1 :                       df_tk_deek
dff1 :                       df_tk_vpeek
dff1 :                       df_tk_peek
dff1 :                       df_tk_mem
dff1 :                       df_tk_rnd
dff1 :                       df_tk_hex
dff1 :                       df_tk_dec
dff1 :                       df_tk_asc
dff1 :                       df_tk_val
dff1 :                       df_tk_sprhit
dff1 :                       df_tk_sgn
dff1 : 20ddda           [ 6] 	jsr df_tk_expression
dff4 : b0f9             [ 3] 	bcs df_tk_error2
dff6 :                       df_tk_closebrkt
dff6 :                       df_tk_stick				; This function needs no parms
dff6 : a929             [ 2] 	lda #')'
dff8 : 4cebd8           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ; These function expect a variable only
dffb :                       df_tk_addr
dffb :                       df_tk_elapsed
dffb : 200edf           [ 6] 	jsr df_tk_variable
dffe : 2096d9           [ 6] 	jsr df_tk_var
                             	; must have close braket
e001 : 4cf6df           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 2 parameters
e004 :                       df_tk_left
e004 :                       df_tk_right
e004 :                       df_tk_scrn
e004 :                       df_tk_pixel
e004 : 2029e0           [ 6] 	jsr df_tk_2parms
e007 : 4cf6df           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 3 parameters
e00a :                       df_tk_mid
e00a : 2033e0           [ 6] 	jsr df_tk_3parms
e00d : 4cf6df           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 4 parameters
e010 :                       df_tk_call
e010 : 2029e0           [ 6] 	jsr df_tk_2parms
e013 : a92c             [ 2] 	lda #','
e015 : 20ebd8           [ 6] 	jsr df_tk_expect_tok_err
e018 : 2029e0           [ 6] 	jsr df_tk_2parms
e01b : 4cf6df           [ 3] 	jmp df_tk_closebrkt
                             
                             ;all these commands require no parameters
e01e :                       df_tk_else
e01e :                       df_tk_endif
e01e :                       df_tk_enddef
e01e :                       df_tk_abort
e01e :                       df_tk_repeat
e01e :                       df_tk_next
e01e :                       df_tk_wend
e01e :                       df_tk_run
e01e :                       df_tk_cls
e01e :                       df_tk_new
e01e :                       df_tk_mult
e01e :                       df_tk_div
e01e :                       df_tk_mod
AS65 Assembler for R6502 [1.42].                                     Page  184
---------------------------------- bank0.s -----------------------------------

e01e :                       df_tk_asl
e01e :                       df_tk_lsr
e01e :                       df_tk_add
e01e :                       df_tk_sub
e01e :                       df_tk_and
e01e :                       df_tk_or
e01e :                       df_tk_eor
e01e :                       df_tk_lte
e01e :                       df_tk_lt
e01e :                       df_tk_gte
e01e :                       df_tk_gt
e01e :                       df_tk_ne
e01e :                       df_tk_eq
e01e :                       df_tk_monitor
e01e :                       df_tk_sprupd
e01e :                       df_tk_sprinit
e01e :                       df_tk_text
e01e :                       df_tk_hires
e01e :                       df_tk_dir
e01e : 18               [ 2] 	clc
e01f : 60               [ 6] 	rts
                             
                             ; 0 or 1 parameter special!
e020 :                       df_tk_return
e020 : 4cddda           [ 3] 	jmp df_tk_expression
                             
                             
                             ; These commands expect 1 parameter	
e023 :                       df_tk_while
e023 :                       df_tk_until
e023 :                       df_tk_if
e023 :                       df_tk_elseif
e023 :                       df_tk_wait
e023 :                       df_tk_cursor
e023 :                       df_tk_del
e023 :                       df_tk_chdir
e023 :                       df_tk_pixmode
e023 :                       df_tk_ink
e023 :                       df_tk_paper
                             ;df_tk_himem
e023 :                       df_tk_tload
e023 :                       df_tk_tsave
e023 :                       df_tk_delete
e023 :                       df_tk_asm_org
e023 :                       df_tk_asm_opt
e023 :                       df_tk_asm_ds
                             
                             	; first parm
e023 : 20ddda           [ 6] 	jsr df_tk_expression
e026 : b0c7             [ 4] 	bcs df_tk_error2
e028 : 60               [ 6] 	rts
                             
                             ; These commands expect 2 numeric parameters
e029 :                       df_tk_poke
e029 :                       df_tk_doke
e029 :                       df_tk_point
e029 :                       df_tk_sprchar
e029 :                       df_tk_sprmulti
                             ;df_tk_load
                             ;df_tk_save
e029 :                       df_tk_bload
e029 :                       df_tk_lineto
AS65 Assembler for R6502 [1.42].                                     Page  185
---------------------------------- bank0.s -----------------------------------

e029 :                       df_tk_2parms
                             	; first parm
e029 : 20ddda           [ 6] 	jsr df_tk_expression
e02c : b0c1             [ 4] 	bcs df_tk_error2
                             	; tokenise second parm
e02e : a92c             [ 2] 	lda #','
e030 : 4ce9da           [ 3] 	jmp df_tk_tok_expression
                             
                             ; these commands expect 3 numeric parameters
e033 :                       df_tk_hchar
e033 :                       df_tk_plot
e033 :                       df_tk_circle
e033 :                       df_tk_sound
e033 :                       df_tk_colour
e033 :                       df_tk_spritepos
                             ;df_tk_renum
e033 :                       df_tk_sprpos
e033 :                       df_tk_bsave
e033 :                       df_tk_3parms
e033 : 2029e0           [ 6] 	jsr df_tk_2parms
                             	; tokenise third parm
e036 : a92c             [ 2] 	lda #','
e038 : 4ce9da           [ 3] 	jmp df_tk_tok_expression
                             
                             ; these commands expect 4 numeric parameters
e03b :                       df_tk_play
e03b :                       df_tk_music
e03b :                       df_tk_line
e03b :                       df_tk_4parms
e03b : 2029e0           [ 6] 	jsr df_tk_2parms
e03e : a92c             [ 2] 	lda #','
e040 : 20ebd8           [ 6] 	jsr df_tk_expect_tok_err
e043 : 4c29e0           [ 3] 	jmp df_tk_2parms
                             
                             ;df_tk_fill
                             ;df_tk_5parms
                             ;	jsr df_tk_3parms
                             ;	lda #','
                             ;	jsr df_tk_expect_tok_err
                             ;	jmp df_tk_2parms
                             
e046 :                       mod_sz_toksubs_e
                             
                             
e046 :                       mod_sz_tokenise_e
                             
                             
                             
                             	include "dflat/progedit.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROGEDIT.S
                             ;*  dflat module to enable editing of a dflat pro
                             ;*  dflat bascially starts here - waiting for use
                             ;*  when a line is entered, if it is not preceede
                             ;*  line number it is tokenised and attempted to 
AS65 Assembler for R6502 [1.42].                                     Page  186
---------------------------------- bank0.s -----------------------------------

                             ;*  immediatly.  If it is preceeded by a line num
                             ;*  number is used to save the tokenised line in 
                             ;*  position in memory.
                             ;*  So this is just like a good old editing sessi
                             ;*  nearly any common flavour of 80s basic. Howev
                             ;*  tokenises everything except whitespace and st
                             ;*  constants - even when saving.  Unlike my trus
                             ;*  where I could type in any garbage and it woul
                             ;*  saved with the line number, dflat needs to be
                             ;*  tokenise the line.  So it's actually a bit mo
                             ;*  Atari 8 bit BASIC.
                             ;*
                             ;************************************************
                             
e046 :                       mod_sz_progedit_s
                             
                             ;****************************************
                             ;* df_pg_find_line
                             ;* Find a line number in X(L), A(H)
                             ;* Return X(L), A(H) of line, Y = Length
                             ;* C=1 Exact match not found, C=0 Exact Found
                             ;* If not exact match then next highest line addr
                             ;* Will be in X and A
                             ;****************************************
e046 :                       df_pg_find_line
e046 : 863d             [ 3] 	stx num_a
e048 : 853e             [ 3] 	sta num_a+1
e04a : a566             [ 3] 	lda df_prgstrt
e04c : 8549             [ 3] 	sta num_tmp
e04e : a567             [ 3] 	lda df_prgstrt+1
e050 : 854a             [ 3] 	sta num_tmp+1
e052 :                       df_pg_check_next_line
e052 : a549             [ 3] 	lda num_tmp
e054 : c568             [ 3] 	cmp df_prgend
e056 : d011             [ 3] 	bne df_pg_check_line
e058 : a54a             [ 3] 	lda num_tmp+1
e05a : c569             [ 3] 	cmp df_prgend+1
e05c : d00b             [ 3] 	bne df_pg_check_line
e05e :                       df_pr_line_gt_target	
                             	; End of program or line > target
                             	; X,A = address of finish
                             	; Load Y with the length
e05e : a200             [ 2] 	ldx #0
e060 : a149             [ 6] 	lda (num_tmp,x)
e062 : a8               [ 2] 	tay
e063 : a649             [ 3] 	ldx num_tmp
e065 : a54a             [ 3] 	lda num_tmp+1
e067 : 38               [ 2] 	sec
e068 : 60               [ 6] 	rts
e069 :                       df_pg_check_line
e069 : 38               [ 2] 	sec					; Do a trial subtract of
e06a : a001             [ 2] 	ldy #DFTK_LINNUM	; target - line
e06c : a53d             [ 3] 	lda num_a
e06e : f149             [ 5] 	sbc (num_tmp),y
e070 : 854b             [ 3] 	sta num_tmp+2		; Partial result of sbc
e072 : c8               [ 2] 	iny
e073 : a53e             [ 3] 	lda num_a+1
e075 : f149             [ 5] 	sbc (num_tmp),y
e077 : 054b             [ 3] 	ora num_tmp+2		; or with partial result for z ch
                             	; If C=0 then line > target (done)
e079 : 90e3             [ 3] 	bcc df_pr_line_gt_target
                             	; If partial result Z=0 then got an exact match
AS65 Assembler for R6502 [1.42].                                     Page  187
---------------------------------- bank0.s -----------------------------------

e07b : f00f             [ 3] 	beq df_pr_line_match
                             	; Else we go to next line
e07d : a200             [ 2] 	ldx #0
e07f : 18               [ 2] 	clc
e080 : a549             [ 3] 	lda num_tmp
e082 : 6149             [ 6] 	adc (num_tmp,x)
e084 : 8549             [ 3] 	sta num_tmp
e086 : 90ca             [ 3] 	bcc df_pg_check_next_line
e088 : e64a             [ 5] 	inc num_tmp+1
e08a : d0c6             [ 3] 	bne df_pg_check_next_line	; Always
e08c :                       df_pr_line_match
e08c : a200             [ 2] 	ldx #0
e08e : a149             [ 6] 	lda (num_tmp,x)
e090 : a8               [ 2] 	tay
e091 : a649             [ 3] 	ldx num_tmp
e093 : a54a             [ 3] 	lda num_tmp+1
e095 : 18               [ 2] 	clc
e096 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* df_pg_insert_block
                             ;* Insert a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
e097 :                       df_pg_insert_block
                             	; Inserting requires a block copy from
                             	; end of program space to the insert address
                             	
                             	; Save address as this is the lowest address
e097 : 863d             [ 3] 	stx num_a
e099 : 853e             [ 3] 	sta num_a+1
                             	; End of program space is the first byte to move
e09b : a568             [ 3] 	lda df_prgend
e09d : 8545             [ 3] 	sta num_x
e09f : a569             [ 3] 	lda df_prgend+1
e0a1 : 8546             [ 3] 	sta num_x+1	
e0a3 :                       df_pg_insert_byte
                             	; Move a byte from the current top
e0a3 : a200             [ 2] 	ldx #0
e0a5 : a145             [ 6] 	lda (num_x,x)
                             	; To the new top (+Y)
e0a7 : 9145             [ 5] 	sta (num_x),y
                             	; Compare current address with lowest
e0a9 : a545             [ 3] 	lda num_x
e0ab : c53d             [ 3] 	cmp num_a
e0ad : d012             [ 3] 	bne df_pg_insert_next_byte
e0af : a546             [ 3] 	lda num_x+1
e0b1 : c53e             [ 3] 	cmp num_a+1
e0b3 : d00c             [ 3] 	bne df_pg_insert_next_byte
                             	; Finished, update program end pointer
e0b5 : 18               [ 2] 	clc
e0b6 : 98               [ 2] 	tya
e0b7 : 6568             [ 3] 	adc df_prgend
e0b9 : 8568             [ 3] 	sta df_prgend
                             	_bcc 2
                             
e0bd : e669             [ 5] 	inc df_prgend+1
e0bf : 18               [ 2] 	clc
e0c0 : 60               [ 6] 	rts	; C=0
e0c1 :                       df_pg_insert_next_byte
                             	; Decrement current address (trashes A)
AS65 Assembler for R6502 [1.42].                                     Page  188
---------------------------------- bank0.s -----------------------------------

                             	_decZPWordA num_x
                             
e0c9 : 4ca3e0           [ 3] 	jmp df_pg_insert_byte
                             
                             ;****************************************
                             ;* df_pg_delete_block
                             ;* Delete a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
e0cc :                       df_pg_delete_block
                             	; Deleting requires a block copy from
                             	; deletion address to end of program
                             	
                             	; Save address as this is the start address
e0cc : 863d             [ 3] 	stx num_a
e0ce : 853e             [ 3] 	sta num_a+1
e0d0 : a200             [ 2] 	ldx #0	; No indirect indexing
e0d2 :                       df_pg_delete_byte
                             	; Move a byte from current+Y
e0d2 : b13d             [ 5] 	lda (num_a),y
                             	; Down to current (x=0)
e0d4 : 813d             [ 6] 	sta (num_a,x)
                             	; Compare current address with lowest
e0d6 : a53d             [ 3] 	lda num_a
e0d8 : c568             [ 3] 	cmp df_prgend
e0da : d017             [ 3] 	bne df_pg_delete_next_byte
e0dc : a53e             [ 3] 	lda num_a+1
e0de : c569             [ 3] 	cmp df_prgend+1
e0e0 : d011             [ 3] 	bne df_pg_delete_next_byte
                             	; Finished, update program end pointer
e0e2 : 843d             [ 3] 	sty num_a
e0e4 : 38               [ 2] 	sec
e0e5 : a568             [ 3] 	lda df_prgend
e0e7 : e53d             [ 3] 	sbc num_a
e0e9 : 8568             [ 3] 	sta df_prgend
e0eb : a569             [ 3] 	lda df_prgend+1
e0ed : e900             [ 2] 	sbc #0
e0ef : 8569             [ 3] 	sta df_prgend+1
e0f1 : 18               [ 2] 	clc
e0f2 : 60               [ 6] 	rts
e0f3 :                       df_pg_delete_next_byte
                             	; Increment current address
                             	_incZPWord num_a
                             
e0f9 : 4cd2e0           [ 3] 	jmp df_pg_delete_byte
                             
                             
                             ;****************************************
                             ;* Get a line of input
                             ;* Input: C=1 for echo, 0 for no echo
                             ;* Output: C=0 means linbuff is valid
                             ;****************************************
e0fc :                       df_pg_inputline
                             	; C is set on input for echo or not
                             	; Read a line of input
e0fc : 2041c4           [ 6] 	jsr io_read_line
                             	
                             	; If nothing entered then sec
e0ff : 98               [ 2] 	tya
e100 : d002             [ 3] 	bne df_pg_inputline_ok
e102 : 38               [ 2] 	sec
AS65 Assembler for R6502 [1.42].                                     Page  189
---------------------------------- bank0.s -----------------------------------

e103 : 60               [ 6] 	rts
e104 :                       df_pg_inputline_ok
                             	; Copy input bytes to line buffer
                             	; for lexical analysis
e104 :                       df_pg_copyinputtolinbuff
e104 : b139             [ 5] 	lda (buf_lo),y
e106 : 990004           [ 5] 	sta df_linbuff,y
e109 : 88               [ 2] 	dey
e10a : 10f8             [ 3] 	bpl df_pg_copyinputtolinbuff
e10c : 18               [ 2] 	clc
e10d : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_pg_dflat
                             ;* Start a dflat editing session
                             ;****************************************
e10e :                       df_pg_dflat
                             	; reset stack pointer
e10e : a2ff             [ 2] 	ldx #255
e110 : 9a               [ 2] 	txs
                             
                             	; error handler address
e111 : a9af             [ 2] 	lda #lo(df_trap_error)
e113 : 8561             [ 3] 	sta df_pc
e115 : a9f8             [ 2] 	lda #hi(df_trap_error)
e117 : 8562             [ 3] 	sta df_pc+1
                             	
                             	; make sure normal I/O is resumed
                             	;jsr io_init_default
e119 : a2ae             [ 2] 	ldx #lo(df_pg_prompt_msg)
e11b : a9e1             [ 2] 	lda #hi(df_pg_prompt_msg)
e11d : 207ac4           [ 6] 	jsr io_print_line
e120 : a900             [ 2] 	lda #0
e122 : 855f             [ 3] 	sta df_immed
e124 :                       df_pg_getcommand
                             	; current line is the token buffer when editing
e124 : a980             [ 2] 	lda #lo(df_tokbuff)
e126 : 8587             [ 3] 	sta df_currlin
e128 : a904             [ 2] 	lda #hi(df_tokbuff)
e12a : 8588             [ 3] 	sta df_currlin+1
e12c : 38               [ 2] 	sec
e12d : 20fce0           [ 6] 	jsr df_pg_inputline
e130 : b0f2             [ 3] 	bcs df_pg_getcommand	;If no input then try again
e132 : 204de1           [ 6] 	jsr df_pg_tokenise
e135 : a55f             [ 3] 	lda df_immed
e137 : f0eb             [ 3] 	beq df_pg_getcommand
e139 :                       df_pg_runcommand
                             	; clear variables ready to run the statement
e139 : 20b5e1           [ 6] 	jsr df_initrun
                             	; run from tokbuff
e13c : a280             [ 2] 	ldx #lo(df_tokbuff)
e13e : a904             [ 2] 	lda #hi(df_tokbuff)
                             	; always skip length and line number
e140 : a003             [ 2] 	ldy #3
e142 : 8489             [ 3] 	sty df_exeoff
                             	; init currlin
e144 : 2027e5           [ 6] 	jsr df_rt_init_stat_ptr
                             	; start execution
e147 : 203ae5           [ 6] 	jsr df_rt_exec_stat
                             	; Go and get another line of input
e14a : 4c0ee1           [ 3] 	jmp df_pg_dflat
AS65 Assembler for R6502 [1.42].                                     Page  190
---------------------------------- bank0.s -----------------------------------

                             
                             	; tokenise the line
e14d :                       df_pg_tokenise
e14d : a900             [ 2] 	lda #0
e14f : 855e             [ 3] 	sta errno
e151 : 2021db           [ 6] 	jsr df_lexer_line
                             	; check if line number == 0
e154 : ad8104           [ 4] 	lda df_tokbuff+DFTK_LINNUM
e157 : 0d8204           [ 4] 	ora df_tokbuff+DFTK_LINNUM+1
e15a : d00a             [ 3] 	bne df_pg_line_number
                             	; check if line empty
e15c : ad8004           [ 4] 	lda df_tokbuff
e15f : f004             [ 3] 	beq df_pg_nothing
                             	
                             	; line number == 0 so in immediate mode from tok
                             	; don't zero out the line length as some routine
                             	; run the line in immediate mode
e161 : a901             [ 2] 	lda #1
e163 : 855f             [ 3] 	sta df_immed
e165 :                       df_pg_nothing
e165 : 60               [ 6] 	rts
                             
                             	; put the numbered line in to the right bit of m
e166 :                       df_pg_line_number
                             	; Check if this line exists
e166 : ad8104           [ 4] 	lda df_tokbuff+DFTK_LINNUM
e169 : aa               [ 2] 	tax
e16a : ad8204           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
e16d : 2046e0           [ 6] 	jsr df_pg_find_line
                             	; Save line address for later X then A
e170 : 8538             [ 3] 	sta tmp_d
e172 : 8a               [ 2] 	txa
e173 : 48               [ 3] 	pha
e174 : a538             [ 3] 	lda tmp_d
e176 : 48               [ 3] 	pha
                             	; If line exists then it needs deleting
e177 : b003             [ 3] 	bcs df_pg_skip_del_line
                             
                             	; delete line from program
e179 : 20cce0           [ 6] 	jsr df_pg_delete_block
e17c :                       df_pg_skip_del_line
                             	; If line length is zero
                             	; then nothing else to do (i.e. line was deleted
e17c : ad8004           [ 4] 	lda df_tokbuff+DFTK_LINLEN
                             	; save the tokenised line length
e17f : 48               [ 3] 	pha
e180 : d004             [ 3] 	bne df_pg_insertline
                             	; Length was zero, so get temp stuff off stack
e182 : 68               [ 4] 	pla
e183 : 68               [ 4] 	pla
e184 : 68               [ 4] 	pla
e185 : 60               [ 6] 	rts
                             
                             	; insert a program line unless it is immediate
e186 :                       df_pg_insertline
                             	; Restore previously saved length
e186 : 68               [ 4] 	pla
e187 : a8               [ 2] 	tay
                             	; Restore previously saved address to reinsert t
e188 : 68               [ 4] 	pla
e189 : 8538             [ 3] 	sta tmp_d
e18b : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  191
---------------------------------- bank0.s -----------------------------------

e18c : aa               [ 2] 	tax
e18d : a538             [ 3] 	lda tmp_d
                             	; And save it all back to stack again A,X,Y
                             	_pushAXY
                             
                             	; We now have insert address and length
e198 : 2097e0           [ 6] 	jsr df_pg_insert_block
                             	; Restore length and sub 1 to get index in to th
e19b : 68               [ 4] 	pla
e19c : a8               [ 2] 	tay
e19d : 88               [ 2] 	dey
                             	; Restore address to a pointer, X is pulled firs
e19e : 68               [ 4] 	pla
e19f : aa               [ 2] 	tax
e1a0 : 863d             [ 3] 	stx num_a
e1a2 : 68               [ 4] 	pla
e1a3 : 853e             [ 3] 	sta num_a+1
                             	; num_a is destination, tokbuff is source, Y is 
e1a5 :                       df_pg_insertlinbyte
e1a5 : b98004           [ 4] 	lda df_tokbuff,y
e1a8 : 913d             [ 5] 	sta (num_a),y
e1aa : 88               [ 2] 	dey
e1ab : 10f8             [ 3] 	bpl df_pg_insertlinbyte
e1ad : 60               [ 6] 	rts
                             	
e1ae :                       df_pg_prompt_msg
e1ae : 52656164790d00        	db "Ready",UTF_CR,0
                             
e1b5 :                       mod_sz_progedit_e
                             
                             	include "dflat/runtime.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RUNTIME.S
                             ;*  This module is the runtime coordinator.  When
                             ;*  wants to run a program, execution of statemen
                             ;*  required procedure starts and proceeds from t
                             ;*  according to normal program flow.
                             ;*  This module also contains critical routines f
                             ;*  evaluation of expressions (numeric and string
                             ;*  Whilst the code to implement a specific comma
                             ;*  rtsubs.s, this is the key module that control
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
e1b5 :                       mod_sz_runtime_s
                             
                             ;****************************************
                             ;* df_initrun
                             ;* Initialise program space for runtime
                             ;****************************************
e1b5 :                       df_initrun
                             	; Set the key mask to check every 16 instruction
AS65 Assembler for R6502 [1.42].                                     Page  192
---------------------------------- bank0.s -----------------------------------

e1b5 : a910             [ 2] 	lda #0x10
e1b7 : 855d             [ 3] 	sta df_checkmsk
e1b9 : 855c             [ 3] 	sta df_checkkey
                             
                             	; String and array heap initialisation
                             	; Grows up from end of prog space PLUS 1
                             	; Initially empty (dim will allocate)
                             	_cpyZPWord df_prgend,df_starstrt
                             
                             	_incZPWord df_starstrt
                             
                             	_cpyZPWord df_starstrt,df_starend
                             
                             
e1d1 : a2ff             [ 2] 	ldx #0xff
                             	; Reset runtime stack (grows down)
e1d3 : 8677             [ 3] 	stx df_rtstop
                             	; make X=0
e1d5 : e8               [ 2] 	inx
                             	; Reset parameter stack (grows up)
e1d6 : 8678             [ 3] 	stx df_parmtop
                             	; Reset data pointer high byte
e1d8 : 8696             [ 3] 	stx df_currdat+1
                             	; if nest counter zeroed
e1da : 8694             [ 3] 	stx df_ifnest
                             
                             	; clear proc addresses
e1dc : 20e0e1           [ 6] 	jsr df_rt_init_vvt
                             
                             ;	clc
e1df : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Initialise vvt
                             ;****************************************
e1e0 :                       df_rt_init_vvt
                             	; starting at beginning of vvt
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
e1e8 : a200             [ 2] 	ldx #0
e1ea :                       df_rt_init_vvt_slot
e1ea : a5a2             [ 3] 	lda df_tmpptra
e1ec : c56e             [ 3] 	cmp df_vvtstrt
e1ee : d006             [ 3] 	bne df_rt_init_vvt_slot_undim
e1f0 : a5a3             [ 3] 	lda df_tmpptra+1
e1f2 : c56f             [ 3] 	cmp df_vvtstrt+1
e1f4 : f025             [ 4] 	beq df_rt_init_done
e1f6 :                       df_rt_init_vvt_slot_undim
                             	; Only zero out proc and array pointers
                             	; Scalar variables are not initialised
e1f6 : a000             [ 2] 	ldy #0
e1f8 : b1a2             [ 5] 	lda (df_tmpptra),y
e1fa : 29c0             [ 2] 	and #DFVVT_PROC|DFVVT_PTR
e1fc : f00f             [ 4] 	beq df_rt_init_vvt_skip
e1fe : a204             [ 2] 	ldx #4			; Number of bytes to clear for array
e200 : 2940             [ 2] 	and #DFVVT_PROC	; But if proc, then 3 bytes
e202 : f001             [ 3] 	beq df_rt_init_vvt_skip_proc
e204 : ca               [ 2] 	dex
e205 :                       df_rt_init_vvt_skip_proc
e205 : 98               [ 2] 	tya				; Set A to 0 (Y already zero)
                             	; skip over the first byte which is variable typ
e206 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  193
---------------------------------- bank0.s -----------------------------------

                             	; zero out bytes for proc and arrays
e207 :                       df_rt_init_vvt_z_loop
e207 : 91a2             [ 5] 	sta (df_tmpptra),y
e209 : c8               [ 2] 	iny
e20a : ca               [ 2] 	dex
e20b : d0fa             [ 3] 	bne df_rt_init_vvt_z_loop
e20d :                       df_rt_init_vvt_skip
                             	; increment pointer to next slot
                             	_adcZPByte df_tmpptra,#8
                             
e218 : 4ceae1           [ 3] 	jmp df_rt_init_vvt_slot 	; Don't rely on bcc
e21b :                       df_rt_init_done
e21b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* pop  X,A result from operator stack
                             ;****************************************
e21c :                       df_rt_getnval
                             	; evaluate the expression
e21c : 2022e2           [ 6] 	jsr df_rt_neval
                             	; get X,A off operator stack
e21f : 4c97f7           [ 3] 	jmp df_ost_popInt
                             
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* Push result to operator stack
                             ;****************************************
e222 :                       df_rt_neval
                             	; push terminator on cpu stack
                             	; so we know where we are
e222 : a900             [ 2] 	lda #0
e224 : 48               [ 3] 	pha
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword token push on to operator stack
e225 :                       df_rt_neval_optk
e225 : a489             [ 3] 	ldy df_exeoff
                             	; check end of line
                             
                             ;	cpy df_eolidx
                             ;	beq df_rt_neval_process
e227 : c480             [ 3] 	cpy df_nxtstidx
e229 : f03a             [ 3] 	beq df_rt_neval_process
e22b : b187             [ 5] 	lda (df_currlin),y		; Get the byte which could b
e22d : 3024             [ 3] 	bmi df_rt_neval_tk		; N=1 means it's a keyword t
e22f : c920             [ 2] 	cmp #DFTK_ESCVAL		; <=32 means it's an escape to
e231 : 9019             [ 3] 	bcc df_rt_neval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ']'
e233 : c92c             [ 2] 	cmp #','
e235 : f02e             [ 3] 	beq df_rt_neval_process
e237 : c95d             [ 2] 	cmp #']'
e239 : f02a             [ 3] 	beq df_rt_neval_process
                             	; check for brackets
                             	; if close bracket then process
e23b : c929             [ 2] 	cmp #')'
e23d : f026             [ 3] 	beq df_rt_neval_process
                             	; Nothing of interest matched or it's open brack
                             	; so move to next byte either way
AS65 Assembler for R6502 [1.42].                                     Page  194
---------------------------------- bank0.s -----------------------------------

e23f : e689             [ 5] 	inc df_exeoff				; Next byte 
                             	; if bracket then evaluate expression recursivel
e241 : c928             [ 2] 	cmp #'('
e243 : d0e0             [ 3] 	bne df_rt_neval_optk
                             	; call evaluation function recursively
e245 : 2022e2           [ 6] 	jsr df_rt_neval
                             	; move to next byte
e248 : e689             [ 5] 	inc df_exeoff
e24a : d0d9             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
e24c :                       df_rt_neval_esc
e24c : 20a7e2           [ 6] 	jsr df_rt_eval_esc
                             	; move to next byte
e24f : e689             [ 5] 	inc df_exeoff
e251 : d0d2             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             	; if a token then push on operator stack
e253 :                       df_rt_neval_tk
e253 : 297f             [ 2] 	and #0x7f
                             	; check if op (look up type using X as index)
                             	; X contains the current operator index
                             
e255 : aa               [ 2] 	tax
e256 : bdabde           [ 4] 	lda df_tk_tokentype,x
                             	; A contains token type
e259 : 48               [ 3] 	pha
e25a : 2908             [ 2] 	and #DFTK_OP
e25c : d01c             [ 3] 	bne df_rt_neval_tk_opp
                             	; check if fn
e25e : 68               [ 4] 	pla
e25f : 2902             [ 2] 	and #DFTK_FN
e261 : d00c             [ 3] 	bne df_rt_neval_tk_fn
                             
                             	; If got here then something wrong
                             	SWBRK DFERR_OK
                             
                             
e265 :                       df_rt_neval_process
                             	; pop operator off stack and execute
                             	; keep popping until reached the terminator
e265 : 68               [ 4] 	pla
e266 : f006             [ 3] 	beq df_rt_neval_done
                             	; run the token code
e268 : 209ae5           [ 6] 	jsr df_rt_run_token
                             	; top two bytes on ost stack is the result
e26b : 4c65e2           [ 3] 	jmp df_rt_neval_process
e26e :                       df_rt_neval_done
e26e : 60               [ 6] 	rts
                             
e26f :                       df_rt_neval_tk_fn
e26f : 18               [ 2] 	clc
e270 : 8a               [ 2] 	txa
                             	; run a fn token - returns a value on stack
e271 : e689             [ 5] 	inc df_exeoff
e273 : 209ae5           [ 6] 	jsr df_rt_run_token
                             	; move to next byte
e276 :                       df_rt_neval_nextbyte
e276 : e689             [ 5] 	inc df_exeoff
e278 : d0ab             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             
e27a :                       df_rt_neval_tk_opp
e27a : 68               [ 4] 	pla				; Get A off stack which is the type
e27b :                       df_rt_neval_tk_op
                             	; X=Op, A=Type
AS65 Assembler for R6502 [1.42].                                     Page  195
---------------------------------- bank0.s -----------------------------------

                             	; if this op < current top of op stack
                             	; then do the op as it is higher priority so sho
                             	; not be pushed
                             	; what is top of the op stack?
                             	; save current op token value
                             	; C=0 means process the op now, else don't
                             	; save current operator index
e27b : 86a2             [ 3] 	stx df_tmpptra				; Index in to token table not 
                             	; mask off to keep priority
e27d : 2907             [ 2] 	and #DFTK_OPMSK
e27f : 85a4             [ 3] 	sta df_tmpptrb
                             	; peek top of op stack - pull and push X
e281 : 68               [ 4] 	pla
e282 : 48               [ 3] 	pha
e283 : aa               [ 2] 	tax
                             	; if 0 then nothing so push op
e284 : f01c             [ 3] 	beq df_rt_neval_pushOp
                             	; use it to index in to type table
e286 : bdabde           [ 4] 	lda df_tk_tokentype,x
                             	; mask off to keep priority
e289 : 2907             [ 2] 	and #DFTK_OPMSK
                             	; compare with the saved token type which includ
e28b : c5a4             [ 3] 	cmp df_tmpptrb
                             	; if top of stack >= current then C=1
                             	; else C=0
                             	; what is the state of C?
                             	; if 1 then just pushOp
e28d : f002             [ 3] 	beq df_rt_neval_donow
e28f : b011             [ 3] 	bcs df_rt_neval_pushOp
e291 :                       df_rt_neval_donow
                             	; was C=0 so process now before pushing the new 
                             	; get operator off cpu stack
e291 : 68               [ 4] 	pla
e292 : a8               [ 2] 	tay		; Save whilst need to push other things
                             	; save the current op on cpu stack
e293 : a5a2             [ 3] 	lda df_tmpptra
e295 : 48               [ 3] 	pha
e296 : aa               [ 2] 	tax		; X = current op
e297 : 98               [ 2] 	tya		; Get A back from Y (new op)
                             	; now run the token in A that came off the stack
e298 : 209ae5           [ 6] 	jsr df_rt_run_token
                             	; get current op off cpu stack in to X
e29b : 68               [ 4] 	pla
e29c : aa               [ 2] 	tax
                             	; get the token type in to A
e29d : bdabde           [ 4] 	lda df_tk_tokentype,x
                             	; now go back around again to check whether to p
e2a0 : d0d9             [ 3] 	bne df_rt_neval_tk_op		; ALWAYS as type never ze
e2a2 :                       df_rt_neval_pushOp
                             	; push the operator
e2a2 : a5a2             [ 3] 	lda df_tmpptra
e2a4 : 48               [ 3] 	pha
                             	; move to next byte
e2a5 : d0cf             [ 3] 	bne df_rt_neval_nextbyte	; ALWAYS as token index
                             
                             
                             
                             
                             ; jump to escape evaluation routine
e2a7 :                       df_rt_eval_esc
e2a7 : 0a               [ 2] 	asl a
e2a8 : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page  196
---------------------------------- bank0.s -----------------------------------

e2a9 : bdb6e2           [ 4] 	lda df_rt_eval_esc_tab,x
e2ac : 85a2             [ 3] 	sta df_tmpptra
e2ae : bdb7e2           [ 4] 	lda df_rt_eval_esc_tab+1,x
e2b1 : 85a3             [ 3] 	sta df_tmpptra+1
e2b3 : 6ca200           [ 6] 	jmp (df_tmpptra)
                             
e2b6 :                       df_rt_eval_esc_tab
e2b6 : 73e3                  	dw df_rt_eval_chr
e2b8 : 7fe3                  	dw df_rt_eval_reserved
e2ba : 7fe3                  	dw df_rt_eval_reserved
e2bc : 7fe3                  	dw df_rt_eval_reserved
e2be : 7fe3                  	dw df_rt_eval_reserved
e2c0 : 7fe3                  	dw df_rt_eval_reserved	; no such thing as bytdec
e2c2 : 73e3                  	dw df_rt_eval_bythex
e2c4 : 73e3                  	dw df_rt_eval_bytbin
e2c6 : 7fe3                  	dw df_rt_eval_reserved
e2c8 : 73e3                  	dw df_rt_eval_intdec
e2ca : 73e3                  	dw df_rt_eval_inthex
e2cc : 73e3                  	dw df_rt_eval_intbin
e2ce : 7fe3                  	dw df_rt_eval_reserved
e2d0 : 7fe3                  	dw df_rt_eval_reserved
e2d2 : 7fe3                  	dw df_rt_eval_reserved
e2d4 : 7fe3                  	dw df_rt_eval_reserved
e2d6 : 81e3                  	dw df_rt_eval_strlit
e2d8 : c6e3                  	dw df_rt_eval_var
e2da : bce4                  	dw df_rt_eval_proc
                             
                             
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination is string accumulator
                             ;****************************************
e2dc :                       df_rt_seval
e2dc : a67b             [ 3] 	ldx df_sevalptr
e2de : a57c             [ 3] 	lda df_sevalptr+1
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination buffer / space
                             ;****************************************
e2e0 :                       df_rt_sval
                             	; keep X,A on the stack - will be modified
e2e0 : 8538             [ 3] 	sta tmp_d
e2e2 : 48               [ 3] 	pha
e2e3 : 8a               [ 2] 	txa
e2e4 : 48               [ 3] 	pha
e2e5 : a538             [ 3] 	lda tmp_d
                             	; push original destination
e2e7 : 2072f7           [ 6] 	jsr df_ost_pushStr
                             	; Push the destination to the 6502 stack
                             	; hi byte first then lo
                             	; push string idx so we know our starting positi
                             	; in the string buffer
                             	; this limits all evaluations to 255 bytes
                             ;	lda df_stridx
                             ;	jsr df_st_pushOp
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword operator token push on to operator 
                             	; if keyword function token run it
                             
e2ea :                       df_rt_seval_optk
AS65 Assembler for R6502 [1.42].                                     Page  197
---------------------------------- bank0.s -----------------------------------

e2ea : a489             [ 3] 	ldy df_exeoff
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_seval_done
e2ec : c480             [ 3] 	cpy df_nxtstidx
e2ee : f069             [ 4] 	beq df_rt_seval_done
                             
e2f0 : b187             [ 5] 	lda (df_currlin),y
e2f2 : 301c             [ 4] 	bmi df_rt_seval_tk
                             
e2f4 : c920             [ 2] 	cmp #DFTK_ESCVAL
e2f6 : 900a             [ 4] 	bcc df_rt_seval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ')'
e2f8 : c92c             [ 2] 	cmp #','
e2fa : f05d             [ 4] 	beq df_rt_seval_done
e2fc : c929             [ 2] 	cmp #')'
e2fe : f059             [ 4] 	beq df_rt_seval_done
e300 : d04a             [ 3] 	bne df_rt_seval_nextbyte
e302 :                       df_rt_seval_esc
                             	; the only escape char is STRLIT, VAR or PROC
e302 : c910             [ 2] 	cmp #DFTK_STRLIT
e304 : f04b             [ 3] 	beq	df_rt_seval_esc_strlit
e306 : c911             [ 2] 	cmp #DFTK_VAR
e308 : f028             [ 3] 	beq	df_rt_seval_esc_var
e30a : c912             [ 2] 	cmp #DFTK_PROC
e30c : f049             [ 3] 	beq	df_rt_seval_esc_proc
                             
                             	; error if got here
                             	SWBRK DFERR_SYNTAX
                             
                             
                             	; if a token then push on operator stack
e310 :                       df_rt_seval_tk
e310 : 8489             [ 3] 	sty df_exeoff
e312 : 297f             [ 2] 	and #0x7f
                             	; check if op
e314 : aa               [ 2] 	tax
e315 : bdabde           [ 4] 	lda df_tk_tokentype,x
e318 : 2904             [ 2] 	and #DFTK_STROP
e31a : d009             [ 3] 	bne df_rt_seval_tk_op
                             	; check if fn
e31c : bdabde           [ 4] 	lda df_tk_tokentype,x
e31f : 2902             [ 2] 	and #DFTK_FN
e321 : d006             [ 3] 	bne df_rt_seval_tk_fn
                             
                             	; token type mismatch if got here
                             	SWBRK DFERR_TYPEMISM
                             
                             
e325 :                       df_rt_seval_tk_op
                             	; the only op is $+
                             	; so just ignore!
e325 : 8a               [ 2] 	txa
e326 : 4c4ce3           [ 3] 	jmp df_rt_seval_nextbyte
                             
e329 :                       df_rt_seval_tk_fn
e329 : 8a               [ 2] 	txa
e32a : e689             [ 5] 	inc df_exeoff
e32c : 209ae5           [ 6] 	jsr df_rt_run_token
e32f : 4c36e3           [ 3] 	jmp df_rt_seval_copy
                             
AS65 Assembler for R6502 [1.42].                                     Page  198
---------------------------------- bank0.s -----------------------------------

e332 :                       df_rt_seval_esc_var
                             	; go process the variable as a normal RVAL
e332 : 18               [ 2] 	clc
e333 : 20c6e3           [ 6] 	jsr df_rt_eval_var
                             	; copy source off rt stack to destination
e336 :                       df_rt_seval_copy
                             	; pull destination pointer
e336 : 68               [ 4] 	pla
e337 : 85a2             [ 3] 	sta df_tmpptra
e339 : 68               [ 4] 	pla
e33a : 85a3             [ 3] 	sta df_tmpptra+1
                             	; pop source string pointer off stack
e33c : 209bf7           [ 6] 	jsr df_ost_popStr
e33f : 86a4             [ 3] 	stx df_tmpptrb
e341 : 85a5             [ 3] 	sta df_tmpptrb+1
                             	; go and copy the string
e343 : 205de3           [ 6] 	jsr df_rt_copyStr
                             	; now save the destination
e346 : a5a3             [ 3] 	lda df_tmpptra+1
e348 : 48               [ 3] 	pha
e349 : a5a2             [ 3] 	lda df_tmpptra
e34b : 48               [ 3] 	pha
                             
                             ;	jmp df_rt_seval_nextbyte
e34c :                       df_rt_seval_nextbyte
e34c : e689             [ 5] 	inc df_exeoff
e34e : 4ceae2           [ 3] 	jmp df_rt_seval_optk
                             
e351 :                       df_rt_seval_esc_strlit
                             	; evaluate string literal
e351 : 2081e3           [ 6] 	jsr df_rt_eval_strlit
e354 : 4c36e3           [ 3] 	jmp df_rt_seval_copy
                             
e357 :                       df_rt_seval_esc_proc
                             	; not yet suported *******
                             	SWBRK DFERR_OK
                             
                             
                             	; keep going until non-ws char found or end of l
e359 :                       df_rt_seval_done
                             	;
e359 : 68               [ 4] 	pla
e35a : 68               [ 4] 	pla
                             
e35b : 18               [ 2] 	clc
e35c : 60               [ 6] 	rts
                             
                             
                             ; Copy string from ptrb to ptra
e35d :                       df_rt_copyStr
e35d : a000             [ 2] 	ldy #0
e35f :                       df_rt_copyStr_ch
e35f : b1a4             [ 5] 	lda (df_tmpptrb),y
e361 : 91a2             [ 5] 	sta (df_tmpptra),y
e363 : f003             [ 3] 	beq df_rt_copyStr_done
e365 : c8               [ 2] 	iny
e366 : d0f7             [ 3] 	bne df_rt_copyStr_ch	; Always relying in Y never
e368 :                       df_rt_copyStr_done
e368 : 98               [ 2] 	tya
e369 : 18               [ 2] 	clc
e36a : 65a2             [ 3] 	adc df_tmpptra
e36c : 85a2             [ 3] 	sta df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  199
---------------------------------- bank0.s -----------------------------------

                             	_bcc 2
                             
e370 : e6a3             [ 5] 	inc df_tmpptra+1
e372 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate and push numeric value
                             ;****************************************
e373 :                       df_rt_eval_intdec
e373 :                       df_rt_eval_bytdec
e373 :                       df_rt_eval_inthex
e373 :                       df_rt_eval_bythex
e373 :                       df_rt_eval_intbin
e373 :                       df_rt_eval_bytbin
e373 :                       df_rt_eval_chr
                             	; numeric constant
e373 : c8               [ 2] 	iny
e374 : b187             [ 5] 	lda (df_currlin),y
e376 : aa               [ 2] 	tax
e377 : c8               [ 2] 	iny
e378 : b187             [ 5] 	lda (df_currlin),y
                             	; save offset before calling any routine
e37a : 8489             [ 3] 	sty df_exeoff
                             	; push number on to stack
e37c : 4c67f7           [ 3] 	jmp df_ost_pushInt
                             
e37f :                       df_rt_eval_reserved
                             	; should not get here
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* Evaluate and push string constant
                             ;****************************************
e381 :                       df_rt_eval_strlit
e381 : 8489             [ 3] 	sty df_exeoff
                             	; calculate the effective address in to AX
                             	; y + currlin
e383 : 98               [ 2] 	tya
                             	; set carry to add one extra
e384 : 38               [ 2] 	sec
e385 : 6587             [ 3] 	adc df_currlin
e387 : aa               [ 2] 	tax
e388 : a588             [ 3] 	lda df_currlin+1
e38a : 6900             [ 2] 	adc #0
                             
                             	; push string on to stack
e38c : 2072f7           [ 6] 	jsr df_ost_pushStr
                             	; now proceed until end of string found
e38f : a489             [ 3] 	ldy df_exeoff
e391 :                       df_rt_eval_strlit_ch
e391 : b187             [ 5] 	lda (df_currlin),y
e393 : f003             [ 3] 	beq df_rt_eval_strlit_done
e395 : c8               [ 2] 	iny
e396 : d0f9             [ 3] 	bne df_rt_eval_strlit_ch
e398 :                       df_rt_eval_strlit_done	; Always relying on Y neve
e398 : 8489             [ 3] 	sty df_exeoff
e39a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return array parameter
                             ;* A has parm
AS65 Assembler for R6502 [1.42].                                     Page  200
---------------------------------- bank0.s -----------------------------------

                             ;****************************************
e39b :                       df_rt_arry_parm
                             	; move past open bracket or comma
e39b : e689             [ 5] 	inc df_exeoff
                             	; evaluate expression inside bracket
e39d : 201ce2           [ 6] 	jsr df_rt_getnval
e3a0 : 8a               [ 2] 	txa
                             ;	clc
e3a1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return double array parameter
                             ;* X = dim1, Y = dim2
                             ;****************************************
e3a2 :                       df_rt_arry_parm2
                             	; go get array parm 1
e3a2 : 209be3           [ 6] 	jsr df_rt_arry_parm
e3a5 : 48               [ 3] 	pha
e3a6 : a200             [ 2] 	ldx #0
e3a8 : a489             [ 3] 	ldy df_exeoff
e3aa :                       df_rt_arry_parm2_term
e3aa : b187             [ 5] 	lda (df_currlin),y
e3ac : c95d             [ 2] 	cmp #']'
e3ae : f011             [ 3] 	beq df_rt_arry_parm2_skiparry2
e3b0 : c92c             [ 2] 	cmp #','
e3b2 : f006             [ 3] 	beq df_rt_arry_parm2_arry2
e3b4 : 8489             [ 3] 	sty df_exeoff
e3b6 : c8               [ 2] 	iny
e3b7 : 4caae3           [ 3] 	jmp df_rt_arry_parm2_term
e3ba :                       df_rt_arry_parm2_arry2
                             	; get second dimension and put in Y
e3ba : 209be3           [ 6] 	jsr df_rt_arry_parm
e3bd : a8               [ 2] 	tay
e3be : 68               [ 4] 	pla
e3bf : aa               [ 2] 	tax
                             ;	clc
e3c0 : 60               [ 6] 	rts
e3c1 :                       df_rt_arry_parm2_skiparry2
e3c1 : a000             [ 2] 	ldy #0
e3c3 : 68               [ 4] 	pla
e3c4 : aa               [ 2] 	tax
                             ;	clc
e3c5 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Evaluate and push variable
                             ;* The actual value is pushed if numeric
                             ;* The pointer is pushed if string
                             ;* Carry Set = LVAR else normal RVAR
                             ;* LVAR : Y = line index, A=vvt type, tmpptra = v
                             ;****************************************
e3c6 :                       df_rt_eval_var
                             	; save carry bit
e3c6 : 08               [ 3] 	php
                             	; if lvar mode then already passed escape token
e3c7 : b010             [ 3] 	bcs df_rt_eval_lvskip
                             	; move past var escape token
e3c9 : c8               [ 2] 	iny
                             	; get var vvt address
e3ca : b187             [ 5] 	lda (df_currlin),y
e3cc : 85a2             [ 3] 	sta df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  201
---------------------------------- bank0.s -----------------------------------

e3ce : c8               [ 2] 	iny
e3cf : 8489             [ 3] 	sty df_exeoff
e3d1 : b187             [ 5] 	lda (df_currlin),y
e3d3 : 85a3             [ 3] 	sta df_tmpptra+1
                             	; push vvt type first as this is the last thing 
e3d5 : a200             [ 2] 	ldx #0
e3d7 : a1a2             [ 6] 	lda (df_tmpptra,x)
e3d9 :                       df_rt_eval_lvskip
e3d9 : 48               [ 3] 	pha
                             	; Test A for array or string
e3da : 2984             [ 2] 	and #DFVVT_PTR|DFVVT_STR
                             	; simple variable
e3dc : f00e             [ 3] 	beq df_rt_eval_var_notarry
                             	; even if an array if no dimensions then return 
                             	; if at end of statement or line then simple cop
e3de : c480             [ 3] 	cpy df_nxtstidx
e3e0 : f027             [ 4] 	beq df_rt_eval_var_simple
                             	; if next ch is not [ then simple copy
e3e2 : c8               [ 2] 	iny
e3e3 : b187             [ 5] 	lda (df_currlin),y
e3e5 : 88               [ 2] 	dey
e3e6 : c95b             [ 2] 	cmp #'['
e3e8 : d01f             [ 4] 	bne df_rt_eval_var_simple
                             	; go do array handling
e3ea : f02d             [ 4] 	beq df_rt_eval_var_do_arry
e3ec :                       df_rt_eval_var_notarry
                             	; pull the type, not needed here
e3ec : 68               [ 4] 	pla
                             	; pull C and check if lvar wanted rather than rv
e3ed : 28               [ 4] 	plp
e3ee : b00c             [ 3] 	bcs df_rt_eval_lvar
                             	; just push the vvt lo,hi value
e3f0 : a001             [ 2] 	ldy #DFVVT_LO
e3f2 : b1a2             [ 5] 	lda (df_tmpptra),y
e3f4 : aa               [ 2] 	tax
e3f5 : a002             [ 2] 	ldy #DFVVT_HI
e3f7 : b1a2             [ 5] 	lda (df_tmpptra),y
                             
e3f9 : 4c67f7           [ 3] 	jmp df_ost_pushInt
                             
e3fc :                       df_rt_eval_lvar
                             	; it's not an array, push the address of DFVVT_L
                             	; add DFVVT_LO offset to slot address in X,A
e3fc : 18               [ 2] 	clc
e3fd : a901             [ 2] 	lda #DFVVT_LO
e3ff : 65a2             [ 3] 	adc df_tmpptra
e401 : aa               [ 2] 	tax
e402 : a5a3             [ 3] 	lda df_tmpptra+1
e404 : 6900             [ 2] 	adc #0
                             
                             	; push pointer to lo,hi
e406 : 4c76f7           [ 3] 	jmp df_ost_pushPtr
                             
                             	; Simple push of pointer, needs to be valid
e409 :                       df_rt_eval_var_simple
                             	; clean up stack
e409 : 68               [ 4] 	pla
e40a : 68               [ 4] 	pla
                             	; simply get lo,hi and push ptr on stack
e40b : a001             [ 2] 	ldy #DFVVT_LO
e40d : b1a2             [ 5] 	lda (df_tmpptra),y
e40f : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page  202
---------------------------------- bank0.s -----------------------------------

e410 : a002             [ 2] 	ldy #DFVVT_HI
e412 : b1a2             [ 5] 	lda (df_tmpptra),y
e414 : f078             [ 3] 	beq df_rt_not_dimed
e416 : 4c76f7           [ 3] 	jmp df_ost_pushPtr
                             
e419 :                       df_rt_eval_var_do_arry
                             	; move past var index
e419 : e689             [ 5] 	inc df_exeoff
                             	; zero out x,y as they have dimension info
e41b : a200             [ 2] 	ldx #0
e41d : a000             [ 2] 	ldy #0
                             
                             	; ** Array handling routine **
                             	; A on stack = type
                             	; save vvt address
e41f : a5a3             [ 3] 	lda df_tmpptra+1
e421 : 48               [ 3] 	pha
e422 : a5a2             [ 3] 	lda df_tmpptra
e424 : 48               [ 3] 	pha
                             
                             	; get array parms in X,Y
e425 : 20a2e3           [ 6] 	jsr df_rt_arry_parm2
                             	; restore vvt address
e428 : 68               [ 4] 	pla
e429 : 85a2             [ 3] 	sta df_tmpptra
e42b : 68               [ 4] 	pla
e42c : 85a3             [ 3] 	sta df_tmpptra+1
                             	; save dimension indices for later
e42e : 86a4             [ 3] 	stx df_tmpptrb
e430 : 84a5             [ 3] 	sty df_tmpptrb+1
                             	; if y is zero then need to decide some stuff
e432 : c000             [ 2] 	cpy #0
e434 : d00e             [ 3] 	bne df_rt_eval_var_dim2adj
                             	; if dim2 > 0 then swap x,y
e436 : a004             [ 2] 	ldy #DFVVT_DIM2
e438 : b1a2             [ 5] 	lda (df_tmpptra),y
e43a : f008             [ 3] 	beq df_rt_eval_var_dim2adj
                             	; swap x,y
e43c : a6a4             [ 3] 	ldx df_tmpptrb
e43e : a4a5             [ 3] 	ldy df_tmpptrb+1
e440 : 86a5             [ 3] 	stx df_tmpptrb+1
e442 : 84a4             [ 3] 	sty df_tmpptrb
                             
e444 :                       df_rt_eval_var_dim2adj
e444 : a6a4             [ 3] 	ldx df_tmpptrb
e446 : a4a5             [ 3] 	ldy df_tmpptrb+1
                             	; don't let y=0
e448 : d001             [ 3] 	bne df_rt_eval_var_dim2adjy
e44a : c8               [ 2] 	iny
e44b :                       df_rt_eval_var_dim2adjy
                             	; don't let x=0
e44b : e000             [ 2] 	cpx #0
e44d : d001             [ 3] 	bne df_rt_eval_var_dim2adjx
e44f : e8               [ 2] 	inx
e450 :                       df_rt_eval_var_dim2adjx
                             	;calculate offset
                             	;(y-1)*dim1 + (x-1)
e450 : ca               [ 2] 	dex
e451 : a900             [ 2] 	lda #0
e453 : 853e             [ 3] 	sta num_a+1
e455 : 88               [ 2] 	dey
                             	; (y-1)
AS65 Assembler for R6502 [1.42].                                     Page  203
---------------------------------- bank0.s -----------------------------------

e456 : 843d             [ 3] 	sty num_a
                             	; if y is 0 then no need to multiply
e458 : f00d             [ 3] 	beq df_rt_eval_var_nomult
                             	; (dim1)
e45a : a003             [ 2] 	ldy #DFVVT_DIM1
e45c : a900             [ 2] 	lda #0
e45e : 8542             [ 3] 	sta num_b+1
e460 : b1a2             [ 5] 	lda (df_tmpptra),y
e462 : 8541             [ 3] 	sta num_b
                             	; (y-1)*dim1 num_a has result
e464 : 201bd6           [ 6] 	jsr int_fast_mult
e467 :                       df_rt_eval_var_nomult
                             	; move x to a
e467 : 8a               [ 2] 	txa
                             	; add x to num_a
e468 : 18               [ 2] 	clc
e469 : 653d             [ 3] 	adc num_a
e46b : 853d             [ 3] 	sta num_a
                             	_bcc 2
                             
e46f : e63e             [ 5] 	inc num_a+1
                             	; now have element offset in num_a
                             	; dimensions in x and y
e471 : a6a4             [ 3] 	ldx df_tmpptrb
e473 : a4a5             [ 3] 	ldy df_tmpptrb+1
                             	; get type of variable originally found
e475 : 68               [ 4] 	pla
e476 : 48               [ 3] 	pha
e477 : 2901             [ 2] 	and #DFVVT_INT
e479 : f004             [ 3] 	beq df_rt_eval_var_push
                             	; if it is int then multiply offset by 2
e47b : 063d             [ 5] 	asl num_a
e47d : 263e             [ 5] 	rol num_a+1
e47f :                       df_rt_eval_var_push
                             	; add pointer in lo,hi to num_a
e47f : 18               [ 2] 	clc
e480 : a001             [ 2] 	ldy #DFVVT_LO
e482 : b1a2             [ 5] 	lda (df_tmpptra),y
e484 : 653d             [ 3] 	adc num_a
e486 : 853d             [ 3] 	sta num_a
e488 : a002             [ 2] 	ldy #DFVVT_HI
e48a : b1a2             [ 5] 	lda (df_tmpptra),y
e48c : d002             [ 3] 	bne df_rt_array_exists
                             	; if vvt address hi is zero then array not dimen
e48e :                       df_rt_not_dimed
                             	SWBRK DFERR_DIM
                             
e490 :                       df_rt_array_exists
e490 : 653e             [ 3] 	adc num_a+1
e492 : 853e             [ 3] 	sta num_a+1
                             	; get the type
e494 : 68               [ 4] 	pla
                             	; if not int or byte then push string
e495 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
e497 : f01b             [ 3] 	beq df_rt_eval_var_str
                             	; get LVAR preference
e499 : 28               [ 4] 	plp
e49a : b019             [ 3] 	bcs df_rt_eval_ptr
                             	; need to load lo and hi for int
                             	; but only lo for byt
e49c : 2901             [ 2] 	and #DFVVT_INT
e49e : f00b             [ 3] 	beq df_rt_eval_byt
AS65 Assembler for R6502 [1.42].                                     Page  204
---------------------------------- bank0.s -----------------------------------

                             	; push the contents pointed to by num_a
e4a0 : a000             [ 2] 	ldy #0
e4a2 : b13d             [ 5] 	lda (num_a),y
e4a4 : aa               [ 2] 	tax
e4a5 : c8               [ 2] 	iny
e4a6 : b13d             [ 5] 	lda (num_a),y
e4a8 : 4c67f7           [ 3] 	jmp df_ost_pushInt
e4ab :                       df_rt_eval_byt
e4ab : a000             [ 2] 	ldy #0
e4ad : b13d             [ 5] 	lda (num_a),y
e4af : aa               [ 2] 	tax
e4b0 : 98               [ 2] 	tya			; Make A=0
e4b1 : 4c67f7           [ 3] 	jmp df_ost_pushInt
e4b4 :                       df_rt_eval_var_str
e4b4 : 28               [ 4] 	plp
e4b5 :                       df_rt_eval_ptr
                             ;	clc
                             	; put num_a not contents
e4b5 : a63d             [ 3] 	ldx num_a
e4b7 : a53e             [ 3] 	lda num_a+1
e4b9 : 4c76f7           [ 3] 	jmp df_ost_pushPtr
                             
e4bc :                       df_rt_eval_proc
e4bc : a578             [ 3] 	lda df_parmtop				; Save current position of par
e4be : 48               [ 3] 	pha
e4bf : 20c8f5           [ 6] 	jsr df_rt_proc				; Go and call the user functio
e4c2 : 68               [ 4] 	pla							; Get back the original parameter stac
e4c3 : c578             [ 3] 	cmp df_parmtop				; if it is the same, then no r
e4c5 : f002             [ 3] 	beq df_rt_eval_proc_err
e4c7 : 18               [ 2] 	clc
e4c8 : 60               [ 6] 	rts
e4c9 :                       df_rt_eval_proc_err
                             	; if no return value then report an errror
                             	SWBRK DFERR_RETURN
                             
                             
                             
                             
                             ;****************************************
                             ;* get two ints off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
e4cb :                       df_rt_get2Ints
                             	; the first int popped is actually the second pa
e4cb : 2097f7           [ 6] 	jsr df_ost_popInt
e4ce : 86a4             [ 3] 	stx df_tmpptrb
e4d0 : 85a5             [ 3] 	sta df_tmpptrb+1
                             
e4d2 : 2097f7           [ 6] 	jsr df_ost_popInt
e4d5 : 86a2             [ 3] 	stx df_tmpptra
e4d7 : 85a3             [ 3] 	sta df_tmpptra+1
e4d9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* get two strings off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
e4da :                       df_rt_get2Strs
                             	; the first int popped is actually the second pa
e4da : 209bf7           [ 6] 	jsr df_ost_popStr
e4dd : 86a4             [ 3] 	stx df_tmpptrb
e4df : 85a5             [ 3] 	sta df_tmpptrb+1
AS65 Assembler for R6502 [1.42].                                     Page  205
---------------------------------- bank0.s -----------------------------------

                             
e4e1 : 209bf7           [ 6] 	jsr df_ost_popStr
e4e4 : 86a2             [ 3] 	stx df_tmpptra
e4e6 : 85a3             [ 3] 	sta df_tmpptra+1
e4e8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 2 ints runtime parsing
                             ;****************************************
e4e9 :                       df_rt_parm_2ints
                             	; evaluate 1st parm
e4e9 : 2022e2           [ 6] 	jsr df_rt_neval
                             	; jump over comma
e4ec : e689             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e4ee : 2022e2           [ 6] 	jsr df_rt_neval
                             	
e4f1 : 4ccbe4           [ 3] 	jmp df_rt_get2Ints
                             	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 3 ints runtime parsing
                             ;****************************************
e4f4 :                       df_rt_parm_3ints
                             	; evaluate 1st parm
e4f4 : 2022e2           [ 6] 	jsr df_rt_neval
e4f7 : e689             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e4f9 : 2022e2           [ 6] 	jsr df_rt_neval
e4fc : e689             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e4fe : 2022e2           [ 6] 	jsr df_rt_neval
                             
                             	; pop 3rd parm
e501 :                       df_rt_parm_pop3
e501 : 2097f7           [ 6] 	jsr df_ost_popInt
e504 : 86a6             [ 3] 	stx df_tmpptrc
e506 : 85a7             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd and 1st
e508 : 4ccbe4           [ 3] 	jmp df_rt_get2Ints
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 4 ints runtime parsing
                             ;****************************************
e50b :                       df_rt_parm_4ints
                             	; evaluate 1st parm
AS65 Assembler for R6502 [1.42].                                     Page  206
---------------------------------- bank0.s -----------------------------------

e50b : 2022e2           [ 6] 	jsr df_rt_neval
e50e : e689             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
e510 : 2022e2           [ 6] 	jsr df_rt_neval
e513 : e689             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
e515 : 2022e2           [ 6] 	jsr df_rt_neval
e518 : e689             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
e51a : 2022e2           [ 6] 	jsr df_rt_neval
                             
                             	; pop 4th parm
e51d : 2097f7           [ 6] 	jsr df_ost_popInt
e520 : 86a8             [ 3] 	stx df_tmpptrd
e522 : 85a9             [ 3] 	sta df_tmpptrd+1
                             
                             	; pop 3,2,1 parms
e524 : 4c01e5           [ 3] 	jmp df_rt_parm_pop3
                             
                             	; pop 3rd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 5 ints runtime parsing
                             ;****************************************
                             ;df_rt_parm_5ints
                             ;	; evaluate 1st parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 2nd parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 3rd parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 4th parm
                             ;	jsr df_rt_neval
                             ;	inc df_exeoff
                             ;	; evaluate the 5th parm
                             ;	jsr df_rt_neval
                             ;
                             ;	; pop 5th parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptre
                             ;	sta df_tmpptre+1
                             ;	; pop 4th parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrd
                             ;	sta df_tmpptrd+1
                             ;	; pop 3rd parm
                             ;	jsr df_ost_popInt
AS65 Assembler for R6502 [1.42].                                     Page  207
---------------------------------- bank0.s -----------------------------------

                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             ;	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             ;	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;
                             ;	rts
                             
                             ;****************************************
                             ;* initialise statement to be executed
                             ;* X,A = line pointer, Y=statement offset
                             ;****************************************
e527 :                       df_rt_init_stat_ptr
                             	; save current line
e527 : 8687             [ 3] 	stx df_currlin
e529 : 8588             [ 3] 	sta df_currlin+1
e52b : 8481             [ 3] 	sty df_curstidx
e52d : 8489             [ 3] 	sty df_exeoff
e52f : b187             [ 5] 	lda (df_currlin),y
e531 : 8580             [ 3] 	sta df_nxtstidx
e533 : a200             [ 2] 	ldx #0
e535 : a187             [ 6] 	lda (df_currlin,x)
e537 : 857f             [ 3] 	sta df_eolidx
                             ;	ldy df_curstidx
                             ;	lda (df_currlin),y
                             ;	sta df_nxtstidx
e539 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Execute from a statement pointed to
                             ;* by currlin and exeoff
                             ;****************************************
e53a :                       df_rt_exec_stat
e53a : a687             [ 3] 	ldx df_currlin
e53c : a588             [ 3] 	lda df_currlin+1
e53e : a489             [ 3] 	ldy df_exeoff
e540 :                       df_rt_exec_init_ptr
e540 : 2027e5           [ 6] 	jsr df_rt_init_stat_ptr
                             	; assume normal flow of control if next line hi 
                             	; this means no line can execute below page 1, n
e543 : a900             [ 2] 	lda #0
e545 : 858b             [ 3] 	sta df_nextlin+1
                             
                             	; find first token in statement
e547 :                       df_rt_exec_find_tok
e547 : c8               [ 2] 	iny
e548 : b187             [ 5] 	lda (df_currlin),y
e54a : 10fb             [ 3] 	bpl df_rt_exec_find_tok
e54c :                       df_rt_exec_found_tok
                             	; skip past token to next byte in readiness
e54c : c8               [ 2] 	iny
e54d : 8489             [ 3] 	sty df_exeoff
                             	; Run that statement - if end of return will pul
                             	; and effectively do an rts from this routine.
e54f : 209ae5           [ 6] 	jsr df_rt_run_token
                             
                             	; check for break, asynch get
AS65 Assembler for R6502 [1.42].                                     Page  208
---------------------------------- bank0.s -----------------------------------

e552 : c65c             [ 5] 	dec df_checkkey
e554 : d00a             [ 3] 	bne df_rt_exec_no_key
e556 : a55d             [ 3] 	lda df_checkmsk
e558 : 855c             [ 3] 	sta df_checkkey
e55a : 18               [ 2] 	clc
e55b : 2029c4           [ 6] 	jsr io_get_ch
e55e : 9025             [ 3] 	bcc df_rt_exec_check_key
e560 :                       df_rt_exec_no_key
                             	; check if normal flow of control
e560 : a58b             [ 3] 	lda df_nextlin+1
e562 : d02d             [ 3] 	bne df_rt_exec_jump
                             	; try and execute another statement until end of
e564 : a480             [ 3] 	ldy df_nxtstidx
e566 : c47f             [ 3] 	cpy df_eolidx
e568 : 8489             [ 3] 	sty df_exeoff
e56a : d0ce             [ 3] 	bne df_rt_exec_stat
                             	
                             	; reached end of line, move to next
e56c : a200             [ 2] 	ldx #0
e56e : 18               [ 2] 	clc
e56f : a187             [ 6] 	lda (df_currlin,x)
e571 : 6587             [ 3] 	adc df_currlin
e573 : 8587             [ 3] 	sta df_currlin
                             	_bcc 2
                             
e577 : e688             [ 5] 	inc df_currlin+1
                             
                             	; start from first statement in new line
e579 : a003             [ 2] 	ldy #3
e57b : 8489             [ 3] 	sty df_exeoff
                             
                             	; check if this line has any content (length >0)
e57d : a187             [ 6] 	lda (df_currlin,x)
e57f : 857f             [ 3] 	sta df_eolidx
                             	; no more lines (len = 0), program done
e581 : d0b7             [ 3] 	bne df_rt_exec_stat
                             	; else done
                             	; normally wouldn't get here except immediate mo
                             	; if line number <> 0 then error
                             ;	lda df_immed
                             ;	beq df_rt_unexpected_end
e583 :                       df_rt_exec_end
e583 : 18               [ 2] 	clc
e584 : 60               [ 6] 	rts
e585 :                       df_rt_exec_check_key
e585 : c91a             [ 2] 	cmp #UTF_BRK					; CTRK-Z?
e587 : f006             [ 3] 	beq df_rt_exec_ctrl_z
e589 : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
e58b : d0d3             [ 3] 	bne df_rt_exec_no_key			; None relevant keys, go
e58d :                       df_rt_exec_ctrl_c
                             	SWBRK DFERR_BREAK
                             
e58f :                       df_rt_exec_ctrl_z
                             	; Force a break with zero error number
                             	; this will drop in to the monitor
                             	SWBRK 0
                             
                             
                             ;df_rt_unexpected_end
                             ;	SWBRK DFERR_IMMEDIATE
                             
                             	; if hi byte of nextline is not zero then
AS65 Assembler for R6502 [1.42].                                     Page  209
---------------------------------- bank0.s -----------------------------------

                             	; current line = next line
e591 :                       df_rt_exec_jump
                             	; initialise statement pointer from nextlin,toks
e591 : a68a             [ 3] 	ldx df_nextlin
e593 : a58b             [ 3] 	lda df_nextlin+1
e595 : a480             [ 3] 	ldy df_nxtstidx
e597 : 4c40e5           [ 3] 	jmp df_rt_exec_init_ptr
                             
                             
                             ;****************************************
                             ;* Run statement in A
                             ;****************************************
e59a :                       df_rt_run_token
                             	; mask off MSB
                             ;	and #0x7f
                             	; multiply by 2
e59a : 0a               [ 2] 	asl a
e59b : aa               [ 2] 	tax
e59c : bd85e6           [ 4] 	lda df_rt_tokenjmp,x
e59f : 85a2             [ 3] 	sta df_tmpptra
e5a1 : bd86e6           [ 4] 	lda df_rt_tokenjmp+1,x
e5a4 : 85a3             [ 3] 	sta df_tmpptra+1
                             	; execution code finishes with rts
e5a6 : 6ca200           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* X,A : Line Address, Y = Index
                             ;* C=0 Found next statement
                             ;* C=1 No statement found
                             ;****************************************
e5a9 :                       df_rt_nextstat
                             	; save pointer
e5a9 : 8691             [ 3] 	stx df_lineptr
e5ab : 8592             [ 3] 	sta df_lineptr+1
                             	; if end of program then err
e5ad : a200             [ 2] 	ldx #0
e5af : a191             [ 6] 	lda (df_lineptr,x)
e5b1 : f022             [ 3] 	beq df_rt_nextstat_err
                             	; if next statement idx == line length
                             ;	lda (df_lineptr),y
                             ;	beq df_rt_nextstat_ln
e5b3 : b191             [ 5] 	lda (df_lineptr),y
e5b5 : c191             [ 6] 	cmp (df_lineptr,x)
e5b7 : f007             [ 3] 	beq df_rt_nextstat_ln
                             	; then go to next line
                             	; else make this Y
e5b9 : a8               [ 2] 	tay
                             	; X = line low
e5ba : a691             [ 3] 	ldx df_lineptr
                             	; A = line high
e5bc : a592             [ 3] 	lda df_lineptr+1
e5be : 18               [ 2] 	clc
e5bf : 60               [ 6] 	rts
e5c0 :                       df_rt_nextstat_ln
                             	; for next line, add line length to ptr
e5c0 : 18               [ 2] 	clc
                             ;	lda (df_lineptr,x)
e5c1 : 6591             [ 3] 	adc df_lineptr
e5c3 : 8591             [ 3] 	sta df_lineptr
                             	_bcc 2
                             
AS65 Assembler for R6502 [1.42].                                     Page  210
---------------------------------- bank0.s -----------------------------------

e5c7 : e692             [ 5] 	inc df_lineptr+1
                             	; if end of program set C as error
e5c9 : a191             [ 6] 	lda (df_lineptr,x)
e5cb : f008             [ 3] 	beq df_rt_nextstat_err
e5cd : a691             [ 3] 	ldx df_lineptr
e5cf : a592             [ 3] 	lda df_lineptr+1
                             	; always skip line number and length for start o
e5d1 : a003             [ 2] 	ldy #3
e5d3 : 18               [ 2] 	clc
e5d4 : 60               [ 6] 	rts
e5d5 :                       df_rt_nextstat_err
e5d5 : a000             [ 2] 	ldy #0
e5d7 : 38               [ 2] 	sec
e5d8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push current line and statement to runtime sta
                             ;****************************************
e5d9 :                       df_rt_push_stat
e5d9 : a581             [ 3] 	lda df_curstidx
e5db : 201ef7           [ 6] 	jsr df_rst_pushByte
e5de : a588             [ 3] 	lda df_currlin+1
e5e0 : a687             [ 3] 	ldx df_currlin
e5e2 : 4c36f7           [ 3] 	jmp df_rst_pushWord
                             ;	clc
                             ;	rts
                             
                             ;****************************************
                             ;* Pop line and statement from runtime stack
                             ;* And transfer control to next statement
                             ;****************************************
e5e5 :                       df_rt_pop_stat
e5e5 : 2044f7           [ 6] 	jsr df_rst_popWord
e5e8 : 868a             [ 3] 	stx	df_nextlin
e5ea : 858b             [ 3] 	sta df_nextlin+1
e5ec : 2027f7           [ 6] 	jsr df_rst_popByte
e5ef : a8               [ 2] 	tay
e5f0 : a68a             [ 3] 	ldx df_nextlin
e5f2 : a58b             [ 3] 	lda df_nextlin+1
e5f4 : 20a9e5           [ 6] 	jsr df_rt_nextstat
e5f7 : 868a             [ 3] 	stx df_nextlin
e5f9 : 858b             [ 3] 	sta df_nextlin+1
e5fb : 8480             [ 3] 	sty df_nxtstidx
                             ;	clc
e5fd : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find proc definition in procptr
                             ;* Only call if proc not found before
                             ;****************************************
e5fe :                       df_rt_findproc
                             	; start at program beginning
                             	_cpyZPWord df_prgstrt,df_lineptr
                             
e606 : a003             [ 2] 	ldy #3
e608 : 8493             [ 3] 	sty df_lineidx
e60a : a200             [ 2] 	ldx #0
e60c : a191             [ 6] 	lda (df_lineptr,x)
e60e : f034             [ 3] 	beq df_rt_findproc_err
e610 :                       df_rt_findproc_cmd
e610 : c8               [ 2] 	iny
e611 : b191             [ 5] 	lda (df_lineptr),y
AS65 Assembler for R6502 [1.42].                                     Page  211
---------------------------------- bank0.s -----------------------------------

e613 : 10fb             [ 3] 	bpl df_rt_findproc_cmd
e615 : c986             [ 2] 	cmp #DFRT_DEF
e617 : d017             [ 3] 	bne df_rt_findproc_nextstat
                             	; skip def token
e619 : c8               [ 2] 	iny
                             	; skip proc escape token
e61a : c8               [ 2] 	iny
                             	; now check the proc address against procptr
e61b : b191             [ 5] 	lda (df_lineptr),y
e61d : c58f             [ 3] 	cmp df_procptr
e61f : d00f             [ 3] 	bne df_rt_findproc_nextstat
e621 : c8               [ 2] 	iny
e622 : b191             [ 5] 	lda (df_lineptr),y
e624 : c590             [ 3] 	cmp df_procptr+1
e626 : d008             [ 3] 	bne df_rt_findproc_nextstat
                             
                             	; found it, return AXY with line details
e628 : a691             [ 3] 	ldx df_lineptr
e62a : a592             [ 3] 	lda df_lineptr+1
e62c : a493             [ 3] 	ldy df_lineidx
e62e : 18               [ 2] 	clc
e62f : 60               [ 6] 	rts
e630 :                       df_rt_findproc_nextstat
                             	; restore AXY line details and find next stateme
e630 : a691             [ 3] 	ldx df_lineptr
e632 : a592             [ 3] 	lda df_lineptr+1
e634 : a493             [ 3] 	ldy df_lineidx
e636 : 20a9e5           [ 6] 	jsr df_rt_nextstat
e639 : b009             [ 3] 	bcs df_rt_findproc_err
e63b : 8691             [ 3] 	stx df_lineptr
e63d : 8592             [ 3] 	sta df_lineptr+1
e63f : 8493             [ 3] 	sty df_lineidx
e641 : 4c10e6           [ 3] 	jmp df_rt_findproc_cmd
                             	; error
e644 :                       df_rt_findproc_err
                             	SWBRK DFERR_NOPROC
                             
                             
                             ;****************************************
                             ;* Find an escape value
                             ;* Does not check for end of line or statement
                             ;****************************************
e646 :                       df_rt_findescval
e646 : a489             [ 3] 	ldy df_exeoff
e648 : 88               [ 2] 	dey
e649 :                       df_rt_findescval_loop
e649 : c8               [ 2] 	iny
e64a : b187             [ 5] 	lda (df_currlin),y
e64c : c920             [ 2] 	cmp #DFTK_ESCVAL
e64e : b0f9             [ 3] 	bcs df_rt_findescval_loop
e650 : 8489             [ 3] 	sty df_exeoff
e652 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Skip white space
                             ;* Does not check for end of line or statement
                             ;* A contains non-ws char, df_exeoff updated
                             ;****************************************
e653 :                       df_rt_skip_ws
e653 : a489             [ 3] 	ldy df_exeoff
e655 : 88               [ 2] 	dey
e656 :                       df_rt_skip_ws_loop
AS65 Assembler for R6502 [1.42].                                     Page  212
---------------------------------- bank0.s -----------------------------------

e656 : c8               [ 2] 	iny
e657 : b187             [ 5] 	lda (df_currlin),y
e659 : c920             [ 2] 	cmp #' '
e65b : f0f9             [ 3] 	beq df_rt_skip_ws_loop
e65d : 8489             [ 3] 	sty df_exeoff
e65f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Get an lvar
                             ;* Assumes next token will be escape DFTK_VAR
                             ;* tmpptra contains vvt slot address
                             ;* X,A is the lvar pointer
                             ;****************************************
e660 :                       df_rt_getlvar
e660 : 2046e6           [ 6] 	jsr df_rt_findescval
                             	; move past the escape value
e663 : c8               [ 2] 	iny
                             
                             	; get variable address
e664 : b187             [ 5] 	lda (df_currlin),y
e666 : 85a2             [ 3] 	sta df_tmpptra
e668 : c8               [ 2] 	iny
e669 : b187             [ 5] 	lda (df_currlin),y
e66b : 85a3             [ 3] 	sta df_tmpptra+1
                             
e66d : 8489             [ 3] 	sty df_exeoff
                             	; get the type
e66f : a000             [ 2] 	ldy #0
e671 : b1a2             [ 5] 	lda (df_tmpptra),y
                             	; set carry flag to return pointer (lvar)
e673 : 38               [ 2] 	sec
e674 : a489             [ 3] 	ldy df_exeoff
e676 : 20c6e3           [ 6] 	jsr df_rt_eval_var
e679 : 4c9ff7           [ 3] 	jmp df_ost_popPtr
                             ;	rts
                             
                             ;****************************************
                             ;* Pop stat from rt stack and continue
                             ;* Y MUST BE ON THE CPU STACK AS IT GETS PLYed HE
                             ;****************************************
e67c :                       df_rt_pop_stat_go
e67c : 20e5e5           [ 6] 	jsr df_rt_pop_stat
                             	; restore stack pointer so we don't lose this en
e67f : 68               [ 4] 	pla
e680 : a8               [ 2] 	tay
e681 : 8477             [ 3] 	sty df_rtstop
e683 : 18               [ 2] 	clc
e684 : 60               [ 6] 	rts
                             
                             	include "dflat/rtjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
AS65 Assembler for R6502 [1.42].                                     Page  213
---------------------------------- bank0.s -----------------------------------

                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime token an
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
e685 :                       df_rt_tokenjmp
e685 : 65ee                  	dw	df_rt_assign
e687 : c8f5                  	dw	df_rt_proc
e689 : 76ee                  	dw	df_rt_comment
e68b : 1dee                  	dw	df_rt_println
e68d : e2ed                  	dw	df_rt_printat
e68f : eced                  	dw	df_rt_print
e691 : 68f6                  	dw	df_rt_def			; 0x86
e693 : e0f6                  	dw	df_rt_enddef		; 0x87
e695 : ddf6                  	dw	df_rt_return		; 0x88
e697 : 8af5                  	dw	df_rt_abort			; 0x89
e699 : 40ec                  	dw	df_rt_local
e69b : 6fec                  	dw	df_rt_dim
e69d : 0eeb                  	dw	df_rt_repeat		; 0x8c
e69f : 16eb                  	dw	df_rt_until
e6a1 : 75ea                  	dw	df_rt_for			; 0x8e
e6a3 : b3ea                  	dw	df_rt_next			; 0x8f
e6a5 : 4ee9                  	dw	df_rt_while			; 0x90
e6a7 : b1e9                  	dw	df_rt_wend			; 0x81
e6a9 : 34ea                  	dw	df_rt_if			; 0x92
e6ab : 22ea                  	dw	df_rt_else			; 0x93
e6ad : 1dea                  	dw	df_rt_endif			; 0x94
e6af : 22ea                  	dw	df_rt_elseif		; 0x95
e6b1 : 76ee                  	dw	df_rt_data			; 0x96
e6b3 : 8bfa                  	dw	df_rt_asm_assemble	; 0x97 df_rt_asm_assemble
e6b5 : 77ee                  	dw	df_rt_run
e6b7 : 29ef                  	dw	df_rt_list
e6b9 : 04ec                  	dw	df_rt_input
e6bb : 75ed                  	dw	df_rt_text
e6bd : fdec                  	dw	df_rt_plot
e6bf : 6fed                  	dw	df_rt_cursor
e6c1 : faec                  	dw	df_rt_cls
e6c3 : 78f1                  	dw	df_rt_poke
e6c5 : 76f1                  	dw	df_rt_doke
e6c7 : baf1                  	dw	df_rt_sound
e6c9 : c0f1                  	dw	df_rt_music
e6cb : d5f1                  	dw	df_rt_play
e6cd : eceb                  	dw	df_rt_read
e6cf : 4be9                  	dw	df_rt_new
                             ;	dw	df_rt_renum
e6d1 : cced                  	dw	df_rt_wait
e6d3 : 55f3                  	dw	df_rt_reset
e6d5 : 78ed                  	dw	df_rt_hires
e6d7 : 91ed                  	dw	df_rt_point
e6d9 : bbed                  	dw	df_rt_line
e6db : aded                  	dw	df_rt_lineto
AS65 Assembler for R6502 [1.42].                                     Page  214
---------------------------------- bank0.s -----------------------------------

e6dd : 7bed                  	dw	df_rt_pixmode
e6df : 81ed                  	dw	df_rt_ink
e6e1 : 87ed                  	dw	df_rt_paper
e6e3 : 9bed                  	dw	df_rt_circle
                             ;	dw	df_rt_himem
e6e5 : 48e9                  	dw	df_rt_monitor
e6e7 : 8cf5                  	dw	df_rt_sprchar
e6e9 : 96f5                  	dw	df_rt_sprpos
e6eb : a2f5                  	dw	df_rt_sprupd
e6ed : abf5                  	dw	df_rt_sprinit
e6ef : aef5                  	dw	df_rt_sprmulti
                             ;	dw	df_rt_save
                             ;	dw	df_rt_load
e6f1 : f7f2                  	dw	df_rt_bsave
e6f3 : c4f2                  	dw	df_rt_bload
e6f5 : 72f2                  	dw	df_rt_tsave
e6f7 : 8cf2                  	dw	df_rt_tload
e6f9 : 46f2                  	dw	df_rt_delete
e6fb : 53f2                  	dw	df_rt_dir
e6fd : 6cec                  	dw	df_rt_redim
                             
e6ff : 6cf3                  	dw	df_rt_peek
e701 : 6af3                  	dw	df_rt_deek
e703 : f5f3                  	dw	df_rt_stick
e705 : fbf3                  	dw	df_rt_get
e707 : bbf4                  	dw	df_rt_chr
e709 : 0df5                  	dw	df_rt_left
e70b : 1ef5                  	dw	df_rt_right
e70d : 39f5                  	dw	df_rt_mid
e70f : 57f5                  	dw	df_rt_len
e711 : a7f3                  	dw	df_rt_mem
e713 : 0ff4                  	dw	df_rt_scrn
e715 : 85f3                  	dw	df_rt_rnd
e717 : 29f4                  	dw	df_rt_elapsed
e719 : 44f4                  	dw	df_rt_call
e71b : cff4                  	dw	df_rt_hex
e71d : 00f5                  	dw	df_rt_dec
e71f : 63f5                  	dw	df_rt_asc
e721 : 74f5                  	dw	df_rt_val
e723 : 1cf4                  	dw	df_rt_pixel
e725 : b4f5                  	dw	df_rt_sprhit
e727 : 56f4                  	dw	df_rt_sgn
e729 : 73f4                  	dw	df_rt_addr
                             	
e72b : 9ee7                  	dw	df_rt_mult
e72d : bfe7                  	dw	df_rt_div
e72f : e0e7                  	dw	df_rt_mod
e731 : 01e8                  	dw	df_rt_asl
e733 : 14e8                  	dw	df_rt_lsr
e735 : 78e7                  	dw	df_rt_add
e737 : 8be7                  	dw	df_rt_sub
                             	
e739 : 27e8                  	dw	df_rt_and
e73b : 36e8                  	dw	df_rt_or
e73d : 45e8                  	dw	df_rt_eor
e73f : dee8                  	dw	df_rt_comlte
e741 : e7e8                  	dw	df_rt_comgte
e743 : f0e8                  	dw	df_rt_comne
e745 : c3e8                  	dw	df_rt_comlt
e747 : cce8                  	dw	df_rt_comgt
e749 : d5e8                  	dw	df_rt_comeq
                             
AS65 Assembler for R6502 [1.42].                                     Page  215
---------------------------------- bank0.s -----------------------------------

                             
                             ; escape sequence handlers
                             ; to do the reverse of tokenising during the list
                             ; command which is also used to save to disk.
e74b :                       df_rt_escjmp
e74b : fcef                  	dw df_rt_lst_chr
e74d : fbef                  	dw df_rt_lst_reserved
e74f : fbef                  	dw df_rt_lst_reserved
e751 : fbef                  	dw df_rt_lst_reserved
e753 : fbef                  	dw df_rt_lst_reserved	
e755 : fbef                  	dw df_rt_lst_reserved	; no such thing as bytdec
e757 : 19f0                  	dw df_rt_lst_bythex
e759 : 3ef0                  	dw df_rt_lst_bytbin
e75b : fbef                  	dw df_rt_lst_reserved	
e75d : 62f0                  	dw df_rt_lst_intdec
e75f : 2cf0                  	dw df_rt_lst_inthex
e761 : 46f0                  	dw df_rt_lst_intbin
e763 : fbef                  	dw df_rt_lst_reserved
e765 : fbef                  	dw df_rt_lst_reserved
e767 : fbef                  	dw df_rt_lst_reserved
e769 : fbef                  	dw df_rt_lst_reserved	
e76b : bff0                  	dw df_rt_lst_strlit
e76d : 6df0                  	dw df_rt_lst_var
e76f : 6df0                  	dw df_rt_lst_proc
                             
                             	include "dflat/rtsubs.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTSUBS.S
                             ;*  Module that implements the runtime execution 
                             ;*  keywords and functions.
                             ;*  So this is where most of the action is for ru
                             ;*  a line is being executed, the dflat runtime c
                             ;*  jumps through the runtime table to routines h
                             ;*  Every dflat statement begins with a token (ig
                             ;*  whitespace), even the implicit assignment and
                             ;*  invocation.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
e771 :                       mod_sz_rtsubs_s
                             
                             	include "dflat/numop.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  NUMOP.S
                             ;*	Dflat number AND string operators.
AS65 Assembler for R6502 [1.42].                                     Page  216
---------------------------------- bank0.s -----------------------------------

                             ;*  Uses the operator stack to get parameters, le
                             ;*  result on the operator stack.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; common pushint code
e771 :                       df_rt_putintres
e771 : a6a2             [ 3] 	ldx df_tmpptra
e773 : a5a3             [ 3] 	lda df_tmpptra+1
e775 : 4c67f7           [ 3] 	jmp df_ost_pushInt
                             
                             ; add two numbers
e778 :                       df_rt_add
e778 : 20cbe4           [ 6] 	jsr df_rt_get2Ints
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e788 : 4c71e7           [ 3] 	jmp df_rt_putintres
                             	
                             ; subtract
e78b :                       df_rt_sub
e78b : 20cbe4           [ 6] 	jsr df_rt_get2Ints
                             	_subZPWord df_tmpptra,df_tmpptrb
                             
e79b : 4c71e7           [ 3] 	jmp df_rt_putintres
                             
                             ; multiply
e79e :                       df_rt_mult
e79e : 20cbe4           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e7b1 : 2044d6           [ 6] 	jsr int_mult
                             	_cpyZPWord num_a,df_tmpptra
                             
e7bc : 4c71e7           [ 3] 	jmp df_rt_putintres
                             
                             ; divide
e7bf :                       df_rt_div
e7bf : 20cbe4           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e7d2 : 206fd6           [ 6] 	jsr int_div
                             	_cpyZPWord num_a,df_tmpptra
                             
e7dd : 4c71e7           [ 3] 	jmp df_rt_putintres
                             
                             ; mod
e7e0 :                       df_rt_mod
e7e0 : 20cbe4           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
e7f3 : 206fd6           [ 6] 	jsr int_div
                             	_cpyZPWord num_x,df_tmpptra
                             
AS65 Assembler for R6502 [1.42].                                     Page  217
---------------------------------- bank0.s -----------------------------------

e7fe : 4c71e7           [ 3] 	jmp df_rt_putintres
                             
                             ; shift left
e801 :                       df_rt_asl
e801 : 20cbe4           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
e804 : a6a4             [ 3] 	ldx df_tmpptrb
e806 : e8               [ 2] 	inx
e807 :                       df_rt_aslbit
e807 : ca               [ 2] 	dex
e808 : f007             [ 3] 	beq df_rt_asldone
e80a : 06a2             [ 5] 	asl df_tmpptra
e80c : 26a3             [ 5] 	rol df_tmpptra+1
e80e : 4c07e8           [ 3] 	jmp df_rt_aslbit
e811 :                       df_rt_asldone
e811 : 4c71e7           [ 3] 	jmp df_rt_putintres
                             
                             ; shift right
e814 :                       df_rt_lsr
e814 : 20cbe4           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
e817 : a6a4             [ 3] 	ldx df_tmpptrb
e819 : e8               [ 2] 	inx
e81a :                       df_rt_lsrbit
e81a : ca               [ 2] 	dex
e81b : f007             [ 3] 	beq df_rt_lsrdone
e81d : 46a3             [ 5] 	lsr df_tmpptra+1
e81f : 66a2             [ 5] 	ror df_tmpptra
e821 : 4c1ae8           [ 3] 	jmp df_rt_lsrbit
e824 :                       df_rt_lsrdone
e824 : 4c71e7           [ 3] 	jmp df_rt_putintres
                             
                             ; logical and
e827 :                       df_rt_and
e827 : 20cbe4           [ 6] 	jsr df_rt_get2Ints
e82a : a5a2             [ 3] 	lda df_tmpptra
e82c : 25a4             [ 3] 	and df_tmpptrb
e82e : aa               [ 2] 	tax
e82f : a5a3             [ 3] 	lda df_tmpptra+1
e831 : 25a5             [ 3] 	and df_tmpptrb+1
e833 : 4c67f7           [ 3] 	jmp df_ost_pushInt
                             	
                             ; logical or
e836 :                       df_rt_or
e836 : 20cbe4           [ 6] 	jsr df_rt_get2Ints
e839 : a5a2             [ 3] 	lda df_tmpptra
e83b : 05a4             [ 3] 	ora df_tmpptrb
e83d : aa               [ 2] 	tax
e83e : a5a3             [ 3] 	lda df_tmpptra+1
e840 : 05a5             [ 3] 	ora df_tmpptrb+1
e842 : 4c67f7           [ 3] 	jmp df_ost_pushInt
                             
                             ; logical eor
e845 :                       df_rt_eor
e845 : 20cbe4           [ 6] 	jsr df_rt_get2Ints
e848 : a5a2             [ 3] 	lda df_tmpptra
e84a : 45a4             [ 3] 	eor df_tmpptrb
e84c : aa               [ 2] 	tax
e84d : a5a3             [ 3] 	lda df_tmpptra+1
e84f : 45a5             [ 3] 	eor df_tmpptrb+1
e851 : 4c67f7           [ 3] 	jmp df_ost_pushInt
                             
AS65 Assembler for R6502 [1.42].                                     Page  218
---------------------------------- bank0.s -----------------------------------

                             ; a==b common function
e854 :                       df_rt_aequb
e854 : a5a2             [ 3] 	lda df_tmpptra
e856 : c5a4             [ 3] 	cmp df_tmpptrb
e858 : d004             [ 3] 	bne df_rt_aequbFin
e85a : a5a3             [ 3] 	lda df_tmpptra+1
e85c : c5a5             [ 3] 	cmp df_tmpptrb+1
e85e :                       df_rt_aequbFin
e85e : 60               [ 6] 	rts
                             
                             ; a-b common function
e85f :                       df_rt_asubb
e85f : 38               [ 2] 	sec
e860 : a5a2             [ 3] 	lda df_tmpptra
e862 : e5a4             [ 3] 	sbc df_tmpptrb
e864 : a5a3             [ 3] 	lda df_tmpptra+1
e866 : e5a5             [ 3] 	sbc df_tmpptrb+1
e868 : 5002             [ 3] 	bvc df_rt_asubbFin
e86a : 4980             [ 2] 	eor #0x80
e86c :                       df_rt_asubbFin
e86c : 60               [ 6] 	rts
                             
                             ; b-a common function
e86d :                       df_rt_bsuba
e86d : 38               [ 2] 	sec
e86e : a5a4             [ 3] 	lda df_tmpptrb
e870 : e5a2             [ 3] 	sbc df_tmpptra
e872 : a5a5             [ 3] 	lda df_tmpptrb+1
e874 : e5a3             [ 3] 	sbc df_tmpptra+1
e876 : 5002             [ 3] 	bvc df_rt_bsubaFin
e878 : 4980             [ 2] 	eor #0x80
e87a :                       df_rt_bsubaFin
e87a : 60               [ 6] 	rts
                             
                             ; common routine push true
e87b :                       df_rt_true
e87b : a2ff             [ 2] 	ldx #0xff
e87d : 8a               [ 2] 	txa
e87e : 4c67f7           [ 3] 	jmp df_ost_pushInt
                             
                             ; common routine push false
e881 :                       df_rt_false
e881 : a200             [ 2] 	ldx #0x00
e883 : 8a               [ 2] 	txa
e884 : 4c67f7           [ 3] 	jmp df_ost_pushInt
                             
                             ; a < b == (a-b) < 0
e887 :                       df_rt_lt
e887 : 20cbe4           [ 6] 	jsr df_rt_get2Ints
e88a : 205fe8           [ 6] 	jsr df_rt_asubb
e88d : 30ec             [ 3] 	bmi df_rt_true
e88f : 10f0             [ 3] 	bpl df_rt_false
                             
                             ; a <=b == !(b-a > 0)
e891 :                       df_rt_lte
e891 : 20cbe4           [ 6] 	jsr df_rt_get2Ints
e894 :                       df_rt_lte_calc
e894 : 206de8           [ 6] 	jsr df_rt_bsuba
e897 : 30e8             [ 3] 	bmi df_rt_false
e899 : 10e0             [ 3] 	bpl df_rt_true
                             
                             ; a > b == (b-a) < 0
AS65 Assembler for R6502 [1.42].                                     Page  219
---------------------------------- bank0.s -----------------------------------

e89b :                       df_rt_gt
e89b : 20cbe4           [ 6] 	jsr df_rt_get2Ints
e89e : 206de8           [ 6] 	jsr df_rt_bsuba
e8a1 : 30d8             [ 3] 	bmi df_rt_true
e8a3 : 10dc             [ 3] 	bpl df_rt_false
                             
                             ; a >= b == (a-b >=0)
e8a5 :                       df_rt_gte
e8a5 : 20cbe4           [ 6] 	jsr df_rt_get2Ints
e8a8 :                       df_rt_gte_calc
e8a8 : 205fe8           [ 6] 	jsr df_rt_asubb
e8ab : 10ce             [ 3] 	bpl df_rt_true
e8ad : 30d2             [ 3] 	bmi df_rt_false
                             
                             ; a == b
e8af :                       df_rt_eq
e8af : 20cbe4           [ 6] 	jsr df_rt_get2Ints
e8b2 : 2054e8           [ 6] 	jsr df_rt_aequb
e8b5 : d0ca             [ 3] 	bne df_rt_false
e8b7 : f0c2             [ 3] 	beq df_rt_true
                             
                             ; a <> b
e8b9 :                       df_rt_ne
e8b9 : 20cbe4           [ 6] 	jsr df_rt_get2Ints
e8bc : 2054e8           [ 6] 	jsr df_rt_aequb
e8bf : f0c0             [ 3] 	beq df_rt_false
e8c1 : d0b8             [ 3] 	bne df_rt_true
                             
                             ; Common usage of boolean operators for num and s
                             
e8c3 :                       df_rt_comlt
                             	; First find the data type on the stack
e8c3 : 2091f7           [ 6] 	jsr df_ost_peekType
e8c6 : 2904             [ 2] 	and #DFST_STR
e8c8 : d04a             [ 4] 	bne df_rt_slt
                             	; If not string then assume number
e8ca : f0bb             [ 3] 	beq df_rt_lt
                             
e8cc :                       df_rt_comgt
                             	; First find the data type on the stack
e8cc : 2091f7           [ 6] 	jsr df_ost_peekType
e8cf : 2904             [ 2] 	and #DFST_STR
e8d1 : d048             [ 4] 	bne df_rt_sgt
                             	; If not string then assume number
e8d3 : f0c6             [ 3] 	beq df_rt_gt
                             
e8d5 :                       df_rt_comeq
                             	; First find the data type on the stack
e8d5 : 2091f7           [ 6] 	jsr df_ost_peekType
e8d8 : 2904             [ 2] 	and #DFST_STR
e8da : d048             [ 4] 	bne df_rt_seq
                             	; If not string then assume number
e8dc : f0d1             [ 3] 	beq df_rt_eq
                             
e8de :                       df_rt_comlte
                             	; First find the data type on the stack
e8de : 2091f7           [ 6] 	jsr df_ost_peekType
e8e1 : 2904             [ 2] 	and #DFST_STR
e8e3 : d014             [ 3] 	bne df_rt_slte
                             	; If not string then assume number
e8e5 : f0aa             [ 3] 	beq df_rt_lte
                             	
AS65 Assembler for R6502 [1.42].                                     Page  220
---------------------------------- bank0.s -----------------------------------

e8e7 :                       df_rt_comgte
                             	; First find the data type on the stack
e8e7 : 2091f7           [ 6] 	jsr df_ost_peekType
e8ea : 2904             [ 2] 	and #DFST_STR
e8ec : d018             [ 4] 	bne df_rt_sgte
                             	; If not string then assume number
e8ee : f0b5             [ 3] 	beq df_rt_gte
                             
e8f0 :                       df_rt_comne
                             	; First find the data type on the stack
e8f0 : 2091f7           [ 6] 	jsr df_ost_peekType
e8f3 : 2904             [ 2] 	and #DFST_STR
e8f5 : d016             [ 4] 	bne df_rt_sne
                             	; If not string then assume number
e8f7 : f0c0             [ 3] 	beq df_rt_ne
                             
                             
                             ;********** STRING OPS **********
                             
                             ; string less than or equal
e8f9 :                       df_rt_slte
e8f9 : 202be9           [ 6] 	jsr df_rt_str_comp
e8fc : 3005             [ 4] 	bmi df_rt_str_comp_true
e8fe : f003             [ 4] 	beq df_rt_str_comp_true
e900 :                       df_rt_str_comp_false
e900 : 4c81e8           [ 3] 	jmp df_rt_false
e903 :                       df_rt_str_comp_true
e903 : 4c7be8           [ 3] 	jmp df_rt_true	
                             
                             ; string greater then or equal	
e906 :                       df_rt_sgte
e906 : 202be9           [ 6] 	jsr df_rt_str_comp
e909 : 10f8             [ 3] 	bpl df_rt_str_comp_true
e90b : 30f3             [ 3] 	bmi df_rt_str_comp_false
                             
                             ; string not equal
e90d :                       df_rt_sne
e90d : 202be9           [ 6] 	jsr df_rt_str_comp
e910 : d0f1             [ 3] 	bne df_rt_str_comp_true
e912 : f0ec             [ 3] 	beq df_rt_str_comp_false
                             
                             ; string less than
e914 :                       df_rt_slt
e914 : 202be9           [ 6] 	jsr df_rt_str_comp
e917 : 30ea             [ 3] 	bmi df_rt_str_comp_true
e919 : 10e5             [ 3] 	bpl df_rt_str_comp_false
                             
                             ; string greater than
e91b :                       df_rt_sgt
e91b : 202be9           [ 6] 	jsr df_rt_str_comp
e91e : 30e0             [ 3] 	bmi df_rt_str_comp_false
e920 : f0de             [ 3] 	beq df_rt_str_comp_false
e922 : d0df             [ 3] 	bne df_rt_str_comp_true
                             
                             ; string equal
e924 :                       df_rt_seq
e924 : 202be9           [ 6] 	jsr df_rt_str_comp
e927 : f0da             [ 3] 	beq df_rt_str_comp_true
e929 : d0d5             [ 3] 	bne df_rt_str_comp_false
                             
                             ; common string comparator
                             ; N=1 means <
AS65 Assembler for R6502 [1.42].                                     Page  221
---------------------------------- bank0.s -----------------------------------

                             ; Z=0 means >
                             ; Z=1 means ==
e92b :                       df_rt_str_comp
e92b : 20dae4           [ 6] 	jsr df_rt_get2Strs
e92e : a000             [ 2] 	ldy #0
e930 :                       df_rt_str_comp_byte
e930 : b1a2             [ 5] 	lda (df_tmpptra),y
e932 : aa               [ 2] 	tax							; Save op1 char in X
e933 : d1a4             [ 5] 	cmp (df_tmpptrb),y
                             	; if c=0 then <
e935 : 9008             [ 3] 	bcc df_rt_str_comp_lt
                             	; if c=1 and nz then >
e937 : d009             [ 3] 	bne df_rt_str_comp_gt
                             	; if here then both strings still the same
e939 : 8a               [ 2] 	txa							; What was op1 char
                             	; if char is zero then end
e93a : f009             [ 3] 	beq df_rt_str_comp_eq
                             	; else do next char
e93c : c8               [ 2] 	iny
e93d : d0f1             [ 3] 	bne df_rt_str_comp_byte ; Always - relying on Y 
e93f :                       df_rt_str_comp_lt
e93f : a9ff             [ 2] 	lda #0xff
e941 : 60               [ 6] 	rts
e942 :                       df_rt_str_comp_gt
e942 : a901             [ 2] 	lda #0x01
e944 : 60               [ 6] 	rts
e945 :                       df_rt_str_comp_eq
e945 : a900             [ 2] 	lda #0x00
e947 : 60               [ 6] 	rts
                             
                             
                             
                             
e948 :                       df_rt_monitor
e948 : 4cbfd4           [ 3] 	jmp command_line
                             
e94b :                       df_rt_new
e94b : 4cc8f7           [ 3] 	jmp df_clear
                             
e94e :                       df_rt_while
                             	; push statement address
e94e : 20d9e5           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_WHILE token
e951 : a990             [ 2] 	lda #DFRT_WHILE
e953 : 201ef7           [ 6] 	jsr df_rst_pushByte
                             
                             	; get value in A,X
e956 : 201ce2           [ 6] 	jsr df_rt_getnval
                             
                             	; if value<>0 then continue
e959 : e000             [ 2] 	cpx #0
e95b : f001             [ 3] 	beq df_rt_while_done
e95d : 60               [ 6] 	rts
e95e :                       df_rt_while_done
                             	; pop while data off stack as not needed
e95e : 2044f7           [ 6] 	jsr df_rst_popWord
e961 : 2044f7           [ 6] 	jsr df_rst_popWord
                             	; while evaluated false so find wend
                             	; but check for any nested while/wends
                             	; nest = 1 to start
e964 : a594             [ 3] 	lda df_ifnest
e966 : 48               [ 3] 	pha
AS65 Assembler for R6502 [1.42].                                     Page  222
---------------------------------- bank0.s -----------------------------------

e967 : a901             [ 2] 	lda #1
e969 : 8594             [ 3] 	sta df_ifnest
                             	; find the matching else/elseif/endif
                             	; start from current statement
                             	_cpyZPWord df_currlin,df_nextlin
                             
e973 :                       df_rt_findwend
e973 : a68a             [ 3] 	ldx df_nextlin
e975 : a58b             [ 3] 	lda df_nextlin+1
e977 : a481             [ 3] 	ldy df_curstidx
e979 : 20a9e5           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e97c : b031             [ 3] 	bcs df_rt_wend_end
e97e : 868a             [ 3] 	stx df_nextlin
e980 : 858b             [ 3] 	sta df_nextlin+1
e982 : 8481             [ 3] 	sty df_curstidx
                             	; find the command token
e984 :                       df_rt_while_cmd
e984 : c8               [ 2] 	iny
e985 : b18a             [ 5] 	lda (df_nextlin),y
e987 : 10fb             [ 3] 	bpl df_rt_while_cmd
                             	; check for wend
e989 : c991             [ 2] 	cmp #DFRT_WEND
e98b : d019             [ 3] 	bne df_rt_check_while
                             	; decrement nest
e98d : c694             [ 5] 	dec df_ifnest
                             	; if not zero then go find more commands
e98f : d0e2             [ 3] 	bne df_rt_findwend
                             	; else found it, restore if nest
                             	; and skip the wend statement
e991 : 68               [ 4] 	pla
e992 : 8594             [ 3] 	sta df_ifnest
e994 : a68a             [ 3] 	ldx df_nextlin
e996 : a58b             [ 3] 	lda df_nextlin+1
e998 : a481             [ 3] 	ldy df_curstidx
e99a : 20a9e5           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e99d : b010             [ 3] 	bcs df_rt_wend_end
                             	; need to update nxtstidx to transfer control
e99f : 868a             [ 3] 	stx df_nextlin
e9a1 : 858b             [ 3] 	sta df_nextlin+1
e9a3 : 8480             [ 3] 	sty df_nxtstidx
e9a5 : 60               [ 6] 	rts
e9a6 :                       df_rt_check_while
                             	; check for while
e9a6 : c990             [ 2] 	cmp #DFRT_WHILE
e9a8 : d0c9             [ 3] 	bne df_rt_findwend
                             	; if while found then increment nest
e9aa : e694             [ 5] 	inc df_ifnest
e9ac : 4c73e9           [ 3] 	jmp df_rt_findwend
e9af :                       df_rt_wend_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
e9b1 :                       df_rt_wend
e9b1 : 2027f7           [ 6] 	jsr df_rst_popByte
e9b4 : c990             [ 2] 	cmp #DFRT_WHILE
e9b6 : d00d             [ 3] 	bne df_rt_wend_err
                             	; pop the stat and continue
e9b8 : 2044f7           [ 6] 	jsr df_rst_popWord
e9bb : 868a             [ 3] 	stx	df_nextlin
e9bd : 858b             [ 3] 	sta df_nextlin+1
AS65 Assembler for R6502 [1.42].                                     Page  223
---------------------------------- bank0.s -----------------------------------

e9bf : 2027f7           [ 6] 	jsr df_rst_popByte
e9c2 : 8580             [ 3] 	sta df_nxtstidx
e9c4 : 60               [ 6] 	rts
e9c5 :                       df_rt_wend_err
                             	SWBRK DFERR_WEND
                             
                             
                             ;move to next statement during if/else matching
                             ;end of program is an error
e9c7 :                       df_rt_if_stat
e9c7 : a68a             [ 3] 	ldx df_nextlin
e9c9 : a58b             [ 3] 	lda df_nextlin+1
e9cb : a481             [ 3] 	ldy df_curstidx
e9cd : 20a9e5           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e9d0 : b009             [ 3] 	bcs df_rt_if_stat_err
e9d2 : 868a             [ 3] 	stx df_nextlin
e9d4 : 858b             [ 3] 	sta df_nextlin+1
e9d6 : 8481             [ 3] 	sty df_curstidx
e9d8 : 8480             [ 3] 	sty df_nxtstidx
e9da : 60               [ 6] 	rts
                             ; program ended with no match
e9db :                       df_rt_if_stat_err
                             	SWBRK DFERR_UNCLOSEDIF
                             
                             
                             ; find matching else/elseif/endif
                             ; C = 0 match else/elseif/endif
                             ; C = 1 match endif only
                             ; endif is always matched
                             ; ** MAKE SURE NEXTLIN IS POPULATED! **
e9dd :                       df_rt_if_match
                             	; save the current if nest level
e9dd : a594             [ 3] 	lda df_ifnest
e9df : 48               [ 3] 	pha
                             	; local if nest level is zero to start with
e9e0 : a900             [ 2] 	lda #0
e9e2 : 8594             [ 3] 	sta df_ifnest
                             	; save match pref
e9e4 : 08               [ 3] 	php
                             	; find the matching else/elseif/endif
                             	; start from df_nextlin, df_curstidx
e9e5 :                       df_rt_findelseendif
e9e5 : 20c7e9           [ 6] 	jsr df_rt_if_stat
                             	; find command
e9e8 :                       df_rt_ifcmd
e9e8 : c8               [ 2] 	iny
e9e9 : b18a             [ 5] 	lda (df_nextlin),y
e9eb : 10fb             [ 3] 	bpl df_rt_ifcmd
                             	; check for endif
e9ed : c994             [ 2] 	cmp #DFRT_ENDIF
e9ef : f015             [ 4] 	beq df_rt_ifelse
                             
e9f1 : 28               [ 4] 	plp
e9f2 : 08               [ 3] 	php
                             
e9f3 : b008             [ 3] 	bcs df_rt_ifskipelseif
e9f5 : c993             [ 2] 	cmp #DFRT_ELSE
e9f7 : f00d             [ 4] 	beq df_rt_ifelse
e9f9 : c995             [ 2] 	cmp #DFRT_ELSEIF
e9fb : f009             [ 4] 	beq df_rt_ifelse
e9fd :                       df_rt_ifskipelseif
AS65 Assembler for R6502 [1.42].                                     Page  224
---------------------------------- bank0.s -----------------------------------

                             	; another if token found - increment lcoal if ne
e9fd : c992             [ 2] 	cmp #DFRT_IF
e9ff : d002             [ 4] 	bne df_rt_skipnestif
ea01 : e694             [ 5] 	inc df_ifnest
ea03 :                       df_rt_skipnestif
                             	; no tokens of interest found, so next statement
ea03 : 4ce5e9           [ 3] 	jmp df_rt_findelseendif
                             
                             	; found else/elseif/endif
                             	; but check if this is nested
ea06 :                       df_rt_ifelse
                             	; nest counter zero then found matching else/els
ea06 : a694             [ 3] 	ldx df_ifnest
ea08 : f009             [ 3] 	beq df_rt_if_found
                             	; endif token found so decrement local nest
ea0a : c994             [ 2] 	cmp #DFRT_ENDIF
ea0c : d002             [ 3] 	bne df_rt_skipnestendif
ea0e : c694             [ 5] 	dec df_ifnest
ea10 :                       df_rt_skipnestendif
                             	; continue to search for else/endif
ea10 : 4ce5e9           [ 3] 	jmp df_rt_findelseendif
                             	; ok got a match
ea13 :                       df_rt_if_found
                             	; remove pref
ea13 : 28               [ 4] 	plp
                             	; restore global if nest
ea14 : 8538             [ 3] 	sta tmp_d			; Using as a temp place!
ea16 : 68               [ 4] 	pla					; Get nest from stack
ea17 : aa               [ 2] 	tax					; And put in X
ea18 : a538             [ 3] 	lda tmp_d			; Get a back from temp!
ea1a : 8694             [ 3] 	stx df_ifnest		; Now restore the nest counter
                             
                             	;A contains the token found, Y is index in to df
                             ;	clc
ea1c : 60               [ 6] 	rts
                             
ea1d :                       df_rt_endif
                             	; decrement if next level
ea1d : c694             [ 5] 	dec df_ifnest
ea1f : 3011             [ 3] 	bmi df_rt_noif_err
ea21 :                       df_rt_if_done
ea21 : 60               [ 6] 	rts
                             
                             	; else and ifelse encountered in a normal sequen
                             	; only happens when the clause has been executed
                             	; so we only now need to find the endif
ea22 :                       df_rt_elseif
ea22 :                       df_rt_else
                             	; not in if mode then error
ea22 : a594             [ 3] 	lda df_ifnest
ea24 : f00c             [ 3] 	beq df_rt_noif_err
                             	; find endif only
                             	; starting from current line and curstidx
                             	_cpyZPWord df_currlin,df_nextlin
                             
ea2e : 38               [ 2] 	sec
ea2f : 4cdde9           [ 3] 	jmp df_rt_if_match
                             
                             ; endif/else/elseif encountered outside of an if
ea32 :                       df_rt_noif_err
                             	SWBRK DFERR_NOIF
                             
AS65 Assembler for R6502 [1.42].                                     Page  225
---------------------------------- bank0.s -----------------------------------

                             
                             	; when if is encountered, the job of this routin
                             	; to determine which clause to execute, then tra
                             	; program control to that point.  in normal prog
                             	; sequence else/elseif statements will signify t
                             	; of an if construct.
ea34 :                       df_rt_if
                             	; increment global if nest counter
ea34 : e694             [ 5] 	inc df_ifnest
ea36 :                       df_rt_ifeval
                             	; get value
ea36 : 201ce2           [ 6] 	jsr df_rt_getnval
                             	; if X,A<>0 if is successful then continue norma
ea39 : a8               [ 2] 	tay
ea3a : d0e5             [ 3] 	bne df_rt_if_done
ea3c : 8a               [ 2] 	txa
ea3d : d0e2             [ 3] 	bne df_rt_if_done
                             	; got here then if clause evaluated to false
                             	; match with else/elseif/endif
                             	; df_nextlin is used to find the clause to execu
                             	_cpyZPWord df_currlin,df_nextlin
                             
ea47 : 18               [ 2] 	clc
ea48 : 20dde9           [ 6] 	jsr df_rt_if_match
                             	; A contains the token found, Y is index of this
                             
ea4b : c993             [ 2] 	cmp #DFRT_ELSE
                             	; else: df_nextlin and df_nxtstidx points to the
ea4d : f023             [ 3] 	beq df_rt_do_else
                             
ea4f : c994             [ 2] 	cmp #DFRT_ENDIF
                             	; else: df_nextlin and df_nxtstidx points to the
ea51 : f0ce             [ 3] 	beq df_rt_if_done
                             
                             	; elif detected - increment past the token and e
                             	; make this the current line and token index
                             	_cpyZPWord df_nextlin,df_currlin
                             
                             	; move past the token and save position
ea5b : c8               [ 2] 	iny
ea5c : 98               [ 2] 	tya
ea5d : 48               [ 3] 	pha
                             	; initialise statement pointer
ea5e : a481             [ 3] 	ldy df_curstidx
ea60 : a687             [ 3] 	ldx df_currlin
ea62 : a588             [ 3] 	lda df_currlin+1
ea64 : 2027e5           [ 6] 	jsr df_rt_init_stat_ptr
                             	; restore Y (one byte past the token) and save i
ea67 : 68               [ 4] 	pla
ea68 : a8               [ 2] 	tay
ea69 : 8489             [ 3] 	sty df_exeoff
                             	; don't force a jump as we've initalised all var
ea6b : a900             [ 2] 	lda #0
ea6d : 858b             [ 3] 	sta df_nextlin+1
                             	; now everyting is set up to evaluate the elif c
ea6f : 4c36ea           [ 3] 	jmp df_rt_ifeval
                             
ea72 :                       df_rt_do_else
                             	; we need to point to the next statement not thi
ea72 : 4cc7e9           [ 3] 	jmp df_rt_if_stat
                             
ea75 :                       df_rt_for
AS65 Assembler for R6502 [1.42].                                     Page  226
---------------------------------- bank0.s -----------------------------------

                             	; push statement address to rt stack
ea75 : 20d9e5           [ 6] 	jsr df_rt_push_stat
                             	; get lvar
ea78 : 2060e6           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer, A is fine to trample
ea7b : 48               [ 3] 	pha
ea7c : 8a               [ 2] 	txa
ea7d : 48               [ 3] 	pha
                             
                             	; find starting value
                             	; evaluate the starting value
                             	; can't use df_rt_getnval as need to use A,X fir
ea7e : e689             [ 5] 	inc df_exeoff
ea80 : 2022e2           [ 6] 	jsr df_rt_neval
                             	; get ready to update the counter using pointer
ea83 : 68               [ 4] 	pla
ea84 : aa               [ 2] 	tax
ea85 : 86a2             [ 3] 	stx df_tmpptra
ea87 : 68               [ 4] 	pla
ea88 : 85a3             [ 3] 	sta df_tmpptra+1
                             	; But remember lvar pointer for later A is ok to
ea8a : 48               [ 3] 	pha
ea8b : 8a               [ 2] 	txa
ea8c : 48               [ 3] 	pha
                             
                             	; get the starting value from op stack
ea8d : 2097f7           [ 6] 	jsr df_ost_popInt
                             	; save it to counter slot
ea90 : a001             [ 2] 	ldy #1
ea92 : 91a2             [ 5] 	sta (df_tmpptra),y
ea94 : 8a               [ 2] 	txa
ea95 : 88               [ 2] 	dey
ea96 : 91a2             [ 5] 	sta (df_tmpptra),y
                             
                             	; find end value
                             	; evaluate the end value
ea98 : e689             [ 5] 	inc df_exeoff
ea9a : 201ce2           [ 6] 	jsr df_rt_getnval
                             	; and put on rt stack
ea9d : 2036f7           [ 6] 	jsr df_rst_pushWord
                             
                             	; find step value
                             	; evaluate the end value
eaa0 : e689             [ 5] 	inc df_exeoff
eaa2 : 201ce2           [ 6] 	jsr df_rt_getnval
                             	; and push on rt stack
eaa5 : 2036f7           [ 6] 	jsr df_rst_pushWord
                             	; save the counter lvar pointer
eaa8 : 68               [ 4] 	pla
eaa9 : aa               [ 2] 	tax
eaaa : 68               [ 4] 	pla
eaab : 2036f7           [ 6] 	jsr df_rst_pushWord
                             	; all done - counter set to start
                             	; stack contains counter slot, step val, end val
                             	; now push for token
eaae : a98e             [ 2] 	lda #DFRT_FOR
eab0 : 4c1ef7           [ 3] 	jmp df_rst_pushByte
                             
eab3 :                       df_rt_next
                             	; remember stack position
eab3 : a477             [ 3] 	ldy df_rtstop
eab5 : 98               [ 2] 	tya
AS65 Assembler for R6502 [1.42].                                     Page  227
---------------------------------- bank0.s -----------------------------------

eab6 : 48               [ 3] 	pha
eab7 : 2027f7           [ 6] 	jsr df_rst_popByte
eaba : c98e             [ 2] 	cmp #DFRT_FOR
eabc : d04e             [ 4] 	bne df_rt_next_err
                             	; get the slot address
eabe : 2044f7           [ 6] 	jsr df_rst_popWord
                             	; save address to ptrd, contents to ptra
eac1 : 86a8             [ 3] 	stx df_tmpptrd
eac3 : 85a9             [ 3] 	sta df_tmpptrd+1
eac5 : a000             [ 2] 	ldy #0
eac7 : b1a8             [ 5] 	lda (df_tmpptrd),y
eac9 : 85a2             [ 3] 	sta df_tmpptra
eacb : c8               [ 2] 	iny
eacc : b1a8             [ 5] 	lda (df_tmpptrd),y
eace : 85a3             [ 3] 	sta df_tmpptra+1
                             
                             	; get step value, save in ptrb
ead0 : 2044f7           [ 6] 	jsr df_rst_popWord
ead3 : 86a4             [ 3] 	stx df_tmpptrb
ead5 : 85a5             [ 3] 	sta df_tmpptrb+1
ead7 : 48               [ 3] 	pha					; Push A to check for -ve step
                             
                             	; add step to counter and save back to counter
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
eae5 : a5a2             [ 3] 	lda df_tmpptra
eae7 : a000             [ 2] 	ldy #0
eae9 : 91a8             [ 5] 	sta (df_tmpptrd),y
eaeb : a5a3             [ 3] 	lda df_tmpptra+1
eaed : c8               [ 2] 	iny
eaee : 91a8             [ 5] 	sta (df_tmpptrd),y
                             
                             	; get end value, save in ptrb
eaf0 : 2044f7           [ 6] 	jsr df_rst_popWord
eaf3 : 86a4             [ 3] 	stx df_tmpptrb
eaf5 : 85a5             [ 3] 	sta df_tmpptrb+1
eaf7 : 68               [ 4] 	pla					; check if if +ve or -ve step
eaf8 : 1006             [ 4] 	bpl df_rt_check_pos
                             	; call gte operation but no need to get ints
                             	; as already in ptra and ptrb
eafa : 20a8e8           [ 6] 	jsr df_rt_gte_calc
eafd : 4c03eb           [ 3] 	jmp df_rt_next_check
eb00 :                       df_rt_check_pos
                             	; call lte operation but no need to get ints
                             	; as already in ptra and ptrb
eb00 : 2094e8           [ 6] 	jsr df_rt_lte_calc
eb03 :                       df_rt_next_check
                             	; check if true or false
eb03 : 2097f7           [ 6] 	jsr df_ost_popInt
eb06 : 8a               [ 2] 	txa
                             	; if false then next is done
eb07 : f020             [ 3] 	beq df_rt_untilnext_done
                             	; else we continue
eb09 : 4c7ce6           [ 3] 	jmp df_rt_pop_stat_go
                             
eb0c :                       df_rt_next_err
                             	SWBRK DFERR_NEXTFOR
                             
                             
                             
eb0e :                       df_rt_repeat
                             	; push statement address
AS65 Assembler for R6502 [1.42].                                     Page  228
---------------------------------- bank0.s -----------------------------------

eb0e : 20d9e5           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_REPEAT token
eb11 : a98c             [ 2] 	lda #DFRT_REPEAT
eb13 : 4c1ef7           [ 3] 	jmp df_rst_pushByte
                             
eb16 :                       df_rt_until
                             	; remember stack position
eb16 : a577             [ 3] 	lda df_rtstop
eb18 : 48               [ 3] 	pha
eb19 : 2027f7           [ 6] 	jsr df_rst_popByte
eb1c : c98c             [ 2] 	cmp #DFRT_REPEAT
eb1e : d011             [ 3] 	bne df_rt_until_err
                             	; evaluate expression in to A,X
eb20 : 201ce2           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 then continue
eb23 : 8a               [ 2] 	txa
eb24 : d003             [ 3] 	bne df_rt_untilnext_done
                             
                             	; pop the stat and continue
eb26 : 4c7ce6           [ 3] 	jmp df_rt_pop_stat_go
                             
eb29 :                       df_rt_untilnext_done
eb29 : 68               [ 4] 	pla
eb2a : a8               [ 2] 	tay
                             	; pop 2 items off stack (line address, index)
                             	; and continue
eb2b : 2044f7           [ 6] 	jsr df_rst_popWord
eb2e : 4c27f7           [ 3] 	jmp df_rst_popByte
                             
eb31 :                       df_rt_until_err
                             	SWBRK DFERR_UNTIL
                             
                             
eb33 :                       df_rt_sadd
eb33 : 60               [ 6] 	rts
                             
eb34 :                       df_rt_print_num
eb34 : 2097f7           [ 6] 	jsr df_ost_popInt
eb37 : 18               [ 2] 	clc
eb38 : 4ce4c3           [ 3] 	jmp print_a_to_d
                             
eb3b :                       df_rt_print_str
eb3b : 209bf7           [ 6] 	jsr df_ost_popStr
eb3e : 86a2             [ 3] 	stx df_tmpptra
eb40 : 85a3             [ 3] 	sta df_tmpptra+1
eb42 : a000             [ 2] 	ldy #0
eb44 :                       df_rt_print_str_ch
eb44 : b1a2             [ 5] 	lda (df_tmpptra),y
eb46 : f006             [ 3] 	beq df_rt_print_str_done
eb48 : 202cc4           [ 6] 	jsr io_put_ch
eb4b : c8               [ 2] 	iny
eb4c : d0f6             [ 3] 	bne df_rt_print_str_ch		; Rely on y not wrapping
eb4e :                       df_rt_print_str_done
eb4e : 60               [ 6] 	rts
                             
                             ; * Find the position of the next data item to re
eb4f :                       df_rt_nextdatum
eb4f : a200             [ 2] 	ldx #0
                             	; load data line offset
eb51 : a497             [ 3] 	ldy df_datoff
                             	; if data pointer unitialised (because high byte
eb53 : a596             [ 3] 	lda df_currdat+1
AS65 Assembler for R6502 [1.42].                                     Page  229
---------------------------------- bank0.s -----------------------------------

eb55 : d02e             [ 3] 	bne df_rt_skipinitdataptr
                             	; then start at program beginning
                             	_cpyZPWord df_prgstrt,df_currdat
                             
eb5f :                       df_rt_datlinstart
                             	; if end of program then error
eb5f : a195             [ 6] 	lda (df_currdat,x)
eb61 : f032             [ 3] 	beq df_rt_datumerr
                             	; index in to first line byte
eb63 : a003             [ 2] 	ldy #3
eb65 : 8497             [ 3] 	sty df_datoff
                             	; find first 'data' statement
eb67 :                       df_rt_datastatement
eb67 : c8               [ 2] 	iny
eb68 : 98               [ 2] 	tya
                             	; end of line reached?
eb69 : c195             [ 6] 	cmp (df_currdat,x)
                             	; if not find data token
eb6b : d00e             [ 3] 	bne df_rt_getdatatk
eb6d :                       df_rt_datnextlin
                             	; if so then go to next line
eb6d : 18               [ 2] 	clc
eb6e : a595             [ 3] 	lda df_currdat
eb70 : 6195             [ 6] 	adc (df_currdat,x)
eb72 : 8595             [ 3] 	sta df_currdat
                             	_bcc 2
                             
eb76 : e696             [ 5] 	inc df_currdat+1
eb78 : 4c5feb           [ 3] 	jmp df_rt_datlinstart
eb7b :                       df_rt_getdatatk
eb7b : b195             [ 5] 	lda (df_currdat),y
eb7d : 10e8             [ 3] 	bpl df_rt_datastatement
                             	; found data statement?
eb7f : c996             [ 2] 	cmp #DFRT_DATA
                             	; if not then go to next line
eb81 : d0ea             [ 3] 	bne df_rt_datnextlin
eb83 : 8497             [ 3] 	sty df_datoff
eb85 :                       df_rt_skipinitdataptr
eb85 : 98               [ 2] 	tya
                             	; end of line reached?
eb86 : c195             [ 6] 	cmp (df_currdat,x)
                             	; if so go to next line
eb88 : f0e3             [ 3] 	beq df_rt_datnextlin
                             	; else see if escape value
eb8a : b195             [ 5] 	lda (df_currdat),y
eb8c : c920             [ 2] 	cmp #DFTK_ESCVAL
eb8e : c8               [ 2] 	iny
eb8f : b0f4             [ 3] 	bcs df_rt_skipinitdataptr
                             	; ok found an escape value
                             	; save position and return
eb91 : 88               [ 2] 	dey
eb92 : 8497             [ 3] 	sty df_datoff
eb94 : 60               [ 6] 	rts
eb95 :                       df_rt_datumerr
                             	SWBRK DFERR_NODATA
                             
                             
                             ; read a datum
eb97 :                       df_rt_readdatum
                             	; update data pointer to next data item
eb97 : 204feb           [ 6] 	jsr df_rt_nextdatum
                             	; now get lvar X,A from current statement
AS65 Assembler for R6502 [1.42].                                     Page  230
---------------------------------- bank0.s -----------------------------------

eb9a : 2060e6           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
eb9d : 86a4             [ 3] 	stx df_tmpptrb
eb9f : 85a5             [ 3] 	sta df_tmpptrb+1
                             
                             	; first save save current prgoram line and offse
eba1 : a587             [ 3] 	lda df_currlin
eba3 : 48               [ 3] 	pha
eba4 : a588             [ 3] 	lda df_currlin+1
eba6 : 48               [ 3] 	pha
eba7 : a589             [ 3] 	lda df_exeoff
eba9 : 48               [ 3] 	pha
ebaa : a57f             [ 3] 	lda df_eolidx
ebac : 48               [ 3] 	pha
ebad : a580             [ 3] 	lda df_nxtstidx
ebaf : 48               [ 3] 	pha
ebb0 : a581             [ 3] 	lda df_curstidx
ebb2 : 48               [ 3] 	pha
                             
                             	; use data pointer as current position for evalu
                             	_cpyZPWord df_currdat,df_currlin
                             
ebbb : a597             [ 3] 	lda df_datoff
ebbd : 8589             [ 3] 	sta df_exeoff
ebbf : a200             [ 2] 	ldx #0
ebc1 : a195             [ 6] 	lda (df_currdat,x)
ebc3 : 857f             [ 3] 	sta df_eolidx
ebc5 : 8580             [ 3] 	sta df_nxtstidx
ebc7 : a903             [ 2] 	lda #3
ebc9 : 8581             [ 3] 	sta df_curstidx
                             
                             	; get type from vvt ptr in tmpa
ebcb : a1a2             [ 6] 	lda (df_tmpptra,x)
ebcd : a8               [ 2] 	tay
                             	; get lvar point from tmpb
ebce : a6a4             [ 3] 	ldx df_tmpptrb
ebd0 : a5a5             [ 3] 	lda df_tmpptrb+1
                             
                             	; X,A and Y set up, now evaluate and perform ass
ebd2 : 2068ee           [ 6] 	jsr df_rt_doassign
                             
                             	; update data offset as data has been consumed
ebd5 : a589             [ 3] 	lda df_exeoff
ebd7 : 8597             [ 3] 	sta df_datoff
                             	; restore line settings
ebd9 : 68               [ 4] 	pla
ebda : 8581             [ 3] 	sta df_curstidx
ebdc : 68               [ 4] 	pla
ebdd : 8580             [ 3] 	sta df_nxtstidx
ebdf : 68               [ 4] 	pla
ebe0 : 857f             [ 3] 	sta df_eolidx
ebe2 : 68               [ 4] 	pla
ebe3 : 8589             [ 3] 	sta df_exeoff
ebe5 : 68               [ 4] 	pla
ebe6 : 8588             [ 3] 	sta df_currlin+1
ebe8 : 68               [ 4] 	pla
ebe9 : 8587             [ 3] 	sta df_currlin
ebeb : 60               [ 6] 	rts
                             
                             
ebec :                       df_rt_read
                             	; find variable to read in to from current posit
AS65 Assembler for R6502 [1.42].                                     Page  231
---------------------------------- bank0.s -----------------------------------

ebec : a489             [ 3] 	ldy df_exeoff
ebee :                       df_rt_read_find_var
ebee : c8               [ 2] 	iny
                             	; if end of line or statement then done
                             ;	cpy df_eolidx
                             ;	beq df_rt_read_done
ebef : c480             [ 3] 	cpy df_nxtstidx
ebf1 : f00e             [ 4] 	beq df_rt_read_done
                             	; if not found escape then next byte
ebf3 : b187             [ 5] 	lda (df_currlin),y
ebf5 : c920             [ 2] 	cmp #DFTK_ESCVAL
ebf7 : b0f5             [ 3] 	bcs df_rt_read_find_var
                             	; ok found escape, save position
ebf9 : 8489             [ 3] 	sty df_exeoff
                             	; go and read in the value
ebfb : 2097eb           [ 6] 	jsr df_rt_readdatum
                             	; try find another variable
ebfe : 4ceceb           [ 3] 	jmp df_rt_read
                             
ec01 :                       df_rt_read_done
                             	; save position
ec01 : 8489             [ 3] 	sty df_exeoff
ec03 : 60               [ 6] 	rts
                             
ec04 :                       df_rt_input
                             	; df_tmpptra has the vvt address, X,A is the lva
ec04 : 2060e6           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
ec07 : 86a4             [ 3] 	stx df_tmpptrb
ec09 : 85a5             [ 3] 	sta df_tmpptrb+1
                             	; go read a line of input
                             	; buf_lo ptr has the input, Y is size
ec0b : 38               [ 2] 	sec
ec0c : 2041c4           [ 6] 	jsr io_read_line
                             	; check the type
ec0f : a200             [ 2] 	ldx #0
ec11 : a1a2             [ 6] 	lda (df_tmpptra,x)
ec13 : 2904             [ 2] 	and #DFVVT_STR
ec15 : d008             [ 3] 	bne df_rt_input_str
ec17 : a1a2             [ 6] 	lda (df_tmpptra,x)
ec19 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
ec1b : d00a             [ 3] 	bne df_rt_input_num
                             	; if not int or byte then error
ec1d : f01f             [ 3] 	beq df_rt_input_err
ec1f :                       df_rt_input_str
ec1f : b139             [ 5] 	lda (buf_lo),y
ec21 : 91a4             [ 5] 	sta (df_tmpptrb),y
ec23 : 88               [ 2] 	dey
ec24 : 10f9             [ 3] 	bpl df_rt_input_str
ec26 : 60               [ 6] 	rts
                             
ec27 :                       df_rt_input_num
                             	; X,A = address, linbuff must be on page boundar
ec27 : a53a             [ 3] 	lda buf_lo+1
ec29 : a639             [ 3] 	ldx buf_lo
ec2b : a000             [ 2] 	ldy #0				; any numeric format
ec2d : 20cdc1           [ 6] 	jsr con_n_to_a
ec30 : b00c             [ 3] 	bcs df_rt_input_err
ec32 : a000             [ 2] 	ldy #0
ec34 : a53d             [ 3] 	lda num_a
ec36 : 91a4             [ 5] 	sta (df_tmpptrb),y
ec38 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  232
---------------------------------- bank0.s -----------------------------------

ec39 : a53e             [ 3] 	lda num_a+1
ec3b : 91a4             [ 5] 	sta (df_tmpptrb),y
ec3d : 60               [ 6] 	rts
ec3e :                       df_rt_input_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
ec40 :                       df_rt_local
                             	; get current local count off rt stack
ec40 : 2027f7           [ 6] 	jsr df_rst_popByte
                             	; save on pc stack for incrmenting
ec43 : 48               [ 3] 	pha
ec44 : a489             [ 3] 	ldy df_exeoff
ec46 : 88               [ 2] 	dey
ec47 :                       df_rt_local_findesc
ec47 : c8               [ 2] 	iny
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_local_done
ec48 : c480             [ 3] 	cpy df_nxtstidx
ec4a : f01c             [ 3] 	beq df_rt_local_done
                             	; find a var
ec4c : b187             [ 5] 	lda (df_currlin),y
ec4e : c911             [ 2] 	cmp #DFTK_VAR
ec50 : d0f5             [ 3] 	bne df_rt_local_findesc
                             	; jump over escape value
ec52 : c8               [ 2] 	iny
                             	; get var slot in A,X
ec53 : b187             [ 5] 	lda (df_currlin),y
ec55 : aa               [ 2] 	tax
ec56 : c8               [ 2] 	iny
ec57 : b187             [ 5] 	lda (df_currlin),y
ec59 : 8489             [ 3] 	sty df_exeoff
                             	; localise this variable
ec5b : 200af7           [ 6] 	jsr df_rt_proc_local
                             	; increment local counter
ec5e : 68               [ 4] 	pla
ec5f : 18               [ 2] 	clc
ec60 : 6901             [ 2] 	adc #1
ec62 : 48               [ 3] 	pha
ec63 : a489             [ 3] 	ldy df_exeoff
ec65 : 4c47ec           [ 3] 	jmp df_rt_local_findesc
ec68 :                       df_rt_local_done
                             	; get the local counter
                             	; put on to rt stack
ec68 : 68               [ 4] 	pla
ec69 : 4c1ef7           [ 3] 	jmp df_rst_pushByte
                             
                             
ec6c :                       df_rt_redim
ec6c : 38               [ 2] 	sec
ec6d : b001             [ 3] 	bcs df_rt_dim_main
ec6f :                       df_rt_dim
ec6f : 18               [ 2] 	clc
ec70 :                       df_rt_dim_main
ec70 : 08               [ 3] 	php
ec71 :                       df_rt_dim_loop
ec71 : a489             [ 3] 	ldy df_exeoff
ec73 : 88               [ 2] 	dey
ec74 :                       df_rt_dim_findesc
                             	; check end of line
ec74 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  233
---------------------------------- bank0.s -----------------------------------

                             ;	cpy df_eolidx
                             ;	beq df_rt_dim_done
ec75 : c480             [ 3] 	cpy df_nxtstidx
ec77 : f07d             [ 3] 	beq df_rt_dim_done
                             	; find a var
ec79 : b187             [ 5] 	lda (df_currlin),y
ec7b : c911             [ 2] 	cmp #DFTK_VAR
ec7d : d0f5             [ 3] 	bne df_rt_dim_findesc
                             	; jump over escape value
ec7f : c8               [ 2] 	iny
                             	; get var address
ec80 : b187             [ 5] 	lda (df_currlin),y
ec82 : 85a2             [ 3] 	sta df_tmpptra
ec84 : c8               [ 2] 	iny
ec85 : b187             [ 5] 	lda (df_currlin),y
ec87 : 85a3             [ 3] 	sta df_tmpptra+1
                             	; move to open bracket
ec89 : c8               [ 2] 	iny
ec8a : 8489             [ 3] 	sty df_exeoff
                             	; If re-dim, don't check for existing dimensions
ec8c : 28               [ 4] 	plp
ec8d : 08               [ 3] 	php
ec8e : b006             [ 3] 	bcs df_rt_skip_dim_chk
                             	; check if already dim'd
ec90 : a003             [ 2] 	ldy #DFVVT_DIM1
ec92 : b1a2             [ 5] 	lda (df_tmpptra),y
ec94 : d062             [ 3] 	bne df_rt_dim_err
ec96 :                       df_rt_skip_dim_chk
                             	; Save slot address found earlier
ec96 : a5a2             [ 3] 	lda df_tmpptra
ec98 : 48               [ 3] 	pha
ec99 : a5a3             [ 3] 	lda df_tmpptra+1
ec9b : 48               [ 3] 	pha
ec9c : 20a2e3           [ 6] 	jsr df_rt_arry_parm2
                             	; Restore slot address
ec9f : 68               [ 4] 	pla
eca0 : 85a3             [ 3] 	sta df_tmpptra+1
eca2 : 68               [ 4] 	pla
eca3 : 85a2             [ 3] 	sta df_tmpptra
                             ;	bcs df_rt_dim_err
                             	; save x,y to dim1,2
eca5 : 98               [ 2] 	tya
eca6 : 48               [ 3] 	pha
eca7 : 8a               [ 2] 	txa
eca8 : 48               [ 3] 	pha
eca9 : a003             [ 2] 	ldy #DFVVT_DIM1
ecab : 68               [ 4] 	pla
ecac : 91a2             [ 5] 	sta (df_tmpptra),y
ecae : c8               [ 2] 	iny
ecaf : 68               [ 4] 	pla
ecb0 : 91a2             [ 5] 	sta (df_tmpptra),y
ecb2 : 28               [ 4] 	plp
ecb3 : 08               [ 3] 	php
ecb4 : b035             [ 3] 	bcs df_rt_dim_set_type
ecb6 :                       df_rt_dim_alloc
                             	; ok we have up to 2 dimensions
                             	; mult dim 1 and 2 if dim 2 <> 0
ecb6 : a003             [ 2] 	ldy #DFVVT_DIM1
ecb8 : b1a2             [ 5] 	lda (df_tmpptra),y
ecba : 853d             [ 3] 	sta num_a
ecbc : a900             [ 2] 	lda #0
ecbe : 853e             [ 3] 	sta num_a+1
AS65 Assembler for R6502 [1.42].                                     Page  234
---------------------------------- bank0.s -----------------------------------

ecc0 : c8               [ 2] 	iny
ecc1 : b1a2             [ 5] 	lda (df_tmpptra),y
ecc3 : d002             [ 3] 	bne df_rt_dim2_nz
ecc5 : a901             [ 2] 	lda #1
ecc7 :                       df_rt_dim2_nz
ecc7 : 8541             [ 3] 	sta num_b
ecc9 : a900             [ 2] 	lda #0
eccb : 8542             [ 3] 	sta num_b+1
eccd : 201bd6           [ 6] 	jsr int_fast_mult
                             	; check the type if int then mult2
ecd0 : a200             [ 2] 	ldx #0
ecd2 : a1a2             [ 6] 	lda (df_tmpptra,x)
ecd4 : 2901             [ 2] 	and #DFVVT_INT
ecd6 : f004             [ 3] 	beq df_rt_dim2_mul2
ecd8 : 063d             [ 5] 	asl num_a
ecda : 263e             [ 5] 	rol num_a+1
ecdc :                       df_rt_dim2_mul2
                             	; finally, we have a size of array
ecdc : a63d             [ 3] 	ldx num_a
ecde : a53e             [ 3] 	lda num_a+1
                             
                             	; get a block of that size from heap
ece0 : 20a3f7           [ 6] 	jsr df_st_malloc
                             	; save pointer to block in var
ece3 : a002             [ 2] 	ldy #DFVVT_HI
ece5 : 91a2             [ 5] 	sta (df_tmpptra),y
ece7 : 8a               [ 2] 	txa
ece8 : 88               [ 2] 	dey
ece9 : 91a2             [ 5] 	sta (df_tmpptra),y
                             	; finally, update the type to indicate array
eceb :                       df_rt_dim_set_type
eceb : a200             [ 2] 	ldx #0
eced : a1a2             [ 6] 	lda (df_tmpptra,x)
ecef : 0980             [ 2] 	ora #DFVVT_PTR
ecf1 : 81a2             [ 6] 	sta (df_tmpptra,x)
                             	; don't increment byte again - go check for more
ecf3 : 4c71ec           [ 3] 	jmp df_rt_dim_loop
ecf6 :                       df_rt_dim_done
ecf6 : 28               [ 4] 	plp
ecf7 : 60               [ 6] 	rts
ecf8 :                       df_rt_dim_err
                             	SWBRK DFERR_DIM
                             
                             
                             
ecfa :                       df_rt_cls
ecfa : 4c4ccf           [ 3] 	jmp gr_cls
                             
                             
ecfd :                       df_rt_plot
                             	; evaluate the expression
ecfd : 201ce2           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
ed00 : 8a               [ 2] 	txa
ed01 : 48               [ 3] 	pha
                             	; jump over comma
ed02 : e689             [ 5] 	inc df_exeoff
                             	; evaluate the expression
ed04 : 201ce2           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
ed07 : 8a               [ 2] 	txa
ed08 : 48               [ 3] 	pha
AS65 Assembler for R6502 [1.42].                                     Page  235
---------------------------------- bank0.s -----------------------------------

                             	; jump over comma
ed09 : e689             [ 5] 	inc df_exeoff
                             	; evaluate the expression
ed0b : 2022e2           [ 6] 	jsr df_rt_neval
                             	; check the type on the stack
ed0e : 2091f7           [ 6] 	jsr df_ost_peekType
                             	; if >=0x80 then a pointer / string
ed11 : 2904             [ 2] 	and #DFST_STR
ed13 : d01b             [ 3] 	bne df_rt_plotstr
                             	; else it is int
ed15 : 2097f7           [ 6] 	jsr df_ost_popInt
                             	; save  low byte of pop result in a temp
ed18 : 86a2             [ 3] 	stx df_tmpptra
ed1a : a511             [ 3] 	lda gr_scrngeom+gr_mode			; Check screen mode
ed1c : d009             [ 3] 	bne df_rt_plot_h_int
                             	; get X and Y coord in that order
                             	; but Y coord goes in X register!!!
ed1e : 68               [ 4] 	pla
ed1f : aa               [ 2] 	tax
ed20 : 68               [ 4] 	pla
ed21 : a8               [ 2] 	tay
ed22 : a5a2             [ 3] 	lda df_tmpptra	; Get pop result in to A
ed24 : 4ca0cf           [ 3] 	jmp gr_plot
ed27 :                       df_rt_plot_h_int
ed27 : 68               [ 4] 	pla
ed28 : a8               [ 2] 	tay
ed29 : 68               [ 4] 	pla
ed2a : aa               [ 2] 	tax
ed2b : a5a2             [ 3] 	lda df_tmpptra	; Get pop result in to A
ed2d : 4c61d1           [ 3] 	jmp gr_hchar
                             
                             
ed30 :                       df_rt_plotstr
                             	; pop string pointer
ed30 : 209ff7           [ 6] 	jsr df_ost_popPtr
                             	; save pointer to tmpa
ed33 : 86a2             [ 3] 	stx df_tmpptra
ed35 : 85a3             [ 3] 	sta df_tmpptra+1
                             	; get y and x in that order
                             	; but X register is Y coord!!
ed37 : 68               [ 4] 	pla
ed38 : 85a6             [ 3] 	sta df_tmpptrc			; Y coord in C
ed3a : 68               [ 4] 	pla
ed3b : 85a4             [ 3] 	sta df_tmpptrb			; X coord in B
                             	; set cursror position
ed3d : a000             [ 2] 	ldy #0
ed3f : 84aa             [ 3] 	sty df_tmpptre
ed41 :                       df_rt_plotstrch
ed41 : a4aa             [ 3] 	ldy df_tmpptre
ed43 : b1a2             [ 5] 	lda (df_tmpptra),y
ed45 : 85a8             [ 3] 	sta df_tmpptrd			; char in D
ed47 : f025             [ 3] 	beq df_rt_plotstrdone
ed49 : e6aa             [ 5] 	inc df_tmpptre
ed4b : a511             [ 3] 	lda gr_scrngeom+gr_mode; Check screen mode
ed4d : d00d             [ 3] 	bne df_rt_plot_h_str
ed4f : a5a8             [ 3] 	lda df_tmpptrd			; Get char to plot
ed51 : a6a6             [ 3] 	ldx df_tmpptrc			; Get Y coord
ed53 : a4a4             [ 3] 	ldy df_tmpptrb			; Get X coord
ed55 : 20a0cf           [ 6] 	jsr gr_plot
ed58 : e6a4             [ 5] 	inc df_tmpptrb			; Increment X coord
ed5a : d0e5             [ 3] 	bne df_rt_plotstrch		; Always - assume x is neve
ed5c :                       df_rt_plot_h_str
AS65 Assembler for R6502 [1.42].                                     Page  236
---------------------------------- bank0.s -----------------------------------

ed5c : a5a8             [ 3] 	lda df_tmpptrd			; Get char to plot
ed5e : a6a4             [ 3] 	ldx df_tmpptrb			; Get X coord
ed60 : a4a6             [ 3] 	ldy df_tmpptrc			; Get Y coord
ed62 : 2061d1           [ 6] 	jsr gr_hchar
ed65 : 18               [ 2] 	clc
ed66 : a5a4             [ 3] 	lda df_tmpptrb
ed68 : 6520             [ 3] 	adc gr_scrngeom+gr_pitch
ed6a : 85a4             [ 3] 	sta df_tmpptrb
ed6c : d0d3             [ 3] 	bne df_rt_plotstrch		; Always - assume adding pi
ed6e :                       df_rt_plotstrdone
ed6e : 60               [ 6] 	rts
                             
ed6f :                       df_rt_cursor
                             	; evaluate the expression
ed6f : 201ce2           [ 6] 	jsr df_rt_getnval
                             	; write low byte of vdp_curoff
                             	; by writing a zero then cursor on else not
ed72 : 860d             [ 3] 	stx vdp_curoff
ed74 : 60               [ 6] 	rts
                             
                             ;df_rt_himem
                             ;	; evaluate the expression
                             ;	jsr df_rt_getnval
                             ;	; write X,A to df_memtop
                             ;	stx df_memtop
                             ;	sta df_memtop+1
                             ;	; now clear everything down
                             ;	jmp df_clear
                             
ed75 :                       df_rt_text
ed75 : 4cb6ce           [ 3] 	jmp gr_init_screen_txt
                             
ed78 :                       df_rt_hires
ed78 : 4ccfce           [ 3] 	jmp gr_init_hires
                             
ed7b :                       df_rt_pixmode
                             	; evaluate the expression X = mode
ed7b : 201ce2           [ 6] 	jsr df_rt_getnval
ed7e : 861f             [ 3] 	stx gr_scrngeom+gr_pixmode
ed80 : 60               [ 6] 	rts
                             
ed81 :                       df_rt_ink
                             	; evaluate the expression X = col
ed81 : 201ce2           [ 6] 	jsr df_rt_getnval
ed84 : 8623             [ 3] 	stx gr_scrngeom+gr_ink
ed86 : 60               [ 6] 	rts
                             
ed87 :                       df_rt_paper
                             	; evaluate the expression X = col
ed87 : 201ce2           [ 6] 	jsr df_rt_getnval
                             	; Add 16 to get paper colour
ed8a : 8a               [ 2] 	txa
ed8b : 18               [ 2] 	clc
ed8c : 6910             [ 2] 	adc #16
ed8e : 8524             [ 3] 	sta gr_scrngeom+gr_paper
ed90 : 60               [ 6] 	rts
                             
ed91 :                       df_rt_point
ed91 : 20e9e4           [ 6] 	jsr df_rt_parm_2ints
ed94 : a6a2             [ 3] 	ldx df_tmpptra
ed96 : a4a4             [ 3] 	ldy df_tmpptrb
ed98 : 4c21d2           [ 3] 	jmp gr_point
AS65 Assembler for R6502 [1.42].                                     Page  237
---------------------------------- bank0.s -----------------------------------

                             
ed9b :                       df_rt_circle
ed9b : 20f4e4           [ 6] 	jsr df_rt_parm_3ints
ed9e : a5a2             [ 3] 	lda df_tmpptra				; load x0
eda0 : 853d             [ 3] 	sta num_a
eda2 : a5a4             [ 3] 	lda	df_tmpptrb				; load y0
eda4 : 853e             [ 3] 	sta num_a+1
eda6 : a5a6             [ 3] 	lda df_tmpptrc				; load r
eda8 : 853f             [ 3] 	sta num_a+2
edaa : 4c52d2           [ 3] 	jmp gr_circle
                             
edad :                       df_rt_lineto
edad : 20e9e4           [ 6] 	jsr df_rt_parm_2ints
edb0 : a6a2             [ 3] 	ldx df_tmpptra				; load x1
edb2 : a4a4             [ 3] 	ldy df_tmpptrb				; load y1
edb4 :                       df_rt_doline
edb4 : 863f             [ 3] 	stx num_a+2
edb6 : 8440             [ 3] 	sty num_a+3
edb8 : 4c08d3           [ 3] 	jmp gr_line
edbb :                       df_rt_line
edbb : 200be5           [ 6] 	jsr df_rt_parm_4ints
edbe : a6a2             [ 3] 	ldx df_tmpptra				; load x0
edc0 : a4a4             [ 3] 	ldy	df_tmpptrb				; load y0
edc2 : 2016d2           [ 6] 	jsr gr_set_hires_cur		; Start from x,y
edc5 : a6a6             [ 3] 	ldx df_tmpptrc				; load x1
edc7 : a4a8             [ 3] 	ldy df_tmpptrd				; load y1
edc9 : 4cb4ed           [ 3] 	jmp df_rt_doline
                             
edcc :                       df_rt_wait
                             	; evaluate the expression
edcc : 201ce2           [ 6] 	jsr df_rt_getnval
                             	; put high byte in to Y (X,Y)=16 bits
edcf : a8               [ 2] 	tay
edd0 :                       df_rt_wait_counter
                             	; get vdp low byte timer val in A
edd0 : a508             [ 3] 	lda vdp_cnt
edd2 :                       df_rt_wait_tick
                             	; check if a tick has occurred (i.e. val <> A)
edd2 : c508             [ 3] 	cmp vdp_cnt
edd4 : f0fc             [ 3] 	beq df_rt_wait_tick
                             	; countdown tick
edd6 : 8a               [ 2] 	txa
edd7 : d001             [ 3] 	bne df_rt_wait_skiphi
edd9 : 88               [ 2] 	dey
edda :                       df_rt_wait_skiphi	
edda : ca               [ 2] 	dex
eddb : 8a               [ 2] 	txa
eddc : d0f2             [ 3] 	bne df_rt_wait_counter
edde : 98               [ 2] 	tya
eddf : d0ef             [ 3] 	bne df_rt_wait_counter
ede1 :                       df_rt_wait_done
ede1 : 60               [ 6] 	rts
                             
ede2 :                       df_rt_printat
                             	; Get x,y
ede2 : 20e9e4           [ 6] 	jsr df_rt_parm_2ints
ede5 : a6a2             [ 3] 	ldx df_tmpptra
ede7 : a4a4             [ 3] 	ldy df_tmpptrb
                             	; Set the cursror here
ede9 : 20b9cf           [ 6] 	jsr gr_set_cur
                             	; and continue to normal print command
edec :                       df_rt_print
AS65 Assembler for R6502 [1.42].                                     Page  238
---------------------------------- bank0.s -----------------------------------

edec : a489             [ 3] 	ldy df_exeoff
edee : 88               [ 2] 	dey
edef :                       df_rt_print_ws
edef : c8               [ 2] 	iny
                             
                             	; evaluate an expression
                             ;	cpy df_eolidx
                             ;	beq df_rt_print_done
edf0 : c480             [ 3] 	cpy df_nxtstidx
edf2 : f026             [ 4] 	beq df_rt_print_done
edf4 : b187             [ 5] 	lda (df_currlin),y
edf6 : c93a             [ 2] 	cmp #':'
edf8 : f020             [ 4] 	beq df_rt_print_done
edfa : c920             [ 2] 	cmp #' '
edfc : f0f1             [ 3] 	beq df_rt_print_ws
edfe : c92c             [ 2] 	cmp #','
ee00 : f0ed             [ 4] 	beq df_rt_print_ws
                             	; save index
ee02 : 8489             [ 3] 	sty df_exeoff
                             
                             	; if starts with string literal then process sev
                             ;	cmp #DFTK_STRLIT
                             ;	beq df_rt_print_string
                             	; else evaluate a numeric
ee04 : 2022e2           [ 6] 	jsr df_rt_neval
                             	; check what is on the argument stack
ee07 : 2091f7           [ 6] 	jsr df_ost_peekType
ee0a : 2904             [ 2] 	and #DFST_STR
ee0c : d006             [ 3] 	bne df_rt_print_gotstr
ee0e : 2034eb           [ 6] 	jsr df_rt_print_num
ee11 : 4ceced           [ 3] 	jmp df_rt_print
ee14 :                       df_rt_print_gotstr
ee14 : 203beb           [ 6] 	jsr df_rt_print_str
ee17 : 4ceced           [ 3] 	jmp df_rt_print
                             ;df_rt_print_string
                             ;	jsr df_rt_seval
                             ;	jmp df_rt_print_gotstr
ee1a :                       df_rt_print_done
ee1a : 8489             [ 3] 	sty df_exeoff
ee1c : 60               [ 6] 	rts
                             
ee1d :                       df_rt_println
ee1d : 20eced           [ 6] 	jsr df_rt_print
ee20 : a90d             [ 2] 	lda #UTF_CR
ee22 : 4c2cc4           [ 3] 	jmp io_put_ch
                             
                             
                             ; assign to a number variable
                             ; X,A must have lvar
ee25 :                       df_rt_nassign
                             	; push var address, A ok to trample
ee25 : 48               [ 3] 	pha
ee26 : 8a               [ 2] 	txa
ee27 : 48               [ 3] 	pha
                             
                             	; now go evaluate expression in to A,X
ee28 : 201ce2           [ 6] 	jsr df_rt_getnval
                             	; restore variable address to write to to df_tmp
                             	; but don't lose current A
ee2b : a8               [ 2] 	tay					; Save A in Y
ee2c : 68               [ 4] 	pla
ee2d : 85a2             [ 3] 	sta df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  239
---------------------------------- bank0.s -----------------------------------

ee2f : 68               [ 4] 	pla
ee30 : 85a3             [ 3] 	sta df_tmpptra+1
ee32 : 98               [ 2] 	tya					; Get A back from Y
                             
                             	; save X,A int in contents section
ee33 : a001             [ 2] 	ldy #1
ee35 : 91a2             [ 5] 	sta (df_tmpptra),y
ee37 : 8a               [ 2] 	txa
ee38 : 88               [ 2] 	dey
ee39 : 91a2             [ 5] 	sta (df_tmpptra),y
                             
ee3b : 60               [ 6] 	rts
                             
                             ; assign to a string variable
                             ; X,A must have lvar
ee3c :                       df_rt_sassign
                             	; now go evaluate expression
                             	; with the destination being already in X,A
ee3c : 20e0e2           [ 6] 	jsr df_rt_sval
                             
                             	; get string pointer from top of runtime stack
ee3f : 4c9bf7           [ 3] 	jmp df_ost_popStr
                             
                             
                             ; generate lvar from a var token ready for assign
ee42 :                       df_rt_generate_lvar
                             	; move past escape val
ee42 : a489             [ 3] 	ldy df_exeoff
ee44 : c8               [ 2] 	iny
                             	; pointing to variable index
ee45 : b187             [ 5] 	lda (df_currlin),y
ee47 : 85a2             [ 3] 	sta df_tmpptra
ee49 : c8               [ 2] 	iny
ee4a : b187             [ 5] 	lda (df_currlin),y
ee4c : 8489             [ 3] 	sty df_exeoff
ee4e : 85a3             [ 3] 	sta df_tmpptra+1
                             
                             	; get the type and save
ee50 : a200             [ 2] 	ldx #0
ee52 : a1a2             [ 6] 	lda (df_tmpptra,x)
ee54 : 48               [ 3] 	pha
                             
                             	; set carry flag to return pointer (lvar)
ee55 : 38               [ 2] 	sec
ee56 : 20c6e3           [ 6] 	jsr df_rt_eval_var
ee59 : 209ff7           [ 6] 	jsr df_ost_popPtr
                             
                             	; pull the type previously saved into Y
ee5c : 8538             [ 3] 	sta tmp_d		; Save A
ee5e : 68               [ 4] 	pla
ee5f : a8               [ 2] 	tay
ee60 : a538             [ 3] 	lda tmp_d
                             	; move past the lvar variable index
ee62 : e689             [ 5] 	inc df_exeoff
ee64 : 60               [ 6] 	rts
                             
                             ; general assignment execution
                             ; generate lvar first
ee65 :                       df_rt_assign
ee65 : 2042ee           [ 6] 	jsr df_rt_generate_lvar
                             ; X,A,Y contain lvar pointer and type
ee68 :                       df_rt_doassign
AS65 Assembler for R6502 [1.42].                                     Page  240
---------------------------------- bank0.s -----------------------------------

                             	; save A and put type Y in to A to check for str
ee68 : 48               [ 3] 	pha
ee69 : 98               [ 2] 	tya
ee6a : 2904             [ 2] 	and #DFVVT_STR
                             	; if a string then string expression
ee6c : d004             [ 3] 	bne df_rt_assign_str
                             	;  jump to numeric expression evaluator
                             	; remember to restore A
ee6e : 68               [ 4] 	pla
ee6f : 4c25ee           [ 3] 	jmp df_rt_nassign
ee72 :                       df_rt_assign_str
                             	; else jump to string expression evaluator
                             	; remember to restore A
ee72 : 68               [ 4] 	pla
ee73 : 4c3cee           [ 3] 	jmp df_rt_sassign
                             
                             ; comment or data token is ignored by runtime
ee76 :                       df_rt_comment
ee76 :                       df_rt_data
ee76 : 60               [ 6] 	rts
                             
                             
                             ; run token - future expansion
ee77 :                       df_rt_run
ee77 : 60               [ 6] 	rts
                             
                             ; end of line / statement indicator
                             ; CS = End, CC = not end
ee78 :                       df_rt_eos
ee78 : a489             [ 3] 	ldy df_exeoff
                             ;	cpy df_eolidx
                             ;	beq df_rt_eos_true
ee7a : c480             [ 3] 	cpy df_nxtstidx
ee7c : f008             [ 3] 	beq df_rt_eos_true
ee7e : b187             [ 5] 	lda (df_currlin),y
ee80 : c93a             [ 2] 	cmp #':'
ee82 : f002             [ 3] 	beq df_rt_eos_true
ee84 : 18               [ 2] 	clc
ee85 : 60               [ 6] 	rts
ee86 :                       df_rt_eos_true
ee86 : 38               [ 2] 	sec
ee87 : 60               [ 6] 	rts
                             
                             ; renum startLine,newStart,increment
                             ; renumbers from the first matching line to end o
                             ;df_rt_renum
                             ;	inc df_exeoff
                             ;	jsr df_rt_parm_3ints
                             ;	; starting line number
                             ;	ldx df_tmpptra
                             ;	lda df_tmpptra+1
                             ;	jsr df_pg_find_line
                             ;	bcc df_rt_renum_ok
                             ;	SWBRK DFERR_NOLINE
                             ;df_rt_renum_ok
                             ;	; save starting position pointer in ptrd
                             ;	stx df_tmpptrd
                             ;	sta df_tmpptrd+1
                             ;df_rt_renum_do
                             ;	; if not end of program
                             ;	ldy #0
                             ;	lda (df_tmpptrd),y
AS65 Assembler for R6502 [1.42].                                     Page  241
---------------------------------- bank0.s -----------------------------------

                             ;	; then renumber this line
                             ;	bne df_rt_renum_update
                             ;	; else done
                             ;	rts
                             ;df_rt_renum_update
                             ;	; so set this line number to new line number
                             ;	ldy #DFTK_LINNUM
                             ;	lda df_tmpptrb
                             ;	sta (df_tmpptrd),y
                             ;	iny
                             ;	lda df_tmpptrb+1
                             ;	sta (df_tmpptrd),y
                             ;	; add increment to new line
                             ;	_addZPWord df_tmpptrb,df_tmpptrc
                             ;df_rt_renum_next
                             ;	; point ptrd to the next line
                             ;	clc
                             ;	lda df_tmpptrd
                             ;	ldx #0
                             ;	adc (df_tmpptrd,x)
                             ;	sta df_tmpptrd
                             ;	_bcc 2
                             ;	inc df_tmpptrd+1
                             ;	jmp df_rt_renum_do
                             
                             
                             ; * List all procs in VNT
ee88 :                       df_rt_listprocnames
                             	; start at the beginning of the vnt table
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             	; start at varcnt
ee90 : a572             [ 3] 	lda df_varcnt
ee92 : 85a4             [ 3] 	sta df_tmpptrb
ee94 :                       df_rt_listcheckvnt
                             	; If reached 0 then not found
ee94 : a5a4             [ 3] 	lda df_tmpptrb
ee96 : f03a             [ 3] 	beq df_rt_listpn_done
ee98 : a000             [ 2] 	ldy #0
ee9a : b1a2             [ 5] 	lda (df_tmpptra),y
ee9c : c95f             [ 2] 	cmp #'_'
ee9e : d01b             [ 3] 	bne df_rt_listnextvnt
eea0 :                       df_rt_listprocch
eea0 : b1a2             [ 5] 	lda (df_tmpptra),y
eea2 : 202cc4           [ 6] 	jsr io_put_ch
eea5 : aa               [ 2] 	tax
eea6 : f003             [ 3] 	beq df_rt_listproccr
eea8 : c8               [ 2] 	iny
eea9 : d0f5             [ 3] 	bne df_rt_listprocch		; Always
eeab :                       df_rt_listproccr
eeab : a90d             [ 2] 	lda #UTF_CR
eead : 202cc4           [ 6] 	jsr io_put_ch
eeb0 : 18               [ 2] 	clc
eeb1 :                       df_rt_listprocpause
eeb1 : 2029c4           [ 6] 	jsr io_get_ch
eeb4 : c920             [ 2] 	cmp #' '
eeb6 : d003             [ 3] 	bne df_rt_listnextvnt
eeb8 :                       df_rt_listwait
eeb8 : 38               [ 2] 	sec
eeb9 : b0f6             [ 3] 	bcs df_rt_listprocpause
eebb :                       df_rt_listnextvnt
eebb : b1a2             [ 5] 	lda (df_tmpptra),y
AS65 Assembler for R6502 [1.42].                                     Page  242
---------------------------------- bank0.s -----------------------------------

eebd : f003             [ 3] 	beq df_rt_listgotnext
eebf : c8               [ 2] 	iny
eec0 : d0f9             [ 3] 	bne df_rt_listnextvnt		; Always
eec2 :                       df_rt_listgotnext
                             	; dec vnt #
eec2 : c6a4             [ 5] 	dec df_tmpptrb
                             	; skip past zero terminator
eec4 : c8               [ 2] 	iny
                             	; add this to vnt pointer
eec5 : 18               [ 2] 	clc
eec6 : 98               [ 2] 	tya
eec7 : 65a2             [ 3] 	adc df_tmpptra
eec9 : 85a2             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
eecd : e6a3             [ 5] 	inc df_tmpptra+1
eecf : 4c94ee           [ 3] 	jmp df_rt_listcheckvnt
eed2 :                       df_rt_listpn_done
eed2 : 60               [ 6] 	rts
                             
eed3 :                       df_rt_listproc
                             	; A already contains '_'
eed3 : 8d0004           [ 4] 	sta df_linbuff
eed6 : a200             [ 2] 	ldx #0
eed8 : a489             [ 3] 	ldy df_exeoff
eeda :                       df_rt_listp_copy
eeda : c8               [ 2] 	iny
eedb : e8               [ 2] 	inx
eedc : b187             [ 5] 	lda (df_currlin),y
eede : 9d0004           [ 5] 	sta df_linbuff,x
eee1 : 20b0d8           [ 6] 	jsr df_tk_isalphanum
eee4 : b0f4             [ 3] 	bcs df_rt_listp_copy
                             	; zero the line index
eee6 : a200             [ 2] 	ldx #0
eee8 : 867d             [ 3] 	stx df_linoff
                             	; save runtime pos
eeea : 8489             [ 3] 	sty df_exeoff
                             	; Now try and find in VNT
eeec : 20d2d6           [ 6] 	jsr df_var_find
eeef : b036             [ 4] 	bcs df_rt_listp_notfound
                             	; Ok we have got a match in X,A find the proc
eef1 : 868f             [ 3] 	stx df_procptr
eef3 : 8590             [ 3] 	sta df_procptr+1
eef5 : 20fee5           [ 6] 	jsr df_rt_findproc
                             	; Save the line pointer
eef8 : 86a2             [ 3] 	stx df_tmpptra
eefa : 85a3             [ 3] 	sta df_tmpptra+1
                             	; save statement index in to line
                             ;	sty df_lineidx
                             ;	; Check if '-' option used
                             ;	ldy df_exeoff
                             ;	lda (df_currlin),y
                             ;	cmp #'-'
                             ;	; if so, list to end of program
                             ;	beq df_rt_listprgend
                             	; Now try and find the end of this procedure
                             	; enddef or another def
                             	; A,X=Line ptr, Y=line idx
                             ;	ldx df_tmpptra
                             ;	lda df_tmpptra+1
                             ;	ldy df_lineidx
eefc :                       df_rt_listp_findend
AS65 Assembler for R6502 [1.42].                                     Page  243
---------------------------------- bank0.s -----------------------------------

                             	; Go to next stat
eefc : 20a9e5           [ 6] 	jsr df_rt_nextstat
eeff : b057             [ 4] 	bcs df_rt_listprgend
                             	; save y (a,x in lineptr), A is ok to trample
ef01 : 98               [ 2] 	tya
ef02 : 48               [ 3] 	pha
                             	; find the command
ef03 :                       df_rt_listp_findcmd
ef03 : c8               [ 2] 	iny
ef04 : b191             [ 5] 	lda (df_lineptr),y
ef06 : 10fb             [ 3] 	bpl df_rt_listp_findcmd
                             	; restore y to stat beginning
ef08 : 8538             [ 3] 	sta tmp_d
ef0a : 68               [ 4] 	pla
ef0b : a8               [ 2] 	tay
ef0c : a538             [ 3] 	lda tmp_d
                             	; check A - looking for enddef or def
ef0e : c987             [ 2] 	cmp #DFRT_ENDDEF
ef10 : f00b             [ 3] 	beq df_rt_listp_done
ef12 : c986             [ 2] 	cmp #DFRT_DEF
ef14 : f007             [ 3] 	beq df_rt_listp_done
                             	; if neither then next stat from current
ef16 : a691             [ 3] 	ldx df_lineptr
ef18 : a592             [ 3] 	lda df_lineptr+1
ef1a : 4cfcee           [ 3] 	jmp df_rt_listp_findend
ef1d :                       df_rt_listp_done
                             	; Push end line on to stack
ef1d : a592             [ 3] 	lda df_lineptr+1
ef1f : 48               [ 3] 	pha
ef20 : 8a               [ 2] 	txa
ef21 : 48               [ 3] 	pha
ef22 : a592             [ 3] 	lda df_lineptr+1
ef24 : 4c5eef           [ 3] 	jmp df_rt_list_line
ef27 :                       df_rt_listp_notfound
                             	; Fatal error if proc not found
                             	SWBRK DFERR_NOPROC
                             
                             
                             ; list token
ef29 :                       df_rt_list
ef29 : a900             [ 2] 	lda #0
ef2b : 85aa             [ 3] 	sta df_tmpptre		; Zero means in normal list mode
                             	; find non-ws
ef2d : 2053e6           [ 6] 	jsr df_rt_skip_ws
                             	; if end of statement then no line specifiers
ef30 : 2078ee           [ 6] 	jsr df_rt_eos
                             	; so list whole program
ef33 : b01b             [ 3] 	bcs df_rt_listprg
                             
                             	;if '_' then use procnames
ef35 : c95f             [ 2] 	cmp #'_'
ef37 : d003             [ 3] 	bne df_rt_list_all
ef39 : 4cd3ee           [ 3] 	jmp df_rt_listproc
ef3c :                       df_rt_list_all
                             	;if '*' then display all procnames
ef3c : c92a             [ 2] 	cmp #'*'
ef3e : d003             [ 3] 	bne df_rt_list_linno
ef40 : 4c88ee           [ 3] 	jmp df_rt_listprocnames
ef43 :                       df_rt_list_linno
                             	; else get 1st parameter
ef43 : 201ce2           [ 6] 	jsr df_rt_getnval
                             	; find the starting line number in X,A
AS65 Assembler for R6502 [1.42].                                     Page  244
---------------------------------- bank0.s -----------------------------------

ef46 : 2046e0           [ 6] 	jsr df_pg_find_line
                             	; save start in ptra
ef49 : 86a2             [ 3] 	stx df_tmpptra
ef4b : 85a3             [ 3] 	sta df_tmpptra+1
ef4d : 4c58ef           [ 3] 	jmp df_rt_listprgend
                             	; NO ability to choose and ending line number!
                             
                             ; Common listing routine used by LIST and SAVE
                             ; tmpe = 0 means in LIST mode else SAVE mode
                             ; can stop the listing in LIST mode with CTRL-C
ef50 :                       df_rt_listprg
                             	; program start and end as for pointer value
                             	_cpyZPWord df_prgstrt, df_tmpptra
                             
ef58 :                       df_rt_listprgend
ef58 : a569             [ 3] 	lda df_prgend+1
ef5a : 48               [ 3] 	pha
ef5b : a568             [ 3] 	lda df_prgend
ef5d : 48               [ 3] 	pha
ef5e :                       df_rt_list_line
                             	; if line length = 0 then end of program
ef5e : a000             [ 2] 	ldy #0
ef60 : b1a2             [ 5] 	lda (df_tmpptra),y
ef62 : f038             [ 3] 	beq df_rt_list_line_fin
                             	; if in list mode and CTRL-C then also stop
ef64 : a5aa             [ 3] 	lda df_tmpptre
ef66 : d010             [ 3] 	bne df_rt_list_line_cont
                             	; check for break, asynch get
ef68 : 18               [ 2] 	clc
ef69 :                       df_rt_list_synckey
ef69 : a5aa             [ 3] 	lda df_tmpptre					; Ignore keys on save mode
ef6b : d00b             [ 3] 	bne df_rt_list_line_cont
ef6d :                       df_rt_list_pause
ef6d : 2029c4           [ 6] 	jsr io_get_ch
ef70 : c920             [ 2] 	cmp #' '						; Space = PAUSE
ef72 : f0f9             [ 3] 	beq df_rt_list_pause			; C=1 for synchronouse ke
ef74 : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
ef76 : f024             [ 3] 	beq df_rt_list_line_fin
ef78 :                       df_rt_list_line_cont
ef78 : a000             [ 2] 	ldy #0
ef7a : 847d             [ 3] 	sty df_linoff
ef7c : 209fef           [ 6] 	jsr df_rt_list_all_line
ef7f :                       df_rt_list_next_line
                             	; new line
ef7f : 2067c1           [ 6] 	jsr utilPrintCRLF
                             	; increment pointer to next line
ef82 : 18               [ 2] 	clc
ef83 : a5a2             [ 3] 	lda df_tmpptra
ef85 : a000             [ 2] 	ldy #0
ef87 : 71a2             [ 5] 	adc (df_tmpptra),y
ef89 : 85a2             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
ef8d : e6a3             [ 5] 	inc df_tmpptra+1
                             	; if pointer > end then listing is done
ef8f : 38               [ 2] 	sec
ef90 : 68               [ 4] 	pla
ef91 : aa               [ 2] 	tax
ef92 : e5a2             [ 3] 	sbc df_tmpptra
ef94 : 68               [ 4] 	pla
ef95 : 48               [ 3] 	pha
ef96 : e5a3             [ 3] 	sbc df_tmpptra+1
AS65 Assembler for R6502 [1.42].                                     Page  245
---------------------------------- bank0.s -----------------------------------

ef98 : 8a               [ 2] 	txa
ef99 : 48               [ 3] 	pha
ef9a : b0c2             [ 3] 	bcs df_rt_list_line
ef9c :                       df_rt_list_line_fin
                             	; if got here then reached tmpb
ef9c : 68               [ 4] 	pla
ef9d : 68               [ 4] 	pla
ef9e :                       df_rt_list_line_only_fin
ef9e : 60               [ 6] 	rts
                             
                             ;Using df_tmpptra as line pointer
                             ;Print decode an entire line
ef9f :                       df_rt_list_all_line				; Start here to include nu
ef9f : 20d9f0           [ 6] 	jsr df_rt_list_linnum
efa2 :                       df_rt_list_line_only			; Start here for just the 
efa2 : a003             [ 2] 	ldy #3
efa4 : b1a2             [ 5] 	lda (df_tmpptra),y
efa6 : 8593             [ 3] 	sta df_lineidx
efa8 : c8               [ 2] 	iny
efa9 : 847d             [ 3] 	sty df_linoff
efab :                       df_rt_list_decode
efab : a47d             [ 3] 	ldy df_linoff
efad : b1a2             [ 5] 	lda (df_tmpptra),y
efaf : 3010             [ 3] 	bmi df_rt_list_token
efb1 : c920             [ 2] 	cmp #DFTK_ESCVAL
efb3 : 9006             [ 3] 	bcc df_rt_list_escval
                             	; normal char just print it
efb5 : 202cc4           [ 6] 	jsr io_put_ch
efb8 : 4cc4ef           [ 3] 	jmp df_rt_list_nexttok
efbb :                       df_rt_list_escval
                             	; A and Y need to be valid on entry
efbb : 20ddef           [ 6] 	jsr df_rt_list_decode_esc
efbe : 4cc4ef           [ 3] 	jmp df_rt_list_nexttok
efc1 :                       df_rt_list_token
efc1 : 20eaf0           [ 6] 	jsr df_rt_list_decode_token
efc4 :                       df_rt_list_nexttok
                             	; advance the line offset
efc4 : e67d             [ 5] 	inc df_linoff
efc6 : a57d             [ 3] 	lda df_linoff
                             	; check if at end of line
efc8 : a200             [ 2] 	ldx #0
efca : c1a2             [ 6] 	cmp (df_tmpptra,x)
efcc : f0d0             [ 3] 	beq df_rt_list_line_only_fin
                             	; check if at end of statement
efce : c593             [ 3] 	cmp df_lineidx
efd0 : d0d9             [ 3] 	bne df_rt_list_decode
efd2 : a8               [ 2] 	tay
                             	; save the next statement offset
efd3 : b1a2             [ 5] 	lda (df_tmpptra),y
efd5 : 8593             [ 3] 	sta df_lineidx
efd7 : c8               [ 2] 	iny
efd8 : 847d             [ 3] 	sty df_linoff
efda : 4cabef           [ 3] 	jmp df_rt_list_decode
                             
                             
                             ; decode escape sequences
                             ; Input: A contains the esc val and Y is char lin
efdd :                       df_rt_list_decode_esc
                             	; jump over esc byte
efdd : c8               [ 2] 	iny
efde : 847d             [ 3] 	sty df_linoff
efe0 : 48               [ 3] 	pha
AS65 Assembler for R6502 [1.42].                                     Page  246
---------------------------------- bank0.s -----------------------------------

                             	; get the next two bytes in case needed
efe1 : b1a2             [ 5] 	lda (df_tmpptra),y
efe3 : 85a4             [ 3] 	sta df_tmpptrb
efe5 : c8               [ 2] 	iny
efe6 : b1a2             [ 5] 	lda (df_tmpptra),y
efe8 : 85a5             [ 3] 	sta df_tmpptrb+1
efea : 88               [ 2] 	dey				; Y is on byte after esc byte
efeb : 68               [ 4] 	pla
                             	; x2 to get jmp offset
efec : 0a               [ 2] 	asl a
efed : aa               [ 2] 	tax
efee : bd4be7           [ 4] 	lda df_rt_escjmp,x
eff1 : 85a6             [ 3] 	sta df_tmpptrc
eff3 : bd4ce7           [ 4] 	lda df_rt_escjmp+1,x
eff6 : 85a7             [ 3] 	sta df_tmpptrc+1
                             	; now jump to decoder
eff8 : 6ca600           [ 6] 	jmp (df_tmpptrc)
                             
                             ; reserved
effb :                       df_rt_lst_reserved
effb : 60               [ 6] 	rts
                             
                             ; decode a byte char
effc :                       df_rt_lst_chr
effc : a927             [ 2] 	lda #0x27			; Single quote
effe : 202cc4           [ 6] 	jsr io_put_ch
f001 : a5a4             [ 3] 	lda df_tmpptrb
f003 : 202cc4           [ 6] 	jsr io_put_ch
f006 : a927             [ 2] 	lda #0x27			; Single quote
f008 : 202cc4           [ 6] 	jsr io_put_ch
f00b : c8               [ 2] 	iny
f00c : 847d             [ 3] 	sty df_linoff
f00e : 60               [ 6] 	rts
                             
                             ; Output 0x for hex chars
f00f :                       df_rt_lst_hex_pre
f00f : a930             [ 2] 	lda #'0'
f011 : 202cc4           [ 6] 	jsr io_put_ch
f014 : a978             [ 2] 	lda #'x'
f016 : 4c2cc4           [ 3] 	jmp io_put_ch
                             
                             
                             ; Decode a byte hex
f019 :                       df_rt_lst_bythex
f019 : 200ff0           [ 6] 	jsr df_rt_lst_hex_pre
f01c :                       df_rt_lst_lo_hex
f01c : a5a4             [ 3] 	lda df_tmpptrb
f01e : 2084c1           [ 6] 	jsr str_a_to_x
f021 : 202cc4           [ 6] 	jsr io_put_ch
f024 : 8a               [ 2] 	txa
f025 : 202cc4           [ 6] 	jsr io_put_ch
f028 :                       df_rt_lst_const_done
f028 : c8               [ 2] 	iny
f029 : 847d             [ 3] 	sty df_linoff
f02b : 60               [ 6] 	rts
                             
                             ; Decode an int hex
f02c :                       df_rt_lst_inthex
f02c : 200ff0           [ 6] 	jsr df_rt_lst_hex_pre
f02f : a5a5             [ 3] 	lda df_tmpptrb+1
f031 : 2084c1           [ 6] 	jsr str_a_to_x
f034 : 202cc4           [ 6] 	jsr io_put_ch
AS65 Assembler for R6502 [1.42].                                     Page  247
---------------------------------- bank0.s -----------------------------------

f037 : 8a               [ 2] 	txa
f038 : 202cc4           [ 6] 	jsr io_put_ch
f03b : 4c1cf0           [ 3] 	jmp df_rt_lst_lo_hex
                             
                             ; Decode a byte binary
f03e :                       df_rt_lst_bytbin
f03e : a5a4             [ 3] 	lda df_tmpptrb
f040 : 85a5             [ 3] 	sta df_tmpptrb+1
f042 : a208             [ 2] 	ldx #8
f044 : d002             [ 3] 	bne df_rt_lst_bin
                             
                             ; Decode a int binary
f046 :                       df_rt_lst_intbin
f046 : a210             [ 2] 	ldx #16
                             	; FALL THROUGH
                             ; Main 01 decoding of binary
f048 :                       df_rt_lst_bin
f048 : a930             [ 2] 	lda #'0'
f04a : 202cc4           [ 6] 	jsr io_put_ch
f04d : a962             [ 2] 	lda #'b'
f04f : 202cc4           [ 6] 	jsr io_put_ch
f052 :                       df_rt_lst_bit
f052 : a930             [ 2] 	lda #'0'
f054 : 06a4             [ 5] 	asl df_tmpptrb
f056 : 26a5             [ 5] 	rol df_tmpptrb+1
f058 : 6900             [ 2] 	adc #0				; If C=1 then '0' becomes '1'
f05a :                       df_rt_lst_bit_skip0
f05a : 202cc4           [ 6] 	jsr io_put_ch
f05d : ca               [ 2] 	dex
f05e : d0f2             [ 3] 	bne df_rt_lst_bit
f060 : f0c6             [ 3] 	beq df_rt_lst_const_done
                             
                             ; Decode a decimal integer
f062 :                       df_rt_lst_intdec
f062 : a6a4             [ 3] 	ldx df_tmpptrb
f064 : a5a5             [ 3] 	lda df_tmpptrb+1
f066 : c8               [ 2] 	iny
f067 : 847d             [ 3] 	sty df_linoff
f069 : 18               [ 2] 	clc
f06a : 4ce4c3           [ 3] 	jmp print_a_to_d
                             
                             
                             ; decode a variable or procedure
                             ; Slot address to decode in ptrb
f06d :                       df_rt_lst_var
f06d :                       df_rt_lst_proc
                             	; jump over the address bytes
f06d : c8               [ 2] 	iny
f06e : 847d             [ 3] 	sty df_linoff
                             
                             	; ptrc starts at VNT start
                             	_cpyZPWord df_vntstrt,df_tmpptrc
                             
                             
                             	; ptrd starts at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptrd
                             
f080 : a000             [ 2] 	ldy #0
f082 :                       df_rt_list_findvvt
                             	; Check have we reached target addr in vvt?
f082 : a5a8             [ 3] 	lda df_tmpptrd
f084 : c5a4             [ 3] 	cmp df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  248
---------------------------------- bank0.s -----------------------------------

f086 : d006             [ 3] 	bne df_rt_list_vvtend
f088 : a5a9             [ 3] 	lda df_tmpptrd+1
f08a : c5a5             [ 3] 	cmp df_tmpptrb+1
f08c : f021             [ 3] 	beq df_rt_list_gotvvt
f08e :                       df_rt_list_vvtend
f08e : b1a6             [ 5] 	lda (df_tmpptrc),y
f090 : f009             [ 3] 	beq df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
f098 : 4c8ef0           [ 3] 	jmp df_rt_list_vvtend
f09b :                       df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
                             	; move target slot address towards top of mem
f0a1 : 18               [ 2] 	clc
f0a2 : a5a8             [ 3] 	lda df_tmpptrd
f0a4 : 6908             [ 2] 	adc #DFVVT_SZ
f0a6 : 85a8             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
f0aa : e6a9             [ 5] 	inc df_tmpptrd+1
                             	; go back and check again
f0ac : 4c82f0           [ 3] 	jmp df_rt_list_findvvt
f0af :                       df_rt_list_gotvvt
f0af : b1a6             [ 5] 	lda (df_tmpptrc),y
f0b1 : f025             [ 3] 	beq df_rt_list_donvvt
f0b3 : 202cc4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrc
                             
f0bc : 4caff0           [ 3] 	jmp df_rt_list_gotvvt
                             
f0bf :                       df_rt_lst_strlit
f0bf : a922             [ 2] 	lda #0x22
f0c1 : 202cc4           [ 6] 	jsr io_put_ch
f0c4 : a47d             [ 3] 	ldy df_linoff
f0c6 :                       df_rt_lst_strlitch
f0c6 : b1a2             [ 5] 	lda (df_tmpptra),y
f0c8 : f007             [ 3] 	beq df_rt_lst_strlitdon
f0ca : 202cc4           [ 6] 	jsr io_put_ch
f0cd : c8               [ 2] 	iny
f0ce : 4cc6f0           [ 3] 	jmp df_rt_lst_strlitch
f0d1 :                       df_rt_lst_strlitdon
f0d1 : a922             [ 2] 	lda #0x22
f0d3 : 202cc4           [ 6] 	jsr io_put_ch
f0d6 : 847d             [ 3] 	sty df_linoff
f0d8 :                       df_rt_list_donvvt
f0d8 : 60               [ 6] 	rts
                             
f0d9 :                       df_rt_list_linnum
f0d9 : a001             [ 2] 	ldy #1
f0db : b1a2             [ 5] 	lda (df_tmpptra),y
f0dd : aa               [ 2] 	tax
f0de : c8               [ 2] 	iny
f0df : b1a2             [ 5] 	lda (df_tmpptra),y
f0e1 : 18               [ 2] 	clc
f0e2 : 20e4c3           [ 6] 	jsr print_a_to_d
f0e5 : a920             [ 2] 	lda #0x20			; Always add a space after line num
f0e7 : 4c2cc4           [ 3] 	jmp io_put_ch
                             
                             ; decode a token value with MSB set
f0ea :                       df_rt_list_decode_token
                             	; if not assembler then normal listing
AS65 Assembler for R6502 [1.42].                                     Page  249
---------------------------------- bank0.s -----------------------------------

f0ea : c997             [ 2] 	cmp #DFRT_ASM
f0ec : d003             [ 3] 	bne df_rt_list_decode_token_normal
f0ee : 4c28f1           [ 3] 	jmp df_rt_asm_decode_token
f0f1 :                       df_rt_list_decode_token_normal
f0f1 : 297f             [ 2] 	and #0x7f
                             	; token 0 and 1 don't get decoded they are impli
f0f3 : c902             [ 2] 	cmp #2
f0f5 : b001             [ 3] 	bcs df_rt_list_do_decode_tkn
f0f7 : 60               [ 6] 	rts
f0f8 :                       df_rt_list_do_decode_tkn
f0f8 : aa               [ 2] 	tax
f0f9 : a952             [ 2] 	lda #lo(df_tokensyms)
f0fb : 85a4             [ 3] 	sta df_tmpptrb
f0fd : a9dc             [ 2] 	lda #hi(df_tokensyms)
f0ff : 85a5             [ 3] 	sta df_tmpptrb+1
f101 :                       df_rt_list_find_sym
f101 : 8a               [ 2] 	txa
f102 : f012             [ 3] 	beq df_rt_list_got_sym
f104 : a000             [ 2] 	ldy #0
f106 :                       df_rt_list_next_ch
f106 : b1a4             [ 5] 	lda (df_tmpptrb),y
f108 : 48               [ 3] 	pha
                             	_incZPWord df_tmpptrb
                             
f10f : 68               [ 4] 	pla
f110 : 10f4             [ 3] 	bpl df_rt_list_next_ch
f112 :                       df_rt_list_got_last_sym
                             	; ok got to the last ch
                             	; advance to next sym
f112 : ca               [ 2] 	dex
f113 : 4c01f1           [ 3] 	jmp df_rt_list_find_sym
f116 :                       df_rt_list_got_sym
f116 : a1a4             [ 6] 	lda (df_tmpptrb,x)		; Relies on X=0 from branch
f118 : 08               [ 3] 	php
f119 : 297f             [ 2] 	and #0x7f
f11b : 202cc4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
f124 : 28               [ 4] 	plp
f125 : 10ef             [ 3] 	bpl df_rt_list_got_sym
f127 : 60               [ 6] 	rts
                             
                             ;** Decode assembler token in A **
f128 :                       df_rt_asm_decode_token
f128 : e67d             [ 5] 	inc df_linoff		; Point to token after asm token
f12a : a47d             [ 3] 	ldy df_linoff
f12c : b1a2             [ 5] 	lda (df_tmpptra),y	;If token N=1 then keyword
f12e : 300a             [ 3] 	bmi df_rt_asm_decode_token_keyword
f130 : a92e             [ 2] 	lda #'.'			;Put the '.' before escape processing
f132 : 202cc4           [ 6] 	jsr io_put_ch
f135 : b1a2             [ 5] 	lda (df_tmpptra),y	;Get asm token back
f137 : 4cddef           [ 3] 	jmp df_rt_list_decode_esc
f13a :                       df_rt_asm_decode_token_keyword
f13a : 297f             [ 2] 	and #0x7f			; Mask off MSB
f13c : aa               [ 2] 	tax					;Put it in to X as the counter
                             	; Point to asm symbol table
f13d : a9a8             [ 2] 	lda #lo(df_asm_tokensyms)
f13f : 85a4             [ 3] 	sta df_tmpptrb
f141 : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
f143 : 85a5             [ 3] 	sta df_tmpptrb+1
f145 :                       df_rt_list_find_asm_sym
f145 : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page  250
---------------------------------- bank0.s -----------------------------------

f146 : f01b             [ 3] 	beq df_rt_list_got_asm_sym
f148 : a000             [ 2] 	ldy #0
f14a :                       df_rt_list_next_asm_ch
                             	_incZPWord df_tmpptrb
                             
f150 : b1a4             [ 5] 	lda (df_tmpptrb),y
f152 : c920             [ 2] 	cmp #' '			; Skip all chars >=' '
f154 : b0f4             [ 3] 	bcs df_rt_list_next_asm_ch
f156 : 38               [ 2] 	sec					; Skip offset and mode bytes
f157 : 65a4             [ 3] 	adc df_tmpptrb
f159 : 85a4             [ 3] 	sta df_tmpptrb
                             	_bcc 2
                             
f15d : e6a5             [ 5] 	inc df_tmpptrb+1
f15f : ca               [ 2] 	dex					; One less symbol to skip over
f160 : 4c45f1           [ 3] 	jmp df_rt_list_find_asm_sym
f163 :                       df_rt_list_got_asm_sym
f163 : a1a4             [ 6] 	lda (df_tmpptrb,x)	; Relies on X=0 from branch
f165 : c920             [ 2] 	cmp #' '
f167 : 900c             [ 3] 	bcc df_rt_asm_decode_token_done
f169 : 202cc4           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
f172 : 4c63f1           [ 3] 	jmp df_rt_list_got_asm_sym
f175 :                       df_rt_asm_decode_token_done
f175 : 60               [ 6] 	rts
                             
                             
f176 :                       df_rt_doke
f176 : 38               [ 2] 	sec
f177 : 24                    	db 0x24	; BIT skip the clc
f178 :                       df_rt_poke
f178 : 18               [ 2] 	clc
f179 : 08               [ 3] 	php
f17a : 20e9e4           [ 6] 	jsr df_rt_parm_2ints
f17d : a5a4             [ 3] 	lda df_tmpptrb
f17f : a000             [ 2] 	ldy #0
f181 : 91a2             [ 5] 	sta (df_tmpptra),y
f183 : 28               [ 4] 	plp
f184 : 9005             [ 3] 	bcc df_rt_poke_done
                             	; get high byte to doke
f186 : a5a5             [ 3] 	lda df_tmpptrb+1
f188 : c8               [ 2] 	iny
                             	; poke hi byte
f189 : 91a2             [ 5] 	sta (df_tmpptra),y
f18b :                       df_rt_poke_done
f18b : 60               [ 6] 	rts
                             
f18c :                       df_rt_snd_common
                             	; 3 inputs
                             	; tmpa = channel (1,2,3), tmpb = period, tmpc = 
f18c : a5a2             [ 3] 	lda df_tmpptra
                             	; tone channel addressing is 0 to 2
f18e : 38               [ 2] 	sec
f18f : e901             [ 2] 	sbc #1
f191 : 2903             [ 2] 	and #3
                             	; ok doing a tone channel, get reg index for per
f193 : 0a               [ 2] 	asl a
f194 : aa               [ 2] 	tax
                             	; get low byte of period
f195 : a5a4             [ 3] 	lda df_tmpptrb
f197 : 206ec0           [ 6] 	jsr snd_set
AS65 Assembler for R6502 [1.42].                                     Page  251
---------------------------------- bank0.s -----------------------------------

                             	; increment reg number to high byte
f19a : e8               [ 2] 	inx
                             	; but if now at R7 then it's was noise period
                             	; so then no high period or volume
f19b : e007             [ 2] 	cpx #7
f19d : d001             [ 3] 	bne df_rt_not_noise
                             	; else do nothing more
f19f : 60               [ 6] 	rts
f1a0 :                       df_rt_not_noise
                              	; get high byte of period
f1a0 : a5a5             [ 3] 	lda df_tmpptrb+1
f1a2 : 290f             [ 2] 	and #0x0f
                             	; set hi period
f1a4 : 206ec0           [ 6] 	jsr snd_set
                             	; get volume register index (8 = channel 1)
f1a7 : 18               [ 2] 	clc
f1a8 : a5a2             [ 3] 	lda df_tmpptra
f1aa : 2903             [ 2] 	and #3
f1ac : 6907             [ 2] 	adc #7
f1ae : aa               [ 2] 	tax
                             	; get volume
f1af : a5a6             [ 3] 	lda df_tmpptrc
f1b1 : 290f             [ 2] 	and #0x0f
f1b3 : d002             [ 3] 	bne df_rt_sound_env_skip
                             	; envelope mode
f1b5 : 0910             [ 2] 	ora #0x10
f1b7 :                       df_rt_sound_env_skip
f1b7 : 4c6ec0           [ 3] 	jmp snd_set
                             
                             ; sound chan,period,volume
f1ba :                       df_rt_sound
f1ba : 20f4e4           [ 6] 	jsr df_rt_parm_3ints
f1bd :                       df_rt_dosound
f1bd : 4c8cf1           [ 3] 	jmp df_rt_snd_common
                             
                             ; music chan,octave,note,volume
f1c0 :                       df_rt_music
f1c0 : 200be5           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 2 = octave, need to x 12word = 24
                             	; get period A,X (hi/lo)
                             	; pass in octave # in X and note # in Y
f1c3 : a6a4             [ 3] 	ldx df_tmpptrb
f1c5 : a4a6             [ 3] 	ldy df_tmpptrc
f1c7 : 20ced5           [ 6] 	jsr snd_get_note
                             	; store note period in b
f1ca : 86a4             [ 3] 	stx df_tmpptrb
f1cc : 85a5             [ 3] 	sta df_tmpptrb+1
                             	; put vol in tmpc
f1ce : a5a8             [ 3] 	lda df_tmpptrd
f1d0 : 85a6             [ 3] 	sta df_tmpptrc
                             	; tmpa,b,c contain chan,per,vol
f1d2 : 4cbdf1           [ 3] 	jmp df_rt_dosound
                             
                             
                             ; play tonemask,noisemask,envelope,period
f1d5 :                       df_rt_play
f1d5 : 200be5           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 1 = tone enable
f1d8 : a5a2             [ 3] 	lda df_tmpptra
f1da : 2907             [ 2] 	and #7
f1dc : 85a2             [ 3] 	sta df_tmpptra
                             	; parm 2 = noise enable
AS65 Assembler for R6502 [1.42].                                     Page  252
---------------------------------- bank0.s -----------------------------------

f1de : a5a4             [ 3] 	lda df_tmpptrb
f1e0 : 2907             [ 2] 	and #7
f1e2 : 0a               [ 2] 	asl a
f1e3 : 0a               [ 2] 	asl a
f1e4 : 0a               [ 2] 	asl a
f1e5 : 05a2             [ 3] 	ora df_tmpptra
                             	; we now have bits set for channels to enable
                             	; but need to invert for the 8910
                             	; top 2 bits are 0 and 1 as these are port b (in
f1e7 : 497f             [ 2] 	eor #0x7f
                             	; reg 7 is control register
f1e9 : a207             [ 2] 	ldx #7
f1eb : 206ec0           [ 6] 	jsr snd_set
                             	; parm 4 = envelope period
                             	; 11 is envelope period register
f1ee : a20b             [ 2] 	ldx #11
                             	; get low
f1f0 : a5a8             [ 3] 	lda df_tmpptrd
f1f2 : 206ec0           [ 6] 	jsr snd_set
                             	; get high
f1f5 : e8               [ 2] 	inx
f1f6 : a5a9             [ 3] 	lda df_tmpptrd+1
f1f8 : 206ec0           [ 6] 	jsr snd_set
                             	; parm 3 = envelope mode
f1fb : a5a6             [ 3] 	lda df_tmpptrc
f1fd : 290f             [ 2] 	and #0xf
                             	; 13 is envelope shape register
f1ff : a20d             [ 2] 	ldx #13
f201 : 4c6ec0           [ 3] 	jmp snd_set
                             
                             ;df_rt_fill
                             ;	jsr df_rt_parm_5ints
                             ;	rts
                             	
                             ;* common filename procesing routine
                             ;* expects s: or t: followed by filename
                             ;* if no device specified then sd card default
f204 :                       df_rt_init_filename
                             	; evaluate string
f204 : 2022e2           [ 6] 	jsr df_rt_neval
f207 : 209bf7           [ 6] 	jsr df_ost_popStr
                             
                             	; save string address
f20a : 86a6             [ 3] 	stx df_tmpptrc
f20c : 85a7             [ 3] 	sta df_tmpptrc+1
                             
                             	; Check first 2 chars of string
                             	; if s: then device = sd card
                             	; if t: then device = tape
f20e : a201             [ 2] 	ldx #1							; Assume SD card i.e. device 1
f210 : ad0006           [ 4] 	lda io_default					; Unless no arduino detected
f213 : 3002             [ 3] 	bmi df_rt_sd_connected
f215 : a200             [ 2] 	ldx #0							; In which case assume tape i.e. de
f217 :                       df_rt_sd_connected
f217 : a001             [ 2] 	ldy #1
f219 : b1a6             [ 5] 	lda (df_tmpptrc),y
f21b : 88               [ 2] 	dey								; Y=0 i.e. assume no s: or t:
f21c : c93a             [ 2] 	cmp #':'						; if no ':' in pos 1 then default
f21e : d015             [ 3] 	bne df_rt_do_fname
f220 : b1a6             [ 5] 	lda (df_tmpptrc),y				; get first char
f222 : a002             [ 2] 	ldy #2							; filename must start at pos 2
f224 : c973             [ 2] 	cmp #'s'						; if s then still sd card
AS65 Assembler for R6502 [1.42].                                     Page  253
---------------------------------- bank0.s -----------------------------------

f226 : d007             [ 3] 	bne df_rt_try_tape
f228 : ad0006           [ 4] 	lda io_default					; But if no sd card then erro
f22b : 1043             [ 3] 	bpl df_rt_file_errc
f22d : 3006             [ 3] 	bmi df_rt_do_fname
f22f :                       df_rt_try_tape
f22f : c974             [ 2] 	cmp #'t'						; MUST be t else an error!
f231 : d03d             [ 3] 	bne df_rt_file_errc
f233 : a200             [ 2] 	ldx #0							; zero for tape
f235 :                       df_rt_do_fname
f235 : 8a               [ 2] 	txa								; Save device number
f236 : 48               [ 3] 	pha
                             	; copy string to fhandle, Y is at start pos of f
f237 : a200             [ 2] 	ldx #0
f239 :                       df_rt_copy_fn
f239 : b1a6             [ 5] 	lda (df_tmpptrc),y
f23b :                       df_rt_fname_case
f23b : 9d0004           [ 5] 	sta df_linbuff,x				; Put filename in line buffe
f23e : c8               [ 2] 	iny
f23f : e8               [ 2] 	inx
f240 : c900             [ 2] 	cmp #0
f242 : d0f5             [ 3] 	bne df_rt_copy_fn
f244 : 68               [ 4] 	pla								; Get device number in A
f245 : 60               [ 6] 	rts
                             
                             ; Delete a file from SD card
                             ; Only valid for SD card
f246 :                       df_rt_delete
f246 : 2056f2           [ 6] 	jsr df_rt_parse_file
f249 : c901             [ 2] 	cmp #1
f24b : d023             [ 3] 	bne df_rt_file_errc
f24d : 2083c8           [ 6] 	jsr sd_delete
f250 : 4c00c4           [ 3] 	jmp io_set_default
                             
f253 :                       df_rt_dir
f253 : 4c8ec8           [ 3] 	jmp sd_dir
                             
                             ;* common file parsing routine
                             ;* sets tp_print flag for interactive mode or not
f256 :                       df_rt_parse_file
                             	; if line number is zero then interactive mode..
f256 : a280             [ 2] 	ldx #0x80						; Assume interactive mode i.e. pr
f258 : a001             [ 2] 	ldy #DFTK_LINNUM				; Check the line number
f25a : b187             [ 5] 	lda (df_currlin),y
f25c : c8               [ 2] 	iny
f25d : 1187             [ 5] 	ora (df_currlin),y
f25f : d002             [ 3] 	bne df_rt_parse_file_print		; If not zero then n
f261 : a200             [ 2] 	ldx #0x00						; Ok must be running mode i.e no 
f263 :                       df_rt_parse_file_print
f263 : 865b             [ 3] 	stx tp_print					; Save the print flag for file 
                             	; now process filename
f265 : 2004f2           [ 6] 	jsr df_rt_init_filename
                             	; sub device number is in A (0=tape, 1=sdcard)
f268 : 48               [ 3] 	pha								; Save sub-device number
f269 : a900             [ 2] 	lda #0							; Always 0 for file device
f26b : 2003c4           [ 6] 	jsr io_active_device
f26e : 68               [ 4] 	pla								; Exit with device number found
f26f : 60               [ 6] 	rts
f270 :                       df_rt_file_errc
                             	SWBRK DFERR_FNAME
                             
                             
                             ; save "file" as text
AS65 Assembler for R6502 [1.42].                                     Page  254
---------------------------------- bank0.s -----------------------------------

f272 :                       df_rt_tsave
f272 : 2056f2           [ 6] 	jsr df_rt_parse_file
f275 : 2032c4           [ 6] 	jsr io_open_write
f278 : b0f6             [ 3] 	bcs df_rt_file_errc
                             	; ok now have redirected output to device
                             	; go and list the program in save mode
f27a : a901             [ 2] 	lda #1
f27c : 85aa             [ 3] 	sta df_tmpptre
f27e : 2050ef           [ 6] 	jsr df_rt_listprg
                             	; final CR to end the save
f281 : a90d             [ 2] 	lda #UTF_CR
f283 : 202cc4           [ 6] 	jsr io_put_ch
f286 :                       df_rt_file_cleanup
                             	; close the file
f286 : 2035c4           [ 6] 	jsr io_close
                             	; restore to default device io
f289 : 4c00c4           [ 3] 	jmp io_set_default
                             
                             
                             ; load "file" from text
f28c :                       df_rt_tload
f28c : 2056f2           [ 6] 	jsr df_rt_parse_file
f28f : 202fc4           [ 6] 	jsr io_open_read
f292 : b0dc             [ 3] 	bcs df_rt_file_errc
                             	; no echo - very important
                             	; else might try and write to a device
                             	; only open for reading (i.e. SD CARD)
f294 :                       df_rt_loadline
f294 : 18               [ 2] 	clc					; NO ECHO!
f295 : 20fce0           [ 6] 	jsr df_pg_inputline
                             	; if C clear then tokenise line
f298 : 9012             [ 3] 	bcc df_rt_ldtokenise
f29a : 2086f2           [ 6] 	jsr df_rt_file_cleanup	; Ok now close file
                             	; df_tokbuff contains the last line loaded, use 
                             	; to decide it autostart is needed or not
f29d : ad8404           [ 4] 	lda df_tokbuff+4		; Check the first token in the
f2a0 : 1007             [ 3] 	bpl df_rt_no_autostart	; If less than 0x80 then 
f2a2 : c986             [ 2] 	cmp #DFRT_DEF			; Must be less than the def keyw
f2a4 : b003             [ 3] 	bcs df_rt_no_autostart
f2a6 : 4c39e1           [ 3] 	jmp df_pg_runcommand
f2a9 :                       df_rt_no_autostart
                             	; Back to the ready prompt when done (resets the
f2a9 : 4c0ee1           [ 3] 	jmp df_pg_dflat
                             
f2ac :                       df_rt_ldtokenise
f2ac : 204de1           [ 6] 	jsr df_pg_tokenise		; Tokenise loaded string
f2af : 4c94f2           [ 3] 	jmp df_rt_loadline		; Continue with next until b
                             
                             ; Utility to open in binary mode save
f2b2 :                       df_rt_openforbinsave
f2b2 : 2056f2           [ 6] 	jsr df_rt_parse_file
f2b5 : 203ec4           [ 6] 	jsr io_open_ext2		; Ext2 is binary file save
f2b8 : b0b6             [ 3] 	bcs df_rt_file_errc
f2ba : 60               [ 6] 	rts
                             
                             ; Utility to open in binary mode load
f2bb :                       df_rt_openforbinload
                             	; Get filename and open file for binary read
f2bb : 2056f2           [ 6] 	jsr df_rt_parse_file
f2be : 203bc4           [ 6] 	jsr io_open_ext1		; Ext1 is binary file read
f2c1 : b0ad             [ 3] 	bcs df_rt_file_errc
f2c3 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  255
---------------------------------- bank0.s -----------------------------------

                             
                             ; bload addr,"file"
f2c4 :                       df_rt_bload
                             	; Get address but keep on stack
f2c4 : e689             [ 5] 	inc df_exeoff
f2c6 : 2022e2           [ 6] 	jsr df_rt_neval
                             
                             	; Get filename and open file for binary read
f2c9 : e689             [ 5] 	inc df_exeoff
f2cb : 20bbf2           [ 6] 	jsr df_rt_openforbinload
                             
                             	; Get address from stack in to ptra
f2ce : 2097f7           [ 6] 	jsr df_ost_popInt
f2d1 : 86a2             [ 3] 	stx df_tmpptra
f2d3 : 85a3             [ 3] 	sta df_tmpptra+1
                             
                             	; Get file address to X,Y
f2d5 : 2029c4           [ 6] 	jsr io_get_ch
f2d8 : aa               [ 2] 	tax
f2d9 : 2029c4           [ 6] 	jsr io_get_ch
f2dc : a8               [ 2] 	tay
                             
                             	; Check if user address is zero
f2dd : a5a2             [ 3] 	lda df_tmpptra
f2df : 05a3             [ 3] 	ora df_tmpptra+1
f2e1 : d004             [ 3] 	bne df_rt_bload_addr
                             	; If it is zero then use address from file
f2e3 : 86a2             [ 3] 	stx df_tmpptra
f2e5 : 84a3             [ 3] 	sty df_tmpptra+1
f2e7 :                       df_rt_bload_addr
                             	; Get file length
f2e7 : 2029c4           [ 6] 	jsr io_get_ch
f2ea : 85a4             [ 3] 	sta df_tmpptrb
f2ec : 2029c4           [ 6] 	jsr io_get_ch
f2ef : 85a5             [ 3] 	sta df_tmpptrb+1
                             
                             	; Go and load the bytes
f2f1 : 2018f3           [ 6] 	jsr df_rt_loadbin
                             	; Close the file
f2f4 : 4c86f2           [ 3] 	jmp df_rt_file_cleanup
                             
                             ; Save a binary file
                             ; addr,length,fname
f2f7 :                       df_rt_bsave
                             	; Get source address and length but leave on sta
                             	; evaluate 1st parm
f2f7 : 2022e2           [ 6] 	jsr df_rt_neval
                             	; jump over comma
f2fa : e689             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
f2fc : 2022e2           [ 6] 	jsr df_rt_neval
                             
                             	; Process file and open for binary save
f2ff : e689             [ 5] 	inc df_exeoff
f301 : 20b2f2           [ 6] 	jsr df_rt_openforbinsave
                             
                             	; Get length in to ptrb
f304 : 2097f7           [ 6] 	jsr df_ost_popInt
f307 : 86a4             [ 3] 	stx df_tmpptrb
f309 : 85a5             [ 3] 	sta df_tmpptrb+1
                             
                             	; Get address in to ptra
AS65 Assembler for R6502 [1.42].                                     Page  256
---------------------------------- bank0.s -----------------------------------

f30b : 2097f7           [ 6] 	jsr df_ost_popInt
f30e : 86a2             [ 3] 	stx df_tmpptra
f310 : 85a3             [ 3] 	sta df_tmpptra+1
                             
                             	; now save bytes
f312 : 202af3           [ 6] 	jsr df_rt_savebin
                             	; Close the file
f315 : 4c86f2           [ 3] 	jmp df_rt_file_cleanup
                             
                             
                             ; save dflat tokenised program as binary
                             ;df_rt_save
                             ;	; Process file and open for binary save
                             ;	jsr df_rt_openforbinsave
                             ;
                             ;	; first save zero page stuff
                             ;	; ok this saves a bit more than needed
                             ;	; but it's no biggie and doesn't
                             ;	; clobber temp space
                             ;	lda #lo(dflat_zp_save_s)
                             ;	sta df_tmpptra
                             ;	lda #hi(dflat_zp_save_s)
                             ;	sta df_tmpptra+1
                             ;	; save length
                             ;	sec
                             ;	lda #lo(dflat_zp_save_e)
                             ;	sbc #lo(dflat_zp_save_s)
                             ;	sta df_tmpptrb
                             ;	lda #hi(dflat_zp_save_e)
                             ;	sbc #hi(dflat_zp_save_s)
                             ;	sta df_tmpptrb+1
                             ;	; now save bytes
                             ;	jsr df_rt_savebin
                             ;
                             ;	; now save the dflat program
                             ;	lda df_prgstrt
                             ;	sta df_tmpptra
                             ;	lda df_prgstrt+1
                             ;	sta df_tmpptra+1
                             ;	; save length
                             ;	sec
                             ;	lda df_prgend
                             ;	sbc df_prgstrt
                             ;	sta df_tmpptrb
                             ;	lda df_prgend+1
                             ;	sbc df_prgstrt+1
                             ;	sta df_tmpptrb+1
                             ;	; now save bytes
                             ;	jsr df_rt_savebin
                             ;
                             ;	; now save the variables VVT and VNT
                             ;	lda df_vntstrt
                             ;	sta df_tmpptra
                             ;	lda df_vntstrt+1
                             ;	sta df_tmpptra+1
                             ;	; save length
                             ;	sec
                             ;	lda df_vvtstrt
                             ;	sbc df_vntstrt
                             ;	sta df_tmpptrb
                             ;	lda df_vvtstrt+1
                             ;	sbc df_vntstrt+1
AS65 Assembler for R6502 [1.42].                                     Page  257
---------------------------------- bank0.s -----------------------------------

                             ;	sta df_tmpptrb+1
                             ;	; now save bytes
                             ;	jsr df_rt_savebin
                             ;
                             ;	; close the file
                             ;	jsr io_close
                             ;	clc
                             ;	; Close the file
                             ;	jmp df_rt_file_cleanup
                             
                             
                             ; load dflat tokenised program as binary
                             ;df_rt_load
                             ;	jsr df_rt_openforbinload
                             ;
                             ;	; Get zero page header
                             ;	jsr df_rt_getbin_parms
                             ;	; and get bytes
                             ;	jsr df_rt_loadbin
                             ;
                             ;	; Get program header
                             ;	jsr df_rt_getbin_parms
                             ;	; and get bytes
                             ;	jsr df_rt_loadbin
                             ;
                             ;	; Get variables header
                             ;	jsr df_rt_getbin_parms
                             ;	; and get bytes
                             ;	jsr df_rt_loadbin
                             ;
                             ;	; close the file
                             ;	jsr io_close
                             ;	clc
                             ;	; Close the file
                             ;	jmp df_rt_file_cleanup
                             ;
                             
                             ; Utility to get 4 parms from binary header
                             ;df_rt_getbin_parms
                             ;	ldx #0
                             ;df_rt_getbin_parms_loop
                             ;	jsr io_get_ch
                             ;	sta df_tmpptra,x
                             ;	inx
                             ;	cpx #4
                             ;	bne df_rt_getbin_parms_loop
                             ;	rts
                             
                             ; Utility to load a bin file in address ptra
                             ; Length in ptr b
f318 :                       df_rt_loadbin
                             	; Now load all bytes
f318 : a000             [ 2] 	ldy #0
f31a :                       df_rt_loadbin_byte
                             	; Get a byte from tape
f31a : 2029c4           [ 6] 	jsr io_get_ch
                             	; Save it to destination
f31d : 91a2             [ 5] 	sta (df_tmpptra),y
                             	; Increment destination
f31f : c8               [ 2] 	iny
f320 : d002             [ 3] 	bne df_rt_loadbin_inc
f322 : e6a3             [ 5] 	inc df_tmpptra+1
AS65 Assembler for R6502 [1.42].                                     Page  258
---------------------------------- bank0.s -----------------------------------

f324 :                       df_rt_loadbin_inc
                             	; Decrement length remaining
f324 : 2048f3           [ 6] 	jsr df_rt_dec_binlen
                             	; Not done, do another byte
f327 : d0f1             [ 3] 	bne df_rt_loadbin_byte
                             	; Yes the close the file
f329 : 60               [ 6] 	rts
                             
                             ; Utility to save a bin file from address ptra
                             ; Length in ptr b
f32a :                       df_rt_savebin
                             	; Save dest and length to tape
f32a : a200             [ 2] 	ldx #0
f32c :                       df_rt_bsave_parms
f32c : b5a2             [ 4] 	lda df_tmpptra,x
f32e : 202cc4           [ 6] 	jsr io_put_ch
f331 : e8               [ 2] 	inx
f332 : e004             [ 2] 	cpx #4
f334 : d0f6             [ 3] 	bne df_rt_bsave_parms
                             
                             	; Now save all bytes
f336 : a000             [ 2] 	ldy #0
f338 :                       df_rt_savebin_byte
                             	; Get byte from memory
f338 : b1a2             [ 5] 	lda (df_tmpptra),y
                             	; Put byte to tape
f33a : 202cc4           [ 6] 	jsr io_put_ch
                             	; Increment destination
f33d : c8               [ 2] 	iny
f33e : d002             [ 3] 	bne df_rt_savebin_inc
f340 : e6a3             [ 5] 	inc df_tmpptra+1
f342 :                       df_rt_savebin_inc
                             	; Decrement length remaining
f342 : 2048f3           [ 6] 	jsr df_rt_dec_binlen
                             	; Not done, do another byte
f345 : d0f1             [ 3] 	bne df_rt_savebin_byte
f347 : 60               [ 6] 	rts
                             
                             ; Decrement length in ptrb
f348 :                       df_rt_dec_binlen
                             	; Decrement length remaining
f348 : a5a4             [ 3] 	lda df_tmpptrb
f34a : d002             [ 3] 	bne df_rt_binlen_skip
f34c : c6a5             [ 5] 	dec df_tmpptrb+1
f34e :                       df_rt_binlen_skip
f34e : c6a4             [ 5] 	dec df_tmpptrb
                             	; Reached zero?
f350 : a5a4             [ 3] 	lda df_tmpptrb
f352 : 05a5             [ 3] 	ora df_tmpptrb+1
f354 : 60               [ 6] 	rts
                             
                             
                             ; reset var
f355 :                       df_rt_reset
                             	; now get lvar X,A from current statement
f355 : 2060e6           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
f358 : 86a4             [ 3] 	stx df_tmpptrb
f35a : 85a5             [ 3] 	sta df_tmpptrb+1
                             	; load the vdp count as the reset value of timer
                             	; turn off interrupts while reading vdp lo,hi
f35c : a000             [ 2] 	ldy #0	; This is in readiness to read high byte 
AS65 Assembler for R6502 [1.42].                                     Page  259
---------------------------------- bank0.s -----------------------------------

                             	; clear interrupts to access 3 byte vdp counter 
f35e : 78               [ 2] 	sei
f35f : a508             [ 3] 	lda vdp_cnt
f361 : 91a4             [ 5] 	sta (df_tmpptrb),y
f363 : a509             [ 3] 	lda vdp_cnt+1
f365 : c8               [ 2] 	iny
f366 : 91a4             [ 5] 	sta (df_tmpptrb),y
                             	; restore interrupts asap
f368 : 58               [ 2] 	cli
f369 : 60               [ 6] 	rts
                             
                             ;***** FUNCTIONS *****
                             
f36a :                       df_rt_deek
f36a : 38               [ 2] 	sec
f36b : 24                    	db 0x24	; BIT skip the clc
f36c :                       df_rt_peek
f36c : 18               [ 2] 	clc
f36d :                       df_rt_readbyte
f36d : 08               [ 3] 	php
                             ;	inc df_exeoff
f36e : 201ce2           [ 6] 	jsr df_rt_getnval
f371 : 86a2             [ 3] 	stx df_tmpptra
f373 : 85a3             [ 3] 	sta df_tmpptra+1
f375 : a000             [ 2] 	ldy #0
f377 : b1a2             [ 5] 	lda (df_tmpptra),y
f379 : aa               [ 2] 	tax
f37a : a900             [ 2] 	lda #0
f37c : 28               [ 4] 	plp
f37d : 9003             [ 3] 	bcc df_rt_readbyte_skip
f37f : c8               [ 2] 	iny
f380 : b1a2             [ 5] 	lda (df_tmpptra),y
f382 :                       df_rt_readbyte_skip
f382 : 4c67f7           [ 3] 	jmp df_ost_pushInt
                             
                             ; Random number generator
                             ; rnd(0) = get next number
                             ; rnd(>0) = set seed
f385 :                       df_rt_rnd
                             ;	inc df_exeoff
f385 : 201ce2           [ 6] 	jsr df_rt_getnval
                             	; if input is 0 then generate next random number
f388 : e000             [ 2] 	cpx #0
f38a : d014             [ 3] 	bne df_rt_rnd_set
f38c : c900             [ 2] 	cmp #0
f38e : d010             [ 3] 	bne df_rt_rnd_set
                             	; generate next number
f390 : a599             [ 3] 	lda df_rnd+1
f392 : 4a               [ 2] 	lsr a
f393 : 2698             [ 5] 	rol df_rnd
f395 : 9002             [ 3] 	bcc df_rt_rnd_noeor
f397 : 49b4             [ 2] 	eor #0xb4
f399 :                       df_rt_rnd_noeor
f399 : 8599             [ 3] 	sta df_rnd+1
f39b : 4598             [ 3] 	eor df_rnd
f39d : 4c6bf7           [ 3] 	jmp df_ost_pushIntA
                             	; else set the seed to that number and done
f3a0 :                       df_rt_rnd_set
f3a0 : 8698             [ 3] 	stx df_rnd
f3a2 : 8599             [ 3] 	sta df_rnd+1
f3a4 : 4c67f7           [ 3] 	jmp df_ost_pushInt
                             
AS65 Assembler for R6502 [1.42].                                     Page  260
---------------------------------- bank0.s -----------------------------------

                             
                             ;* Return memory footprint as follows:
                             ;* 0	Return free memory (start of vnt - end of he
                             ;* 1	Return program size (end of prg - start of p
                             ;* 2	Return size of vars (end of vvt - start of v
f3a7 :                       df_rt_mem
                             ;	inc df_exeoff
f3a7 : 201ce2           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
f3aa : e001             [ 2] 	cpx #1
f3ac : f017             [ 3] 	beq df_rt_mem_prg
f3ae : e002             [ 2] 	cpx #2
f3b0 : f026             [ 3] 	beq df_rt_mem_var
                             	; default is free memory
f3b2 :                       df_rt_mem_free
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             	_cpyZPWord df_starend,df_tmpptrb
                             
f3c2 : 4ce8f3           [ 3] 	jmp df_rt_mem_calc
f3c5 :                       df_rt_mem_prg
                             	_cpyZPWord df_prgend,df_tmpptra
                             
                             	_cpyZPWord df_prgstrt,df_tmpptrb
                             
f3d5 : 4ce8f3           [ 3] 	jmp df_rt_mem_calc
f3d8 :                       df_rt_mem_var
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
f3e8 :                       df_rt_mem_calc
                             	; tmpa-tmpb result in X,A
f3e8 : 38               [ 2] 	sec
f3e9 : a5a2             [ 3] 	lda df_tmpptra
f3eb : e5a4             [ 3] 	sbc df_tmpptrb
f3ed : aa               [ 2] 	tax
f3ee : a5a3             [ 3] 	lda df_tmpptra+1
f3f0 : e5a5             [ 3] 	sbc df_tmpptrb+1
f3f2 : 4c67f7           [ 3] 	jmp df_ost_pushInt
                             
                             ;* a=stick()
                             ;* returns bit condition of joystick positions
                             ;* no actual joystick support so this is
                             ;* Check for fire | down | up | right | left
                             ;*        bit  4     3      2     1       0
f3f5 :                       df_rt_stick
                             ;	inc df_exeoff
f3f5 : 20dec8           [ 6] 	jsr kb_stick				; Get pos in to A
f3f8 : 4c6bf7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; k=get(sync) sync>=1 means sync
f3fb :                       df_rt_get
                             ;	inc df_exeoff
f3fb : 201ce2           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used, check for sync or async
                             	; c=0 if x<1 else x>=1 makes c=1
f3fe : e001             [ 2] 	cpx #1
f400 :                       df_rt_get_sync
f400 : 08               [ 3] 	php
f401 : 2029c4           [ 6] 	jsr io_get_ch				; Return in A, C=0 is good
f404 : 9005             [ 3] 	bcc df_rt_get_pushp			; Push A (and do plp)
AS65 Assembler for R6502 [1.42].                                     Page  261
---------------------------------- bank0.s -----------------------------------

f406 : 28               [ 4] 	plp
f407 : b0f7             [ 3] 	bcs df_rt_get_sync			; If sync then check again
f409 : 9001             [ 3] 	bcc df_rt_get_push			; Else push zero (no plp)
f40b :                       df_rt_get_pushp
f40b : 28               [ 4] 	plp
f40c :                       df_rt_get_push
f40c : 4c6bf7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; s = scrn(x,y)
f40f :                       df_rt_scrn
                             ;	inc df_exeoff
f40f : 20e9e4           [ 6] 	jsr df_rt_parm_2ints
f412 : a4a2             [ 3] 	ldy df_tmpptra			; Y is the x coord!
f414 : a6a4             [ 3] 	ldx df_tmpptrb			; X is the y coord!
f416 : 20b3cf           [ 6] 	jsr gr_get
f419 : 4c6bf7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; p = pixel(x,y)
f41c :                       df_rt_pixel
                             ;	inc df_exeoff
f41c : 20e9e4           [ 6] 	jsr df_rt_parm_2ints
f41f : a6a2             [ 3] 	ldx df_tmpptra
f421 : a4a4             [ 3] 	ldy df_tmpptrb
f423 : 201bd2           [ 6] 	jsr gr_pixel
f426 : 4c6bf7           [ 3] 	jmp df_ost_pushIntA
                             
                             
                             ; e=elapsed(var)
f429 :                       df_rt_elapsed
                             	; now get lvar X,A from current statement
f429 : 2060e6           [ 6] 	jsr df_rt_getlvar
f42c : e689             [ 5] 	inc df_exeoff
                             	; save lvar in tmpb, vvt ptr in tmpa
f42e : 86a4             [ 3] 	stx df_tmpptrb
f430 : 85a5             [ 3] 	sta df_tmpptrb+1
                             	; subtract vdp counter from value
                             	; turn off interrupts while reading vdp lo,hi
f432 : a000             [ 2] 	ldy #0	; This is in readiness to read high byte 
f434 : 38               [ 2] 	sec
                             	; disable interrupts to access vdp counter
f435 : 78               [ 2] 	sei
f436 : a508             [ 3] 	lda vdp_cnt
f438 : f1a4             [ 5] 	sbc (df_tmpptrb),y
f43a : aa               [ 2] 	tax
f43b : a509             [ 3] 	lda vdp_cnt+1
                             	; restore interrupts asap
f43d : 58               [ 2] 	cli
f43e : c8               [ 2] 	iny
f43f : f1a4             [ 5] 	sbc (df_tmpptrb),y
f441 : 4c67f7           [ 3] 	jmp df_ost_pushInt
                             
f444 :                       df_rt_call
                             ;	inc df_exeoff
f444 : 200be5           [ 6] 	jsr df_rt_parm_4ints
f447 : a5a4             [ 3] 	lda df_tmpptrb				; load A
f449 : a6a6             [ 3] 	ldx	df_tmpptrc				; load X
f44b : a4a8             [ 3] 	ldy df_tmpptrd				; load Y
f44d : 2053f4           [ 6] 	jsr df_rt_calljsr
f450 :                       df_rt_push_int1
f450 : 4c67f7           [ 3] 	jmp df_ost_pushInt			; A,X pair is return value
f453 :                       df_rt_calljsr
f453 : 6ca200           [ 6] 	jmp (df_tmpptra)			; tmpptra is address, return 
AS65 Assembler for R6502 [1.42].                                     Page  262
---------------------------------- bank0.s -----------------------------------

                             
f456 :                       df_rt_sgn
                             ;	inc df_exeoff
f456 : 201ce2           [ 6] 	jsr df_rt_getnval
f459 : 86a2             [ 3] 	stx df_tmpptra
f45b : 05a2             [ 3] 	ora df_tmpptra
f45d : f00f             [ 3] 	beq df_rt_sgn_z
f45f : 2980             [ 2] 	and #0x80
f461 : d006             [ 3] 	bne df_rt_sgn_n
f463 : a201             [ 2] 	ldx #1
f465 : a900             [ 2] 	lda #0
f467 : f0e7             [ 3] 	beq df_rt_push_int1			; Always
f469 :                       df_rt_sgn_n
f469 : a2ff             [ 2] 	ldx #0xff
f46b : 8a               [ 2] 	txa
f46c : d0e2             [ 3] 	bne df_rt_push_int1			; Always
f46e :                       df_rt_sgn_z
f46e : a200             [ 2] 	ldx #0
f470 : 8a               [ 2] 	txa
f471 : f0dd             [ 3] 	beq df_rt_push_int1			; Always
                             
                             ; addr(X)
f473 :                       df_rt_addr
                             	; get lvar X,A from current statement
f473 : 2060e6           [ 6] 	jsr df_rt_getlvar
f476 : e689             [ 5] 	inc df_exeoff
f478 : 4c67f7           [ 3] 	jmp df_ost_pushInt
                             
                             ; string length calculator
                             ; X,A = source
                             ; A = length not including zero
f47b :                       df_rt_strlen_common
f47b : 86a2             [ 3] 	stx df_tmpptra
f47d : 85a3             [ 3] 	sta df_tmpptra+1
f47f : a0ff             [ 2] 	ldy #0xff
f481 :                       df_rt_strlen_count
f481 : c8               [ 2] 	iny
f482 : b1a2             [ 5] 	lda (df_tmpptra),y
f484 : d0fb             [ 3] 	bne df_rt_strlen_count
f486 : 98               [ 2] 	tya
f487 : 60               [ 6] 	rts
                             
                             
                             ; common routine to extract a string
                             ; tmpa = source string
                             ; tmpb = dest string
                             ; tmpc = start pos
                             ; tmpd = endpos
f488 :                       df_rt_str_extract
                             	; source string
f488 : 209bf7           [ 6] 	jsr df_ost_popStr
f48b : 86a2             [ 3] 	stx df_tmpptra
f48d : 85a3             [ 3] 	sta df_tmpptra+1
                             	; destination is string accumulator
f48f : a57b             [ 3] 	lda df_sevalptr
f491 : 85a4             [ 3] 	sta df_tmpptrb
f493 : a57c             [ 3] 	lda df_sevalptr+1
f495 : 85a5             [ 3] 	sta df_tmpptrb+1
                             	; start pos
f497 : a4a6             [ 3] 	ldy df_tmpptrc
f499 : a200             [ 2] 	ldx #0
f49b :                       df_rt_str_cpy_ch
AS65 Assembler for R6502 [1.42].                                     Page  263
---------------------------------- bank0.s -----------------------------------

f49b : c4a8             [ 3] 	cpy df_tmpptrd
f49d : f011             [ 3] 	beq df_str_src_end
f49f : b1a2             [ 5] 	lda (df_tmpptra),y
f4a1 : f00d             [ 3] 	beq df_str_src_end
f4a3 : 81a4             [ 6] 	sta (df_tmpptrb,x)
                             	_incZPWord df_tmpptrb
                             
f4ab : c8               [ 2] 	iny
f4ac : d0ed             [ 3] 	bne df_rt_str_cpy_ch
                             	SWBRK DFERR_STRLONG
                             
f4b0 :                       df_str_src_end
f4b0 : a900             [ 2] 	lda #0
f4b2 : 81a4             [ 6] 	sta (df_tmpptrb,x)
f4b4 : a67b             [ 3] 	ldx df_sevalptr
f4b6 : a57c             [ 3] 	lda df_sevalptr+1
f4b8 : 4c72f7           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = chr(x)
f4bb :                       df_rt_chr
                             ;	inc df_exeoff
                             	; get char in X
f4bb : 201ce2           [ 6] 	jsr df_rt_getnval
f4be : a000             [ 2] 	ldy #0
                             	; transfer lo byte to A
f4c0 : 8a               [ 2] 	txa
f4c1 : 917b             [ 5] 	sta (df_sevalptr),y
f4c3 : c8               [ 2] 	iny
                             	; zero terminator
f4c4 : a900             [ 2] 	lda #0
f4c6 : 917b             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f4c8 : a67b             [ 3] 	ldx df_sevalptr
f4ca : a57c             [ 3] 	lda df_sevalptr+1
f4cc : 4c72f7           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = hex(x)
f4cf :                       df_rt_hex
                             ;	inc df_exeoff
                             	; create hex digits
f4cf : 201ce2           [ 6] 	jsr df_rt_getnval
f4d2 : 85a2             [ 3] 	sta df_tmpptra	; Save the high byte
f4d4 : 8a               [ 2] 	txa				; Convert low byte first
f4d5 : 2084c1           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
f4d8 : 85a4             [ 3] 	sta df_tmpptrb
f4da : 8a               [ 2] 	txa				; Push low digit of low byte from X
f4db : 48               [ 3] 	pha
f4dc : a5a4             [ 3] 	lda df_tmpptrb	; Get A back from temp
f4de : 48               [ 3] 	pha				; Push high digit of low byte
f4df : a5a2             [ 3] 	lda df_tmpptra	; Get the high byte
f4e1 : 2084c1           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
                             	; create string
f4e4 : a000             [ 2] 	ldy #0			; Index in to string temp area
                             	; hi/hi
f4e6 : 917b             [ 5] 	sta (df_sevalptr),y
f4e8 : c8               [ 2] 	iny
                             	; hi/lo
f4e9 : 8a               [ 2] 	txa
f4ea : 917b             [ 5] 	sta (df_sevalptr),y
f4ec : c8               [ 2] 	iny
                             	; lo/hi
f4ed : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  264
---------------------------------- bank0.s -----------------------------------

f4ee : 917b             [ 5] 	sta (df_sevalptr),y
f4f0 : c8               [ 2] 	iny
                             	; lo/lo
f4f1 : 68               [ 4] 	pla
f4f2 : 917b             [ 5] 	sta (df_sevalptr),y
f4f4 : c8               [ 2] 	iny
                             	; zero terminator
f4f5 : a900             [ 2] 	lda #0
f4f7 : 917b             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f4f9 : a67b             [ 3] 	ldx df_sevalptr
f4fb : a57c             [ 3] 	lda df_sevalptr+1
f4fd : 4c72f7           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = dec(x)
f500 :                       df_rt_dec
                             ;	inc df_exeoff
                             	; create dec digits
f500 : 201ce2           [ 6] 	jsr df_rt_getnval
f503 : 209ac3           [ 6] 	jsr int_to_str
                             	; point to num_buf scratch area
f506 : a24d             [ 2] 	ldx #lo(num_buf)
f508 : a900             [ 2] 	lda #hi(num_buf)
f50a : 4c72f7           [ 3] 	jmp df_ost_pushStr
                             
                             
                             ; $l = left($s, x)
f50d :                       df_rt_left
                             ;	inc df_exeoff
                             
                             	; first get the string to act on
                             	; point to string accumulator
f50d : 20dce2           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars
f510 : e689             [ 5] 	inc df_exeoff
f512 : 201ce2           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract
f515 : 86a8             [ 3] 	stx df_tmpptrd
                             	; start position
f517 : a000             [ 2] 	ldy #0
f519 : 84a6             [ 3] 	sty df_tmpptrc
f51b : 4c88f4           [ 3] 	jmp df_rt_str_extract
                             
                             ; $r = right($s, x)
f51e :                       df_rt_right
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
f51e : 20dce2           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars from the right
f521 : e689             [ 5] 	inc df_exeoff
f523 : 201ce2           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract from the right
f526 : 86a6             [ 3] 	stx df_tmpptrc
                             	; end pos = len
f528 : a67b             [ 3] 	ldx df_sevalptr
f52a : a57c             [ 3] 	lda df_sevalptr+1
f52c : 207bf4           [ 6] 	jsr df_rt_strlen_common
f52f : 85a8             [ 3] 	sta df_tmpptrd
                             	; subtract num chars to extract to get start pos
f531 : 38               [ 2] 	sec
f532 : e5a6             [ 3] 	sbc df_tmpptrc
AS65 Assembler for R6502 [1.42].                                     Page  265
---------------------------------- bank0.s -----------------------------------

f534 : 85a6             [ 3] 	sta df_tmpptrc
f536 : 4c88f4           [ 3] 	jmp df_rt_str_extract
                             
                             ; $m = mid($s, x, y)
f539 :                       df_rt_mid
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
f539 : 20dce2           [ 6] 	jsr df_rt_seval
                             	; now get start of string segment
f53c : e689             [ 5] 	inc df_exeoff
f53e : 2022e2           [ 6] 	jsr df_rt_neval
                             	; number of chars to extract
f541 : e689             [ 5] 	inc df_exeoff
f543 : 201ce2           [ 6] 	jsr df_rt_getnval
f546 : 86a8             [ 3] 	stx df_tmpptrd
                             	; start position
f548 : 2097f7           [ 6] 	jsr df_ost_popInt
f54b : ca               [ 2] 	dex					; zero offset rather than 1
f54c : 86a6             [ 3] 	stx df_tmpptrc
                             	; update end pos by adding start pos
f54e : 8a               [ 2] 	txa
f54f : 18               [ 2] 	clc
f550 : 65a8             [ 3] 	adc df_tmpptrd
f552 : 85a8             [ 3] 	sta df_tmpptrd
f554 : 4c88f4           [ 3] 	jmp df_rt_str_extract
                             
                             ; %l = len($s)
f557 :                       df_rt_len
                             ;	inc df_exeoff
                             	; evaluate the string in the string accumulator
f557 : 20dce2           [ 6] 	jsr df_rt_seval
f55a : 209bf7           [ 6] 	jsr df_ost_popStr
                             	; now calculate the length of this string
f55d : 207bf4           [ 6] 	jsr df_rt_strlen_common
f560 : 4c6bf7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = asc($s)
f563 :                       df_rt_asc
                             ;	inc df_exeoff
                             	; Evaluate string in the string accumulator
f563 : 20dce2           [ 6] 	jsr df_rt_seval
f566 : 209bf7           [ 6] 	jsr df_ost_popStr
                             	; Store point in ZP
f569 : 86a2             [ 3] 	stx df_tmpptra
f56b : 85a3             [ 3] 	sta df_tmpptra+1
                             	; Find the character at beginning
f56d : a200             [ 2] 	ldx #0
f56f : a1a2             [ 6] 	lda (df_tmpptra,x)
f571 : 4c6bf7           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = val($s)
f574 :                       df_rt_val
                             ;	inc df_exeoff
                             	; evaluate the string
f574 : 20dce2           [ 6] 	jsr df_rt_seval
f577 : 209bf7           [ 6] 	jsr df_ost_popStr
f57a : a000             [ 2] 	ldy #0				; any numeric format
f57c : 20cdc1           [ 6] 	jsr con_n_to_a		; result in num_a
f57f : b007             [ 3] 	bcs df_rt_val_err
f581 : a63d             [ 3] 	ldx num_a
f583 : a53e             [ 3] 	lda num_a+1
AS65 Assembler for R6502 [1.42].                                     Page  266
---------------------------------- bank0.s -----------------------------------

                             	; Save as an int
f585 : 4c67f7           [ 3] 	jmp df_ost_pushInt
f588 :                       df_rt_val_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ; stop execution
f58a :                       df_rt_abort
                             	SWBRK DFERR_ABORT
                             
                             
f58c :                       df_rt_sprchar
f58c : 20e9e4           [ 6] 	jsr df_rt_parm_2ints
f58f : a5a2             [ 3] 	lda df_tmpptra
f591 : a6a4             [ 3] 	ldx df_tmpptrb
f593 : 4c8ed4           [ 3] 	jmp gr_spr_char
                             
f596 :                       df_rt_sprpos
f596 : 20f4e4           [ 6] 	jsr df_rt_parm_3ints
f599 : a5a2             [ 3] 	lda df_tmpptra
f59b : a6a4             [ 3] 	ldx df_tmpptrb
f59d : a4a6             [ 3] 	ldy df_tmpptrc
f59f : 4c9ed4           [ 3] 	jmp gr_spr_pos
                             
f5a2 :                       df_rt_sprupd
f5a2 : 2029d4           [ 6] 	jsr gr_spr_erase
f5a5 : 203bd4           [ 6] 	jsr gr_spr_new
f5a8 : 4c6dd4           [ 3] 	jmp gr_spr_draw
                             
f5ab :                       df_rt_sprinit
f5ab : 4c1bd4           [ 3] 	jmp gr_spr_init
                             
f5ae :                       df_rt_sprmulti
f5ae : 20e9e4           [ 6] 	jsr df_rt_parm_2ints
f5b1 : 4cabd4           [ 3] 	jmp gr_spr_multi_pos
                             
f5b4 :                       df_rt_sprhit
                             ;	inc df_exeoff
f5b4 : 201ce2           [ 6] 	jsr df_rt_getnval
f5b7 : 8a               [ 2] 	txa
f5b8 : 2094d4           [ 6] 	jsr gr_spr_hit
f5bb : b003             [ 3] 	bcs df_rt_sprhit_inactive
                             	; Active sprite hit = background
f5bd : 4c6bf7           [ 3] 	jmp df_ost_pushIntA
f5c0 :                       df_rt_sprhit_inactive
                             	; Inactive sprite hit = -1
f5c0 : a2ff             [ 2] 	ldx #0xff
f5c2 : 8a               [ 2] 	txa
f5c3 : 4c67f7           [ 3] 	jmp df_ost_pushInt
                             
                             
f5c6 :                       mod_sz_rtsubs_e
                             
                             
                             	include "dflat/proc.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
AS65 Assembler for R6502 [1.42].                                     Page  267
---------------------------------- bank0.s -----------------------------------

                             ;*
                             ;*  PROC.S
                             ;*  dflat module to handle procedures:
                             ;*  - executing a procedure
                             ;*  - find a proc, pass local and non-local param
                             ;*  - return from a proc, unload locals
                             ;*  - save the definition of a proc in the VNT an
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f5c6 :                       mod_sz_proc_s
                             
f5c6 :                       df_rt_proc_parmerr
f5c6 :                       df_rt_deferr
                             	SWBRK DFERR_PROCPARM
                             
                             
                             
                             ; call procedure
f5c8 :                       df_rt_proc
                             	; move past escape token
f5c8 : a489             [ 3] 	ldy df_exeoff
f5ca : c8               [ 2] 	iny
                             	; Get VVT address X,A and procptr
f5cb : b187             [ 5] 	lda (df_currlin),y
f5cd : aa               [ 2] 	tax
f5ce : c8               [ 2] 	iny
f5cf : b187             [ 5] 	lda (df_currlin),y
f5d1 : c8               [ 2] 	iny
f5d2 : 8489             [ 3] 	sty df_exeoff
f5d4 : 868f             [ 3] 	stx df_procptr
f5d6 : 8590             [ 3] 	sta df_procptr+1
                             	
                             	; is index 0 (held in dim1)
                             	; then need to find the procedure
f5d8 : a003             [ 2] 	ldy #DFVVT_DIM1
f5da : b18f             [ 5] 	lda (df_procptr),y
f5dc : d014             [ 3] 	bne df_rt_proc_addr
                             	; find proc
f5de : 20fee5           [ 6] 	jsr df_rt_findproc
                             	; save y (line index)
f5e1 : 8438             [ 3] 	sty tmp_d
                             	; now go and update the proc vvt address
f5e3 : a002             [ 2] 	ldy #DFVVT_HI
f5e5 : 918f             [ 5] 	sta (df_procptr),y
f5e7 : a001             [ 2] 	ldy #DFVVT_LO
f5e9 : 8a               [ 2] 	txa
f5ea : 918f             [ 5] 	sta (df_procptr),y
f5ec : a003             [ 2] 	ldy #DFVVT_DIM1
                             	; get back line index in to A
f5ee : a538             [ 3] 	lda tmp_d
f5f0 : 918f             [ 5] 	sta (df_procptr),y
f5f2 :                       df_rt_proc_addr
                             	; move past first open bracket
f5f2 : e689             [ 5] 	inc df_exeoff
                             	
                             	; get parm count
f5f4 : a004             [ 2] 	ldy #DFVVT_DIM2
f5f6 : b18f             [ 5] 	lda (df_procptr),y	
AS65 Assembler for R6502 [1.42].                                     Page  268
---------------------------------- bank0.s -----------------------------------

f5f8 : f018             [ 4] 	beq df_rt_proc_parm_none
                             	; push the right number of parms on
f5fa : 48               [ 3] 	pha
                             
f5fb : c689             [ 5] 	dec df_exeoff		; Pre-adjust
f5fd :                       df_rt_proc_push_parm
                             	; move past comma or opening bracket
f5fd : e689             [ 5] 	inc df_exeoff
                             	; if at end then error!
f5ff : a489             [ 3] 	ldy df_exeoff
f601 : b187             [ 5] 	lda (df_currlin),y
f603 : c929             [ 2] 	cmp #')'
f605 : f0bf             [ 4] 	beq df_rt_proc_parmerr
                             	; else try and evaluate
f607 : 2022e2           [ 6] 	jsr df_rt_neval
                             	; get parm count off stack
f60a : 68               [ 4] 	pla
                             	; decrement
f60b : 38               [ 2] 	sec
f60c : e901             [ 2] 	sbc #1
                             	; and put back on stack
f60e : 48               [ 3] 	pha
                             	; go back and do all required parms
f60f : d0ec             [ 4] 	bne df_rt_proc_push_parm
                             	; remove parm counter from stack
f611 :                       df_rt_proc_parm_done
f611 : 68               [ 4] 	pla
f612 :                       df_rt_proc_parm_none
                             	; should be at close bracket
f612 : a489             [ 3] 	ldy df_exeoff
f614 : b187             [ 5] 	lda (df_currlin),y
f616 : c929             [ 2] 	cmp #')'
f618 : d0ac             [ 4] 	bne df_rt_proc_parmerr
                             	; should be no more parms
                             	; ok, finally we have all parms on rt stack
                             	; now execute the procedure
                             	; get back the proc address
f61a : a68f             [ 3] 	ldx df_procptr
f61c : a590             [ 3] 	lda df_procptr+1
                             ;	bne df_rt_exec_proc		; ALWAYS as procptr+1 !=0
                             	
                             ; executing a procedure in VVT slot A,X
f61e :                       df_rt_exec_proc
                             	; save slot address
f61e : 86a2             [ 3] 	stx df_tmpptra
f620 : 85a3             [ 3] 	sta df_tmpptra+1
                             	
                             	; need to save all important vars
f622 : a587             [ 3] 	lda df_currlin
f624 : 48               [ 3] 	pha
f625 : a588             [ 3] 	lda df_currlin+1
f627 : 48               [ 3] 	pha
f628 : a589             [ 3] 	lda df_exeoff
f62a : 48               [ 3] 	pha
f62b : a580             [ 3] 	lda df_nxtstidx
f62d : 48               [ 3] 	pha
f62e : a581             [ 3] 	lda df_curstidx
f630 : 48               [ 3] 	pha
f631 : a57f             [ 3] 	lda df_eolidx
f633 : 48               [ 3] 	pha
f634 : a594             [ 3] 	lda df_ifnest
f636 : 48               [ 3] 	pha
AS65 Assembler for R6502 [1.42].                                     Page  269
---------------------------------- bank0.s -----------------------------------

                             
                             	; now initialise the data
f637 : a001             [ 2] 	ldy #DFVVT_LO
f639 : b1a2             [ 5] 	lda (df_tmpptra),y
f63b : 8587             [ 3] 	sta df_currlin
f63d : c8               [ 2] 	iny
f63e : b1a2             [ 5] 	lda (df_tmpptra),y
f640 : 8588             [ 3] 	sta df_currlin+1
f642 : c8               [ 2] 	iny
f643 : b1a2             [ 5] 	lda (df_tmpptra),y
f645 : 8589             [ 3] 	sta df_exeoff
f647 : 8581             [ 3] 	sta df_curstidx
f649 : a000             [ 2] 	ldy #0		; hmm XXXXX might need to be tay to get 
f64b : b187             [ 5] 	lda (df_currlin),y
f64d : 8580             [ 3] 	sta df_nxtstidx
                             	; now execute statements
f64f : 203ae5           [ 6] 	jsr df_rt_exec_stat
                             ;	bcs df_rt_exec_proc_err
                             	; now restore the position
f652 : 68               [ 4] 	pla
f653 : 8594             [ 3] 	sta df_ifnest
f655 : 68               [ 4] 	pla
f656 : 857f             [ 3] 	sta df_eolidx
f658 : 68               [ 4] 	pla
f659 : 8581             [ 3] 	sta df_curstidx
f65b : 68               [ 4] 	pla
f65c : 8580             [ 3] 	sta df_nxtstidx
f65e : 68               [ 4] 	pla
f65f : 8589             [ 3] 	sta df_exeoff
f661 : 68               [ 4] 	pla
f662 : 8588             [ 3] 	sta df_currlin+1
f664 : 68               [ 4] 	pla
f665 : 8587             [ 3] 	sta df_currlin
                             	; should be all restored, so return
f667 : 60               [ 6] 	rts
                             
                             
f668 :                       df_rt_def
                             	; line offset pointing at DFTK_PROC
                             	; skip over PROC address and open bracket
f668 : a689             [ 3] 	ldx df_exeoff
f66a : e8               [ 2] 	inx
f66b : e8               [ 2] 	inx
f66c : e8               [ 2] 	inx
f66d : 8689             [ 3] 	stx df_exeoff
                             	; parms on stack in reverse order to parm list
                             	; so get each parm and type and save to scratch
f66f : a201             [ 2] 	ldx #1									; index in to scratch
f671 : 868d             [ 3] 	stx df_procargs							; Proc args is the #args-1
f673 : a489             [ 3] 	ldy df_exeoff
f675 :                       df_rt_def_find_var
f675 : c8               [ 2] 	iny
f676 : b187             [ 5] 	lda (df_currlin),y
                             	; check if end of parm list
f678 : c929             [ 2] 	cmp #')'
f67a : f01f             [ 3] 	beq df_rt_def_parm_done
                             	; else check if found a variable escape token (<
f67c : c911             [ 2] 	cmp #DFTK_VAR
f67e : f007             [ 3] 	beq df_rt_def_got_var
                             	; else check if non-local specifier
f680 : c926             [ 2] 	cmp #DFTK_VARPARM						; This is a regular ASCII
f682 : d0f1             [ 3] 	bne df_rt_def_find_var
AS65 Assembler for R6502 [1.42].                                     Page  270
---------------------------------- bank0.s -----------------------------------

f684 :                       df_rt_def_got_varparm
                             	; set high bit
f684 : 0980             [ 2] 	ora #0x80
                             	; advance over non-local specifier
f686 : c8               [ 2] 	iny
f687 :                       df_rt_def_got_var
f687 : 9d1f06           [ 5] 	sta scratch,x		; Save parm type (by value or ref
                             	; get address and save in scratch
f68a : c8               [ 2] 	iny
f68b : b187             [ 5] 	lda (df_currlin),y
f68d : 9d3f06           [ 5] 	sta scratch+32,x	; Hope 32 params is enough! :-)
f690 : c8               [ 2] 	iny
f691 : b187             [ 5] 	lda (df_currlin),y
f693 : 9d5f06           [ 5] 	sta scratch+64,x
f696 : e8               [ 2] 	inx
f697 : e68d             [ 5] 	inc df_procargs
f699 : d0da             [ 3] 	bne df_rt_def_find_var  ; always - relies not ze
f69b :                       df_rt_def_parm_done
                             	; save index that we got to
f69b : 8489             [ 3] 	sty df_exeoff
                             	; save def param list position in temp
f69d : 868c             [ 3] 	stx df_procmode
                             	; all var indices on the operator stack
                             	; now load up variables with parameters
                             	; initially assume no locals
f69f : a900             [ 2] 	lda #0
f6a1 : 858e             [ 3] 	sta df_procloc
f6a3 :                       df_rt_def_load_var
f6a3 : c68d             [ 5] 	dec df_procargs
f6a5 : f02f             [ 3] 	beq df_rt_def_load_var_done
                             	; get var address
f6a7 : c68c             [ 5] 	dec df_procmode
f6a9 : a68c             [ 3] 	ldx df_procmode
f6ab : bd3f06           [ 4] 	lda scratch+32,x
f6ae : 85a2             [ 3] 	sta df_tmpptra
f6b0 : bd5f06           [ 4] 	lda scratch+64,x
f6b3 : 85a3             [ 3] 	sta df_tmpptra+1
                             	
f6b5 : bd1f06           [ 4] 	lda scratch,x
                             	; if MSB is set then this is not a local variabl
                             	; so just go an initialise with stacking
f6b8 : 3009             [ 3] 	bmi df_rt_def_initialise_parm
                             	; else call the local handling code to 
                             	; push the var address on to the runtime stack
f6ba : a6a2             [ 3] 	ldx df_tmpptra
f6bc : a5a3             [ 3] 	lda df_tmpptra+1
f6be : 200af7           [ 6] 	jsr df_rt_proc_local
                             	; increment number of locals
f6c1 : e68e             [ 5] 	inc df_procloc
f6c3 :                       df_rt_def_initialise_parm
                             	; load type
f6c3 : a000             [ 2] 	ldy #DFVVT_TYPE
f6c5 : b1a2             [ 5] 	lda (df_tmpptra),y
f6c7 : a8               [ 2] 	tay					; Put the type into Y
f6c8 : 207af7           [ 6] 	jsr df_ost_popParmX	; Try to get this off the st
                             	; update the variable
f6cb : a002             [ 2] 	ldy #DFVVT_HI
f6cd : 91a2             [ 5] 	sta (df_tmpptra),y
f6cf : 88               [ 2] 	dey
f6d0 : 8a               [ 2] 	txa
f6d1 : 91a2             [ 5] 	sta (df_tmpptra),y
                             
AS65 Assembler for R6502 [1.42].                                     Page  271
---------------------------------- bank0.s -----------------------------------

f6d3 : 4ca3f6           [ 3] 	jmp df_rt_def_load_var
f6d6 :                       df_rt_def_load_var_done
                             	; save the number of local parameters found so t
                             	; be unloaded when the proc ends
f6d6 : a58e             [ 3] 	lda df_procloc
f6d8 : 201ef7           [ 6] 	jsr df_rst_pushByte
                             	; continue with next statement
f6db : 18               [ 2] 	clc
f6dc : 60               [ 6] 	rts
                             
                             	
                             ; return a value
f6dd :                       df_rt_return
                             	; evaluate the return and put on the parameter s
                             	; then process this like an end of procedure
f6dd : 2022e2           [ 6] 	jsr df_rt_neval
                             ; end def for a proc
f6e0 :                       df_rt_enddef
                             	; unload any locals
                             ;	jsr df_rt_proc_unlocal
                             	; nothing to do - main loop will terminate
                             ;	clc
                             ;	rts
                             ; enddef falls through to the unlocal code	
                             	
                             ; unload any local variables from runtime stack
                             ;df_rt_proc_unlocal
f6e0 : 2027f7           [ 6] 	jsr df_rst_popByte
f6e3 : aa               [ 2] 	tax
f6e4 : f020             [ 4] 	beq df_rt_proc_unload_done
f6e6 :                       df_rt_proc_unloadvar
f6e6 : 8a               [ 2] 	txa
f6e7 : 48               [ 3] 	pha
                             	; var value is popped first then index
                             	; get a word and put in tmpb
f6e8 : 2044f7           [ 6] 	jsr df_rst_popWord
f6eb : 86a4             [ 3] 	stx df_tmpptrb
f6ed : 85a5             [ 3] 	sta df_tmpptrb+1
                             	; get the var address
f6ef : 2044f7           [ 6] 	jsr df_rst_popWord
f6f2 : 86a2             [ 3] 	stx df_tmpptra
f6f4 : 85a3             [ 3] 	sta df_tmpptra+1
                             	; store lo byte first
f6f6 : a001             [ 2] 	ldy #DFVVT_LO
f6f8 : a5a4             [ 3] 	lda df_tmpptrb
f6fa : 91a2             [ 5] 	sta (df_tmpptra),y
                             	; then hi
f6fc : c8               [ 2] 	iny
f6fd : a5a5             [ 3] 	lda df_tmpptrb+1
f6ff : 91a2             [ 5] 	sta (df_tmpptra),y
                             	; restore counter
f701 : 68               [ 4] 	pla
f702 : aa               [ 2] 	tax
f703 : ca               [ 2] 	dex
f704 : d0e0             [ 4] 	bne df_rt_proc_unloadvar
f706 :                       df_rt_proc_unload_done
f706 : 68               [ 4] 	pla				; Pull old return address from stack
f707 : 68               [ 4] 	pla
f708 : 18               [ 2] 	clc
f709 : 60               [ 6] 	rts
                             	
                             ; push a local variable to the runtime stack
AS65 Assembler for R6502 [1.42].                                     Page  272
---------------------------------- bank0.s -----------------------------------

                             ; X,A = var slot
f70a :                       df_rt_proc_local
                             	; save address
f70a : 86a2             [ 3] 	stx df_tmpptra
f70c : 85a3             [ 3] 	sta df_tmpptra+1
                             	; push var slot on rt stack
f70e : 2036f7           [ 6] 	jsr df_rst_pushWord
f711 :                       df_rt_proc_local_load	
                             	; load x,a with var value lo,hi
f711 : a001             [ 2] 	ldy #DFVVT_LO
f713 : b1a2             [ 5] 	lda (df_tmpptra),y
f715 : aa               [ 2] 	tax
f716 : c8               [ 2] 	iny
f717 : b1a2             [ 5] 	lda (df_tmpptra),y
                             	; push word on to rt stack
f719 : 2036f7           [ 6] 	jsr df_rst_pushWord
f71c : 18               [ 2] 	clc
f71d : 60               [ 6] 	rts
                             		
f71e :                       mod_sz_proc_e
                             
                             
f71e :                       mod_sz_runtime_e
                             
                             
                             
                             	include "dflat/stack.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  STACK.S
                             ;*  This module implements the dflat software sta
                             ;*  needs a few stacks:
                             ;*  - 6502 stack for expression parsing and reent
                             ;*  - dflat runtime stack for things like for/nex
                             ;*  - dflat parameter stack for passing parameter
                             ;*  The two software stacks are implemented in th
                             ;*  with the operator stack growing up from 0 and
                             ;*  runtime stack growing down from 255.  Hopeful
                             ;*  don't meet as there are no checks for this at
                             ;*  purely because I want speed over friendliness
                             ;*  I may come to regret this!
                             ;*  I have also added the only runtime memory all
                             ;*  needed by dflat here.  Humourously I have cal
                             ;*  which is taken from the C language, but it's 
                             ;*  grab some memory after end the of dflat progr
                             ;*  arrays - which of course cannot have storage 
                             ;*  tokenisation time (e.g. because I dimension a
                             ;*  a size from a variable).
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  273
---------------------------------- bank0.s -----------------------------------

                             ;* Push a byte on to runtime stack
                             ;* A = byte
                             ;****************************************
f71e :                       df_rst_pushByte
f71e : a477             [ 3] 	ldy df_rtstop
f720 : 990005           [ 5] 	sta df_rtstck,y
f723 : 88               [ 2] 	dey
f724 : 8477             [ 3] 	sty df_rtstop
f726 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f727 :                       df_rst_popByte
f727 : a477             [ 3] 	ldy df_rtstop
f729 : c8               [ 2] 	iny
f72a : b90005           [ 4] 	lda df_rtstck,y
f72d : 8477             [ 3] 	sty df_rtstop
f72f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Peek a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f730 :                       df_rst_peekByte
f730 : a477             [ 3] 	ldy df_rtstop
                             	; Look at what is below top of stack
                             	; below means the next address up as
                             	; this stack grows downwards like 6502
f732 : b90105           [ 4] 	lda df_rtstck+1,y
f735 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Push a word on to runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f736 :                       df_rst_pushWord
f736 : a477             [ 3] 	ldy df_rtstop
f738 : 990005           [ 5] 	sta df_rtstck,y
f73b : 88               [ 2] 	dey
f73c : 8a               [ 2] 	txa
f73d : 990005           [ 5] 	sta df_rtstck,y
f740 : 88               [ 2] 	dey
f741 : 8477             [ 3] 	sty df_rtstop
f743 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a word off runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f744 :                       df_rst_popWord
f744 : a477             [ 3] 	ldy df_rtstop
f746 : c8               [ 2] 	iny
f747 : be0005           [ 4] 	ldx df_rtstck,y
f74a : c8               [ 2] 	iny
f74b : b90005           [ 4] 	lda df_rtstck,y
f74e : 8477             [ 3] 	sty df_rtstop
f750 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push a parameter on to parm stack
AS65 Assembler for R6502 [1.42].                                     Page  274
---------------------------------- bank0.s -----------------------------------

                             ;* X,A - int
                             ;* Y - type
                             ;****************************************
f751 :                       df_ost_pushParmX
f751 : 8438             [ 3] 	sty tmp_d		; Save Type
f753 : a478             [ 3] 	ldy df_parmtop	; Get stack index
                             	; push high byte first (A)
f755 : 990005           [ 5] 	sta df_rtstck,y
f758 : c8               [ 2] 	iny
                             	; push low byte next (X)
f759 : 8a               [ 2] 	txa
f75a : 990005           [ 5] 	sta df_rtstck,y
f75d : c8               [ 2] 	iny
f75e : a538             [ 3] 	lda tmp_d		; get Type
f760 : 990005           [ 5] 	sta df_rtstck,y
f763 : c8               [ 2] 	iny
                             	; save new top of stack
f764 : 8478             [ 3] 	sty df_parmtop
f766 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push an int on to parm stack
                             ;* X,A - int
                             ;****************************************
f767 :                       df_ost_pushInt
f767 : a003             [ 2] 	ldy #DFST_INT
f769 : d0e6             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push A on to parm stack
                             ;* X,A - int
                             ;****************************************
f76b :                       df_ost_pushIntA
f76b : a003             [ 2] 	ldy #DFST_INT
f76d : aa               [ 2] 	tax
f76e : a900             [ 2] 	lda #0
f770 : f0df             [ 3] 	beq df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a string pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f772 :                       df_ost_pushStr
f772 : a004             [ 2] 	ldy #DFST_STR
f774 : d0db             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a general pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f776 :                       df_ost_pushPtr
f776 : a0ff             [ 2] 	ldy #DFST_PTR
f778 : d0d7             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop parameter from the stack
                             ;* X,A - int
                             ;* Y - type expected
                             ;****************************************
f77a :                       df_ost_popParmX
f77a : 98               [ 2] 	tya
f77b : a478             [ 3] 	ldy df_parmtop
AS65 Assembler for R6502 [1.42].                                     Page  275
---------------------------------- bank0.s -----------------------------------

                             	; pull type first
f77d : 88               [ 2] 	dey
f77e : 390005           [ 4] 	and df_rtstck,y
f781 : f00c             [ 3] 	beq df_st_typemismatcherr
                             	; pull low byte first
f783 : 88               [ 2] 	dey
f784 : be0005           [ 4] 	ldx df_rtstck,y
                             	; pull high byte next
f787 : 88               [ 2] 	dey
f788 : b90005           [ 4] 	lda df_rtstck,y
                             	; save new top of stack
f78b : 8478             [ 3] 	sty df_parmtop
f78d : 18               [ 2] 	clc
f78e : 60               [ 6] 	rts
f78f :                       df_st_typemismatcherr
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ;****************************************
                             ;* Return type on top of stack
                             ;* A - type
                             ;****************************************
f791 :                       df_ost_peekType
f791 : a478             [ 3] 	ldy df_parmtop
f793 : b9ff04           [ 4] 	lda df_rtstck-1,y
f796 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop an int off parm stack
                             ;* X,A - int
                             ;****************************************
f797 :                       df_ost_popInt
f797 : a003             [ 2] 	ldy #DFST_INT
f799 : d0df             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             
                             ;****************************************
                             ;* Pop a string pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f79b :                       df_ost_popStr
f79b : a004             [ 2] 	ldy #DFST_STR
f79d : d0db             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop a general pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f79f :                       df_ost_popPtr
f79f : a0ff             [ 2] 	ldy #DFST_PTR
f7a1 : d0d7             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             	
                             ;****************************************
                             ;* Allocate space on the heap
                             ;* X, A = Number of bytes to allocate
                             ;* X, A return address of allocated space
                             ;****************************************
f7a3 :                       df_st_malloc
                             	; save A in Y
f7a3 : a8               [ 2] 	tay
                             	; save old starend
f7a4 : a576             [ 3] 	lda df_starend+1
AS65 Assembler for R6502 [1.42].                                     Page  276
---------------------------------- bank0.s -----------------------------------

f7a6 : 48               [ 3] 	pha
f7a7 : a575             [ 3] 	lda df_starend
f7a9 : 48               [ 3] 	pha
                             	; restore A from Y
f7aa : 98               [ 2] 	tya
                             	; add X,A to starend
f7ab : 48               [ 3] 	pha
f7ac : 8a               [ 2] 	txa
f7ad : 18               [ 2] 	clc
f7ae : 6575             [ 3] 	adc df_starend
f7b0 : 8575             [ 3] 	sta df_starend
f7b2 : 68               [ 4] 	pla
f7b3 : 6576             [ 3] 	adc df_starend+1
f7b5 : 8576             [ 3] 	sta df_starend+1
                             	; return old starend as start of space
f7b7 : 68               [ 4] 	pla
f7b8 : aa               [ 2] 	tax
f7b9 : 68               [ 4] 	pla
f7ba : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* df_init
                             ;* Initialise dflat language settings
                             ;****************************************
f7bb :                       df_init
                             	; Initialise top of memory to default
                             	; This can be overridden by himem command
f7bb : a900             [ 2] 	lda #lo(DF_MEMTOP)
f7bd : 8d1d06           [ 4] 	sta df_memtop
f7c0 : a998             [ 2] 	lda #hi(DF_MEMTOP)
f7c2 : 8d1e06           [ 4] 	sta df_memtop+1
                             
                             	; Init program space
f7c5 : 4cc8f7           [ 3] 	jmp df_clear
                             
                             	; Initialise assembler
                             ;	jsr asm_init
                             
                             ;	rts
                             
                             
                             ;****************************************
                             ;* df_clear
                             ;* Initialise program space
                             ;****************************************
f7c8 :                       df_clear
                             	; Start of program space
f7c8 : a91f             [ 2] 	lda #lo(DF_PROGSTART)
f7ca : 8566             [ 3] 	sta df_prgstrt
f7cc : 8568             [ 3] 	sta df_prgend
f7ce : a907             [ 2] 	lda #hi(DF_PROGSTART)
f7d0 : 8567             [ 3] 	sta df_prgstrt+1
f7d2 : 8569             [ 3] 	sta df_prgend+1
                             	; Terminal value in prog space
f7d4 : a900             [ 2] 	lda #0
f7d6 : a8               [ 2] 	tay
f7d7 : 9166             [ 5] 	sta (df_prgstrt),y
                             	; No variables - zero the count
f7d9 : 8572             [ 3] 	sta df_varcnt
                             
                             	; Variable value table
AS65 Assembler for R6502 [1.42].                                     Page  277
---------------------------------- bank0.s -----------------------------------

                             	; Grows down from mem top
f7db : ad1d06           [ 4] 	lda df_memtop
f7de : 856e             [ 3] 	sta df_vvtstrt
f7e0 : 8570             [ 3] 	sta df_vvtend
f7e2 : ad1e06           [ 4] 	lda df_memtop+1
f7e5 : 856f             [ 3] 	sta df_vvtstrt+1
f7e7 : 8571             [ 3] 	sta df_vvtend+1
                             
                             	; Variable name table
                             	; Grows down from mem top
f7e9 : a56e             [ 3] 	lda df_vvtstrt
f7eb : 856a             [ 3] 	sta df_vntstrt
f7ed : 856c             [ 3] 	sta df_vntend
f7ef : a56f             [ 3] 	lda df_vvtstrt+1
f7f1 : 856b             [ 3] 	sta df_vntstrt+1
f7f3 : 856d             [ 3] 	sta df_vntend+1
                             
                             	; String accumulator
f7f5 : a91f             [ 2] 	lda #lo(scratch)
f7f7 : 857b             [ 3] 	sta df_sevalptr
f7f9 : a906             [ 2] 	lda #hi(scratch)
f7fb : 857c             [ 3] 	sta df_sevalptr+1
                             
f7fd : 60               [ 6] 	rts
                             
f7fe :                       mod_sz_dflat_e
                             
                             	include "dflat/error.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.S
                             ;*  Error handling module.
                             ;*  Whan an error is thrown using BRK, this modul
                             ;*  displaying the error plus any associated line
                             ;*  if it was running a program.  It then resets 
                             ;*  settings and takes the system back to program
                             ;*  mode.  The message uses the general IO handle
                             ;*  output must be set to the right place else fo
                             ;*	the error message will be written to tape!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
AS65 Assembler for R6502 [1.42].                                     Page  278
---------------------------------- bank0.s -----------------------------------

                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ; Error message table, each msg null terminated
f7fe :                       df_tk_errortab
f7fe : 4f6b00                	db	"Ok", 0
f801 : 53796e74617800        	db	"Syntax", 0
f808 : 5479706500            	db	"Type", 0
f80d : 44696d00              	db	"Dim", 0
f811 : 4e6f2072657065..      	db	"No repeat", 0
f81b : 4e6f206465666e00      	db	"No defn", 0
f823 : 5061726d00            	db	"Parm", 0
f828 : 456e64656400          	db	"Ended", 0
f82e : 4e6f20656e6469..      	db	"No endif", 0
f837 : 4e6f20696600          	db	"No if", 0
f83d : 4e6f20666f7200        	db	"No for", 0
f844 : 4e6f7420666f75..      	db	"Not found", 0
f84e : 546f6f206c6f6e..      	db	"Too long", 0
f857 : 427265616b00          	db	"Break", 0
f85d : 4e6f206461746100      	db	"No data", 0
f865 : 4e6f207768696c..      	db	"No while", 0
f86e : 4e6f206c696e6500      	db	"No line", 0
f876 : 4e6f2072657475..      	db	"No return ", 0
f881 : 41626f7274656400      	db	"Aborted", 0
f889 : 426f756e647300        	db	"Bounds", 0
f890 : 4e6f206f726700        	db	"No org", 0
f897 : 00                    	db	0
                             
AS65 Assembler for R6502 [1.42].                                     Page  279
---------------------------------- bank0.s -----------------------------------

f898 :                       df_tk_error_inline
f898 : 20696e206c696e..      	db	" in line ", 0
f8a2 :                       df_tk_error_atpos
f8a2 : 20706f732000          	db	" pos ", 0
f8a8 :                       df_tk_error_error
f8a8 : 206572726f7200        	db	" error", 0
                             
                             ;****************************************
                             ;* df_trap_error
                             ;* Show an error message
                             ;* errno is error number
                             ;* currlin = Line number
                             ;* exeoff = offset
                             ;* at the end jump to program editor
                             ;****************************************
f8af :                       df_trap_error
                             	; set IO back to normal
f8af : 20f9c4           [ 6] 	jsr init_via0
f8b2 : 2000c4           [ 6] 	jsr io_set_default
f8b5 : 58               [ 2] 	cli
                             
f8b6 : a9fe             [ 2] 	lda #lo(df_tk_errortab)
f8b8 : 85a2             [ 3] 	sta df_tmpptra
f8ba : a9f7             [ 2] 	lda #hi(df_tk_errortab)
f8bc : 85a3             [ 3] 	sta df_tmpptra+1
f8be : a65e             [ 3] 	ldx errno				; 0 or >=128 goes to monitor
f8c0 : f002             [ 3] 	beq df_trap_go_monitor
f8c2 : 1003             [ 3] 	bpl df_trap_normal
f8c4 :                       df_trap_go_monitor
f8c4 : 4c3df9           [ 3] 	jmp df_trap_monitor
f8c7 :                       df_trap_normal
f8c7 : a000             [ 2] 	ldy #0
f8c9 :                       df_show_err_find
                             	; If on a zero, then error table exhausted
                             	; so drop in to the monitor
f8c9 : b1a2             [ 5] 	lda (df_tmpptra),y
f8cb : f070             [ 4] 	beq df_trap_monitor
                             	; Skip over this error text including zero termi
f8cd :                       df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f8d3 : b1a2             [ 5] 	lda (df_tmpptra),y
f8d5 : d0f6             [ 3] 	bne df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f8dd : ca               [ 2] 	dex
f8de : d0e9             [ 3] 	bne df_show_err_find
                             	; Error message found
f8e0 : a6a2             [ 3] 	ldx df_tmpptra
f8e2 : a5a3             [ 3] 	lda df_tmpptra+1
f8e4 : 207ac4           [ 6] 	jsr io_print_line
f8e7 : a2a8             [ 2] 	ldx #lo(df_tk_error_error)
f8e9 : a9f8             [ 2] 	lda #hi(df_tk_error_error)
f8eb : 207ac4           [ 6] 	jsr io_print_line
                             	; if line number <> 0 then print it
f8ee : a001             [ 2] 	ldy #DFTK_LINNUM
f8f0 : b187             [ 5] 	lda (df_currlin),y
f8f2 : aa               [ 2] 	tax
f8f3 : c8               [ 2] 	iny
f8f4 : b187             [ 5] 	lda (df_currlin),y
f8f6 : d004             [ 3] 	bne df_show_err_linnum
f8f8 : e000             [ 2] 	cpx #0x00
AS65 Assembler for R6502 [1.42].                                     Page  280
---------------------------------- bank0.s -----------------------------------

f8fa : f019             [ 4] 	beq df_show_err_fin
f8fc :                       df_show_err_linnum
                             	_println df_tk_error_inline
                             
f911 : 18               [ 2] 	clc
f912 : 20e4c3           [ 6] 	jsr print_a_to_d
f915 :                       df_show_err_fin
f915 : a489             [ 3] 	ldy df_exeoff
f917 : f01d             [ 3] 	beq df_show_err_done
                             	_println df_tk_error_atpos
                             
f92e : 98               [ 2] 	tya
f92f : aa               [ 2] 	tax
f930 : a900             [ 2] 	lda #0
f932 : 18               [ 2] 	clc
f933 : 20e4c3           [ 6] 	jsr print_a_to_d
f936 :                       df_show_err_done
f936 : 2067c1           [ 6] 	jsr utilPrintCRLF
f939 : 18               [ 2] 	clc
                             	; back to editor
f93a : 4c0ee1           [ 3] 	jmp df_pg_dflat
                             
                             
                             ; For unknown errors, jump to monitor
f93d :                       df_trap_monitor
                             	; Print PC
                             	_println_low df_msg_pc
                             
f944 : a564             [ 3] 	lda df_brkpc+1
f946 : 206fc1           [ 6] 	jsr utilPrintA
f949 : a563             [ 3] 	lda df_brkpc
f94b : 206fc1           [ 6] 	jsr utilPrintA
f94e : 205fc1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print A
                             	_println_low df_msg_acc
                             
f958 : a53d             [ 3] 	lda num_a
f95a : 206fc1           [ 6] 	jsr utilPrintA
f95d : 205fc1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print X
                             	_println_low df_msg_xreg
                             
f967 : a53e             [ 3] 	lda num_a+1
f969 : 206fc1           [ 6] 	jsr utilPrintA
f96c : 205fc1           [ 6] 	jsr utilPrintSPC
                             
                             	; Print Y
                             	_println_low df_msg_yreg
                             
f976 : a53f             [ 3] 	lda num_a+2
f978 : 206fc1           [ 6] 	jsr utilPrintA
f97b : 2067c1           [ 6] 	jsr utilPrintCRLF
                             
f97e : 2048e9           [ 6] 	jsr df_rt_monitor
                             	; back to editor
f981 : 4c0ee1           [ 3] 	jmp df_pg_dflat
                             
f984 :                       df_msg_pc
f984 : 50433a00              	db "PC:\x0"
f988 :                       df_msg_acc
AS65 Assembler for R6502 [1.42].                                     Page  281
---------------------------------- bank0.s -----------------------------------

f988 : 413a00                	db "A:\x0"
f98b :                       df_msg_xreg
f98b : 583a00                	db "X:\x0"
f98e :                       df_msg_yreg
f98e : 593a00                	db "Y:\x0"
                             
                             	include	"dflat/asm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*  This is the main controller code file for the
                             ;*  This file includes all the required source fi
                             ;*	in addition to dflat.s
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
f991 :                       mod_sz_asm_s
                             
                             	;	dflat.s is already included, so just the addit
                             	include "dflat/asm.i"
                             ;* Addressing modes - 15 in total, 16 with direct
                             ;*  0   Nothing
                             ;*	1 	Absolute			XXX <word>
                             ;*	2 	Absolute,X			XXX <word>,x
                             ;*	3 	Absolute,Y			XXX <word>,y
                             ;*	4	Zeropage			XXX	<byte>
                             ;*	5	Zeropage,X			XXX	<byte>,x
                             ;*	6	Zeropage,Y			XXX	<byte>,y
                             ;*	7	Indirect			XXX	(<byte>)
                             ;*	8	Indirect,X			XXX	(<byte>,x)
                             ;*	9	Indirect,Y			XXX	(<byte>),y
                             ;*	A	Absolute indirect	XXX	(<word>)
                             ;*	B	Absolute indirect,x	XXX	(<word>,x)
                             ;*	C	Immediate			XXX #<byte>
                             ;*	D	Accumulator			XXX (same as implied)
                             ;*	E	Implied				XXX
                             ;*	F	Relative			XXX	<byte>
                             ;*	10	Assembler directive	XXX .......
                             
0000 =                       AM_NONE		= 0
0001 =                       AM_ABS	 	= 1
0002 =                       AM_ABSX		= 2
0003 =                       AM_ABSY		= 3
0004 =                       AM_ZP		= 4
0005 =                       AM_ZPX		= 5
0006 =                       AM_ZPY		= 6
0007 =                       AM_ZPIND	= 7
0008 =                       AM_ZPINDX	= 8
0009 =                       AM_ZPINDY	= 9
000a =                       AM_ABSIND	= 10
000b =                       AM_ABSINDX	= 11
000c =                       AM_IMM		= 12
000d =                       AM_ACC		= 13
AS65 Assembler for R6502 [1.42].                                     Page  282
---------------------------------- bank0.s -----------------------------------

000d =                       AM_IMP		= AM_ACC
000f =                       AM_REL		= 15
0010 =                       AM_DIR		= 16
                             
                             
                             
                             	include "dflat/tkasm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*	Module that implements tokenisation of the ass
                             ;* 	The assembler is an extension to dflat, almos
                             ;*	almost a language within a language, as it has
                             ;*	own symbol tables to allow adding new keywords
                             ;*	running out of space in the main symtol table 
                             ;*	for normal 6502 asembler syntax which is at od
                             ;*	regular dflat.
                             ;*	Hence, this module has to do its own additiona
                             ;*	to tokenise the assembly.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f991 :                       mod_sz_tkasm_s
                             
                             	; if didn't find regular keywords then try assen
f991 :                       df_tk_asm_parse_command
                             ;	; skip the white space after the dot
                             ;	jsr df_tk_skip_ws
                             	; find the assembler symbol
f991 : 20c6f9           [ 6] 	jsr df_tk_asm_matchtok
                             	; if no match with asm token they maybe a label?
f994 : b01d             [ 3] 	bcs df_tk_asm_label
f996 :                       df_tk_asm_found_command
                             	; Before asm keyword, put the asm handler token
f996 : a997             [ 2] 	lda #DFRT_ASM
f998 : 206bd8           [ 6] 	jsr df_tk_put_tok
                             	; Set the MSB of found symbol index
f99b : a584             [ 3] 	lda df_symoff
f99d : 0980             [ 2] 	ora #0x80
f99f : 206bd8           [ 6] 	jsr df_tk_put_tok
                             	; check the first addressing mode code
                             	; remember to jump over the offset byte
f9a2 : a001             [ 2] 	ldy #1
f9a4 : b182             [ 5] 	lda (df_symtab),y
                             	; Directive?
f9a6 : c910             [ 2] 	cmp #AM_DIR
f9a8 : d006             [ 3] 	bne df_tk_asm_mnemonic
                             	; if directive then process it
f9aa : a584             [ 3] 	lda df_symoff
f9ac : 4c1dfa           [ 3] 	jmp df_tk_asm_exec_parser
f9af :                       df_tk_asm_parse_command_err
f9af : 60               [ 6] 	rts
f9b0 :                       df_tk_asm_mnemonic
AS65 Assembler for R6502 [1.42].                                     Page  283
---------------------------------- bank0.s -----------------------------------

                             	; for all nmemonics, work out the addressing mod
f9b0 : 4c2cfa           [ 3] 	jmp df_tk_asm_addr_mode
                             
                             ; try to tokenise a label
f9b3 :                       df_tk_asm_label
                             	; labels must start with '.'
f9b3 : a92e             [ 2] 	lda #'.'
f9b5 : 20d2d8           [ 6] 	jsr df_tk_expect
f9b8 : b0f5             [ 3] 	bcs df_tk_asm_parse_command_err
                             	; Before asm label, put the asm handler token
f9ba : a997             [ 2] 	lda #DFRT_ASM
f9bc : 206bd8           [ 6] 	jsr df_tk_put_tok
f9bf : e67d             [ 5] 	inc df_linoff			;Skip the '.'
                             	; Tokenise a variable
f9c1 : a900             [ 2] 	lda #0
f9c3 : 4c96d9           [ 3] 	jmp df_tk_var
                             
                             ;****************************************
                             ;* df_tk_asm_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;****************************************
f9c6 :                       df_tk_asm_matchtok
                             	; Start at token symbols beginning
f9c6 : a9a8             [ 2] 	lda #lo(df_asm_tokensyms)
f9c8 : 8582             [ 3] 	sta df_symtab
f9ca : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
f9cc : 8583             [ 3] 	sta df_symtab+1
f9ce : a900             [ 2] 	lda #0
f9d0 : 8584             [ 3] 	sta df_symoff
f9d2 : a200             [ 2] 	ldx #0
f9d4 :                       df_tk_asm_checknexttok
                             	; From the line buffer current pointer
                             	; Check for a token match
f9d4 : a47d             [ 3] 	ldy df_linoff
f9d6 :                       df_tk_asm_checktokch
                             	; Get symtable char
f9d6 : a182             [ 6] 	lda (df_symtab,x)
                             	; if less than ascii ' ' then reached end of
                             	; this symbol and everything matched so found!
f9d8 : c920             [ 2] 	cmp #' '
f9da : 9033             [ 4] 	bcc df_tk_asm_symfound
                             	; Else compare with current line buffer char
f9dc : d90004           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
f9df : d00a             [ 3] 	bne df_tk_asm_symnomatch
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
f9e7 : c8               [ 2] 	iny
f9e8 : 4cd6f9           [ 3] 	jmp df_tk_asm_checktokch
f9eb :                       df_tk_asm_symnomatch
                             	; Increment symbol counter to next symbol
f9eb : e684             [ 5] 	inc df_symoff
f9ed :                       df_tk_asm_symnextentry
f9ed : a182             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is < ' '
f9ef : c920             [ 2] 	cmp #' '
AS65 Assembler for R6502 [1.42].                                     Page  284
---------------------------------- bank0.s -----------------------------------

f9f1 : 9009             [ 3] 	bcc  df_tk_asm_foundsymend
                             	_incZPWord df_symtab
                             
f9f9 : 4cedf9           [ 3] 	jmp df_tk_asm_symnextentry
f9fc :                       df_tk_asm_foundsymend
                             	; Now at the offset to jump over addressing
                             	; mode and opcode values. Add offset to ptr
                             	; remember than C is clear and A has offset
                             	; set C so always jump over the offset
f9fc : 38               [ 2] 	sec
f9fd : 6582             [ 3] 	adc df_symtab
f9ff : 8582             [ 3] 	sta df_symtab
fa01 : a583             [ 3] 	lda df_symtab+1
fa03 : 6900             [ 2] 	adc #0
fa05 : 8583             [ 3] 	sta df_symtab+1
                             	; If next char is not zero then
                             	; try and match with line buffer
fa07 : a182             [ 6] 	lda (df_symtab,x)
fa09 : d0c9             [ 4] 	bne df_tk_asm_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; Zero symbol counter
fa0b : 8584             [ 3] 	sta df_symoff		; Relies on A=0
                             	; Set C to indicate error (no match)
fa0d : 38               [ 2] 	sec
fa0e : 60               [ 6] 	rts
fa0f :                       df_tk_asm_symfound
                             	; Full match with keyword in symtable but
                             	; check the next buffer char is not alphanum
                             	; as this could be part of a symbol
                             	; Point to next buffer char in any case
                             	; y already points to char after keyword
fa0f : b90004           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
fa12 : 20b0d8           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
fa15 : b0d4             [ 4] 	bcs df_tk_asm_symnomatch
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
fa17 : 847d             [ 3] 	sty df_linoff
fa19 : a584             [ 3] 	lda df_symoff
                             	; df_symtab points to the offset
fa1b :                       df_tk_asm_addr_mode_ok
fa1b : 18               [ 2] 	clc
fa1c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_asm_exec_parser
                             ;* Execute parse routine for this statement
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
fa1d :                       df_tk_asm_exec_parser
fa1d : 0a               [ 2] 	asl a
fa1e : aa               [ 2] 	tax
fa1f : bdd9ff           [ 4] 	lda df_tk_asm_tokenjmp,x
fa22 : 85a2             [ 3] 	sta df_tmpptra
fa24 : bddaff           [ 4] 	lda df_tk_asm_tokenjmp+1,x
fa27 : 85a3             [ 3] 	sta df_tmpptra+1
fa29 : 6ca200           [ 6] 	jmp (df_tmpptra)
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  285
---------------------------------- bank0.s -----------------------------------

                             ;****************************************
                             ;* df_tk_asm_addr_mode
                             ;* Tokenise the addressing mode
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
fa2c :                       df_tk_asm_addr_mode
fa2c : 20bcd8           [ 6] 	jsr df_tk_skip_ws		;Skip whitespace
fa2f : c900             [ 2] 	cmp #0					;End of line?
fa31 : f0e8             [ 3] 	beq df_tk_asm_addr_mode_ok
fa33 : c93a             [ 2] 	cmp #':'				;End of statement?
fa35 : f0e4             [ 3] 	beq df_tk_asm_addr_mode_ok
fa37 : a923             [ 2] 	lda #'#'				; Check for immediate
fa39 : 20e0d8           [ 6] 	jsr df_tk_expect_tok
fa3c : b003             [ 3] 	bcs df_tk_asm_addr_mode_1
fa3e : 4c61fa           [ 3] 	jmp df_tk_imm		; Process immediate
fa41 :                       df_tk_asm_addr_mode_1
fa41 : a928             [ 2] 	lda #'('				; One of indirect modes?
fa43 : 20e0d8           [ 6] 	jsr df_tk_expect_tok
fa46 : b003             [ 3] 	bcs df_tk_asm_addr_mode_2
fa48 : 4c64fa           [ 3] 	jmp df_tk_indirect
fa4b :                       df_tk_asm_addr_mode_2
                             	; here just a regular address
                             	; Just one expression expected
fa4b : 20ddda           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
fa4e : a92c             [ 2] 	lda #','
fa50 : 20e0d8           [ 6] 	jsr df_tk_expect_tok
fa53 : b0c6             [ 3] 	bcs df_tk_asm_addr_mode_ok
                             	; must be x or y
fa55 : a978             [ 2] 	lda #'x'
fa57 : 20e0d8           [ 6] 	jsr df_tk_expect_tok
fa5a : 90bf             [ 3] 	bcc df_tk_asm_addr_mode_ok
                             	; got to here, must be y
fa5c : a979             [ 2] 	lda #'y'
fa5e : 4cebd8           [ 3] 	jmp df_tk_expect_tok_err
                             	
                             	
                             ;* Tokenise immediate addressing mode	
fa61 :                       df_tk_imm
                             	; Just one expression expected
fa61 : 4cddda           [ 3] 	jmp df_tk_expression
                             	
                             ;* Tokenise indirect
fa64 :                       df_tk_indirect
                             	; Just one expression expected
fa64 : 20ddda           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
fa67 : a92c             [ 2] 	lda #','
fa69 : 20e0d8           [ 6] 	jsr df_tk_expect_tok
                             	; if not then might be indirect Y
fa6c : b00a             [ 3] 	bcs df_tk_indirect_y
                             	; Else must have be indirect "x)"
fa6e : a978             [ 2] 	lda #'x'
fa70 : 20ebd8           [ 6] 	jsr df_tk_expect_tok_err
fa73 : a929             [ 2] 	lda #')'
fa75 : 4cebd8           [ 3] 	jmp df_tk_expect_tok_err
                             	
fa78 :                       df_tk_indirect_y
                             	; Definitely has a close bracket
fa78 : a929             [ 2] 	lda #')'
fa7a : 20ebd8           [ 6] 	jsr df_tk_expect_tok_err
AS65 Assembler for R6502 [1.42].                                     Page  286
---------------------------------- bank0.s -----------------------------------

                             	; Is there a comma after the expression
fa7d : a92c             [ 2] 	lda #','
fa7f : 20e0d8           [ 6] 	jsr df_tk_expect_tok
fa82 : b005             [ 3] 	bcs df_tk_indirect_done
                             	; if comma then must be indirect y
fa84 : a979             [ 2] 	lda #'y'
fa86 : 4cebd8           [ 3] 	jmp df_tk_expect_tok_err
                             
fa89 :                       df_tk_indirect_done
fa89 : 18               [ 2] 	clc
fa8a : 60               [ 6] 	rts
                             	
                             
                             	
                             
                             
                             ;************************************************
                             ;*           TOKENISATION SUBROUTINES
                             ;************************************************
                             
                             
                             ;* HANDLE DIRECTIVES
                             
                             ;* All tokenisation is part of regular toksub rou
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
fa8b :                       mod_sz_tkasm_e
                             
                             
                             	include "dflat/rtasm.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
AS65 Assembler for R6502 [1.42].                                     Page  287
---------------------------------- bank0.s -----------------------------------

                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTASM.S
                             ;*  Module that implements the runtime execution 
                             ;*  assembler.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
fa8b :                       mod_sz_rtasm_s
                             
fa8b :                       df_rt_asm_assemble
                             	; check if >=0x80 (directive or mnemonic)
fa8b : a489             [ 3] 	ldy df_exeoff
fa8d : b187             [ 5] 	lda (df_currlin),y
fa8f : 1009             [ 3] 	bpl df_rt_asm_do_label
fa91 : 209efa           [ 6] 	jsr df_rt_asm_command
fa94 : 208cfc           [ 6] 	jsr df_rt_asm_printCR
fa97 : 4c9dfa           [ 3] 	jmp df_rt_asm_assemble_done
fa9a :                       df_rt_asm_do_label
fa9a : 20c2fa           [ 6] 	jsr df_rt_asm_label
fa9d :                       df_rt_asm_assemble_done
                             	; any clean up here
fa9d : 60               [ 6] 	rts
                             
                             ; Jump to mnemonic or 
                             ; directive with index in A ignoring MSB
fa9e :                       df_rt_asm_command
fa9e : 297f             [ 2] 	and #0x7f
faa0 : 48               [ 3] 	pha
faa1 : aa               [ 2] 	tax
                             	; Point to Xth symtable entry of addr modes and 
faa2 : 205afd           [ 6] 	jsr df_rt_asm_skip_to_sym
                             
                             	; Get first addressing mode (ignoring offset byt
faa5 : a001             [ 2] 	ldy #1
faa7 : b182             [ 5] 	lda (df_symtab),y
                             	; is it a directive?
faa9 : c910             [ 2] 	cmp #AM_DIR
                             	; if directive
faab : f003             [ 3] 	beq df_rt_asm_dir
                             	; Else must be a normal mnemonic
faad : 4c88fb           [ 3] 	jmp df_rt_asm_mnem
                             
                             ; Jump to the appropriate directive
fab0 :                       df_rt_asm_dir
                             	; Get the index and *2
                             	; to get jump vector
fab0 : 68               [ 4] 	pla
fab1 : 0a               [ 2] 	asl a
fab2 : aa               [ 2] 	tax
                             	; jump over directive code
fab3 : e689             [ 5] 	inc df_exeoff
                             	; jump to directive handler
fab5 : bde3ff           [ 4] 	lda df_rt_asm_tokenjmp,x
fab8 : 85a2             [ 3] 	sta df_tmpptra
faba : bde4ff           [ 4] 	lda df_rt_asm_tokenjmp+1,x
fabd : 85a3             [ 3] 	sta df_tmpptra+1
fabf : 6ca200           [ 6] 	jmp (df_tmpptra)
                             
AS65 Assembler for R6502 [1.42].                                     Page  288
---------------------------------- bank0.s -----------------------------------

                             ; Process label
                             ; Set the label to the PC
fac2 :                       df_rt_asm_label
                             	; Get the address of the variable in A,X
fac2 : 2042ee           [ 6] 	jsr df_rt_generate_lvar
fac5 : 869f             [ 3] 	stx df_asmoprnd
fac7 : 85a0             [ 3] 	sta df_asmoprnd+1
                             	; Assign to value of PC
fac9 : a000             [ 2] 	ldy #0
facb : a59a             [ 3] 	lda df_asmpc
facd : 919f             [ 5] 	sta (df_asmoprnd),y
facf : a59b             [ 3] 	lda df_asmpc+1
fad1 : c8               [ 2] 	iny
fad2 : 919f             [ 5] 	sta (df_asmoprnd),y
fad4 : 60               [ 6] 	rts	
                             
                             ;* Set the code origin
fad5 :                       df_rt_asm_org
                             	; Get the address from expression
fad5 : 2037fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to PC
fad8 : a59f             [ 3] 	lda df_asmoprnd
fada : 859a             [ 3] 	sta df_asmpc
fadc : a5a0             [ 3] 	lda df_asmoprnd+1
fade : 859b             [ 3] 	sta df_asmpc+1
fae0 : a903             [ 2] 	lda #3
fae2 : 85a1             [ 3] 	sta df_asmlen
fae4 : 4c4efc           [ 3] 	jmp df_rt_asm_printPC
                             
                             ; Set the assembly option
                             ; Bit 0 set = Print code to console
                             ; But 1 set = Write code to memory
                             ; Be sure to run 2 non-write passes
                             ; before a write pass
                             ; First pass may result in ZP used a lot
                             ; Second pass resolves forward refs to ABS
                             ; Final write pass then stores the code
fae7 :                       df_rt_asm_opt
                             	; Get the value from expression
fae7 : 2037fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to OPT
faea : a59f             [ 3] 	lda df_asmoprnd
faec : 859c             [ 3] 	sta df_asmopt
faee : 60               [ 6] 	rts
                             
                             ; dw and db handled here
                             ; keep going through comma separated
                             ; list and write bytes or words
                             ; string expansion also handled
faef :                       df_rt_asm_db
faef : a902             [ 2] 	lda #2
faf1 : 2c                    	db	0x2c			; BIT abs to ignore next 2 bytes
faf2 :                       df_rt_asm_dw
faf2 : a903             [ 2] 	lda #3
faf4 :                       df_rt_asm_db_start
faf4 : 85a1             [ 3] 	sta df_asmlen
faf6 : 204efc           [ 6] 	jsr df_rt_asm_printPC
faf9 : 2069fc           [ 6] 	jsr df_rt_asm_printSPC
fafc :                       df_rt_asm_data
fafc : 2022e2           [ 6] 	jsr df_rt_neval		; Evaluate expression
faff : 2091f7           [ 6] 	jsr df_ost_peekType	; What is the type
fb02 : 2904             [ 2] 	and #DFST_STR
AS65 Assembler for R6502 [1.42].                                     Page  289
---------------------------------- bank0.s -----------------------------------

fb04 : d00d             [ 3] 	bne df_rt_asm_string; If string
fb06 : 2097f7           [ 6] 	jsr df_ost_popInt	; else get number in A,X
fb09 : 869f             [ 3] 	stx df_asmoprnd		; store low value
fb0b : 85a0             [ 3] 	sta df_asmoprnd+1	; store high value
fb0d : 203bfb           [ 6] 	jsr df_rt_asm_data_write
fb10 : 4c30fb           [ 3] 	jmp df_rt_asm_data_next
fb13 :                       df_rt_asm_string
fb13 : 209ff7           [ 6] 	jsr df_ost_popPtr	; pop string pointer
fb16 : 86a2             [ 3] 	stx df_tmpptra		; save pointer to tmpa
fb18 : 85a3             [ 3] 	sta df_tmpptra+1
fb1a :                       df_rt_asm_string_ch
fb1a : a000             [ 2] 	ldy #0
fb1c : b1a2             [ 5] 	lda (df_tmpptra),y	; Get string char, 0=done
fb1e : f010             [ 3] 	beq df_rt_asm_data_next
fb20 : 859f             [ 3] 	sta df_asmoprnd		; Save as operand
fb22 : 84a0             [ 3] 	sty df_asmoprnd+1	; High is always zero
fb24 : 203bfb           [ 6] 	jsr df_rt_asm_data_write
                             	_incZPWord df_tmpptra
                             
fb2d : 4c1afb           [ 3] 	jmp df_rt_asm_string_ch
fb30 :                       df_rt_asm_data_next
fb30 : 2078ee           [ 6] 	jsr df_rt_eos		; End?
fb33 : b005             [ 3] 	bcs df_rt_asm_data_done
fb35 : e689             [ 5] 	inc df_exeoff		; Jump over ','
fb37 : 4cfcfa           [ 3] 	jmp df_rt_asm_data
fb3a :                       df_rt_asm_data_done
fb3a : 60               [ 6] 	rts	
                             
                             ; Write one db or dw value
                             ; Check for value too big for db
                             ; Advance PC by df_asmlen
fb3b :                       df_rt_asm_data_write
fb3b : 2072fc           [ 6] 	jsr df_rt_asm_printOPR
fb3e :                       df_rt_asm_data_write_skip1
fb3e : a902             [ 2] 	lda #2
fb40 : 259c             [ 3] 	and df_asmopt
fb42 : f017             [ 3] 	beq df_rt_asm_data_write_skip2
fb44 : a59f             [ 3] 	lda df_asmoprnd
fb46 : a000             [ 2] 	ldy #0
fb48 : 919a             [ 5] 	sta (df_asmpc),y
fb4a : c8               [ 2] 	iny
fb4b : a902             [ 2] 	lda #2
fb4d : c5a1             [ 3] 	cmp df_asmlen
fb4f : d006             [ 3] 	bne df_rt_asm_data_write_hi
fb51 : a5a0             [ 3] 	lda df_asmoprnd+1
fb53 : d014             [ 3] 	bne df_rt_asm_data_write_err
fb55 : f004             [ 3] 	beq df_rt_asm_data_write_skip2
fb57 :                       df_rt_asm_data_write_hi
fb57 : a5a0             [ 3] 	lda df_asmoprnd+1
fb59 : 919a             [ 5] 	sta (df_asmpc),y
fb5b :                       df_rt_asm_data_write_skip2
fb5b : a4a1             [ 3] 	ldy df_asmlen
fb5d : 88               [ 2] 	dey					; Add 1 less!
fb5e : 98               [ 2] 	tya
fb5f : 18               [ 2] 	clc
fb60 : 659a             [ 3] 	adc df_asmpc
fb62 : 859a             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
fb66 : e69b             [ 5] 	inc df_asmpc+1
fb68 : 60               [ 6] 	rts
fb69 :                       df_rt_asm_data_write_err	
AS65 Assembler for R6502 [1.42].                                     Page  290
---------------------------------- bank0.s -----------------------------------

                             	SWBRK DFERR_QUANTITY
                             
                             	
                             	
fb6b :                       df_rt_asm_ds
fb6b : 204efc           [ 6] 	jsr df_rt_asm_printPC
fb6e : 2069fc           [ 6] 	jsr df_rt_asm_printSPC
                             	; Get the address from expression
fb71 : 2037fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; ADD this in to PC
fb74 : 18               [ 2] 	clc
fb75 : a59f             [ 3] 	lda df_asmoprnd
fb77 : 659a             [ 3] 	adc df_asmpc
fb79 : 859a             [ 3] 	sta df_asmpc
fb7b : a5a0             [ 3] 	lda df_asmoprnd+1
fb7d : 659b             [ 3] 	adc df_asmpc+1
fb7f : 859b             [ 3] 	sta df_asmpc+1
                             	; len=1 for printing
fb81 : a903             [ 2] 	lda #3
fb83 : 85a1             [ 3] 	sta df_asmlen
fb85 : 4c72fc           [ 3] 	jmp df_rt_asm_printOPR
                             
                             
                             ; Process a normal assembler mnemonic
fb88 :                       df_rt_asm_mnem
fb88 : 68               [ 4] 	pla				; Throw away previous temp variable
                             	; jump over mnemonic code
fb89 : e689             [ 5] 	inc df_exeoff
                             	; work out the addressing mode and get operand
fb8b : 20bafc           [ 6] 	jsr df_rt_asm_addrmode
                             
fb8e :                       df_rt_asm_mnem_try
fb8e : a59d             [ 3] 	lda df_asmadmd					; With the addressing mode
fb90 : 2042fd           [ 6] 	jsr df_rt_asm_find_addr_mode	; Find it for this 
fb93 : c900             [ 2] 	cmp #AM_NONE					; Exists?
fb95 : d014             [ 3] 	bne	df_rt_asm_mnem_chk			; If does then check it
fb97 :                       df_rt_asm_check_alt
fb97 : a69d             [ 3] 	ldx df_asmadmd					; Use ad mode as an index
fb99 : bd97fd           [ 4] 	lda df_asm_altaddrmode,x		; Else get alternate
fb9c : c900             [ 2] 	cmp #AM_NONE					; Is there an alternate?
fb9e : f02d             [ 3] 	beq df_rt_asm_mnem_err			; If no then error
fba0 : 2042fd           [ 6] 	jsr df_rt_asm_find_addr_mode	; Check does mode e
fba3 : c900             [ 2] 	cmp #AM_NONE					; this instruction
fba5 : f026             [ 3] 	beq df_rt_asm_mnem_err			; if no then error
fba7 : c59d             [ 3] 	cmp df_asmadmd					; Same as the original?
fba9 : f00e             [ 3] 	beq df_rt_asm_mnem_done			; if so then done
fbab :                       df_rt_asm_mnem_chk
fbab : 859d             [ 3] 	sta df_asmadmd					; This is the final mode
fbad : aa               [ 2] 	tax								; Get the length
fbae : bd86fd           [ 4] 	lda df_asm_length,x
fbb1 : a6a0             [ 3] 	ldx df_asmoprnd+1				; Is operand hi non-zero?
fbb3 : f004             [ 3] 	beq df_rt_asm_mnem_done			; If zero then done
fbb5 : c903             [ 2] 	cmp #3							; Else must be len 3?
fbb7 : d0de             [ 3] 	bne df_rt_asm_check_alt			; Try an alternate
fbb9 :                       df_rt_asm_mnem_done
fbb9 : a69d             [ 3] 	ldx df_asmadmd					; Get the final mode index
fbbb : bd86fd           [ 4] 	lda df_asm_length,x				; Get the length
fbbe : 85a1             [ 3] 	sta df_asmlen
fbc0 : a59d             [ 3] 	lda df_asmadmd					; Get the final mode
fbc2 : 2042fd           [ 6] 	jsr df_rt_asm_find_addr_mode	; Get the Y index o
                             	; Ok now get the opcode
fbc5 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  291
---------------------------------- bank0.s -----------------------------------

fbc6 : b182             [ 5] 	lda (df_symtab),y
fbc8 : 859e             [ 3] 	sta df_asmopcde
                             	; Now have all information to assemble
fbca : 4ccffb           [ 3] 	jmp df_rt_asm_encode
                             	
fbcd :                       df_rt_asm_mnem_err
                             	SWBRK DFERR_SYNTAX
                             
                             	
                             ; Take assembler data and encode it
                             ; depending on the current option
                             ; Option 0 = No write
                             ; Option 1 = No write, Print
                             ; Option 2 = Write
                             ; Option 3 = Write, Print
fbcf :                       df_rt_asm_encode
                             	; Only write the code if bit 1=1
fbcf : a902             [ 2] 	lda #0x02
fbd1 : 259c             [ 3] 	and df_asmopt
fbd3 : f059             [ 4] 	beq df_rt_asm_encode_print
fbd5 : a000             [ 2] 	ldy #0
fbd7 : a59e             [ 3] 	lda df_asmopcde
fbd9 : 919a             [ 5] 	sta (df_asmpc),y
fbdb : a5a1             [ 3] 	lda df_asmlen
fbdd : c901             [ 2] 	cmp #1						; No operand
fbdf : f04d             [ 4] 	beq df_rt_asm_encode_print
fbe1 : c903             [ 2] 	cmp #3						; Word operand
fbe3 : f03f             [ 4] 	beq df_rt_asm_encode_writeword
                             	; If here then byte operand
                             	; Check relative then need to calculate offset
fbe5 : a59d             [ 3] 	lda df_asmadmd
fbe7 : c90f             [ 2] 	cmp #AM_REL
fbe9 : d02c             [ 4] 	bne df_rt_asm_encode_skiprel
                             	; calculate distance from PC
                             	; first take 2 off operand
fbeb : 38               [ 2] 	sec
fbec : a59f             [ 3] 	lda df_asmoprnd
fbee : e902             [ 2] 	sbc #2
fbf0 : 859f             [ 3] 	sta df_asmoprnd
fbf2 : a5a0             [ 3] 	lda df_asmoprnd+1
fbf4 : e900             [ 2] 	sbc #0
fbf6 : 85a0             [ 3] 	sta df_asmoprnd+1
                             	; now calculate current operand-PC
fbf8 : 38               [ 2] 	sec
fbf9 : a59f             [ 3] 	lda df_asmoprnd
fbfb : e59a             [ 3] 	sbc df_asmpc
fbfd : 859f             [ 3] 	sta df_asmoprnd
fbff : a5a0             [ 3] 	lda df_asmoprnd+1
fc01 : e59b             [ 3] 	sbc df_asmpc+1
                             	; A contains high byte result of subtraction
                             	; and must be 0 (operand <=127) or 255 (operand 
fc03 : 85a0             [ 3] 	sta df_asmoprnd+1
fc05 : f00a             [ 3] 	beq df_rt_asm_rel_postive
fc07 : c9ff             [ 2] 	cmp #0xff				; If not 0xff then error
fc09 : d010             [ 3] 	bne df_rt_asm_err_quantity
                             	; Check negative branch >=128 (N=1)
fc0b : a59f             [ 3] 	lda df_asmoprnd
fc0d : 100c             [ 3] 	bpl df_rt_asm_err_quantity
fc0f : 300c             [ 3] 	bmi df_rt_asm_encode_writebyte
fc11 :                       df_rt_asm_rel_postive
                             	; Check positive branch <=127
fc11 : a59f             [ 3] 	lda df_asmoprnd
AS65 Assembler for R6502 [1.42].                                     Page  292
---------------------------------- bank0.s -----------------------------------

fc13 : 3006             [ 3] 	bmi df_rt_asm_err_quantity
fc15 : 1006             [ 3] 	bpl df_rt_asm_encode_writebyte
fc17 :                       df_rt_asm_encode_skiprel
                             	; byte operand, high byte must be zero
fc17 : a5a0             [ 3] 	lda df_asmoprnd+1
fc19 : f002             [ 3] 	beq df_rt_asm_encode_writebyte
fc1b :                       df_rt_asm_err_quantity
                             	SWBRK DFERR_QUANTITY
                             
fc1d :                       df_rt_asm_encode_writebyte
fc1d : a59f             [ 3] 	lda df_asmoprnd
fc1f : c8               [ 2] 	iny 
fc20 : 919a             [ 5] 	sta (df_asmpc),y
                             	; Due to the iny, relying on Z=0 here!
fc22 : d00a             [ 3] 	bne df_rt_asm_encode_print
fc24 :                       df_rt_asm_encode_writeword
fc24 : c8               [ 2] 	iny 
fc25 : a59f             [ 3] 	lda df_asmoprnd
fc27 : 919a             [ 5] 	sta (df_asmpc),y
fc29 : c8               [ 2] 	iny 
fc2a : a5a0             [ 3] 	lda df_asmoprnd+1
fc2c : 919a             [ 5] 	sta (df_asmpc),y	
fc2e :                       df_rt_asm_encode_print
fc2e : 203efc           [ 6] 	jsr df_rt_asm_print_mmen
                             	; advance pc
fc31 : 18               [ 2] 	clc
fc32 : a59a             [ 3] 	lda df_asmpc
fc34 : 65a1             [ 3] 	adc df_asmlen
fc36 : 859a             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
fc3a : e69b             [ 5] 	inc df_asmpc+1
fc3c : 18               [ 2] 	clc
fc3d : 60               [ 6] 	rts
                             
                             
                             ; Print the full 1,2,3 byte instruction
                             ; depends on df_asmopt
fc3e :                       df_rt_asm_print_mmen
fc3e : 204efc           [ 6] 	jsr df_rt_asm_printPC
fc41 : 2069fc           [ 6] 	jsr df_rt_asm_printSPC
fc44 : 205efc           [ 6] 	jsr df_rt_asm_printOPC
fc47 : 2069fc           [ 6] 	jsr df_rt_asm_printSPC
fc4a : 2072fc           [ 6] 	jsr df_rt_asm_printOPR
fc4d :                       df_rt_asm_print_rts			; Hopefully subs can get he
fc4d : 60               [ 6] 	rts
                             
fc4e :                       df_rt_asm_printPC
                             	; Check the option bit 0 (Print)
fc4e : a901             [ 2] 	lda #0x01
fc50 : 259c             [ 3] 	and df_asmopt
fc52 : f0f9             [ 3] 	beq df_rt_asm_print_rts
                             	; Print current PC
fc54 : a59b             [ 3] 	lda df_asmpc+1
fc56 : 206fc1           [ 6] 	jsr utilPrintA
fc59 : a59a             [ 3] 	lda df_asmpc
fc5b : 4c6fc1           [ 3] 	jmp utilPrintA
                             
fc5e :                       df_rt_asm_printOPC
                             	; Check the option bit 0 (Print)
fc5e : a901             [ 2] 	lda #0x01
fc60 : 259c             [ 3] 	and df_asmopt
AS65 Assembler for R6502 [1.42].                                     Page  293
---------------------------------- bank0.s -----------------------------------

fc62 : f0e9             [ 3] 	beq df_rt_asm_print_rts
fc64 : a59e             [ 3] 	lda df_asmopcde
fc66 : 4c6fc1           [ 3] 	jmp utilPrintA
                             
fc69 :                       df_rt_asm_printSPC
                             	; Check the option bit 0 (Print)
fc69 : a901             [ 2] 	lda #0x01
fc6b : 259c             [ 3] 	and df_asmopt
fc6d : f0de             [ 3] 	beq df_rt_asm_print_rts
fc6f : 4c5fc1           [ 3] 	jmp utilPrintSPC
                             	
fc72 :                       df_rt_asm_printOPR
                             	; Check the option bit 0 (Print)
fc72 : a901             [ 2] 	lda #0x01
fc74 : 259c             [ 3] 	and df_asmopt
fc76 : f0d5             [ 3] 	beq df_rt_asm_print_rts	
fc78 : a5a1             [ 3] 	lda df_asmlen				; check how may operand bytes
fc7a : c901             [ 2] 	cmp #1						; if only opcode, done
fc7c : f0cf             [ 3] 	beq df_rt_asm_print_rts	
fc7e : c902             [ 2] 	cmp #2
fc80 : f005             [ 3] 	beq df_rt_asm_printOPR_1	; if only 2 do low byte
fc82 : a5a0             [ 3] 	lda df_asmoprnd+1
fc84 : 206fc1           [ 6] 	jsr utilPrintA
fc87 :                       df_rt_asm_printOPR_1
fc87 : a59f             [ 3] 	lda df_asmoprnd
fc89 : 4c6fc1           [ 3] 	jmp utilPrintA
                             
fc8c :                       df_rt_asm_printCR
                             	; Check the option bit 0 (Print)
fc8c : a901             [ 2] 	lda #0x01
fc8e : 259c             [ 3] 	and df_asmopt
fc90 : f0bb             [ 3] 	beq df_rt_asm_print_rts
fc92 : 4c67c1           [ 3] 	jmp utilPrintCRLF
                             
fc95 :                       df_rt_asm_printCH
fc95 : 8538             [ 3] 	sta tmp_d
                             	; Check the option bit 0 (Print)
fc97 : a901             [ 2] 	lda #0x01
fc99 : 259c             [ 3] 	and df_asmopt
fc9b : f0b0             [ 3] 	beq df_rt_asm_print_rts
fc9d : a538             [ 3] 	lda tmp_d
fc9f : 4c2cc4           [ 3] 	jmp io_put_ch
                             
                             ; Print an entire line, but save df_exeoff
fca2 :                       df_rt_asm_printline
                             	; Check the option bit 0 (Print)
fca2 : a901             [ 2] 	lda #0x01
fca4 : 259c             [ 3] 	and df_asmopt
fca6 : f0a5             [ 3] 	beq df_rt_asm_print_rts
fca8 : a589             [ 3] 	lda df_exeoff
fcaa : 48               [ 3] 	pha
                             	; use df_tmpptra
                             	_cpyZPWord df_currlin, df_tmpptra
                             
fcb3 : 20a2ef           [ 6] 	jsr df_rt_list_line_only
fcb6 : 68               [ 4] 	pla
fcb7 : 8589             [ 3] 	sta df_exeoff
fcb9 : 60               [ 6] 	rts
                             
                             
                             ; Calculate the addressing mode
                             ; Populate the operand as needed
AS65 Assembler for R6502 [1.42].                                     Page  294
---------------------------------- bank0.s -----------------------------------

                             ; A and df_asmadmd contain Addressing Mode
fcba :                       df_rt_asm_addrmode	
                             	; Store nothing in address mode
fcba : a900             [ 2] 	lda #AM_NONE
fcbc : 859d             [ 3] 	sta df_asmadmd
                             	; zero out the operand
fcbe : a900             [ 2] 	lda #0
fcc0 : 859f             [ 3] 	sta df_asmoprnd
fcc2 : 85a0             [ 3] 	sta df_asmoprnd+1
fcc4 : 2078ee           [ 6] 	jsr df_rt_eos			; End of statement?
fcc7 : b00d             [ 3] 	bcs df_rt_asm_AM_IMP
                             	; jump over whitespace
fcc9 : 2053e6           [ 6] 	jsr df_rt_skip_ws
                             	; Check what it is
fccc : c923             [ 2] 	cmp #'#'				; Immediate?
fcce : f034             [ 4] 	beq df_rt_asm_AM_IMM
fcd0 : c928             [ 2] 	cmp #'('				; Indirect something?
fcd2 : f03a             [ 4] 	beq df_rt_asm_AM_INDIRECT
                             	; Must be ABS,ZP or REL
fcd4 : d005             [ 3] 	bne df_rt_asm_ABSREL
                             ; Process IMP/ACC
fcd6 :                       df_rt_asm_AM_IMP
fcd6 : a90d             [ 2] 	lda #AM_IMP
fcd8 : 859d             [ 3] 	sta df_asmadmd
fcda : 60               [ 6] 	rts
                             ; Process ABS or REL
fcdb :                       df_rt_asm_ABSREL	
                             	; Evaluate operand
fcdb : 2037fd           [ 6] 	jsr df_rt_asm_get_operand
                             
fcde : 2078ee           [ 6] 	jsr df_rt_eos			; End of statement?
fce1 : b00f             [ 3] 	bcs df_rt_asm_AM_ABS
fce3 : c8               [ 2] 	iny						; Jump over ","
fce4 : b187             [ 5] 	lda (df_currlin),y		; Load X or Y
fce6 : c8               [ 2] 	iny						; Jump over index reg
fce7 : 8589             [ 3] 	sta df_exeoff			; Save exe offset
fce9 : c978             [ 2] 	cmp #'x'				; Indirect X?
fceb : f012             [ 3] 	beq df_rt_asm_AM_ABSX
                             ; Process ABSY
fced :                       df_rt_asm_AM_ABSY
fced : a906             [ 2] 	lda #AM_ZPY				; Go for smallest modes
fcef : 859d             [ 3] 	sta df_asmadmd
fcf1 : 60               [ 6] 	rts
                             ; Process what looks like pure ABS, could be REL
fcf2 :                       df_rt_asm_AM_ABS
fcf2 : a001             [ 2] 	ldy #1					; Check first addressing mode
fcf4 : b182             [ 5] 	lda (df_symtab),y
fcf6 : c90f             [ 2] 	cmp #AM_REL
fcf8 : f002             [ 3] 	beq df_rt_asm_AM_REL
fcfa : a904             [ 2] 	lda #AM_ZP				; Go for smallest modes
fcfc :                       df_rt_asm_AM_REL
fcfc : 859d             [ 3] 	sta df_asmadmd
fcfe : 60               [ 6] 	rts
                             ; Process ABSX
fcff :                       df_rt_asm_AM_ABSX
fcff : a905             [ 2] 	lda #AM_ZPX				; Go for smallest modes
fd01 : 859d             [ 3] 	sta df_asmadmd
fd03 : 60               [ 6] 	rts
                             ; Process Immediate
fd04 :                       df_rt_asm_AM_IMM
                             	; skip over #
fd04 : e689             [ 5] 	inc df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  295
---------------------------------- bank0.s -----------------------------------

                             	; Get operand
fd06 : 2037fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; Mark as immediate
fd09 : a90c             [ 2] 	lda #AM_IMM
fd0b : 859d             [ 3] 	sta df_asmadmd
fd0d : 60               [ 6] 	rts
                             ; Process indirect
fd0e :                       df_rt_asm_AM_INDIRECT
                             	; skip over (
fd0e : e689             [ 5] 	inc df_exeoff
                             	; Calculate the operand
fd10 : 2037fd           [ 6] 	jsr df_rt_asm_get_operand
                             	; what is next char?
fd13 : a489             [ 3] 	ldy df_exeoff
fd15 : b187             [ 5] 	lda (df_currlin),y
fd17 : c929             [ 2] 	cmp #')'			; Could be IND or INDY
fd19 : f009             [ 3] 	beq df_rt_asm_AM_ZPINDORY
                             	; else must be INDX
                             	; skip 'x)'
fd1b : c8               [ 2] 	iny
fd1c : c8               [ 2] 	iny
fd1d : 8489             [ 3] 	sty df_exeoff
fd1f : a908             [ 2] 	lda #AM_ZPINDX
fd21 : 859d             [ 3] 	sta df_asmadmd
fd23 : 60               [ 6] 	rts
                             ; Pure indirect mode found
fd24 :                       df_rt_asm_AM_ZPINDORY
fd24 : a907             [ 2] 	lda #AM_ZPIND			; Assume ZPIND
fd26 : c8               [ 2] 	iny
fd27 : 8489             [ 3] 	sty df_exeoff
                             	; if at end of line/statement then pure indirect
fd29 : 2078ee           [ 6] 	jsr df_rt_eos			; End of statement?
fd2c : b006             [ 3] 	bcs df_rt_asm_AM_ZPIND
                             	; else must be INDY
fd2e : a909             [ 2] 	lda #AM_ZPINDY
                             	; skip ',Y'
fd30 : c8               [ 2] 	iny
fd31 : c8               [ 2] 	iny
fd32 : 8489             [ 3] 	sty df_exeoff
fd34 :                       df_rt_asm_AM_ZPIND
fd34 : 859d             [ 3] 	sta df_asmadmd
fd36 : 60               [ 6] 	rts
                             
                             ; Get and save the operand
                             ; df_asmoprnd contains the result
fd37 :                       df_rt_asm_get_operand
                             	; evaluate
fd37 : 2022e2           [ 6] 	jsr df_rt_neval
                             	; Get the parameter from stack
fd3a : 2097f7           [ 6] 	jsr df_ost_popInt
                             	; put in the operand
fd3d : 869f             [ 3] 	stx df_asmoprnd
fd3f : 85a0             [ 3] 	sta df_asmoprnd+1
fd41 : 60               [ 6] 	rts
                             	
                             ; From current symtab entry, find addressing
                             ; mode in A.  AM_NONE=Not found, Y=index
fd42 :                       df_rt_asm_find_addr_mode
                             	; save A in tmp
fd42 : 8538             [ 3] 	sta tmp_d
                             	; Start first entry (1) - 2 = 0xff
fd44 : a0ff             [ 2] 	ldy #0xff
AS65 Assembler for R6502 [1.42].                                     Page  296
---------------------------------- bank0.s -----------------------------------

fd46 : a200             [ 2] 	ldx #0
fd48 :                       df_rt_asm_find_addr_mode_loop
                             	; next entry
fd48 : c8               [ 2] 	iny
fd49 : c8               [ 2] 	iny
                             	; if current index > num entries then error
fd4a : 98               [ 2] 	tya
fd4b : 38               [ 2] 	sec
fd4c : e182             [ 6] 	sbc (df_symtab,x)
fd4e : b007             [ 3] 	bcs df_rt_asm_find_addr_mode_err
                             	; is symtab addressing mode what we want?
fd50 : b182             [ 5] 	lda (df_symtab),y
fd52 : c538             [ 3] 	cmp tmp_d
fd54 : d0f2             [ 3] 	bne df_rt_asm_find_addr_mode_loop
                             	; done A=mode, y=index in to df_symtab
fd56 : 60               [ 6] 	rts
fd57 :                       df_rt_asm_find_addr_mode_err
fd57 : a900             [ 2] 	lda #AM_NONE
fd59 :                       df_rt_asm_skip_to_sym_done; Used by function belo
fd59 : 60               [ 6] 	rts
                             
                             
                             ; Skip X amount of symbols in table
                             ; A contains how many addr mode and op code bytes
                             ; df_symtab points to offset byte
fd5a :                       df_rt_asm_skip_to_sym
fd5a : e8               [ 2] 	inx				; so done when X=0
                             	; Start at token symbols beginning
fd5b : a9a8             [ 2] 	lda #lo(df_asm_tokensyms)
fd5d : 8582             [ 3] 	sta df_symtab
fd5f : a9fd             [ 2] 	lda #hi(df_asm_tokensyms)
fd61 : 8583             [ 3] 	sta df_symtab+1
fd63 : a900             [ 2] 	lda #0
fd65 : 8584             [ 3] 	sta df_symoff
fd67 : a8               [ 2] 	tay
fd68 :                       df_rt_asm_skip_to_sym_next
                             	; Get symtable char
fd68 : b182             [ 5] 	lda (df_symtab),y
                             	; if < ' ' then jumped over symbol chars
fd6a : c920             [ 2] 	cmp #' '
fd6c : 9009             [ 3] 	bcc df_rt_asm_skip_to_sym_end
                             	;else next smy tab char
                             	_incZPWord df_symtab
                             
fd74 : 4c68fd           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             	; Found end of symbol
fd77 :                       df_rt_asm_skip_to_sym_end
                             	;if done then return
fd77 : ca               [ 2] 	dex
fd78 : f0df             [ 3] 	beq df_rt_asm_skip_to_sym_done
                             	;jump over addr and op code by A bytes
fd7a : 38               [ 2] 	sec
fd7b : 6582             [ 3] 	adc df_symtab
fd7d : 8582             [ 3] 	sta df_symtab
                             	_bcc 2
                             
fd81 : e683             [ 5] 	inc df_symtab+1
fd83 : 4c68fd           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             
fd86 :                       mod_sz_rtasm_e
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  297
---------------------------------- bank0.s -----------------------------------

                             	include "dflat/asmsymtab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASMSYMTAB.S
                             ;*	Mainly this contains the symbol table for asse
                             ;*	mnemonics but also meta data like what address
                             ;*	and the length of opcodes.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             	;* Length of each addressing mode
                             	;* ORDER significant!
fd86 :                       df_asm_length
fd86 : 00030303020202..      	db	0,3,3,3,2,2,2,2,2,2,3,3,2,1,1,2,0
                             
                             	; Always try for lowest addressing mode, but
                             	; this table maps to alternative
fd97 :                       df_asm_altaddrmode
fd97 : 00                    	db AM_NONE		;AM_NONE	= 0
fd98 : 00                    	db AM_NONE		;AM_ABS	 	= 1
fd99 : 00                    	db AM_NONE		;AM_ABSX	= 2
fd9a : 00                    	db AM_NONE		;AM_ABSY	= 3
fd9b : 01                    	db AM_ABS		;AM_ZP		= 4
fd9c : 02                    	db AM_ABSX		;AM_ZPX		= 5
fd9d : 03                    	db AM_ABSY		;AM_ZPY		= 6
fd9e : 0a                    	db AM_ABSIND	;AM_ZPIND	= 7
fd9f : 0b                    	db AM_ABSINDX	;AM_ZPINDX	= 8
fda0 : 09                    	db AM_ZPINDY	;AM_ZPINDY	= 9
fda1 : 00                    	db AM_NONE		;AM_ABSIND	= 10
fda2 : 00                    	db AM_NONE		;AM_ABSINDX	= 11
fda3 : 00                    	db AM_NONE		;AM_IMM		= 12
fda4 : 00                    	db AM_NONE		;AM_ACC		= 13
fda5 : 00                    	db AM_NONE		;AM_IMP		= AM_ACC
fda6 : 0f                    	db AM_REL		;AM_REL		= 15
fda7 : 00                    	db AM_NONE		;AM_DIR		= 16
                             
                             
                             	;*	Mnemonic/	How many addressing modes /
                             	;* 	Mode		Opcode for mode
fda8 :                       df_asm_tokensyms
                             	;* Start with directives
fda8 : 2e6f726702            	db	".org",		1*2
fdad : 1000                  	db	AM_DIR,		0x00
fdaf : 2e6f707402            	db	".opt",		1*2
fdb4 : 1000                  	db	AM_DIR,		0x00
fdb6 : 2e646202              	db	".db",		1*2
fdba : 1000                  	db	AM_DIR,		0x00
fdbc : 2e647702              	db	".dw",		1*2
fdc0 : 1000                  	db	AM_DIR,		0x00
fdc2 : 2e647302              	db	".ds",		1*2
fdc6 : 1000                  	db	AM_DIR,		0x00	
                             
fdc8 : 61646310              	db	"adc",		8*2
AS65 Assembler for R6502 [1.42].                                     Page  298
---------------------------------- bank0.s -----------------------------------

fdcc : 0c69                  	db	AM_IMM,		0x69
fdce : 0465                  	db	AM_ZP,		0x65
fdd0 : 0575                  	db	AM_ZPX,		0x75
fdd2 : 016d                  	db	AM_ABS,		0x6d
fdd4 : 027d                  	db	AM_ABSX,	0x7d
fdd6 : 0379                  	db	AM_ABSY,	0x79
fdd8 : 0861                  	db	AM_ZPINDX,	0x61
fdda : 0971                  	db	AM_ZPINDY,	0x71
                             	
fddc : 616e6410              	db	"and",		8*2
fde0 : 0c29                  	db	AM_IMM,		0x29
fde2 : 0425                  	db	AM_ZP,		0x25
fde4 : 0535                  	db	AM_ZPX,		0x35
fde6 : 012d                  	db	AM_ABS,		0x2d
fde8 : 023d                  	db	AM_ABSX,	0x3d
fdea : 0339                  	db	AM_ABSY,	0x39
fdec : 0821                  	db	AM_ZPINDX,	0x21
fdee : 0931                  	db	AM_ZPINDY,	0x31
                             
fdf0 : 636d7010              	db	"cmp",		8*2
fdf4 : 0cc9                  	db	AM_IMM,		0xc9
fdf6 : 04c5                  	db	AM_ZP,		0xc5
fdf8 : 05d5                  	db	AM_ZPX,		0xd5
fdfa : 01cd                  	db	AM_ABS,		0xcd
fdfc : 02dd                  	db	AM_ABSX,	0xdd
fdfe : 03d9                  	db	AM_ABSY,	0xd9
fe00 : 08c1                  	db	AM_ZPINDX,	0xc1
fe02 : 09d1                  	db	AM_ZPINDY,	0xd1
                             
fe04 : 656f7210              	db	"eor",		8*2
fe08 : 0c49                  	db	AM_IMM,		0x49
fe0a : 0445                  	db	AM_ZP,		0x45
fe0c : 0555                  	db	AM_ZPX,		0x55
fe0e : 014d                  	db	AM_ABS,		0x4d
fe10 : 025d                  	db	AM_ABSX,	0x5d
fe12 : 0359                  	db	AM_ABSY,	0x59
fe14 : 0841                  	db	AM_ZPINDX,	0x41
fe16 : 0951                  	db	AM_ZPINDY,	0x51
                             
fe18 : 6c646110              	db	"lda",		8*2
fe1c : 0ca9                  	db	AM_IMM,		0xa9
fe1e : 04a5                  	db	AM_ZP,		0xa5
fe20 : 05b5                  	db	AM_ZPX,		0xb5
fe22 : 01ad                  	db	AM_ABS,		0xad
fe24 : 02bd                  	db	AM_ABSX,	0xbd
fe26 : 03b9                  	db	AM_ABSY,	0xb9
fe28 : 08a1                  	db	AM_ZPINDX,	0xa1
fe2a : 09b1                  	db	AM_ZPINDY,	0xb1
                             
fe2c : 6f726110              	db	"ora",		8*2
fe30 : 0c09                  	db	AM_IMM,		0x09
fe32 : 0405                  	db	AM_ZP,		0x05
fe34 : 0515                  	db	AM_ZPX,		0x15
fe36 : 010d                  	db	AM_ABS,		0x0d
fe38 : 021d                  	db	AM_ABSX,	0x1d
fe3a : 0319                  	db	AM_ABSY,	0x19
fe3c : 0801                  	db	AM_ZPINDX,	0x01
fe3e : 0911                  	db	AM_ZPINDY,	0x11
                             
fe40 : 73626310              	db	"sbc",		8*2
fe44 : 0ce9                  	db	AM_IMM,		0xe9
fe46 : 04e5                  	db	AM_ZP,		0xe5
AS65 Assembler for R6502 [1.42].                                     Page  299
---------------------------------- bank0.s -----------------------------------

fe48 : 05f5                  	db	AM_ZPX,		0xf5
fe4a : 01ed                  	db	AM_ABS,		0xed
fe4c : 02fd                  	db	AM_ABSX,	0xfd
fe4e : 03f9                  	db	AM_ABSY,	0xf9
fe50 : 08e1                  	db	AM_ZPINDX,	0xe1
fe52 : 09f1                  	db	AM_ZPINDY,	0xf1
                             
fe54 : 73746110              	db	"sta",		8*2
fe58 : 0485                  	db	AM_ZP,		0x85
fe5a : 0595                  	db	AM_ZPX,		0x95
fe5c : 018d                  	db	AM_ABS,		0x8d
fe5e : 029d                  	db	AM_ABSX,	0x9d
fe60 : 0399                  	db	AM_ABSY,	0x99
fe62 : 0881                  	db	AM_ZPINDX,	0x81
fe64 : 0991                  	db	AM_ZPINDY,	0x91
fe66 : 0792                  	db	AM_ZPIND,	0x92
                             
fe68 : 61736c0a              	db	"asl",		5*2
fe6c : 0d0a                  	db	AM_IMP,		0x0a
fe6e : 0406                  	db	AM_ZP,		0x06
fe70 : 0516                  	db	AM_ZPX,		0x16
fe72 : 010e                  	db	AM_ABS,		0x0e
fe74 : 021e                  	db	AM_ABSX,	0x1e
fe76 : 64656308              	db	"dec",		4*2
fe7a : 04c6                  	db	AM_ZP,		0xc6
fe7c : 05d6                  	db	AM_ZPX,		0xd6
fe7e : 01ce                  	db	AM_ABS,		0xce
fe80 : 02de                  	db	AM_ABSX,	0xde
fe82 : 696e6308              	db	"inc",		4*2
fe86 : 04e6                  	db	AM_ZP,		0xe6
fe88 : 05f6                  	db	AM_ZPX,		0xf6
fe8a : 01ee                  	db	AM_ABS,		0xee
fe8c : 02fe                  	db	AM_ABSX,	0xfe
fe8e : 6c73720a              	db	"lsr",		5*2
fe92 : 0d4a                  	db	AM_IMP,		0x4a
fe94 : 0446                  	db	AM_ZP,		0x46
fe96 : 0556                  	db	AM_ZPX,		0x56
fe98 : 014e                  	db	AM_ABS,		0x4e
fe9a : 025e                  	db	AM_ABSX,	0x5e
fe9c : 726f6c0a              	db	"rol",		5*2
fea0 : 0d2a                  	db	AM_IMP,		0x2a
fea2 : 0426                  	db	AM_ZP,		0x26
fea4 : 0536                  	db	AM_ZPX,		0x36
fea6 : 012e                  	db	AM_ABS,		0x2e
fea8 : 023e                  	db	AM_ABSX,	0x3e
feaa : 726f720a              	db	"ror",		5*2
feae : 0d6a                  	db	AM_IMP,		0x6a
feb0 : 0466                  	db	AM_ZP,		0x66
feb2 : 0576                  	db	AM_ZPX,		0x76
feb4 : 016e                  	db	AM_ABS,		0x6e
feb6 : 027e                  	db	AM_ABSX,	0x7e
                             
feb8 : 62697404              	db	"bit",		2*2
febc : 0424                  	db	AM_ZP,		0x24
febe : 012c                  	db	AM_ABS,		0x2c
                             	
fec0 : 62726b02              	db	"brk",		1*2
fec4 : 0d00                  	db	AM_IMP,		0x00
                             	
fec6 : 636c6302              	db	"clc",		1*2
feca : 0d18                  	db	AM_IMP,		0x18
fecc : 636c6402              	db	"cld",		1*2
AS65 Assembler for R6502 [1.42].                                     Page  300
---------------------------------- bank0.s -----------------------------------

fed0 : 0dd8                  	db	AM_IMP,		0xd8
fed2 : 636c6902              	db	"cli",		1*2
fed6 : 0d58                  	db	AM_IMP,		0x58
fed8 : 636c7602              	db	"clv",		1*2
fedc : 0db8                  	db	AM_IMP,		0xb8
fede : 73656302              	db	"sec",		1*2
fee2 : 0d38                  	db	AM_IMP,		0x38
fee4 : 73656402              	db	"sed",		1*2
fee8 : 0df8                  	db	AM_IMP,		0xf8
feea : 73656902              	db	"sei",		1*2
feee : 0d78                  	db	AM_IMP,		0x78
                             	
fef0 : 63707806              	db	"cpx",		3*2
fef4 : 0ce0                  	db	AM_IMM,		0xe0
fef6 : 04e4                  	db	AM_ZP,		0xe4
fef8 : 01ec                  	db	AM_ABS,		0xec
fefa : 63707906              	db	"cpy",		3*2
fefe : 0cc0                  	db	AM_IMM,		0xc0
ff00 : 04c4                  	db	AM_ZP,		0xc4
ff02 : 01cc                  	db	AM_ABS,		0xcc
ff04 : 64657802              	db	"dex",		1*2
ff08 : 0dca                  	db	AM_IMP,		0xca
ff0a : 64657902              	db	"dey",		1*2
ff0e : 0d88                  	db	AM_IMP,		0x88
ff10 : 696e7802              	db	"inx",		1*2
ff14 : 0de8                  	db	AM_IMP,		0xe8
ff16 : 696e7902              	db	"iny",		1*2
ff1a : 0dc8                  	db	AM_IMP,		0xc8
ff1c : 6c64780a              	db	"ldx",		5*2
ff20 : 0ca2                  	db	AM_IMM,		0xa2
ff22 : 04a6                  	db	AM_ZP,		0xa6
ff24 : 06b6                  	db	AM_ZPY,		0xb6
ff26 : 01ae                  	db	AM_ABS,		0xae
ff28 : 03be                  	db	AM_ABSY,	0xbe
ff2a : 6c64790a              	db	"ldy",		5*2
ff2e : 0ca0                  	db	AM_IMM,		0xa0
ff30 : 04a4                  	db	AM_ZP,		0xa4
ff32 : 05b4                  	db	AM_ZPX,		0xb4
ff34 : 01ac                  	db	AM_ABS,		0xac
ff36 : 02bc                  	db	AM_ABSX,	0xbc
ff38 : 73747806              	db	"stx",		3*2
ff3c : 0486                  	db	AM_ZP,		0x86
ff3e : 0696                  	db	AM_ZPY,		0x96
ff40 : 018e                  	db	AM_ABS,		0x8e
ff42 : 73747906              	db	"sty",		3*2
ff46 : 0484                  	db	AM_ZP,		0x84
ff48 : 0594                  	db	AM_ZPX,		0x94
ff4a : 018c                  	db	AM_ABS,		0x8c
                             
ff4c : 62636302              	db	"bcc",		1*2
ff50 : 0f90                  	db	AM_REL,		0x90
ff52 : 62637302              	db	"bcs",		1*2
ff56 : 0fb0                  	db	AM_REL,		0xb0
ff58 : 62657102              	db	"beq",		1*2
ff5c : 0ff0                  	db	AM_REL,		0xf0
ff5e : 626d6902              	db	"bmi",		1*2
ff62 : 0f30                  	db	AM_REL,		0x30
ff64 : 626e6502              	db	"bne",		1*2
ff68 : 0fd0                  	db	AM_REL,		0xd0
ff6a : 62706c02              	db	"bpl",		1*2
ff6e : 0f10                  	db	AM_REL,		0x10
ff70 : 62766302              	db	"bvc",		1*2
AS65 Assembler for R6502 [1.42].                                     Page  301
---------------------------------- bank0.s -----------------------------------

ff74 : 0f50                  	db	AM_REL,		0x50
ff76 : 62767302              	db	"bvs",		1*2
ff7a : 0f70                  	db	AM_REL,		0x70
ff7c : 6a6d7004              	db	"jmp",		2*2
ff80 : 014c                  	db	AM_ABS,		0x4c
ff82 : 0a6c                  	db	AM_ABSIND,	0x6c
ff84 : 6a737202              	db	"jsr",		1*2
ff88 : 0120                  	db	AM_ABS,		0x20
                             	
ff8a : 6e6f7002              	db	"nop",		1*2
ff8e : 0dea                  	db	AM_IMP,		0xea
ff90 : 70686102              	db	"pha",		1*2
ff94 : 0d48                  	db	AM_IMP,		0x48
ff96 : 70687002              	db	"php",		1*2
ff9a : 0d08                  	db	AM_IMP,		0x08
ff9c : 706c6102              	db	"pla",		1*2
ffa0 : 0d68                  	db	AM_IMP,		0x68
ffa2 : 706c7002              	db	"plp",		1*2
ffa6 : 0d28                  	db	AM_IMP,		0x28
ffa8 : 72746902              	db	"rti",		1*2
ffac : 0d40                  	db	AM_IMP,		0x40
ffae : 72747302              	db	"rts",		1*2
ffb2 : 0d60                  	db	AM_IMP,		0x60
ffb4 : 74617802              	db	"tax",		1*2
ffb8 : 0daa                  	db	AM_IMP,		0xaa
ffba : 74617902              	db	"tay",		1*2
ffbe : 0da8                  	db	AM_IMP,		0xa8
ffc0 : 74737802              	db	"tsx",		1*2
ffc4 : 0dba                  	db	AM_IMP,		0xba
ffc6 : 74786102              	db	"txa",		1*2
ffca : 0d8a                  	db	AM_IMP,		0x8a
ffcc : 74787302              	db	"txs",		1*2
ffd0 : 0d9a                  	db	AM_IMP,		0x9a
ffd2 : 74796102              	db	"tya",		1*2
ffd6 : 0d98                  	db	AM_IMP,		0x98	
                             	
                             	;* Terminates with a zero
ffd8 : 00                    	db	0
                             
                             	include	"dflat/asmjmptab.s"
                             ;************************************************
                             ;*
                             ;*	ORIC DFLAT
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ASMJUMPTAB.S
                             ;*  Runtime token jump table for assembler.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
AS65 Assembler for R6502 [1.42].                                     Page  302
---------------------------------- bank0.s -----------------------------------

                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; Only directives needed as all opcodes are handl
                             ; through a single routine
ffd9 :                       df_tk_asm_tokenjmp
ffd9 : 23e0                  	dw	df_tk_asm_org
ffdb : 23e0                  	dw	df_tk_asm_opt
ffdd : 85df                  	dw	df_tk_asm_db
ffdf : 85df                  	dw	df_tk_asm_dw
ffe1 : 23e0                  	dw	df_tk_asm_ds
                             
ffe3 :                       df_rt_asm_tokenjmp
ffe3 : d5fa                  	dw	df_rt_asm_org
ffe5 : e7fa                  	dw	df_rt_asm_opt
ffe7 : effa                  	dw	df_rt_asm_db
ffe9 : f2fa                  	dw	df_rt_asm_dw
ffeb : 6bfb                  	dw	df_rt_asm_ds
                             
                             
                             ;****************************************
                             ;* as_init
                             ;* Initialise assembler settings
                             ;****************************************
ffed :                       asm_init
                             	; Zero the PC
ffed : a900             [ 2] 	lda #0
ffef : 859a             [ 3] 	sta df_asmpc
fff1 : 859b             [ 3] 	sta df_asmpc+1
                             	; Zero the option
fff3 : 859c             [ 3] 	sta df_asmopt
fff5 : 60               [ 6] 	rts
                             
fff6 :                       mod_sz_asm_e
                             
fff6 :                       mod_sz_language_e
                             	; End of Code
fff6 :                       _code_end
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
